
ax2550.elf:     file format elf32-littlearm


Disassembly of section .text:

080001e0 <memcpy>:

extern void USART3DMA_Config();
extern void USART6_Config();

void  *memcpy(void *dest, const void *src, size_t count)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b087      	sub	sp, #28
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  /* This would be a prime candidate for reimplementation in assembly */
  char *in_src = (char*)src;
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	617b      	str	r3, [r7, #20]
  char *in_dest = (char*)dest;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	613b      	str	r3, [r7, #16]

  while(count--)
 80001f4:	e007      	b.n	8000206 <memcpy+0x26>
    *in_dest++ = *in_src++;
 80001f6:	693b      	ldr	r3, [r7, #16]
 80001f8:	1c5a      	adds	r2, r3, #1
 80001fa:	613a      	str	r2, [r7, #16]
 80001fc:	697a      	ldr	r2, [r7, #20]
 80001fe:	1c51      	adds	r1, r2, #1
 8000200:	6179      	str	r1, [r7, #20]
 8000202:	7812      	ldrb	r2, [r2, #0]
 8000204:	701a      	strb	r2, [r3, #0]
{
  /* This would be a prime candidate for reimplementation in assembly */
  char *in_src = (char*)src;
  char *in_dest = (char*)dest;

  while(count--)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	1e5a      	subs	r2, r3, #1
 800020a:	607a      	str	r2, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d1f2      	bne.n	80001f6 <memcpy+0x16>
    *in_dest++ = *in_src++;
  return dest;
 8000210:	68fb      	ldr	r3, [r7, #12]
}
 8000212:	4618      	mov	r0, r3
 8000214:	371c      	adds	r7, #28
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <Putc_ax2550>:

static void Putc_ax2550(volatile char c)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
  if(USART3->CR1 & USART_CR1_UE)
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <Putc_ax2550+0x40>)
 800022c:	899b      	ldrh	r3, [r3, #12]
 800022e:	b29b      	uxth	r3, r3
 8000230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000234:	2b00      	cmp	r3, #0
 8000236:	d00c      	beq.n	8000252 <Putc_ax2550+0x32>
  {
    USART3->DR = (uint16_t)(c & 0x01FF);
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <Putc_ax2550+0x40>)
 800023a:	79fa      	ldrb	r2, [r7, #7]
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	b292      	uxth	r2, r2
 8000240:	809a      	strh	r2, [r3, #4]
    while(!(USART3->SR & USART_FLAG_TXE));
 8000242:	bf00      	nop
 8000244:	4b06      	ldr	r3, [pc, #24]	; (8000260 <Putc_ax2550+0x40>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	b29b      	uxth	r3, r3
 800024a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800024e:	2b00      	cmp	r3, #0
 8000250:	d0f8      	beq.n	8000244 <Putc_ax2550+0x24>
  }
}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40004800 	.word	0x40004800

08000264 <Putc_term>:

static void Putc_term(volatile char c)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
  if(USART6->CR1 & USART_CR1_UE)
 800026e:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <Putc_term+0x40>)
 8000270:	899b      	ldrh	r3, [r3, #12]
 8000272:	b29b      	uxth	r3, r3
 8000274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000278:	2b00      	cmp	r3, #0
 800027a:	d00c      	beq.n	8000296 <Putc_term+0x32>
  {
    USART6->DR = (uint16_t)(c & 0x01FF);
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <Putc_term+0x40>)
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	b2d2      	uxtb	r2, r2
 8000282:	b292      	uxth	r2, r2
 8000284:	809a      	strh	r2, [r3, #4]
    while(!(USART6->SR & USART_FLAG_TXE));
 8000286:	bf00      	nop
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <Putc_term+0x40>)
 800028a:	881b      	ldrh	r3, [r3, #0]
 800028c:	b29b      	uxth	r3, r3
 800028e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0f8      	beq.n	8000288 <Putc_term+0x24>
  }
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40011400 	.word	0x40011400

080002a8 <Puts_term>:
static void Puts_term(volatile char* c)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  while(*c != 0)
 80002b0:	e005      	b.n	80002be <Puts_term+0x16>
    Putc_term(*c);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ffd3 	bl	8000264 <Putc_term>
    while(!(USART6->SR & USART_FLAG_TXE));
  }
}
static void Puts_term(volatile char* c)
{
  while(*c != 0)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1f4      	bne.n	80002b2 <Puts_term+0xa>
    Putc_term(*c);
}
 80002c8:	bf00      	nop
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
  if(USART_GetITStatus(USART3,USART_IT_IDLE))
 80002d6:	f240 4124 	movw	r1, #1060	; 0x424
 80002da:	480c      	ldr	r0, [pc, #48]	; (800030c <USART3_IRQHandler+0x3c>)
 80002dc:	f003 fa88 	bl	80037f0 <USART_GetITStatus>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d00e      	beq.n	8000304 <USART3_IRQHandler+0x34>
  {
    volatile uint32_t temp;
    temp=USART3->SR;
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <USART3_IRQHandler+0x3c>)
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	607b      	str	r3, [r7, #4]
    temp=USART3->DR;
 80002ee:	4b07      	ldr	r3, [pc, #28]	; (800030c <USART3_IRQHandler+0x3c>)
 80002f0:	889b      	ldrh	r3, [r3, #4]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	607b      	str	r3, [r7, #4]
    (void)temp;
 80002f6:	687b      	ldr	r3, [r7, #4]
    DMA1_Stream1->CR &= ~DMA_SxCR_EN;
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <USART3_IRQHandler+0x40>)
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <USART3_IRQHandler+0x40>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f023 0301 	bic.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]
  }
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40004800 	.word	0x40004800
 8000310:	40026028 	.word	0x40026028

08000314 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
  if(USART_GetITStatus(USART6,USART_IT_TC))
 800031a:	f240 6126 	movw	r1, #1574	; 0x626
 800031e:	4817      	ldr	r0, [pc, #92]	; (800037c <USART6_IRQHandler+0x68>)
 8000320:	f003 fa66 	bl	80037f0 <USART_GetITStatus>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d004      	beq.n	8000334 <USART6_IRQHandler+0x20>
    USART_ClearITPendingBit(USART6,USART_IT_TC);
 800032a:	f240 6126 	movw	r1, #1574	; 0x626
 800032e:	4813      	ldr	r0, [pc, #76]	; (800037c <USART6_IRQHandler+0x68>)
 8000330:	f003 faba 	bl	80038a8 <USART_ClearITPendingBit>
  if(USART_GetITStatus(USART6,USART_IT_RXNE))
 8000334:	f240 5125 	movw	r1, #1317	; 0x525
 8000338:	4810      	ldr	r0, [pc, #64]	; (800037c <USART6_IRQHandler+0x68>)
 800033a:	f003 fa59 	bl	80037f0 <USART_GetITStatus>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d017      	beq.n	8000374 <USART6_IRQHandler+0x60>
  {
    char c=USART_ReceiveData(USART6);
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <USART6_IRQHandler+0x68>)
 8000346:	f003 f9d7 	bl	80036f8 <USART_ReceiveData>
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
    if(c=='R' || c=='r')
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	2b52      	cmp	r3, #82	; 0x52
 8000352:	d002      	beq.n	800035a <USART6_IRQHandler+0x46>
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	2b72      	cmp	r3, #114	; 0x72
 8000358:	d103      	bne.n	8000362 <USART6_IRQHandler+0x4e>
      reset=1;
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <USART6_IRQHandler+0x6c>)
 800035c:	2201      	movs	r2, #1
 800035e:	701a      	strb	r2, [r3, #0]
    else if(c=='S' || c=='s')
      sync=1;
  }
}
 8000360:	e008      	b.n	8000374 <USART6_IRQHandler+0x60>
  if(USART_GetITStatus(USART6,USART_IT_RXNE))
  {
    char c=USART_ReceiveData(USART6);
    if(c=='R' || c=='r')
      reset=1;
    else if(c=='S' || c=='s')
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b53      	cmp	r3, #83	; 0x53
 8000366:	d002      	beq.n	800036e <USART6_IRQHandler+0x5a>
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b73      	cmp	r3, #115	; 0x73
 800036c:	d102      	bne.n	8000374 <USART6_IRQHandler+0x60>
      sync=1;
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <USART6_IRQHandler+0x70>)
 8000370:	2201      	movs	r2, #1
 8000372:	701a      	strb	r2, [r3, #0]
  }
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40011400 	.word	0x40011400
 8000380:	20012d79 	.word	0x20012d79
 8000384:	20012d94 	.word	0x20012d94

08000388 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
  volatile size_t len,copyindex;
	uint8_t* ptr;
	if(DMA1->LISR & DMA_FLAG_TCIF1)
 800038e:	4b34      	ldr	r3, [pc, #208]	; (8000460 <DMA1_Stream1_IRQHandler+0xd8>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b34      	ldr	r3, [pc, #208]	; (8000464 <DMA1_Stream1_IRQHandler+0xdc>)
 8000394:	4013      	ands	r3, r2
 8000396:	2b00      	cmp	r3, #0
 8000398:	d002      	beq.n	80003a0 <DMA1_Stream1_IRQHandler+0x18>
		DMA1->LIFCR = DMA_FLAG_TCIF1;
 800039a:	4b31      	ldr	r3, [pc, #196]	; (8000460 <DMA1_Stream1_IRQHandler+0xd8>)
 800039c:	4a31      	ldr	r2, [pc, #196]	; (8000464 <DMA1_Stream1_IRQHandler+0xdc>)
 800039e:	609a      	str	r2, [r3, #8]
	len = (uint32_t)RXBUFFERSIZE - DMA1_Stream1->NDTR;
 80003a0:	4b31      	ldr	r3, [pc, #196]	; (8000468 <DMA1_Stream1_IRQHandler+0xe0>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80003a8:	60bb      	str	r3, [r7, #8]
	copyindex=(uint32_t)PARSESIZE - writes;
 80003aa:	4b30      	ldr	r3, [pc, #192]	; (800046c <DMA1_Stream1_IRQHandler+0xe4>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80003b2:	607b      	str	r3, [r7, #4]

	if(copyindex > len)
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d902      	bls.n	80003c2 <DMA1_Stream1_IRQHandler+0x3a>
		copyindex=len;
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	e008      	b.n	80003d4 <DMA1_Stream1_IRQHandler+0x4c>
	else if(copyindex < len)
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d204      	bcs.n	80003d4 <DMA1_Stream1_IRQHandler+0x4c>
	{
		writes=0;
 80003ca:	4b28      	ldr	r3, [pc, #160]	; (800046c <DMA1_Stream1_IRQHandler+0xe4>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
		copyindex=len;
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	607b      	str	r3, [r7, #4]
//		overflow++;
	}
	ptr=aRxBuffer;
 80003d4:	4b26      	ldr	r3, [pc, #152]	; (8000470 <DMA1_Stream1_IRQHandler+0xe8>)
 80003d6:	60fb      	str	r3, [r7, #12]
	memcpy(&parsebuffer[writes],ptr,len);
 80003d8:	4b24      	ldr	r3, [pc, #144]	; (800046c <DMA1_Stream1_IRQHandler+0xe4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a25      	ldr	r2, [pc, #148]	; (8000474 <DMA1_Stream1_IRQHandler+0xec>)
 80003de:	4413      	add	r3, r2
 80003e0:	68ba      	ldr	r2, [r7, #8]
 80003e2:	68f9      	ldr	r1, [r7, #12]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff fefb 	bl	80001e0 <memcpy>
        //mem=memmem(&parsebuffer[writes],"OK",2);
        
	writes+=copyindex;
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <DMA1_Stream1_IRQHandler+0xe4>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4413      	add	r3, r2
 80003f2:	4a1e      	ldr	r2, [pc, #120]	; (800046c <DMA1_Stream1_IRQHandler+0xe4>)
 80003f4:	6013      	str	r3, [r2, #0]
        write_length += len;
 80003f6:	68ba      	ldr	r2, [r7, #8]
 80003f8:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <DMA1_Stream1_IRQHandler+0xf0>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4413      	add	r3, r2
 80003fe:	4a1e      	ldr	r2, [pc, #120]	; (8000478 <DMA1_Stream1_IRQHandler+0xf0>)
 8000400:	6013      	str	r3, [r2, #0]
	len-=copyindex;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	68ba      	ldr	r2, [r7, #8]
 8000406:	1ad3      	subs	r3, r2, r3
 8000408:	60bb      	str	r3, [r7, #8]
	ptr+=copyindex;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	4413      	add	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
        //parse_iter+=writes;
	BaseType_t xHigherPriorityTaskWoken;

        xHigherPriorityTaskWoken=pdFALSE;
 8000412:	2300      	movs	r3, #0
 8000414:	603b      	str	r3, [r7, #0]

        xSemaphoreGiveFromISR(parse,&xHigherPriorityTaskWoken);
 8000416:	4b19      	ldr	r3, [pc, #100]	; (800047c <DMA1_Stream1_IRQHandler+0xf4>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	463a      	mov	r2, r7
 800041c:	4611      	mov	r1, r2
 800041e:	4618      	mov	r0, r3
 8000420:	f001 f88c 	bl	800153c <xQueueGiveFromISR>

	DMA1->LIFCR=DMA_FLAG_DMEIF1 | DMA_FLAG_FEIF1 | DMA_FLAG_TEIF1 | DMA_FLAG_TCIF1 | DMA_FLAG_HTIF1;
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <DMA1_Stream1_IRQHandler+0xd8>)
 8000426:	4a16      	ldr	r2, [pc, #88]	; (8000480 <DMA1_Stream1_IRQHandler+0xf8>)
 8000428:	609a      	str	r2, [r3, #8]
	DMA1_Stream1->M0AR=(uint32_t)aRxBuffer;
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <DMA1_Stream1_IRQHandler+0xe0>)
 800042c:	4a10      	ldr	r2, [pc, #64]	; (8000470 <DMA1_Stream1_IRQHandler+0xe8>)
 800042e:	60da      	str	r2, [r3, #12]
	DMA1_Stream1->NDTR=(uint32_t)RXBUFFERSIZE;
 8000430:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <DMA1_Stream1_IRQHandler+0xe0>)
 8000432:	2240      	movs	r2, #64	; 0x40
 8000434:	605a      	str	r2, [r3, #4]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000436:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <DMA1_Stream1_IRQHandler+0xe0>)
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <DMA1_Stream1_IRQHandler+0xe0>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6013      	str	r3, [r2, #0]

      

        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d007      	beq.n	8000458 <DMA1_Stream1_IRQHandler+0xd0>
 8000448:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <DMA1_Stream1_IRQHandler+0xfc>)
 800044a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	f3bf 8f4f 	dsb	sy
 8000454:	f3bf 8f6f 	isb	sy
}
 8000458:	bf00      	nop
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40026000 	.word	0x40026000
 8000464:	10000800 	.word	0x10000800
 8000468:	40026028 	.word	0x40026028
 800046c:	20012d90 	.word	0x20012d90
 8000470:	20012e20 	.word	0x20012e20
 8000474:	20012d9c 	.word	0x20012d9c
 8000478:	20012d80 	.word	0x20012d80
 800047c:	20012e60 	.word	0x20012e60
 8000480:	10000f40 	.word	0x10000f40
 8000484:	e000ed04 	.word	0xe000ed04

08000488 <prvGetRegistersFromStack>:

GPIO_InitTypeDef GPIOG_Init;
void prvGetRegistersFromStack(uint32_t* pulFaultStackAddress)
{
 8000488:	b480      	push	{r7}
 800048a:	b08b      	sub	sp, #44	; 0x2c
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  volatile uint32_t r12;
  volatile uint32_t lr;
  volatile uint32_t pc;
  volatile uint32_t psr;

  r0=pulFaultStackAddress[0];
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
  r1=pulFaultStackAddress[1];
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	623b      	str	r3, [r7, #32]
  r2=pulFaultStackAddress[2];
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	61fb      	str	r3, [r7, #28]
  r3=pulFaultStackAddress[3];
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	61bb      	str	r3, [r7, #24]

  r12=pulFaultStackAddress[4];
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	691b      	ldr	r3, [r3, #16]
 80004ac:	617b      	str	r3, [r7, #20]
  lr=pulFaultStackAddress[5];
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	613b      	str	r3, [r7, #16]
  pc=pulFaultStackAddress[6];
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	60fb      	str	r3, [r7, #12]
  psr=pulFaultStackAddress[7];
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	60bb      	str	r3, [r7, #8]

  for(;;);
 80004c0:	e7fe      	b.n	80004c0 <prvGetRegistersFromStack+0x38>
 80004c2:	bf00      	nop

080004c4 <BufferSearch>:
  }
  return i;
}

static void* BufferSearch(uint8_t* bf1,size_t size,uint8_t* bf2,size_t length)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
 80004d0:	603b      	str	r3, [r7, #0]
	 const unsigned char* haystack=(const unsigned char*)bf1;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	617b      	str	r3, [r7, #20]
         const unsigned char* needle=(const unsigned char*)bf2;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	613b      	str	r3, [r7, #16]

//size_t iter = parse_iter + length;
         if(length==0)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d111      	bne.n	8000504 <BufferSearch+0x40>
           return 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	e014      	b.n	800050e <BufferSearch+0x4a>
         while(length <= size)
         {
           if(!memcmp(haystack,needle,length))
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	6939      	ldr	r1, [r7, #16]
 80004e8:	6978      	ldr	r0, [r7, #20]
 80004ea:	f003 fc05 	bl	8003cf8 <memcmp>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d101      	bne.n	80004f8 <BufferSearch+0x34>
             return (void*) haystack;
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	e00a      	b.n	800050e <BufferSearch+0x4a>
           haystack++;
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3301      	adds	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
           size--;
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	3b01      	subs	r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
         const unsigned char* needle=(const unsigned char*)bf2;

//size_t iter = parse_iter + length;
         if(length==0)
           return 0;
         while(length <= size)
 8000504:	683a      	ldr	r2, [r7, #0]
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	429a      	cmp	r2, r3
 800050a:	d9eb      	bls.n	80004e4 <BufferSearch+0x20>
           if(!memcmp(haystack,needle,length))
             return (void*) haystack;
           haystack++;
           size--;
         }
         return NULL;
 800050c:	2300      	movs	r3, #0
	    return 0;
	  }
	  else
	    //printf("%ld\n",strlen(bf2));
	    BufferCmp(bf1,bf2,str_len(bf2));*/
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop

08000518 <GPIO_Config>:


void GPIO_Config()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG,ENABLE);
 800051c:	2101      	movs	r1, #1
 800051e:	2040      	movs	r0, #64	; 0x40
 8000520:	f003 fa8a 	bl	8003a38 <RCC_AHB1PeriphClockCmd>
  GPIOG_Init.GPIO_Pin=GPIO_Pin_14 | GPIO_Pin_13;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <GPIO_Config+0x38>)
 8000526:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800052a:	601a      	str	r2, [r3, #0]
  GPIOG_Init.GPIO_Mode=0x01;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <GPIO_Config+0x38>)
 800052e:	2201      	movs	r2, #1
 8000530:	711a      	strb	r2, [r3, #4]
  GPIOG_Init.GPIO_Speed=0x02;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <GPIO_Config+0x38>)
 8000534:	2202      	movs	r2, #2
 8000536:	715a      	strb	r2, [r3, #5]
  GPIOG_Init.GPIO_OType=0x00;
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <GPIO_Config+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	719a      	strb	r2, [r3, #6]
  GPIOG_Init.GPIO_PuPd=GPIO_PuPd_UP;
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <GPIO_Config+0x38>)
 8000540:	2201      	movs	r2, #1
 8000542:	71da      	strb	r2, [r3, #7]

  GPIO_Init(GPIOG,&GPIOG_Init);
 8000544:	4902      	ldr	r1, [pc, #8]	; (8000550 <GPIO_Config+0x38>)
 8000546:	4803      	ldr	r0, [pc, #12]	; (8000554 <GPIO_Config+0x3c>)
 8000548:	f003 fad6 	bl	8003af8 <GPIO_Init>

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20012d88 	.word	0x20012d88
 8000554:	40021800 	.word	0x40021800

08000558 <vTask_parse>:
    ticksled=0;
  }
}*/

void vTask_parse(void* pvParameters)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  const TickType_t MaxBlock =pdMS_TO_TICKS(20);
 8000560:	2314      	movs	r3, #20
 8000562:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    GPIOG->ODR ^= GPIO_Pin_13;
 8000564:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <vTask_parse+0x90>)
 8000566:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <vTask_parse+0x90>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800056e:	6153      	str	r3, [r2, #20]
    if(xSemaphoreTake(parse,MaxBlock)==pdPASS)
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <vTask_parse+0x94>)
 8000572:	6818      	ldr	r0, [r3, #0]
 8000574:	2300      	movs	r3, #0
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	2100      	movs	r1, #0
 800057a:	f001 f869 	bl	8001650 <xQueueGenericReceive>
 800057e:	4603      	mov	r3, r0
 8000580:	2b01      	cmp	r3, #1
 8000582:	d1ef      	bne.n	8000564 <vTask_parse+0xc>
    {

      if(!synced)
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <vTask_parse+0x98>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	f083 0301 	eor.w	r3, r3, #1
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0e8      	beq.n	8000564 <vTask_parse+0xc>
      {
        while(!BufferSearch(&parsebuffer[0],PARSESIZE,"OK",strlen("OK")))
 8000592:	e013      	b.n	80005bc <vTask_parse+0x64>
        {
           Putc_ax2550('\r');
 8000594:	200d      	movs	r0, #13
 8000596:	f7ff fe43 	bl	8000220 <Putc_ax2550>
           //GPIOG->ODR ^= GPIO_Pin_13;
           parse_iter += writes;
 800059a:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <vTask_parse+0x9c>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <vTask_parse+0xa0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <vTask_parse+0xa0>)
 80005a6:	6013      	str	r3, [r2, #0]
           if(parse_iter > PARSESIZE)
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <vTask_parse+0xa0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b80      	cmp	r3, #128	; 0x80
 80005ae:	d902      	bls.n	80005b6 <vTask_parse+0x5e>
             parse_iter=0;
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <vTask_parse+0xa0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
           write_length=0;
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <vTask_parse+0xa4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
    if(xSemaphoreTake(parse,MaxBlock)==pdPASS)
    {

      if(!synced)
      {
        while(!BufferSearch(&parsebuffer[0],PARSESIZE,"OK",strlen("OK")))
 80005bc:	2302      	movs	r3, #2
 80005be:	4a10      	ldr	r2, [pc, #64]	; (8000600 <vTask_parse+0xa8>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	4810      	ldr	r0, [pc, #64]	; (8000604 <vTask_parse+0xac>)
 80005c4:	f7ff ff7e 	bl	80004c4 <BufferSearch>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0e2      	beq.n	8000594 <vTask_parse+0x3c>
           parse_iter += writes;
           if(parse_iter > PARSESIZE)
             parse_iter=0;
           write_length=0;
        }
        Puts_term("Synced\r\n");
 80005ce:	480e      	ldr	r0, [pc, #56]	; (8000608 <vTask_parse+0xb0>)
 80005d0:	f7ff fe6a 	bl	80002a8 <Puts_term>
        synced=1;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <vTask_parse+0x98>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
        GPIOG->ODR ^= GPIO_Pin_13;
 80005da:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <vTask_parse+0x90>)
 80005dc:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <vTask_parse+0x90>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80005e4:	6153      	str	r3, [r2, #20]
      }
    }

  }
 80005e6:	e7bd      	b.n	8000564 <vTask_parse+0xc>
 80005e8:	40021800 	.word	0x40021800
 80005ec:	20012e60 	.word	0x20012e60
 80005f0:	20012d78 	.word	0x20012d78
 80005f4:	20012d90 	.word	0x20012d90
 80005f8:	20012d84 	.word	0x20012d84
 80005fc:	20012d80 	.word	0x20012d80
 8000600:	08003da8 	.word	0x08003da8
 8000604:	20012d9c 	.word	0x20012d9c
 8000608:	08003dac 	.word	0x08003dac

0800060c <main>:
    vTaskDelay(pdMS_TO_TICKS(30));
  }
}

int main()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af02      	add	r7, sp, #8
  parse=xSemaphoreCreateBinary();
 8000612:	2203      	movs	r2, #3
 8000614:	2100      	movs	r1, #0
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fda8 	bl	800116c <xQueueGenericCreate>
 800061c:	4602      	mov	r2, r0
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <main+0x44>)
 8000620:	601a      	str	r2, [r3, #0]
  GPIO_Config();
 8000622:	f7ff ff79 	bl	8000518 <GPIO_Config>
  synced=0;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <main+0x48>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
  USART6_Config();
 800062c:	f000 f90c 	bl	8000848 <USART6_Config>
  USART3DMA_Config();
 8000630:	f000 f844 	bl	80006bc <USART3DMA_Config>

  xTaskCreate(vTask_parse,"parse",256,NULL,1,NULL);
 8000634:	2300      	movs	r3, #0
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2301      	movs	r3, #1
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000642:	4905      	ldr	r1, [pc, #20]	; (8000658 <main+0x4c>)
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <main+0x50>)
 8000646:	f001 fa81 	bl	8001b4c <xTaskCreate>
  //xTaskCreate(vTask2,"vTask2",100,NULL,1,NULL);

  vTaskStartScheduler();
 800064a:	f001 fba9 	bl	8001da0 <vTaskStartScheduler>

  for(;;);
 800064e:	e7fe      	b.n	800064e <main+0x42>
 8000650:	20012e60 	.word	0x20012e60
 8000654:	20012d78 	.word	0x20012d78
 8000658:	08003db8 	.word	0x08003db8
 800065c:	08000559 	.word	0x08000559

08000660 <vApplicationTickHook>:
}

void vApplicationTickHook(void) {
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <vApplicationMallocFailedHook>:
   demo application.  If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
void vApplicationMallocFailedHook(void) {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800067a:	f383 8811 	msr	BASEPRI, r3
 800067e:	f3bf 8f6f 	isb	sy
 8000682:	f3bf 8f4f 	dsb	sy
 8000686:	607b      	str	r3, [r7, #4]
  taskDISABLE_INTERRUPTS();
  for(;;);
 8000688:	e7fe      	b.n	8000688 <vApplicationMallocFailedHook+0x18>
 800068a:	bf00      	nop

0800068c <vApplicationIdleHook>:
   specified, or call vTaskDelay()).  If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
void vApplicationIdleHook(void) {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(xTaskHandle pxTask, signed char *pcTaskName) {
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006aa:	f383 8811 	msr	BASEPRI, r3
 80006ae:	f3bf 8f6f 	isb	sy
 80006b2:	f3bf 8f4f 	dsb	sy
 80006b6:	60fb      	str	r3, [r7, #12]
  (void) pxTask;
  /* Run time stack overflow checking is performed if
     configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
     function is called if a stack overflow is detected. */
  taskDISABLE_INTERRUPTS();
  for(;;);
 80006b8:	e7fe      	b.n	80006b8 <vApplicationStackOverflowHook+0x1c>
 80006ba:	bf00      	nop

080006bc <USART3DMA_Config>:

extern volatile uint8_t aRxBuffer[RXBUFFERSIZE];
extern volatile uint8_t parsebuffer[PARSESIZE];

void USART3DMA_Config()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b096      	sub	sp, #88	; 0x58
 80006c0:	af00      	add	r7, sp, #0
   USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;
    DMA_InitTypeDef DMA_InitStructure;
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 80006c2:	2101      	movs	r1, #1
 80006c4:	2002      	movs	r0, #2
 80006c6:	f003 f9b7 	bl	8003a38 <RCC_AHB1PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3,ENABLE);
 80006ca:	2101      	movs	r1, #1
 80006cc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80006d0:	f003 f9d2 	bl	8003a78 <RCC_APB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1,ENABLE);
 80006d4:	2101      	movs	r1, #1
 80006d6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80006da:	f003 f9ad 	bl	8003a38 <RCC_AHB1PeriphClockCmd>


   GPIO_InitStructure.GPIO_Pin=GPIO_Pin_10;
 80006de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF;
 80006e4:	2302      	movs	r3, #2
 80006e6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   GPIO_InitStructure.GPIO_Speed=GPIO_Fast_Speed;
 80006ea:	2302      	movs	r3, #2
 80006ec:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
   GPIO_InitStructure.GPIO_OType=GPIO_OType_PP;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
   GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_UP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

   GPIO_PinAFConfig(GPIOB,GPIO_PinSource10,GPIO_AF_USART3);
 80006fc:	2207      	movs	r2, #7
 80006fe:	210a      	movs	r1, #10
 8000700:	484c      	ldr	r0, [pc, #304]	; (8000834 <USART3DMA_Config+0x178>)
 8000702:	f003 fa87 	bl	8003c14 <GPIO_PinAFConfig>
   GPIO_PinAFConfig(GPIOB,GPIO_PinSource11,GPIO_AF_USART3);
 8000706:	2207      	movs	r2, #7
 8000708:	210b      	movs	r1, #11
 800070a:	484a      	ldr	r0, [pc, #296]	; (8000834 <USART3DMA_Config+0x178>)
 800070c:	f003 fa82 	bl	8003c14 <GPIO_PinAFConfig>

   GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000710:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000714:	4619      	mov	r1, r3
 8000716:	4847      	ldr	r0, [pc, #284]	; (8000834 <USART3DMA_Config+0x178>)
 8000718:	f003 f9ee 	bl	8003af8 <GPIO_Init>

   GPIO_InitStructure.GPIO_Pin=GPIO_Pin_11;
 800071c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000720:	63fb      	str	r3, [r7, #60]	; 0x3c
   GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000722:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000726:	4619      	mov	r1, r3
 8000728:	4842      	ldr	r0, [pc, #264]	; (8000834 <USART3DMA_Config+0x178>)
 800072a:	f003 f9e5 	bl	8003af8 <GPIO_Init>

    //USART_OverSampling8Cmd(USART1, ENABLE);

   USART_InitStructure.USART_BaudRate=9600;
 800072e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
   USART_InitStructure.USART_WordLength=USART_WordLength_8b;
 8000734:	2300      	movs	r3, #0
 8000736:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   USART_InitStructure.USART_StopBits=USART_StopBits_1;
 800073a:	2300      	movs	r3, #0
 800073c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   USART_InitStructure.USART_Parity=USART_Parity_Even;
 8000740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000744:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
   USART_InitStructure.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 8000748:	2300      	movs	r3, #0
 800074a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
   USART_InitStructure.USART_Mode=USART_Mode_Rx | USART_Mode_Tx;
 800074e:	230c      	movs	r3, #12
 8000750:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

   NVIC_InitStructure.NVIC_IRQChannel=USART3_IRQn;
 8000754:	2327      	movs	r3, #39	; 0x27
 8000756:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
 800075a:	2301      	movs	r3, #1
 800075c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=1;
 8000760:	2301      	movs	r3, #1
 8000762:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   //NVIC_InitStructure.NVIC_IRQChannelSubPriority=0;

   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8000766:	f44f 7040 	mov.w	r0, #768	; 0x300
 800076a:	f002 fd8f 	bl	800328c <NVIC_PriorityGroupConfig>

   NVIC_Init(&NVIC_InitStructure);
 800076e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fd9e 	bl	80032b4 <NVIC_Init>


   USART_Init(USART3, &USART_InitStructure);
 8000778:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800077c:	4619      	mov	r1, r3
 800077e:	482e      	ldr	r0, [pc, #184]	; (8000838 <USART3DMA_Config+0x17c>)
 8000780:	f002 fee0 	bl	8003544 <USART_Init>


   USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
 8000784:	2201      	movs	r2, #1
 8000786:	f240 4124 	movw	r1, #1060	; 0x424
 800078a:	482b      	ldr	r0, [pc, #172]	; (8000838 <USART3DMA_Config+0x17c>)
 800078c:	f002 ffe8 	bl	8003760 <USART_ITConfig>

   DMA_StructInit(&DMA_InitStructure);
 8000790:	463b      	mov	r3, r7
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fe48 	bl	8003428 <DMA_StructInit>

   DMA_InitStructure.DMA_Channel=DMA_Channel_4;
 8000798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800079c:	603b      	str	r3, [r7, #0]
   DMA_InitStructure.DMA_PeripheralBaseAddr=(uint32_t)&USART3->DR;
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <USART3DMA_Config+0x180>)
 80007a0:	607b      	str	r3, [r7, #4]
   DMA_InitStructure.DMA_Memory0BaseAddr=(uint32_t)aRxBuffer;
 80007a2:	4b27      	ldr	r3, [pc, #156]	; (8000840 <USART3DMA_Config+0x184>)
 80007a4:	60bb      	str	r3, [r7, #8]
   DMA_InitStructure.DMA_BufferSize=(uint32_t)RXBUFFERSIZE;
 80007a6:	2340      	movs	r3, #64	; 0x40
 80007a8:	613b      	str	r3, [r7, #16]
   DMA_InitStructure.DMA_PeripheralInc=DMA_PeripheralInc_Disable;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
   DMA_InitStructure.DMA_MemoryInc=DMA_MemoryInc_Enable;
 80007ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b2:	61bb      	str	r3, [r7, #24]
   DMA_InitStructure.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
   DMA_InitStructure.DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
   DMA_InitStructure.DMA_Mode=DMA_Mode_Normal;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
   DMA_InitStructure.DMA_Priority=DMA_Priority_High;
 80007c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
   DMA_InitStructure.DMA_FIFOMode=DMA_FIFOMode_Disable;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   DMA_InitStructure.DMA_DIR=DMA_DIR_PeripheralToMemory;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
   DMA_InitStructure.DMA_FIFOThreshold=DMA_FIFOThreshold_3QuartersFull;
 80007ce:	2302      	movs	r3, #2
 80007d0:	633b      	str	r3, [r7, #48]	; 0x30
   DMA_InitStructure.DMA_MemoryBurst=DMA_MemoryBurst_Single;
 80007d2:	2300      	movs	r3, #0
 80007d4:	637b      	str	r3, [r7, #52]	; 0x34
   DMA_InitStructure.DMA_PeripheralBurst=DMA_PeripheralBurst_Single;
 80007d6:	2300      	movs	r3, #0
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38

   NVIC_InitStructure.NVIC_IRQChannel=DMA1_Stream1_IRQn;
 80007da:	230c      	movs	r3, #12
 80007dc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
 80007e0:	2301      	movs	r3, #1
 80007e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY;
 80007e6:	2305      	movs	r3, #5
 80007e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   //NVIC_InitStructure.NVIC_IRQChannelSubPriority=0;
   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80007ec:	f44f 7040 	mov.w	r0, #768	; 0x300
 80007f0:	f002 fd4c 	bl	800328c <NVIC_PriorityGroupConfig>
   NVIC_Init(&NVIC_InitStructure);
 80007f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fd5b 	bl	80032b4 <NVIC_Init>

   DMA_Init(DMA1_Stream1,&DMA_InitStructure);
 80007fe:	463b      	mov	r3, r7
 8000800:	4619      	mov	r1, r3
 8000802:	4810      	ldr	r0, [pc, #64]	; (8000844 <USART3DMA_Config+0x188>)
 8000804:	f002 fdb8 	bl	8003378 <DMA_Init>
   DMA_ITConfig(DMA1_Stream1,DMA_IT_TC,ENABLE);
 8000808:	2201      	movs	r2, #1
 800080a:	2110      	movs	r1, #16
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <USART3DMA_Config+0x188>)
 800080e:	f002 fe5f 	bl	80034d0 <DMA_ITConfig>
   DMA_Cmd(DMA1_Stream1,ENABLE);
 8000812:	2101      	movs	r1, #1
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <USART3DMA_Config+0x188>)
 8000816:	f002 fe3f 	bl	8003498 <DMA_Cmd>
   USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
 800081a:	2201      	movs	r2, #1
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	4806      	ldr	r0, [pc, #24]	; (8000838 <USART3DMA_Config+0x17c>)
 8000820:	f002 ff7a 	bl	8003718 <USART_DMACmd>
   USART_Cmd(USART3,ENABLE);
 8000824:	2101      	movs	r1, #1
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <USART3DMA_Config+0x17c>)
 8000828:	f002 ff46 	bl	80036b8 <USART_Cmd>
}
 800082c:	bf00      	nop
 800082e:	3758      	adds	r7, #88	; 0x58
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40020400 	.word	0x40020400
 8000838:	40004800 	.word	0x40004800
 800083c:	40004804 	.word	0x40004804
 8000840:	20012e20 	.word	0x20012e20
 8000844:	40026028 	.word	0x40026028

08000848 <USART6_Config>:

void USART6_Config()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
  USART_InitTypeDef USART_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  USART_InitStructure.USART_BaudRate=9600;
 800084e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000852:	613b      	str	r3, [r7, #16]
  USART_InitStructure.USART_WordLength=USART_WordLength_8b;
 8000854:	2300      	movs	r3, #0
 8000856:	82bb      	strh	r3, [r7, #20]
  USART_InitStructure.USART_StopBits=USART_StopBits_1;
 8000858:	2300      	movs	r3, #0
 800085a:	82fb      	strh	r3, [r7, #22]
  USART_InitStructure.USART_Parity=USART_Parity_Even;
 800085c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000860:	833b      	strh	r3, [r7, #24]
  USART_InitStructure.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 8000862:	2300      	movs	r3, #0
 8000864:	83bb      	strh	r3, [r7, #28]
  USART_InitStructure.USART_Mode=USART_Mode_Rx | USART_Mode_Tx;
 8000866:	230c      	movs	r3, #12
 8000868:	837b      	strh	r3, [r7, #26]

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 800086a:	2101      	movs	r1, #1
 800086c:	2004      	movs	r0, #4
 800086e:	f003 f8e3 	bl	8003a38 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6,ENABLE);
 8000872:	2101      	movs	r1, #1
 8000874:	2020      	movs	r0, #32
 8000876:	f003 f91f 	bl	8003ab8 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin=GPIO_Pin_6;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF;
 800087e:	2302      	movs	r3, #2
 8000880:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Speed=GPIO_Low_Speed;
 8000882:	2300      	movs	r3, #0
 8000884:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_OType=GPIO_OType_PP;
 8000886:	2300      	movs	r3, #0
 8000888:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_UP;
 800088a:	2301      	movs	r3, #1
 800088c:	72fb      	strb	r3, [r7, #11]


  GPIO_PinAFConfig(GPIOC,GPIO_PinSource6,GPIO_AF_USART6);
 800088e:	2208      	movs	r2, #8
 8000890:	2106      	movs	r1, #6
 8000892:	481d      	ldr	r0, [pc, #116]	; (8000908 <USART6_Config+0xc0>)
 8000894:	f003 f9be 	bl	8003c14 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC,GPIO_PinSource7,GPIO_AF_USART6);
 8000898:	2208      	movs	r2, #8
 800089a:	2107      	movs	r1, #7
 800089c:	481a      	ldr	r0, [pc, #104]	; (8000908 <USART6_Config+0xc0>)
 800089e:	f003 f9b9 	bl	8003c14 <GPIO_PinAFConfig>

  GPIO_Init(GPIOC, &GPIO_InitStructure);
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	4619      	mov	r1, r3
 80008a6:	4818      	ldr	r0, [pc, #96]	; (8000908 <USART6_Config+0xc0>)
 80008a8:	f003 f926 	bl	8003af8 <GPIO_Init>
  GPIO_InitStructure.GPIO_Pin=GPIO_Pin_7;
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	607b      	str	r3, [r7, #4]
  GPIO_Init(GPIOC,&GPIO_InitStructure);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4814      	ldr	r0, [pc, #80]	; (8000908 <USART6_Config+0xc0>)
 80008b6:	f003 f91f 	bl	8003af8 <GPIO_Init>

  USART_Init(USART6,&USART_InitStructure);
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4619      	mov	r1, r3
 80008c0:	4812      	ldr	r0, [pc, #72]	; (800090c <USART6_Config+0xc4>)
 80008c2:	f002 fe3f 	bl	8003544 <USART_Init>

  NVIC_InitStructure.NVIC_IRQChannel=USART6_IRQn;
 80008c6:	2347      	movs	r3, #71	; 0x47
 80008c8:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	73fb      	strb	r3, [r7, #15]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=8;
 80008ce:	2308      	movs	r3, #8
 80008d0:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority=1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	73bb      	strb	r3, [r7, #14]

  NVIC_Init(&NVIC_InitStructure);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fcea 	bl	80032b4 <NVIC_Init>

  USART_Cmd(USART6,ENABLE);
 80008e0:	2101      	movs	r1, #1
 80008e2:	480a      	ldr	r0, [pc, #40]	; (800090c <USART6_Config+0xc4>)
 80008e4:	f002 fee8 	bl	80036b8 <USART_Cmd>
  USART_ITConfig(USART6,USART_IT_TC,ENABLE);
 80008e8:	2201      	movs	r2, #1
 80008ea:	f240 6126 	movw	r1, #1574	; 0x626
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <USART6_Config+0xc4>)
 80008f0:	f002 ff36 	bl	8003760 <USART_ITConfig>
  USART_ITConfig(USART6,USART_IT_RXNE,ENABLE);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f240 5125 	movw	r1, #1317	; 0x525
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <USART6_Config+0xc4>)
 80008fc:	f002 ff30 	bl	8003760 <USART_ITConfig>
}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40020800 	.word	0x40020800
 800090c:	40011400 	.word	0x40011400

08000910 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4a16      	ldr	r2, [pc, #88]	; (8000970 <SystemInit+0x60>)
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <SystemInit+0x60>)
 8000918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <SystemInit+0x64>)
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <SystemInit+0x64>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <SystemInit+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <SystemInit+0x64>)
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <SystemInit+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000944:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <SystemInit+0x64>)
 8000948:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <SystemInit+0x68>)
 800094a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <SystemInit+0x64>)
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <SystemInit+0x64>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000956:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800095e:	f000 f80d 	bl	800097c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000962:	4b03      	ldr	r3, [pc, #12]	; (8000970 <SystemInit+0x60>)
 8000964:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000968:	609a      	str	r2, [r3, #8]
#endif
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00
 8000974:	40023800 	.word	0x40023800
 8000978:	24003010 	.word	0x24003010

0800097c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800098a:	4a43      	ldr	r2, [pc, #268]	; (8000a98 <SetSysClock+0x11c>)
 800098c:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <SetSysClock+0x11c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000994:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000996:	4b40      	ldr	r3, [pc, #256]	; (8000a98 <SetSysClock+0x11c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3301      	adds	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d103      	bne.n	80009b4 <SetSysClock+0x38>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80009b2:	d1f0      	bne.n	8000996 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80009b4:	4b38      	ldr	r3, [pc, #224]	; (8000a98 <SetSysClock+0x11c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80009c0:	2301      	movs	r3, #1
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	e001      	b.n	80009ca <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d15c      	bne.n	8000a8a <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80009d0:	4a31      	ldr	r2, [pc, #196]	; (8000a98 <SetSysClock+0x11c>)
 80009d2:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <SetSysClock+0x11c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80009dc:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <SetSysClock+0x120>)
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <SetSysClock+0x120>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009e6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80009e8:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <SetSysClock+0x11c>)
 80009ea:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <SetSysClock+0x11c>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80009f0:	4a29      	ldr	r2, [pc, #164]	; (8000a98 <SetSysClock+0x11c>)
 80009f2:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <SetSysClock+0x11c>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80009fc:	4a26      	ldr	r2, [pc, #152]	; (8000a98 <SetSysClock+0x11c>)
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <SetSysClock+0x11c>)
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000a06:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000a08:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <SetSysClock+0x11c>)
 8000a0a:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <SetSysClock+0x124>)
 8000a0c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000a0e:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <SetSysClock+0x11c>)
 8000a10:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <SetSysClock+0x11c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a18:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000a1a:	bf00      	nop
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <SetSysClock+0x11c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f9      	beq.n	8000a1c <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8000a28:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <SetSysClock+0x120>)
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <SetSysClock+0x120>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a32:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8000a34:	bf00      	nop
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <SetSysClock+0x120>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0f9      	beq.n	8000a36 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8000a42:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <SetSysClock+0x120>)
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <SetSysClock+0x120>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8000a4e:	bf00      	nop
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <SetSysClock+0x120>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0f9      	beq.n	8000a50 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <SetSysClock+0x128>)
 8000a5e:	f240 7205 	movw	r2, #1797	; 0x705
 8000a62:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a64:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <SetSysClock+0x11c>)
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <SetSysClock+0x11c>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f023 0303 	bic.w	r3, r3, #3
 8000a6e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <SetSysClock+0x11c>)
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <SetSysClock+0x11c>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000a7c:	bf00      	nop
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <SetSysClock+0x11c>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	f003 030c 	and.w	r3, r3, #12
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d1f9      	bne.n	8000a7e <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx */  
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000
 8000aa0:	07405a08 	.word	0x07405a08
 8000aa4:	40023c00 	.word	0x40023c00

08000aa8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  __asm volatile
 8000abc:	f01e 0f04 	tst.w	lr, #4
 8000ac0:	bf0c      	ite	eq
 8000ac2:	f3ef 8008 	mrseq	r0, MSP
 8000ac6:	f3ef 8009 	mrsne	r0, PSP
 8000aca:	6981      	ldr	r1, [r0, #24]
 8000acc:	4a00      	ldr	r2, [pc, #0]	; (8000ad0 <handler2_address_const>)
 8000ace:	4710      	bx	r2

08000ad0 <handler2_address_const>:
 8000ad0:	08000489 	.word	0x08000489
      "ldr r1,[r0,#24]                                                  \n"
      "ldr r2,handler2_address_const                                    \n"
      "bx r2                                                            \n"
      "handler2_address_const: .word prvGetRegistersFromStack           \n"
    );
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>
 8000ae6:	bf00      	nop

08000ae8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000aec:	e7fe      	b.n	8000aec <BusFault_Handler+0x4>
 8000aee:	bf00      	nop

08000af0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>
 8000af6:	bf00      	nop

08000af8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3b04      	subs	r3, #4
 8000b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3b04      	subs	r3, #4
 8000b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	f023 0201 	bic.w	r2, r3, #1
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3b04      	subs	r3, #4
 8000b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000b38:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <pxPortInitialiseStack+0x64>)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3b14      	subs	r3, #20
 8000b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3b04      	subs	r3, #4
 8000b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f06f 0202 	mvn.w	r2, #2
 8000b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3b20      	subs	r3, #32
 8000b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	08000b71 	.word	0x08000b71

08000b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <prvTaskExitError+0x38>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b7e:	d009      	beq.n	8000b94 <prvTaskExitError+0x24>
 8000b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b84:	f383 8811 	msr	BASEPRI, r3
 8000b88:	f3bf 8f6f 	isb	sy
 8000b8c:	f3bf 8f4f 	dsb	sy
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	e7fe      	b.n	8000b92 <prvTaskExitError+0x22>
 8000b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b98:	f383 8811 	msr	BASEPRI, r3
 8000b9c:	f3bf 8f6f 	isb	sy
 8000ba0:	f3bf 8f4f 	dsb	sy
 8000ba4:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8000ba6:	e7fe      	b.n	8000ba6 <prvTaskExitError+0x36>
 8000ba8:	20000004 	.word	0x20000004
 8000bac:	00000000 	.word	0x00000000

08000bb0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <pxCurrentTCBConst2>)
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	6808      	ldr	r0, [r1, #0]
 8000bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bba:	f380 8809 	msr	PSP, r0
 8000bbe:	f3bf 8f6f 	isb	sy
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	f380 8811 	msr	BASEPRI, r0
 8000bca:	4770      	bx	lr
 8000bcc:	f3af 8000 	nop.w

08000bd0 <pxCurrentTCBConst2>:
 8000bd0:	20000020 	.word	0x20000020
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop

08000bd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000bd8:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <prvPortStartFirstTask+0x1c>)
 8000bda:	6800      	ldr	r0, [r0, #0]
 8000bdc:	6800      	ldr	r0, [r0, #0]
 8000bde:	f380 8808 	msr	MSP, r0
 8000be2:	b662      	cpsie	i
 8000be4:	b661      	cpsie	f
 8000be6:	f3bf 8f4f 	dsb	sy
 8000bea:	f3bf 8f6f 	isb	sy
 8000bee:	df00      	svc	0
 8000bf0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000bf2:	bf00      	nop
 8000bf4:	e000ed08 	.word	0xe000ed08

08000bf8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <xPortStartScheduler+0xf4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a3b      	ldr	r2, [pc, #236]	; (8000cf0 <xPortStartScheduler+0xf8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d109      	bne.n	8000c1c <xPortStartScheduler+0x24>
 8000c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c0c:	f383 8811 	msr	BASEPRI, r3
 8000c10:	f3bf 8f6f 	isb	sy
 8000c14:	f3bf 8f4f 	dsb	sy
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	e7fe      	b.n	8000c1a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000c1c:	4b33      	ldr	r3, [pc, #204]	; (8000cec <xPortStartScheduler+0xf4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a34      	ldr	r2, [pc, #208]	; (8000cf4 <xPortStartScheduler+0xfc>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d109      	bne.n	8000c3a <xPortStartScheduler+0x42>
 8000c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c2a:	f383 8811 	msr	BASEPRI, r3
 8000c2e:	f3bf 8f6f 	isb	sy
 8000c32:	f3bf 8f4f 	dsb	sy
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	e7fe      	b.n	8000c38 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <xPortStartScheduler+0x100>)
 8000c3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	22ff      	movs	r2, #255	; 0xff
 8000c4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <xPortStartScheduler+0x104>)
 8000c60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000c62:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <xPortStartScheduler+0x108>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000c68:	e009      	b.n	8000c7e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <xPortStartScheduler+0x108>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <xPortStartScheduler+0x108>)
 8000c72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	dbf0      	blt.n	8000c6a <xPortStartScheduler+0x72>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <xPortStartScheduler+0x108>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <xPortStartScheduler+0x108>)
 8000c90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <xPortStartScheduler+0x108>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <xPortStartScheduler+0x108>)
 8000c9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <xPortStartScheduler+0x10c>)
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <xPortStartScheduler+0x10c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <xPortStartScheduler+0x10c>)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <xPortStartScheduler+0x10c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000cbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000cbe:	f000 f8d3 	bl	8000e68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <xPortStartScheduler+0x110>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000cc8:	f000 f8ea 	bl	8000ea0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000ccc:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <xPortStartScheduler+0x114>)
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <xPortStartScheduler+0x114>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000cd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000cd8:	f7ff ff7e 	bl	8000bd8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8000cdc:	f7ff ff48 	bl	8000b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00
 8000cf0:	410fc271 	.word	0x410fc271
 8000cf4:	410fc270 	.word	0x410fc270
 8000cf8:	e000e400 	.word	0xe000e400
 8000cfc:	20000018 	.word	0x20000018
 8000d00:	2000001c 	.word	0x2000001c
 8000d04:	e000ed20 	.word	0xe000ed20
 8000d08:	20000004 	.word	0x20000004
 8000d0c:	e000ef34 	.word	0xe000ef34

08000d10 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d1a:	f383 8811 	msr	BASEPRI, r3
 8000d1e:	f3bf 8f6f 	isb	sy
 8000d22:	f3bf 8f4f 	dsb	sy
 8000d26:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <vPortEnterCritical+0x54>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <vPortEnterCritical+0x54>)
 8000d30:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <vPortEnterCritical+0x54>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d10e      	bne.n	8000d58 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <vPortEnterCritical+0x58>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d009      	beq.n	8000d58 <vPortEnterCritical+0x48>
 8000d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d48:	f383 8811 	msr	BASEPRI, r3
 8000d4c:	f3bf 8f6f 	isb	sy
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	e7fe      	b.n	8000d56 <vPortEnterCritical+0x46>
	}
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	20000004 	.word	0x20000004
 8000d68:	e000ed04 	.word	0xe000ed04

08000d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <vPortExitCritical+0x4c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d109      	bne.n	8000d8e <vPortExitCritical+0x22>
 8000d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d7e:	f383 8811 	msr	BASEPRI, r3
 8000d82:	f3bf 8f6f 	isb	sy
 8000d86:	f3bf 8f4f 	dsb	sy
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	e7fe      	b.n	8000d8c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <vPortExitCritical+0x4c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <vPortExitCritical+0x4c>)
 8000d96:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <vPortExitCritical+0x4c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d104      	bne.n	8000daa <vPortExitCritical+0x3e>
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000dc0:	f3ef 8009 	mrs	r0, PSP
 8000dc4:	f3bf 8f6f 	isb	sy
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <pxCurrentTCBConst>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	f01e 0f10 	tst.w	lr, #16
 8000dd0:	bf08      	it	eq
 8000dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dda:	6010      	str	r0, [r2, #0]
 8000ddc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000de4:	f380 8811 	msr	BASEPRI, r0
 8000de8:	f3bf 8f4f 	dsb	sy
 8000dec:	f3bf 8f6f 	isb	sy
 8000df0:	f001 f9a0 	bl	8002134 <vTaskSwitchContext>
 8000df4:	f04f 0000 	mov.w	r0, #0
 8000df8:	f380 8811 	msr	BASEPRI, r0
 8000dfc:	bc08      	pop	{r3}
 8000dfe:	6819      	ldr	r1, [r3, #0]
 8000e00:	6808      	ldr	r0, [r1, #0]
 8000e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e06:	f01e 0f10 	tst.w	lr, #16
 8000e0a:	bf08      	it	eq
 8000e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000e10:	f380 8809 	msr	PSP, r0
 8000e14:	f3bf 8f6f 	isb	sy
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	f3af 8000 	nop.w

08000e20 <pxCurrentTCBConst>:
 8000e20:	20000020 	.word	0x20000020
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop

08000e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e32:	f383 8811 	msr	BASEPRI, r3
 8000e36:	f3bf 8f6f 	isb	sy
 8000e3a:	f3bf 8f4f 	dsb	sy
 8000e3e:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000e40:	f001 f8b4 	bl	8001fac <xTaskIncrementTick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SysTick_Handler+0x3c>)
 8000e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	e000ed04 	.word	0xe000ed04

08000e68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000e6c:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <vPortSetupTimerInterrupt+0x28>)
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <vPortSetupTimerInterrupt+0x2c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4909      	ldr	r1, [pc, #36]	; (8000e98 <vPortSetupTimerInterrupt+0x30>)
 8000e74:	fba1 1303 	umull	r1, r3, r1, r3
 8000e78:	099b      	lsrs	r3, r3, #6
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <vPortSetupTimerInterrupt+0x34>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e014 	.word	0xe000e014
 8000e94:	20000000 	.word	0x20000000
 8000e98:	10624dd3 	.word	0x10624dd3
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000ea0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000eb0 <vPortEnableVFP+0x10>
 8000ea4:	6801      	ldr	r1, [r0, #0]
 8000ea6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000eaa:	6001      	str	r1, [r0, #0]
 8000eac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000eae:	bf00      	nop
 8000eb0:	e000ed88 	.word	0xe000ed88

08000eb4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8000eba:	f3ef 8305 	mrs	r3, IPSR
 8000ebe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	d913      	bls.n	8000eee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <vPortValidateInterruptPriority+0x6c>)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <vPortValidateInterruptPriority+0x70>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	7afa      	ldrb	r2, [r7, #11]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d209      	bcs.n	8000eee <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ede:	f383 8811 	msr	BASEPRI, r3
 8000ee2:	f3bf 8f6f 	isb	sy
 8000ee6:	f3bf 8f4f 	dsb	sy
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	e7fe      	b.n	8000eec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <vPortValidateInterruptPriority+0x74>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <vPortValidateInterruptPriority+0x78>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d909      	bls.n	8000f12 <vPortValidateInterruptPriority+0x5e>
 8000efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f02:	f383 8811 	msr	BASEPRI, r3
 8000f06:	f3bf 8f6f 	isb	sy
 8000f0a:	f3bf 8f4f 	dsb	sy
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	e7fe      	b.n	8000f10 <vPortValidateInterruptPriority+0x5c>
	}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e3f0 	.word	0xe000e3f0
 8000f24:	20000018 	.word	0x20000018
 8000f28:	e000ed0c 	.word	0xe000ed0c
 8000f2c:	2000001c 	.word	0x2000001c

08000f30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f103 0208 	add.w	r2, r3, #8
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f103 0208 	add.w	r2, r3, #8
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f103 0208 	add.w	r2, r3, #8
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fea:	d103      	bne.n	8000ff4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e00c      	b.n	800100e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3308      	adds	r3, #8
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	e002      	b.n	8001002 <vListInsert+0x2e>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	429a      	cmp	r2, r3
 800100c:	d9f6      	bls.n	8000ffc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6892      	ldr	r2, [r2, #8]
 800105e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6852      	ldr	r2, [r2, #4]
 8001068:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	d103      	bne.n	800107c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	1e5a      	subs	r2, r3, #1
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d109      	bne.n	80010c4 <xQueueGenericReset+0x28>
 80010b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b4:	f383 8811 	msr	BASEPRI, r3
 80010b8:	f3bf 8f6f 	isb	sy
 80010bc:	f3bf 8f4f 	dsb	sy
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	e7fe      	b.n	80010c2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80010c4:	f7ff fe24 	bl	8000d10 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d0:	68f9      	ldr	r1, [r7, #12]
 80010d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80010d4:	fb01 f303 	mul.w	r3, r1, r3
 80010d8:	441a      	add	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f4:	3b01      	subs	r3, #1
 80010f6:	68f9      	ldr	r1, [r7, #12]
 80010f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80010fa:	fb01 f303 	mul.w	r3, r1, r3
 80010fe:	441a      	add	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d114      	bne.n	8001144 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d01a      	beq.n	8001158 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3310      	adds	r3, #16
 8001126:	4618      	mov	r0, r3
 8001128:	f001 f8bc 	bl	80022a4 <xTaskRemoveFromEventList>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d012      	beq.n	8001158 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <xQueueGenericReset+0xcc>)
 8001134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	f3bf 8f4f 	dsb	sy
 800113e:	f3bf 8f6f 	isb	sy
 8001142:	e009      	b.n	8001158 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3310      	adds	r3, #16
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fef1 	bl	8000f30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3324      	adds	r3, #36	; 0x24
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff feec 	bl	8000f30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001158:	f7ff fe08 	bl	8000d6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000ed04 	.word	0xe000ed04

0800116c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af02      	add	r7, sp, #8
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	4613      	mov	r3, r2
 8001178:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d109      	bne.n	8001194 <xQueueGenericCreate+0x28>
 8001180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001184:	f383 8811 	msr	BASEPRI, r3
 8001188:	f3bf 8f6f 	isb	sy
 800118c:	f3bf 8f4f 	dsb	sy
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e7fe      	b.n	8001192 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	e004      	b.n	80011aa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3348      	adds	r3, #72	; 0x48
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fe92 	bl	8002ed8 <pvPortMalloc>
 80011b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	3348      	adds	r3, #72	; 0x48
 80011c0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	4613      	mov	r3, r2
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f000 f806 	bl	80011e0 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80011d4:	69bb      	ldr	r3, [r7, #24]
	}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop

080011e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d103      	bne.n	80011fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e002      	b.n	8001202 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800120e:	2101      	movs	r1, #1
 8001210:	69b8      	ldr	r0, [r7, #24]
 8001212:	f7ff ff43 	bl	800109c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop

08001220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001238:	2b00      	cmp	r3, #0
 800123a:	d109      	bne.n	8001250 <xQueueGenericSend+0x30>
 800123c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001240:	f383 8811 	msr	BASEPRI, r3
 8001244:	f3bf 8f6f 	isb	sy
 8001248:	f3bf 8f4f 	dsb	sy
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e7fe      	b.n	800124e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d103      	bne.n	800125e <xQueueGenericSend+0x3e>
 8001256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <xQueueGenericSend+0x42>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <xQueueGenericSend+0x44>
 8001262:	2300      	movs	r3, #0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d109      	bne.n	800127c <xQueueGenericSend+0x5c>
 8001268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126c:	f383 8811 	msr	BASEPRI, r3
 8001270:	f3bf 8f6f 	isb	sy
 8001274:	f3bf 8f4f 	dsb	sy
 8001278:	623b      	str	r3, [r7, #32]
 800127a:	e7fe      	b.n	800127a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d103      	bne.n	800128a <xQueueGenericSend+0x6a>
 8001282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <xQueueGenericSend+0x6e>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <xQueueGenericSend+0x70>
 800128e:	2300      	movs	r3, #0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d109      	bne.n	80012a8 <xQueueGenericSend+0x88>
 8001294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001298:	f383 8811 	msr	BASEPRI, r3
 800129c:	f3bf 8f6f 	isb	sy
 80012a0:	f3bf 8f4f 	dsb	sy
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
 80012a6:	e7fe      	b.n	80012a6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012a8:	f001 f9b8 	bl	800261c <xTaskGetSchedulerState>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <xQueueGenericSend+0x98>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <xQueueGenericSend+0x9c>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <xQueueGenericSend+0x9e>
 80012bc:	2300      	movs	r3, #0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <xQueueGenericSend+0xb6>
 80012c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c6:	f383 8811 	msr	BASEPRI, r3
 80012ca:	f3bf 8f6f 	isb	sy
 80012ce:	f3bf 8f4f 	dsb	sy
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d4:	e7fe      	b.n	80012d4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80012d6:	f7ff fd1b 	bl	8000d10 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d302      	bcc.n	80012ec <xQueueGenericSend+0xcc>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d129      	bne.n	8001340 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012f2:	f000 fabf 	bl	8001874 <prvCopyDataToQueue>
 80012f6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d010      	beq.n	8001322 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001302:	3324      	adds	r3, #36	; 0x24
 8001304:	4618      	mov	r0, r3
 8001306:	f000 ffcd 	bl	80022a4 <xTaskRemoveFromEventList>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d013      	beq.n	8001338 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <xQueueGenericSend+0x1f0>)
 8001312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	f3bf 8f4f 	dsb	sy
 800131c:	f3bf 8f6f 	isb	sy
 8001320:	e00a      	b.n	8001338 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <xQueueGenericSend+0x1f0>)
 800132a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f3bf 8f4f 	dsb	sy
 8001334:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001338:	f7ff fd18 	bl	8000d6c <vPortExitCritical>
				return pdPASS;
 800133c:	2301      	movs	r3, #1
 800133e:	e063      	b.n	8001408 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d103      	bne.n	800134e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001346:	f7ff fd11 	bl	8000d6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800134a:	2300      	movs	r3, #0
 800134c:	e05c      	b.n	8001408 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800134e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001350:	2b00      	cmp	r3, #0
 8001352:	d106      	bne.n	8001362 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4618      	mov	r0, r3
 800135a:	f001 f805 	bl	8002368 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800135e:	2301      	movs	r3, #1
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001362:	f7ff fd03 	bl	8000d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001366:	f000 fd67 	bl	8001e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800136a:	f7ff fcd1 	bl	8000d10 <vPortEnterCritical>
 800136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001374:	b25b      	sxtb	r3, r3
 8001376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800137a:	d103      	bne.n	8001384 <xQueueGenericSend+0x164>
 800137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800138a:	b25b      	sxtb	r3, r3
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001390:	d103      	bne.n	800139a <xQueueGenericSend+0x17a>
 8001392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800139a:	f7ff fce7 	bl	8000d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800139e:	1d3a      	adds	r2, r7, #4
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4611      	mov	r1, r2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 f802 	bl	80023b0 <xTaskCheckForTimeOut>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d124      	bne.n	80013fc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80013b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013b4:	f000 fb56 	bl	8001a64 <prvIsQueueFull>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d018      	beq.n	80013f0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80013be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c0:	3310      	adds	r3, #16
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 ff1e 	bl	8002208 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80013cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013ce:	f000 fae1 	bl	8001994 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80013d2:	f000 fd3f 	bl	8001e54 <xTaskResumeAll>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f47f af7c 	bne.w	80012d6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <xQueueGenericSend+0x1f0>)
 80013e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	f3bf 8f4f 	dsb	sy
 80013ea:	f3bf 8f6f 	isb	sy
 80013ee:	e772      	b.n	80012d6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80013f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013f2:	f000 facf 	bl	8001994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80013f6:	f000 fd2d 	bl	8001e54 <xTaskResumeAll>
 80013fa:	e76c      	b.n	80012d6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80013fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013fe:	f000 fac9 	bl	8001994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001402:	f000 fd27 	bl	8001e54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001406:	2300      	movs	r3, #0
		}
	}
}
 8001408:	4618      	mov	r0, r3
 800140a:	3738      	adds	r7, #56	; 0x38
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	e000ed04 	.word	0xe000ed04

08001414 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	; 0x38
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001428:	2b00      	cmp	r3, #0
 800142a:	d109      	bne.n	8001440 <xQueueGenericSendFromISR+0x2c>
 800142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001430:	f383 8811 	msr	BASEPRI, r3
 8001434:	f3bf 8f6f 	isb	sy
 8001438:	f3bf 8f4f 	dsb	sy
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e7fe      	b.n	800143e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d103      	bne.n	800144e <xQueueGenericSendFromISR+0x3a>
 8001446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <xQueueGenericSendFromISR+0x3e>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <xQueueGenericSendFromISR+0x40>
 8001452:	2300      	movs	r3, #0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d109      	bne.n	800146c <xQueueGenericSendFromISR+0x58>
 8001458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145c:	f383 8811 	msr	BASEPRI, r3
 8001460:	f3bf 8f6f 	isb	sy
 8001464:	f3bf 8f4f 	dsb	sy
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	e7fe      	b.n	800146a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d103      	bne.n	800147a <xQueueGenericSendFromISR+0x66>
 8001472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <xQueueGenericSendFromISR+0x6a>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <xQueueGenericSendFromISR+0x6c>
 800147e:	2300      	movs	r3, #0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d109      	bne.n	8001498 <xQueueGenericSendFromISR+0x84>
 8001484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001488:	f383 8811 	msr	BASEPRI, r3
 800148c:	f3bf 8f6f 	isb	sy
 8001490:	f3bf 8f4f 	dsb	sy
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e7fe      	b.n	8001496 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001498:	f7ff fd0c 	bl	8000eb4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800149c:	f3ef 8211 	mrs	r2, BASEPRI
 80014a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a4:	f383 8811 	msr	BASEPRI, r3
 80014a8:	f3bf 8f6f 	isb	sy
 80014ac:	f3bf 8f4f 	dsb	sy
 80014b0:	623a      	str	r2, [r7, #32]
 80014b2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80014b4:	6a3b      	ldr	r3, [r7, #32]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d302      	bcc.n	80014ca <xQueueGenericSendFromISR+0xb6>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d12c      	bne.n	8001524 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80014ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014da:	f000 f9cb 	bl	8001874 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80014de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014e6:	d112      	bne.n	800150e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d016      	beq.n	800151e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f2:	3324      	adds	r3, #36	; 0x24
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 fed5 	bl	80022a4 <xTaskRemoveFromEventList>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00e      	beq.n	800151e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	e007      	b.n	800151e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800150e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001512:	3301      	adds	r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	b25a      	sxtb	r2, r3
 8001518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800151e:	2301      	movs	r3, #1
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8001522:	e001      	b.n	8001528 <xQueueGenericSendFromISR+0x114>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001524:	2300      	movs	r3, #0
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
 8001528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001534:	4618      	mov	r0, r3
 8001536:	3738      	adds	r7, #56	; 0x38
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154c:	2b00      	cmp	r3, #0
 800154e:	d109      	bne.n	8001564 <xQueueGiveFromISR+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001554:	f383 8811 	msr	BASEPRI, r3
 8001558:	f3bf 8f6f 	isb	sy
 800155c:	f3bf 8f4f 	dsb	sy
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	e7fe      	b.n	8001562 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <xQueueGiveFromISR+0x44>
 800156c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001570:	f383 8811 	msr	BASEPRI, r3
 8001574:	f3bf 8f6f 	isb	sy
 8001578:	f3bf 8f4f 	dsb	sy
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e7fe      	b.n	800157e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8001580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d103      	bne.n	8001590 <xQueueGiveFromISR+0x54>
 8001588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <xQueueGiveFromISR+0x58>
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <xQueueGiveFromISR+0x5a>
 8001594:	2300      	movs	r3, #0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <xQueueGiveFromISR+0x72>
 800159a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800159e:	f383 8811 	msr	BASEPRI, r3
 80015a2:	f3bf 8f6f 	isb	sy
 80015a6:	f3bf 8f4f 	dsb	sy
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	e7fe      	b.n	80015ac <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80015ae:	f7ff fc81 	bl	8000eb4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80015b2:	f3ef 8211 	mrs	r2, BASEPRI
 80015b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ba:	f383 8811 	msr	BASEPRI, r3
 80015be:	f3bf 8f6f 	isb	sy
 80015c2:	f3bf 8f4f 	dsb	sy
 80015c6:	61fa      	str	r2, [r7, #28]
 80015c8:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80015ca:	69fb      	ldr	r3, [r7, #28]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80015d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	429a      	cmp	r2, r3
 80015dc:	d92b      	bls.n	8001636 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80015de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80015f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f8:	d112      	bne.n	8001620 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d016      	beq.n	8001630 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001604:	3324      	adds	r3, #36	; 0x24
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fe4c 	bl	80022a4 <xTaskRemoveFromEventList>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00e      	beq.n	8001630 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00b      	beq.n	8001630 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e007      	b.n	8001630 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001620:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001624:	3301      	adds	r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	b25a      	sxtb	r2, r3
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001630:	2301      	movs	r3, #1
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
 8001634:	e001      	b.n	800163a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001636:	2300      	movs	r3, #0
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001646:	4618      	mov	r0, r3
 8001648:	3738      	adds	r7, #56	; 0x38
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop

08001650 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	; 0x38
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800165e:	2300      	movs	r3, #0
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <xQueueGenericReceive+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800166c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001670:	f383 8811 	msr	BASEPRI, r3
 8001674:	f3bf 8f6f 	isb	sy
 8001678:	f3bf 8f4f 	dsb	sy
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e7fe      	b.n	800167e <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <xQueueGenericReceive+0x3e>
 8001686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <xQueueGenericReceive+0x42>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <xQueueGenericReceive+0x44>
 8001692:	2300      	movs	r3, #0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <xQueueGenericReceive+0x5c>
 8001698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169c:	f383 8811 	msr	BASEPRI, r3
 80016a0:	f3bf 8f6f 	isb	sy
 80016a4:	f3bf 8f4f 	dsb	sy
 80016a8:	623b      	str	r3, [r7, #32]
 80016aa:	e7fe      	b.n	80016aa <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80016ac:	f000 ffb6 	bl	800261c <xTaskGetSchedulerState>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <xQueueGenericReceive+0x6c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <xQueueGenericReceive+0x70>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <xQueueGenericReceive+0x72>
 80016c0:	2300      	movs	r3, #0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <xQueueGenericReceive+0x8a>
 80016c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ca:	f383 8811 	msr	BASEPRI, r3
 80016ce:	f3bf 8f6f 	isb	sy
 80016d2:	f3bf 8f4f 	dsb	sy
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
 80016d8:	e7fe      	b.n	80016d8 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80016da:	f7ff fb19 	bl	8000d10 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d046      	beq.n	8001778 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80016ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016f4:	f000 f928 	bl	8001948 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d121      	bne.n	8001742 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001704:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d104      	bne.n	8001718 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800170e:	f001 f89d 	bl	800284c <pvTaskIncrementMutexHeldCount>
 8001712:	4602      	mov	r2, r0
 8001714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001716:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d027      	beq.n	8001770 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001722:	3310      	adds	r3, #16
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fdbd 	bl	80022a4 <xTaskRemoveFromEventList>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01f      	beq.n	8001770 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001730:	4b4f      	ldr	r3, [pc, #316]	; (8001870 <xQueueGenericReceive+0x220>)
 8001732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f3bf 8f4f 	dsb	sy
 800173c:	f3bf 8f6f 	isb	sy
 8001740:	e016      	b.n	8001770 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001746:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00f      	beq.n	8001770 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001752:	3324      	adds	r3, #36	; 0x24
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fda5 	bl	80022a4 <xTaskRemoveFromEventList>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001760:	4b43      	ldr	r3, [pc, #268]	; (8001870 <xQueueGenericReceive+0x220>)
 8001762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f3bf 8f4f 	dsb	sy
 800176c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001770:	f7ff fafc 	bl	8000d6c <vPortExitCritical>
				return pdPASS;
 8001774:	2301      	movs	r3, #1
 8001776:	e077      	b.n	8001868 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d103      	bne.n	8001786 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800177e:	f7ff faf5 	bl	8000d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001782:	2300      	movs	r3, #0
 8001784:	e070      	b.n	8001868 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001788:	2b00      	cmp	r3, #0
 800178a:	d106      	bne.n	800179a <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fde9 	bl	8002368 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001796:	2301      	movs	r3, #1
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800179a:	f7ff fae7 	bl	8000d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800179e:	f000 fb4b 	bl	8001e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80017a2:	f7ff fab5 	bl	8000d10 <vPortEnterCritical>
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017b2:	d103      	bne.n	80017bc <xQueueGenericReceive+0x16c>
 80017b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c8:	d103      	bne.n	80017d2 <xQueueGenericReceive+0x182>
 80017ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017d2:	f7ff facb 	bl	8000d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80017d6:	1d3a      	adds	r2, r7, #4
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fde6 	bl	80023b0 <xTaskCheckForTimeOut>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d131      	bne.n	800184e <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017ec:	f000 f924 	bl	8001a38 <prvIsQueueEmpty>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d025      	beq.n	8001842 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80017f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d108      	bne.n	8001810 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 80017fe:	f7ff fa87 	bl	8000d10 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4618      	mov	r0, r3
 8001808:	f000 ff26 	bl	8002658 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800180c:	f7ff faae 	bl	8000d6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001812:	3324      	adds	r3, #36	; 0x24
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fcf5 	bl	8002208 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800181e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001820:	f000 f8b8 	bl	8001994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001824:	f000 fb16 	bl	8001e54 <xTaskResumeAll>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	f47f af55 	bne.w	80016da <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <xQueueGenericReceive+0x220>)
 8001832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	f3bf 8f4f 	dsb	sy
 800183c:	f3bf 8f6f 	isb	sy
 8001840:	e74b      	b.n	80016da <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001844:	f000 f8a6 	bl	8001994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001848:	f000 fb04 	bl	8001e54 <xTaskResumeAll>
 800184c:	e745      	b.n	80016da <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800184e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001850:	f000 f8a0 	bl	8001994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001854:	f000 fafe 	bl	8001e54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800185a:	f000 f8ed 	bl	8001a38 <prvIsQueueEmpty>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	f43f af3a 	beq.w	80016da <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001866:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001868:	4618      	mov	r0, r3
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	e000ed04 	.word	0xe000ed04

08001874 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001888:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10d      	bne.n	80018ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d14d      	bne.n	8001936 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 ff50 	bl	8002744 <xTaskPriorityDisinherit>
 80018a4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	e043      	b.n	8001936 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d119      	bne.n	80018e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6898      	ldr	r0, [r3, #8]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	461a      	mov	r2, r3
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	f7fe fc8e 	bl	80001e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	441a      	add	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d32b      	bcc.n	8001936 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	e026      	b.n	8001936 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68d8      	ldr	r0, [r3, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	461a      	mov	r2, r3
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	f7fe fc74 	bl	80001e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	425b      	negs	r3, r3
 8001902:	441a      	add	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d207      	bcs.n	8001924 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	425b      	negs	r3, r3
 800191e:	441a      	add	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d105      	bne.n	8001936 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	3b01      	subs	r3, #1
 8001934:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800193e:	697b      	ldr	r3, [r7, #20]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	d018      	beq.n	800198c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	441a      	add	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	d303      	bcc.n	800197c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68d9      	ldr	r1, [r3, #12]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	461a      	mov	r2, r3
 8001986:	6838      	ldr	r0, [r7, #0]
 8001988:	f7fe fc2a 	bl	80001e0 <memcpy>
	}
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800199c:	f7ff f9b8 	bl	8000d10 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80019a8:	e011      	b.n	80019ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d012      	beq.n	80019d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3324      	adds	r3, #36	; 0x24
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fc74 	bl	80022a4 <xTaskRemoveFromEventList>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80019c2:	f000 fd53 	bl	800246c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	dce9      	bgt.n	80019aa <prvUnlockQueue+0x16>
 80019d6:	e000      	b.n	80019da <prvUnlockQueue+0x46>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 80019d8:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	22ff      	movs	r2, #255	; 0xff
 80019de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80019e2:	f7ff f9c3 	bl	8000d6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80019e6:	f7ff f993 	bl	8000d10 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80019f2:	e011      	b.n	8001a18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d012      	beq.n	8001a22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3310      	adds	r3, #16
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fc4f 	bl	80022a4 <xTaskRemoveFromEventList>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001a0c:	f000 fd2e 	bl	800246c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001a10:	7bbb      	ldrb	r3, [r7, #14]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	73bb      	strb	r3, [r7, #14]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	dce9      	bgt.n	80019f4 <prvUnlockQueue+0x60>
 8001a20:	e000      	b.n	8001a24 <prvUnlockQueue+0x90>

				--cRxLock;
			}
			else
			{
				break;
 8001a22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	22ff      	movs	r2, #255	; 0xff
 8001a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001a2c:	f7ff f99e 	bl	8000d6c <vPortExitCritical>
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001a40:	f7ff f966 	bl	8000d10 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e001      	b.n	8001a56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001a56:	f7ff f989 	bl	8000d6c <vPortExitCritical>

	return xReturn;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001a6c:	f7ff f950 	bl	8000d10 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d102      	bne.n	8001a82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e001      	b.n	8001a86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001a86:	f7ff f971 	bl	8000d6c <vPortExitCritical>

	return xReturn;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e014      	b.n	8001ace <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <vQueueAddToRegistry+0x4c>)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10b      	bne.n	8001ac8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001ab0:	490b      	ldr	r1, [pc, #44]	; (8001ae0 <vQueueAddToRegistry+0x4c>)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <vQueueAddToRegistry+0x4c>)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001ac6:	e005      	b.n	8001ad4 <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b07      	cmp	r3, #7
 8001ad2:	d9e7      	bls.n	8001aa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	20012e64 	.word	0x20012e64

08001ae4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001af4:	f7ff f90c 	bl	8000d10 <vPortEnterCritical>
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b04:	d103      	bne.n	8001b0e <vQueueWaitForMessageRestricted+0x2a>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b1a:	d103      	bne.n	8001b24 <vQueueWaitForMessageRestricted+0x40>
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b24:	f7ff f922 	bl	8000d6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d106      	bne.n	8001b3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3324      	adds	r3, #36	; 0x24
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	68b9      	ldr	r1, [r7, #8]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 fb89 	bl	8002250 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff28 	bl	8001994 <prvUnlockQueue>
	}
 8001b44:	bf00      	nop
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	; 0x30
 8001b50:	af04      	add	r7, sp, #16
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 f9b9 	bl	8002ed8 <pvPortMalloc>
 8001b66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00e      	beq.n	8001b8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001b6e:	2050      	movs	r0, #80	; 0x50
 8001b70:	f001 f9b2 	bl	8002ed8 <pvPortMalloc>
 8001b74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	631a      	str	r2, [r3, #48]	; 0x30
 8001b82:	e005      	b.n	8001b90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001b84:	6978      	ldr	r0, [r7, #20]
 8001b86:	f001 fa6d 	bl	8003064 <vPortFree>
 8001b8a:	e001      	b.n	8001b90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d013      	beq.n	8001bbe <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001b96:	88fa      	ldrh	r2, [r7, #6]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9303      	str	r3, [sp, #12]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f80f 	bl	8001bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001bb2:	69f8      	ldr	r0, [r7, #28]
 8001bb4:	f000 f88a 	bl	8001ccc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	e002      	b.n	8001bc4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001bc4:	69bb      	ldr	r3, [r7, #24]
	}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3720      	adds	r7, #32
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop

08001bd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001be8:	3b01      	subs	r3, #1
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	f023 0307 	bic.w	r3, r3, #7
 8001bf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <prvInitialiseNewTask+0x46>
 8001c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c06:	f383 8811 	msr	BASEPRI, r3
 8001c0a:	f3bf 8f6f 	isb	sy
 8001c0e:	f3bf 8f4f 	dsb	sy
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e7fe      	b.n	8001c14 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e012      	b.n	8001c42 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	7819      	ldrb	r1, [r3, #0]
 8001c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	4413      	add	r3, r2
 8001c2a:	3334      	adds	r3, #52	; 0x34
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <prvInitialiseNewTask+0x7a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	2b09      	cmp	r3, #9
 8001c46:	d9e9      	bls.n	8001c1c <prvInitialiseNewTask+0x4c>
 8001c48:	e000      	b.n	8001c4c <prvInitialiseNewTask+0x7c>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
 8001c4a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d901      	bls.n	8001c5e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c72:	3304      	adds	r3, #4
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f97b 	bl	8000f70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	3318      	adds	r3, #24
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f976 	bl	8000f70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	f1c3 0205 	rsb	r2, r3, #5
 8001c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	68f9      	ldr	r1, [r7, #12]
 8001cac:	69b8      	ldr	r0, [r7, #24]
 8001cae:	f7fe ff2b 	bl	8000b08 <pxPortInitialiseStack>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001cc4:	bf00      	nop
 8001cc6:	3720      	adds	r7, #32
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001cd4:	f7ff f81c 	bl	8000d10 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <prvAddNewTaskToReadyList+0xb8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <prvAddNewTaskToReadyList+0xb8>)
 8001ce0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <prvAddNewTaskToReadyList+0xbc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001cea:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <prvAddNewTaskToReadyList+0xbc>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <prvAddNewTaskToReadyList+0xb8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d110      	bne.n	8001d1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001cf8:	f000 fbde 	bl	80024b8 <prvInitialiseTaskLists>
 8001cfc:	e00d      	b.n	8001d1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <prvAddNewTaskToReadyList+0xc0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <prvAddNewTaskToReadyList+0xbc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d802      	bhi.n	8001d1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <prvAddNewTaskToReadyList+0xbc>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <prvAddNewTaskToReadyList+0xc4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <prvAddNewTaskToReadyList+0xc4>)
 8001d22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	2201      	movs	r2, #1
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <prvAddNewTaskToReadyList+0xc8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <prvAddNewTaskToReadyList+0xc8>)
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <prvAddNewTaskToReadyList+0xcc>)
 8001d44:	441a      	add	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f7ff f91d 	bl	8000f8c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001d52:	f7ff f80b 	bl	8000d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <prvAddNewTaskToReadyList+0xc0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00e      	beq.n	8001d7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <prvAddNewTaskToReadyList+0xbc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d207      	bcs.n	8001d7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <prvAddNewTaskToReadyList+0xd0>)
 8001d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	f3bf 8f4f 	dsb	sy
 8001d78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200000f8 	.word	0x200000f8
 8001d88:	20000020 	.word	0x20000020
 8001d8c:	20000104 	.word	0x20000104
 8001d90:	20000114 	.word	0x20000114
 8001d94:	20000100 	.word	0x20000100
 8001d98:	20000024 	.word	0x20000024
 8001d9c:	e000ed04 	.word	0xe000ed04

08001da0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <vTaskStartScheduler+0x80>)
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2300      	movs	r3, #0
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	2282      	movs	r2, #130	; 0x82
 8001db2:	491c      	ldr	r1, [pc, #112]	; (8001e24 <vTaskStartScheduler+0x84>)
 8001db4:	481c      	ldr	r0, [pc, #112]	; (8001e28 <vTaskStartScheduler+0x88>)
 8001db6:	f7ff fec9 	bl	8001b4c <xTaskCreate>
 8001dba:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d102      	bne.n	8001dc8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001dc2:	f000 fdbd 	bl	8002940 <xTimerCreateTimerTask>
 8001dc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d115      	bne.n	8001dfa <vTaskStartScheduler+0x5a>
 8001dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd2:	f383 8811 	msr	BASEPRI, r3
 8001dd6:	f3bf 8f6f 	isb	sy
 8001dda:	f3bf 8f4f 	dsb	sy
 8001dde:	607b      	str	r3, [r7, #4]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <vTaskStartScheduler+0x8c>)
 8001de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001de6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <vTaskStartScheduler+0x90>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <vTaskStartScheduler+0x94>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001df4:	f7fe ff00 	bl	8000bf8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001df8:	e00d      	b.n	8001e16 <vTaskStartScheduler+0x76>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e00:	d109      	bne.n	8001e16 <vTaskStartScheduler+0x76>
 8001e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e06:	f383 8811 	msr	BASEPRI, r3
 8001e0a:	f3bf 8f6f 	isb	sy
 8001e0e:	f3bf 8f4f 	dsb	sy
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	e7fe      	b.n	8001e14 <vTaskStartScheduler+0x74>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000011c 	.word	0x2000011c
 8001e24:	08003dc0 	.word	0x08003dc0
 8001e28:	08002485 	.word	0x08002485
 8001e2c:	20000118 	.word	0x20000118
 8001e30:	20000104 	.word	0x20000104
 8001e34:	200000fc 	.word	0x200000fc

08001e38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <vTaskSuspendAll+0x18>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <vTaskSuspendAll+0x18>)
 8001e44:	6013      	str	r3, [r2, #0]
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	20000120 	.word	0x20000120

08001e54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <xTaskResumeAll+0x114>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <xTaskResumeAll+0x2a>
 8001e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	e7fe      	b.n	8001e7c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e7e:	f7fe ff47 	bl	8000d10 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <xTaskResumeAll+0x114>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	4a37      	ldr	r2, [pc, #220]	; (8001f68 <xTaskResumeAll+0x114>)
 8001e8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <xTaskResumeAll+0x114>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d161      	bne.n	8001f58 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e94:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <xTaskResumeAll+0x118>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05d      	beq.n	8001f58 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e9c:	e02e      	b.n	8001efc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <xTaskResumeAll+0x11c>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3318      	adds	r3, #24
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f8cc 	bl	8001048 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff f8c7 	bl	8001048 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <xTaskResumeAll+0x120>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <xTaskResumeAll+0x120>)
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <xTaskResumeAll+0x124>)
 8001eda:	441a      	add	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f7ff f852 	bl	8000f8c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eec:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <xTaskResumeAll+0x128>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d302      	bcc.n	8001efc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <xTaskResumeAll+0x12c>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001efc:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <xTaskResumeAll+0x11c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1cc      	bne.n	8001e9e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001f0a:	f000 fb61 	bl	80025d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <xTaskResumeAll+0x130>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001f1a:	f000 f847 	bl	8001fac <xTaskIncrementTick>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <xTaskResumeAll+0x12c>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f1      	bne.n	8001f1a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <xTaskResumeAll+0x130>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <xTaskResumeAll+0x12c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d009      	beq.n	8001f58 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <xTaskResumeAll+0x134>)
 8001f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001f58:	f7fe ff08 	bl	8000d6c <vPortExitCritical>

	return xAlreadyYielded;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000120 	.word	0x20000120
 8001f6c:	200000f8 	.word	0x200000f8
 8001f70:	200000b8 	.word	0x200000b8
 8001f74:	20000100 	.word	0x20000100
 8001f78:	20000024 	.word	0x20000024
 8001f7c:	20000020 	.word	0x20000020
 8001f80:	2000010c 	.word	0x2000010c
 8001f84:	20000108 	.word	0x20000108
 8001f88:	e000ed04 	.word	0xe000ed04

08001f8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <xTaskGetTickCount+0x1c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001f98:	687b      	ldr	r3, [r7, #4]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200000fc 	.word	0x200000fc

08001fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fb6:	4b54      	ldr	r3, [pc, #336]	; (8002108 <xTaskIncrementTick+0x15c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 8092 	bne.w	80020e4 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001fc0:	4b52      	ldr	r3, [pc, #328]	; (800210c <xTaskIncrementTick+0x160>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001fc8:	4a50      	ldr	r2, [pc, #320]	; (800210c <xTaskIncrementTick+0x160>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d11f      	bne.n	8002014 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001fd4:	4b4e      	ldr	r3, [pc, #312]	; (8002110 <xTaskIncrementTick+0x164>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <xTaskIncrementTick+0x46>
 8001fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe2:	f383 8811 	msr	BASEPRI, r3
 8001fe6:	f3bf 8f6f 	isb	sy
 8001fea:	f3bf 8f4f 	dsb	sy
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	e7fe      	b.n	8001ff0 <xTaskIncrementTick+0x44>
 8001ff2:	4b47      	ldr	r3, [pc, #284]	; (8002110 <xTaskIncrementTick+0x164>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <xTaskIncrementTick+0x168>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a44      	ldr	r2, [pc, #272]	; (8002110 <xTaskIncrementTick+0x164>)
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4a44      	ldr	r2, [pc, #272]	; (8002114 <xTaskIncrementTick+0x168>)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b44      	ldr	r3, [pc, #272]	; (8002118 <xTaskIncrementTick+0x16c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	4a42      	ldr	r2, [pc, #264]	; (8002118 <xTaskIncrementTick+0x16c>)
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	f000 fade 	bl	80025d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002014:	4b41      	ldr	r3, [pc, #260]	; (800211c <xTaskIncrementTick+0x170>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	429a      	cmp	r2, r3
 800201c:	d34d      	bcc.n	80020ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800201e:	4b3c      	ldr	r3, [pc, #240]	; (8002110 <xTaskIncrementTick+0x164>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <xTaskIncrementTick+0x80>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <xTaskIncrementTick+0x82>
 800202c:	2300      	movs	r3, #0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002032:	4b3a      	ldr	r3, [pc, #232]	; (800211c <xTaskIncrementTick+0x170>)
 8002034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002038:	601a      	str	r2, [r3, #0]
					break;
 800203a:	e03e      	b.n	80020ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800203c:	4b34      	ldr	r3, [pc, #208]	; (8002110 <xTaskIncrementTick+0x164>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	429a      	cmp	r2, r3
 8002052:	d203      	bcs.n	800205c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002054:	4a31      	ldr	r2, [pc, #196]	; (800211c <xTaskIncrementTick+0x170>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
						break;
 800205a:	e02e      	b.n	80020ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	3304      	adds	r3, #4
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fff1 	bl	8001048 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3318      	adds	r3, #24
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe ffe8 	bl	8001048 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	2201      	movs	r2, #1
 800207e:	409a      	lsls	r2, r3
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <xTaskIncrementTick+0x174>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4313      	orrs	r3, r2
 8002086:	4a26      	ldr	r2, [pc, #152]	; (8002120 <xTaskIncrementTick+0x174>)
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4a23      	ldr	r2, [pc, #140]	; (8002124 <xTaskIncrementTick+0x178>)
 8002098:	441a      	add	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	3304      	adds	r3, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	4610      	mov	r0, r2
 80020a2:	f7fe ff73 	bl	8000f8c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <xTaskIncrementTick+0x17c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3b4      	bcc.n	800201e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80020b4:	2301      	movs	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 80020b8:	e7b1      	b.n	800201e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <xTaskIncrementTick+0x17c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c0:	4918      	ldr	r1, [pc, #96]	; (8002124 <xTaskIncrementTick+0x178>)
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d901      	bls.n	80020d6 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 80020d2:	2301      	movs	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <xTaskIncrementTick+0x180>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <xTaskIncrementTick+0x146>
			{
				vApplicationTickHook();
 80020de:	f7fe fabf 	bl	8000660 <vApplicationTickHook>
 80020e2:	e006      	b.n	80020f2 <xTaskIncrementTick+0x146>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <xTaskIncrementTick+0x180>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	4a10      	ldr	r2, [pc, #64]	; (800212c <xTaskIncrementTick+0x180>)
 80020ec:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80020ee:	f7fe fab7 	bl	8000660 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <xTaskIncrementTick+0x184>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <xTaskIncrementTick+0x152>
		{
			xSwitchRequired = pdTRUE;
 80020fa:	2301      	movs	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80020fe:	697b      	ldr	r3, [r7, #20]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000120 	.word	0x20000120
 800210c:	200000fc 	.word	0x200000fc
 8002110:	200000b0 	.word	0x200000b0
 8002114:	200000b4 	.word	0x200000b4
 8002118:	20000110 	.word	0x20000110
 800211c:	20000118 	.word	0x20000118
 8002120:	20000100 	.word	0x20000100
 8002124:	20000024 	.word	0x20000024
 8002128:	20000020 	.word	0x20000020
 800212c:	20000108 	.word	0x20000108
 8002130:	2000010c 	.word	0x2000010c

08002134 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800213a:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <vTaskSwitchContext+0xc0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <vTaskSwitchContext+0xc4>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002148:	e04f      	b.n	80021ea <vTaskSwitchContext+0xb6>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 800214a:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <vTaskSwitchContext+0xc4>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 8002150:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <vTaskSwitchContext+0xc8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <vTaskSwitchContext+0xc8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	429a      	cmp	r2, r3
 800215e:	d808      	bhi.n	8002172 <vTaskSwitchContext+0x3e>
 8002160:	4b26      	ldr	r3, [pc, #152]	; (80021fc <vTaskSwitchContext+0xc8>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b25      	ldr	r3, [pc, #148]	; (80021fc <vTaskSwitchContext+0xc8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3334      	adds	r3, #52	; 0x34
 800216a:	4619      	mov	r1, r3
 800216c:	4610      	mov	r0, r2
 800216e:	f7fe fa95 	bl	800069c <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002172:	4b23      	ldr	r3, [pc, #140]	; (8002200 <vTaskSwitchContext+0xcc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60bb      	str	r3, [r7, #8]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	71fb      	strb	r3, [r7, #7]
		return ucReturn;
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f1c3 031f 	rsb	r3, r3, #31
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	491e      	ldr	r1, [pc, #120]	; (8002204 <vTaskSwitchContext+0xd0>)
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <vTaskSwitchContext+0x7c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a0:	f383 8811 	msr	BASEPRI, r3
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e7fe      	b.n	80021ae <vTaskSwitchContext+0x7a>
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <vTaskSwitchContext+0xd0>)
 80021bc:	4413      	add	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3308      	adds	r3, #8
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d104      	bne.n	80021e0 <vTaskSwitchContext+0xac>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <vTaskSwitchContext+0xc8>)
 80021e8:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000120 	.word	0x20000120
 80021f8:	2000010c 	.word	0x2000010c
 80021fc:	20000020 	.word	0x20000020
 8002200:	20000100 	.word	0x20000100
 8002204:	20000024 	.word	0x20000024

08002208 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <vTaskPlaceOnEventList+0x24>
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e7fe      	b.n	800222a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <vTaskPlaceOnEventList+0x44>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3318      	adds	r3, #24
 8002232:	4619      	mov	r1, r3
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7fe fecd 	bl	8000fd4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800223a:	2101      	movs	r1, #1
 800223c:	6838      	ldr	r0, [r7, #0]
 800223e:	f000 fb19 	bl	8002874 <prvAddCurrentTaskToDelayedList>
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000020 	.word	0x20000020

08002250 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <vTaskPlaceOnEventListRestricted+0x26>
 8002262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002266:	f383 8811 	msr	BASEPRI, r3
 800226a:	f3bf 8f6f 	isb	sy
 800226e:	f3bf 8f4f 	dsb	sy
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e7fe      	b.n	8002274 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <vTaskPlaceOnEventListRestricted+0x50>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3318      	adds	r3, #24
 800227c:	4619      	mov	r1, r3
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7fe fe84 	bl	8000f8c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800228e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	68b8      	ldr	r0, [r7, #8]
 8002294:	f000 faee 	bl	8002874 <prvAddCurrentTaskToDelayedList>
	}
 8002298:	bf00      	nop
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000020 	.word	0x20000020

080022a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <xTaskRemoveFromEventList+0x2a>
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e7fe      	b.n	80022cc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	3318      	adds	r3, #24
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe feb8 	bl	8001048 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <xTaskRemoveFromEventList+0xac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11c      	bne.n	800231a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	3304      	adds	r3, #4
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe feaf 	bl	8001048 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	2201      	movs	r2, #1
 80022f0:	409a      	lsls	r2, r3
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <xTaskRemoveFromEventList+0xb0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <xTaskRemoveFromEventList+0xb0>)
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4a13      	ldr	r2, [pc, #76]	; (8002358 <xTaskRemoveFromEventList+0xb4>)
 800230a:	441a      	add	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	3304      	adds	r3, #4
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f7fe fe3a 	bl	8000f8c <vListInsertEnd>
 8002318:	e005      	b.n	8002326 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	3318      	adds	r3, #24
 800231e:	4619      	mov	r1, r3
 8002320:	480e      	ldr	r0, [pc, #56]	; (800235c <xTaskRemoveFromEventList+0xb8>)
 8002322:	f7fe fe33 	bl	8000f8c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <xTaskRemoveFromEventList+0xbc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	429a      	cmp	r2, r3
 8002332:	d905      	bls.n	8002340 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002334:	2301      	movs	r3, #1
 8002336:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <xTaskRemoveFromEventList+0xc0>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e001      	b.n	8002344 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002344:	697b      	ldr	r3, [r7, #20]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000120 	.word	0x20000120
 8002354:	20000100 	.word	0x20000100
 8002358:	20000024 	.word	0x20000024
 800235c:	200000b8 	.word	0x200000b8
 8002360:	20000020 	.word	0x20000020
 8002364:	2000010c 	.word	0x2000010c

08002368 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <vTaskSetTimeOutState+0x22>
 8002376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e7fe      	b.n	8002388 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <vTaskSetTimeOutState+0x40>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <vTaskSetTimeOutState+0x44>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	605a      	str	r2, [r3, #4]
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000110 	.word	0x20000110
 80023ac:	200000fc 	.word	0x200000fc

080023b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <xTaskCheckForTimeOut+0x24>
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	e7fe      	b.n	80023d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <xTaskCheckForTimeOut+0x3e>
 80023da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023de:	f383 8811 	msr	BASEPRI, r3
 80023e2:	f3bf 8f6f 	isb	sy
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e7fe      	b.n	80023ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80023ee:	f7fe fc8f 	bl	8000d10 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <xTaskCheckForTimeOut+0xb4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002400:	d102      	bne.n	8002408 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e026      	b.n	8002456 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <xTaskCheckForTimeOut+0xb8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d007      	beq.n	8002424 <xTaskCheckForTimeOut+0x74>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	429a      	cmp	r2, r3
 800241c:	d802      	bhi.n	8002424 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800241e:	2301      	movs	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e018      	b.n	8002456 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	1ad2      	subs	r2, r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d20e      	bcs.n	8002452 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1acb      	subs	r3, r1, r3
 8002440:	441a      	add	r2, r3
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ff8e 	bl	8002368 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e001      	b.n	8002456 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8002452:	2301      	movs	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002456:	f7fe fc89 	bl	8000d6c <vPortExitCritical>

	return xReturn;
 800245a:	697b      	ldr	r3, [r7, #20]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200000fc 	.word	0x200000fc
 8002468:	20000110 	.word	0x20000110

0800246c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <vTaskMissedYield+0x14>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	2000010c 	.word	0x2000010c

08002484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800248c:	f000 f854 	bl	8002538 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <prvIdleTask+0x2c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d907      	bls.n	80024a8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <prvIdleTask+0x30>)
 800249a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80024a8:	f7fe f8f0 	bl	800068c <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 80024ac:	e7ee      	b.n	800248c <prvIdleTask+0x8>
 80024ae:	bf00      	nop
 80024b0:	20000024 	.word	0x20000024
 80024b4:	e000ed04 	.word	0xe000ed04

080024b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	e00c      	b.n	80024de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <prvInitialiseTaskLists+0x60>)
 80024d0:	4413      	add	r3, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fd2c 	bl	8000f30 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3301      	adds	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d9ef      	bls.n	80024c4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <prvInitialiseTaskLists+0x64>)
 80024e6:	f7fe fd23 	bl	8000f30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <prvInitialiseTaskLists+0x68>)
 80024ec:	f7fe fd20 	bl	8000f30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <prvInitialiseTaskLists+0x6c>)
 80024f2:	f7fe fd1d 	bl	8000f30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80024f6:	480c      	ldr	r0, [pc, #48]	; (8002528 <prvInitialiseTaskLists+0x70>)
 80024f8:	f7fe fd1a 	bl	8000f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <prvInitialiseTaskLists+0x74>)
 80024fe:	f7fe fd17 	bl	8000f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <prvInitialiseTaskLists+0x78>)
 8002504:	4a05      	ldr	r2, [pc, #20]	; (800251c <prvInitialiseTaskLists+0x64>)
 8002506:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <prvInitialiseTaskLists+0x7c>)
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <prvInitialiseTaskLists+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000024 	.word	0x20000024
 800251c:	20000088 	.word	0x20000088
 8002520:	2000009c 	.word	0x2000009c
 8002524:	200000b8 	.word	0x200000b8
 8002528:	200000cc 	.word	0x200000cc
 800252c:	200000e4 	.word	0x200000e4
 8002530:	200000b0 	.word	0x200000b0
 8002534:	200000b4 	.word	0x200000b4

08002538 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800253e:	e028      	b.n	8002592 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002540:	f7ff fc7a 	bl	8001e38 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002544:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <prvCheckTasksWaitingTermination+0x6c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002554:	f7ff fc7e 	bl	8001e54 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d119      	bne.n	8002592 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800255e:	f7fe fbd7 	bl	8000d10 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <prvCheckTasksWaitingTermination+0x6c>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	3304      	adds	r3, #4
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fd6a 	bl	8001048 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <prvCheckTasksWaitingTermination+0x70>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3b01      	subs	r3, #1
 800257a:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <prvCheckTasksWaitingTermination+0x70>)
 800257c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <prvCheckTasksWaitingTermination+0x74>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3b01      	subs	r3, #1
 8002584:	4a09      	ldr	r2, [pc, #36]	; (80025ac <prvCheckTasksWaitingTermination+0x74>)
 8002586:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002588:	f7fe fbf0 	bl	8000d6c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800258c:	6838      	ldr	r0, [r7, #0]
 800258e:	f000 f80f 	bl	80025b0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <prvCheckTasksWaitingTermination+0x74>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1d2      	bne.n	8002540 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200000cc 	.word	0x200000cc
 80025a8:	200000f8 	.word	0x200000f8
 80025ac:	200000e0 	.word	0x200000e0

080025b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fd51 	bl	8003064 <vPortFree>
			vPortFree( pxTCB );
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fd4e 	bl	8003064 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <prvResetNextTaskUnblockTime+0x44>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <prvResetNextTaskUnblockTime+0x14>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <prvResetNextTaskUnblockTime+0x16>
 80025e4:	2300      	movs	r3, #0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d004      	beq.n	80025f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <prvResetNextTaskUnblockTime+0x48>)
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80025f2:	e008      	b.n	8002606 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <prvResetNextTaskUnblockTime+0x44>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <prvResetNextTaskUnblockTime+0x48>)
 8002604:	6013      	str	r3, [r2, #0]
	}
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	200000b0 	.word	0x200000b0
 8002618:	20000118 	.word	0x20000118

0800261c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <xTaskGetSchedulerState+0x34>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800262a:	2301      	movs	r3, #1
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	e008      	b.n	8002642 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <xTaskGetSchedulerState+0x38>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002638:	2302      	movs	r3, #2
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	e001      	b.n	8002642 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002642:	687b      	ldr	r3, [r7, #4]
	}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	20000104 	.word	0x20000104
 8002654:	20000120 	.word	0x20000120

08002658 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d062      	beq.n	8002730 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266e:	4b32      	ldr	r3, [pc, #200]	; (8002738 <vTaskPriorityInherit+0xe0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	429a      	cmp	r2, r3
 8002676:	d25b      	bcs.n	8002730 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db06      	blt.n	800268e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <vTaskPriorityInherit+0xe0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	f1c3 0205 	rsb	r2, r3, #5
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6959      	ldr	r1, [r3, #20]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4a27      	ldr	r2, [pc, #156]	; (800273c <vTaskPriorityInherit+0xe4>)
 80026a0:	4413      	add	r3, r2
 80026a2:	4299      	cmp	r1, r3
 80026a4:	d101      	bne.n	80026aa <vTaskPriorityInherit+0x52>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <vTaskPriorityInherit+0x54>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d03a      	beq.n	8002726 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3304      	adds	r3, #4
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fcc7 	bl	8001048 <uxListRemove>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d115      	bne.n	80026ec <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c4:	491d      	ldr	r1, [pc, #116]	; (800273c <vTaskPriorityInherit+0xe4>)
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <vTaskPriorityInherit+0x94>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	2201      	movs	r2, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43da      	mvns	r2, r3
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <vTaskPriorityInherit+0xe8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4013      	ands	r3, r2
 80026e8:	4a15      	ldr	r2, [pc, #84]	; (8002740 <vTaskPriorityInherit+0xe8>)
 80026ea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <vTaskPriorityInherit+0xe0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	2201      	movs	r2, #1
 80026fc:	409a      	lsls	r2, r3
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <vTaskPriorityInherit+0xe8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <vTaskPriorityInherit+0xe8>)
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <vTaskPriorityInherit+0xe4>)
 8002716:	441a      	add	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3304      	adds	r3, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f7fe fc34 	bl	8000f8c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002724:	e004      	b.n	8002730 <vTaskPriorityInherit+0xd8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <vTaskPriorityInherit+0xe0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000020 	.word	0x20000020
 800273c:	20000024 	.word	0x20000024
 8002740:	20000100 	.word	0x20000100

08002744 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d06c      	beq.n	8002834 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800275a:	4b39      	ldr	r3, [pc, #228]	; (8002840 <xTaskPriorityDisinherit+0xfc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	429a      	cmp	r2, r3
 8002762:	d009      	beq.n	8002778 <xTaskPriorityDisinherit+0x34>
 8002764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	e7fe      	b.n	8002776 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <xTaskPriorityDisinherit+0x50>
 8002780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	e7fe      	b.n	8002792 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	1e5a      	subs	r2, r3, #1
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d044      	beq.n	8002834 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d140      	bne.n	8002834 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	3304      	adds	r3, #4
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fc46 	bl	8001048 <uxListRemove>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d115      	bne.n	80027ee <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c6:	491f      	ldr	r1, [pc, #124]	; (8002844 <xTaskPriorityDisinherit+0x100>)
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <xTaskPriorityDisinherit+0xaa>
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	2201      	movs	r2, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	4b18      	ldr	r3, [pc, #96]	; (8002848 <xTaskPriorityDisinherit+0x104>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4013      	ands	r3, r2
 80027ea:	4a17      	ldr	r2, [pc, #92]	; (8002848 <xTaskPriorityDisinherit+0x104>)
 80027ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	f1c3 0205 	rsb	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <xTaskPriorityDisinherit+0x104>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <xTaskPriorityDisinherit+0x104>)
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4a08      	ldr	r2, [pc, #32]	; (8002844 <xTaskPriorityDisinherit+0x100>)
 8002822:	441a      	add	r2, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	3304      	adds	r3, #4
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f7fe fbae 	bl	8000f8c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002830:	2301      	movs	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002834:	697b      	ldr	r3, [r7, #20]
	}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000020 	.word	0x20000020
 8002844:	20000024 	.word	0x20000024
 8002848:	20000100 	.word	0x20000100

0800284c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <pvTaskIncrementMutexHeldCount+0x24>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <pvTaskIncrementMutexHeldCount+0x24>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800285e:	3201      	adds	r2, #1
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8002862:	4b03      	ldr	r3, [pc, #12]	; (8002870 <pvTaskIncrementMutexHeldCount+0x24>)
 8002864:	681b      	ldr	r3, [r3, #0]
	}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20000020 	.word	0x20000020

08002874 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800287e:	4b29      	ldr	r3, [pc, #164]	; (8002924 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3304      	adds	r3, #4
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fbdc 	bl	8001048 <uxListRemove>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	2201      	movs	r2, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43da      	mvns	r2, r3
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <prvAddCurrentTaskToDelayedList+0xb8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4013      	ands	r3, r2
 80028aa:	4a20      	ldr	r2, [pc, #128]	; (800292c <prvAddCurrentTaskToDelayedList+0xb8>)
 80028ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b4:	d10a      	bne.n	80028cc <prvAddCurrentTaskToDelayedList+0x58>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3304      	adds	r3, #4
 80028c2:	4619      	mov	r1, r3
 80028c4:	481a      	ldr	r0, [pc, #104]	; (8002930 <prvAddCurrentTaskToDelayedList+0xbc>)
 80028c6:	f7fe fb61 	bl	8000f8c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80028ca:	e026      	b.n	800291a <prvAddCurrentTaskToDelayedList+0xa6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d209      	bcs.n	80028f8 <prvAddCurrentTaskToDelayedList+0x84>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <prvAddCurrentTaskToDelayedList+0xc0>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3304      	adds	r3, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f7fe fb6f 	bl	8000fd4 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80028f6:	e010      	b.n	800291a <prvAddCurrentTaskToDelayedList+0xa6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <prvAddCurrentTaskToDelayedList+0xc4>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3304      	adds	r3, #4
 8002902:	4619      	mov	r1, r3
 8002904:	4610      	mov	r0, r2
 8002906:	f7fe fb65 	bl	8000fd4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <prvAddCurrentTaskToDelayedList+0xc8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	429a      	cmp	r2, r3
 8002912:	d202      	bcs.n	800291a <prvAddCurrentTaskToDelayedList+0xa6>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002914:	4a09      	ldr	r2, [pc, #36]	; (800293c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200000fc 	.word	0x200000fc
 8002928:	20000020 	.word	0x20000020
 800292c:	20000100 	.word	0x20000100
 8002930:	200000e4 	.word	0x200000e4
 8002934:	200000b4 	.word	0x200000b4
 8002938:	200000b0 	.word	0x200000b0
 800293c:	20000118 	.word	0x20000118

08002940 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800294a:	f000 fa8f 	bl	8002e6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <xTimerCreateTimerTask+0x54>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <xTimerCreateTimerTask+0x58>)
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2302      	movs	r3, #2
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2300      	movs	r3, #0
 8002960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002964:	490d      	ldr	r1, [pc, #52]	; (800299c <xTimerCreateTimerTask+0x5c>)
 8002966:	480e      	ldr	r0, [pc, #56]	; (80029a0 <xTimerCreateTimerTask+0x60>)
 8002968:	f7ff f8f0 	bl	8001b4c <xTaskCreate>
 800296c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <xTimerCreateTimerTask+0x48>
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	e7fe      	b.n	8002986 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002988:	687b      	ldr	r3, [r7, #4]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000154 	.word	0x20000154
 8002998:	20000158 	.word	0x20000158
 800299c:	08003dc8 	.word	0x08003dc8
 80029a0:	08002abd 	.word	0x08002abd

080029a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <xTimerGenericCommand+0x2c>
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	623b      	str	r3, [r7, #32]
 80029ce:	e7fe      	b.n	80029ce <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <xTimerGenericCommand+0x94>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d02a      	beq.n	8002a2e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	dc18      	bgt.n	8002a1c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80029ea:	f7ff fe17 	bl	800261c <xTaskGetSchedulerState>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d109      	bne.n	8002a08 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <xTimerGenericCommand+0x94>)
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	f107 0114 	add.w	r1, r7, #20
 80029fc:	2300      	movs	r3, #0
 80029fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a00:	f7fe fc0e 	bl	8001220 <xQueueGenericSend>
 8002a04:	6278      	str	r0, [r7, #36]	; 0x24
 8002a06:	e012      	b.n	8002a2e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <xTimerGenericCommand+0x94>)
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	f107 0114 	add.w	r1, r7, #20
 8002a10:	2300      	movs	r3, #0
 8002a12:	2200      	movs	r2, #0
 8002a14:	f7fe fc04 	bl	8001220 <xQueueGenericSend>
 8002a18:	6278      	str	r0, [r7, #36]	; 0x24
 8002a1a:	e008      	b.n	8002a2e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <xTimerGenericCommand+0x94>)
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	f107 0114 	add.w	r1, r7, #20
 8002a24:	2300      	movs	r3, #0
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	f7fe fcf4 	bl	8001414 <xQueueGenericSendFromISR>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3728      	adds	r7, #40	; 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000154 	.word	0x20000154

08002a3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <prvProcessExpiredTimer+0x7c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe faf7 	bl	8001048 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d121      	bne.n	8002aa6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	18d1      	adds	r1, r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	6978      	ldr	r0, [r7, #20]
 8002a70:	f000 f8c8 	bl	8002c04 <prvInsertTimerInActiveList>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d015      	beq.n	8002aa6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	2100      	movs	r1, #0
 8002a84:	6978      	ldr	r0, [r7, #20]
 8002a86:	f7ff ff8d 	bl	80029a4 <xTimerGenericCommand>
 8002a8a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <prvProcessExpiredTimer+0x6a>
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e7fe      	b.n	8002aa4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	4798      	blx	r3
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000014c 	.word	0x2000014c

08002abc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002ac4:	f107 0308 	add.w	r3, r7, #8
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f857 	bl	8002b7c <prvGetNextExpireTime>
 8002ace:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f803 	bl	8002ae0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002ada:	f000 f8d5 	bl	8002c88 <prvProcessReceivedCommands>
	}
 8002ade:	e7f1      	b.n	8002ac4 <prvTimerTask+0x8>

08002ae0 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002aea:	f7ff f9a5 	bl	8001e38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f866 	bl	8002bc4 <prvSampleTimeNow>
 8002af8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d130      	bne.n	8002b62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <prvProcessTimerOrBlockTask+0x3c>
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d806      	bhi.n	8002b1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002b0e:	f7ff f9a1 	bl	8001e54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002b12:	68f9      	ldr	r1, [r7, #12]
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff91 	bl	8002a3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002b1a:	e024      	b.n	8002b66 <prvProcessTimerOrBlockTask+0x86>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <prvProcessTimerOrBlockTask+0x90>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <prvProcessTimerOrBlockTask+0x94>)
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	4619      	mov	r1, r3
 8002b42:	f7fe ffcf 	bl	8001ae4 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8002b46:	f7ff f985 	bl	8001e54 <xTaskResumeAll>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <prvProcessTimerOrBlockTask+0x86>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <prvProcessTimerOrBlockTask+0x98>)
 8002b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	f3bf 8f6f 	isb	sy
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002b60:	e001      	b.n	8002b66 <prvProcessTimerOrBlockTask+0x86>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002b62:	f7ff f977 	bl	8001e54 <xTaskResumeAll>
		}
	}
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000150 	.word	0x20000150
 8002b74:	20000154 	.word	0x20000154
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <prvGetNextExpireTime+0x44>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf0c      	ite	eq
 8002b8e:	2301      	moveq	r3, #1
 8002b90:	2300      	movne	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <prvGetNextExpireTime+0x44>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e001      	b.n	8002bb2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	2000014c 	.word	0x2000014c

08002bc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002bcc:	f7ff f9de 	bl	8001f8c <xTaskGetTickCount>
 8002bd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <prvSampleTimeNow+0x3c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d205      	bcs.n	8002be8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002bdc:	f000 f8e6 	bl	8002dac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e002      	b.n	8002bee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002bee:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <prvSampleTimeNow+0x3c>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000015c 	.word	0x2000015c

08002c04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d812      	bhi.n	8002c50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	1ad2      	subs	r2, r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d302      	bcc.n	8002c3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e01b      	b.n	8002c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <prvInsertTimerInActiveList+0x7c>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f7fe f9c3 	bl	8000fd4 <vListInsert>
 8002c4e:	e012      	b.n	8002c76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d206      	bcs.n	8002c66 <prvInsertTimerInActiveList+0x62>
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002c60:	2301      	movs	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e007      	b.n	8002c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <prvInsertTimerInActiveList+0x80>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f7fe f9af 	bl	8000fd4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002c76:	697b      	ldr	r3, [r7, #20]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000150 	.word	0x20000150
 8002c84:	2000014c 	.word	0x2000014c

08002c88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	; 0x30
 8002c8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c8e:	e07a      	b.n	8002d86 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db77      	blt.n	8002d86 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe f9ce 	bl	8001048 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff88 	bl	8002bc4 <prvSampleTimeNow>
 8002cb4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b09      	cmp	r3, #9
 8002cba:	d863      	bhi.n	8002d84 <prvProcessReceivedCommands+0xfc>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <prvProcessReceivedCommands+0x3c>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002ced 	.word	0x08002ced
 8002cc8:	08002ced 	.word	0x08002ced
 8002ccc:	08002ced 	.word	0x08002ced
 8002cd0:	08002d87 	.word	0x08002d87
 8002cd4:	08002d47 	.word	0x08002d47
 8002cd8:	08002d7d 	.word	0x08002d7d
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002ced 	.word	0x08002ced
 8002ce4:	08002d87 	.word	0x08002d87
 8002ce8:	08002d47 	.word	0x08002d47
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	18d1      	adds	r1, r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a3a      	ldr	r2, [r7, #32]
 8002cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cfa:	f7ff ff83 	bl	8002c04 <prvInsertTimerInActiveList>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d040      	beq.n	8002d86 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d0a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d138      	bne.n	8002d86 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	441a      	add	r2, r3
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	2100      	movs	r1, #0
 8002d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d26:	f7ff fe3d 	bl	80029a4 <xTimerGenericCommand>
 8002d2a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d129      	bne.n	8002d86 <prvProcessReceivedCommands+0xfe>
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e7fe      	b.n	8002d44 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <prvProcessReceivedCommands+0xe0>
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	e7fe      	b.n	8002d66 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	18d1      	adds	r1, r2, r3
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	6a3a      	ldr	r2, [r7, #32]
 8002d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d76:	f7ff ff45 	bl	8002c04 <prvInsertTimerInActiveList>
					break;
 8002d7a:	e004      	b.n	8002d86 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002d7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d7e:	f000 f971 	bl	8003064 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002d82:	e000      	b.n	8002d86 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002d84:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <prvProcessReceivedCommands+0x120>)
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	f107 0108 	add.w	r1, r7, #8
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2200      	movs	r2, #0
 8002d92:	f7fe fc5d 	bl	8001650 <xQueueGenericReceive>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f47f af79 	bne.w	8002c90 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8002d9e:	bf00      	nop
 8002da0:	3728      	adds	r7, #40	; 0x28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000154 	.word	0x20000154

08002dac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002db2:	e044      	b.n	8002e3e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002db4:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002dbe:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe f93b 	bl	8001048 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	6938      	ldr	r0, [r7, #16]
 8002dd8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d12d      	bne.n	8002e3e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	4413      	add	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d90e      	bls.n	8002e12 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e00:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7fe f8e2 	bl	8000fd4 <vListInsert>
 8002e10:	e015      	b.n	8002e3e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2300      	movs	r3, #0
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	6938      	ldr	r0, [r7, #16]
 8002e1e:	f7ff fdc1 	bl	80029a4 <xTimerGenericCommand>
 8002e22:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <prvSwitchTimerLists+0x92>
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	e7fe      	b.n	8002e3c <prvSwitchTimerLists+0x90>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1b5      	bne.n	8002db4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <prvSwitchTimerLists+0xbc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002e54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002e56:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <prvSwitchTimerLists+0xbc>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	2000014c 	.word	0x2000014c
 8002e68:	20000150 	.word	0x20000150

08002e6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002e70:	f7fd ff4e 	bl	8000d10 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11d      	bne.n	8002eb8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002e7c:	4811      	ldr	r0, [pc, #68]	; (8002ec4 <prvCheckForValidListAndQueue+0x58>)
 8002e7e:	f7fe f857 	bl	8000f30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002e82:	4811      	ldr	r0, [pc, #68]	; (8002ec8 <prvCheckForValidListAndQueue+0x5c>)
 8002e84:	f7fe f854 	bl	8000f30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002e88:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <prvCheckForValidListAndQueue+0x60>)
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <prvCheckForValidListAndQueue+0x58>)
 8002e8c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <prvCheckForValidListAndQueue+0x64>)
 8002e90:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <prvCheckForValidListAndQueue+0x5c>)
 8002e92:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e94:	2200      	movs	r2, #0
 8002e96:	210c      	movs	r1, #12
 8002e98:	200a      	movs	r0, #10
 8002e9a:	f7fe f967 	bl	800116c <xQueueGenericCreate>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002ea2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <prvCheckForValidListAndQueue+0x68>)
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fdee 	bl	8001a94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002eb8:	f7fd ff58 	bl	8000d6c <vPortExitCritical>
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000154 	.word	0x20000154
 8002ec4:	20000124 	.word	0x20000124
 8002ec8:	20000138 	.word	0x20000138
 8002ecc:	2000014c 	.word	0x2000014c
 8002ed0:	20000150 	.word	0x20000150
 8002ed4:	08003dd0 	.word	0x08003dd0

08002ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ee4:	f7fe ffa8 	bl	8001e38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ee8:	4b59      	ldr	r3, [pc, #356]	; (8003050 <pvPortMalloc+0x178>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002ef0:	f000 f910 	bl	8003114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ef4:	4b57      	ldr	r3, [pc, #348]	; (8003054 <pvPortMalloc+0x17c>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 808c 	bne.w	800301a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01c      	beq.n	8002f42 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002f08:	2208      	movs	r2, #8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d013      	beq.n	8002f42 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f023 0307 	bic.w	r3, r3, #7
 8002f20:	3308      	adds	r3, #8
 8002f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <pvPortMalloc+0x6a>
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	e7fe      	b.n	8002f40 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d068      	beq.n	800301a <pvPortMalloc+0x142>
 8002f48:	4b43      	ldr	r3, [pc, #268]	; (8003058 <pvPortMalloc+0x180>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d863      	bhi.n	800301a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f52:	4b42      	ldr	r3, [pc, #264]	; (800305c <pvPortMalloc+0x184>)
 8002f54:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f56:	4b41      	ldr	r3, [pc, #260]	; (800305c <pvPortMalloc+0x184>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f5c:	e004      	b.n	8002f68 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d203      	bcs.n	8002f7a <pvPortMalloc+0xa2>
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f1      	bne.n	8002f5e <pvPortMalloc+0x86>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f7a:	4b35      	ldr	r3, [pc, #212]	; (8003050 <pvPortMalloc+0x178>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d04a      	beq.n	800301a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	4413      	add	r3, r2
 8002f8c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	1ad2      	subs	r2, r2, r3
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d91e      	bls.n	8002fe4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <pvPortMalloc+0xf4>
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e7fe      	b.n	8002fca <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	1ad2      	subs	r2, r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fde:	6978      	ldr	r0, [r7, #20]
 8002fe0:	f000 f8fa 	bl	80031d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <pvPortMalloc+0x180>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <pvPortMalloc+0x180>)
 8002ff0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ff2:	4b19      	ldr	r3, [pc, #100]	; (8003058 <pvPortMalloc+0x180>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <pvPortMalloc+0x188>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d203      	bcs.n	8003006 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <pvPortMalloc+0x180>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <pvPortMalloc+0x188>)
 8003004:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <pvPortMalloc+0x17c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	431a      	orrs	r2, r3
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800301a:	f7fe ff1b 	bl	8001e54 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003024:	f7fd fb24 	bl	8000670 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <pvPortMalloc+0x16e>
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e7fe      	b.n	8003044 <pvPortMalloc+0x16c>
	return pvReturn;
 8003046:	69fb      	ldr	r3, [r7, #28]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20012d68 	.word	0x20012d68
 8003054:	20012d74 	.word	0x20012d74
 8003058:	20012d6c 	.word	0x20012d6c
 800305c:	20012d60 	.word	0x20012d60
 8003060:	20012d70 	.word	0x20012d70

08003064 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d046      	beq.n	8003104 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003076:	2308      	movs	r3, #8
 8003078:	425b      	negs	r3, r3
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4413      	add	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4b20      	ldr	r3, [pc, #128]	; (800310c <vPortFree+0xa8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <vPortFree+0x42>
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	e7fe      	b.n	80030a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <vPortFree+0x5e>
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e7fe      	b.n	80030c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	4b11      	ldr	r3, [pc, #68]	; (800310c <vPortFree+0xa8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d019      	beq.n	8003104 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d115      	bne.n	8003104 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <vPortFree+0xa8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	401a      	ands	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80030e8:	f7fe fea6 	bl	8001e38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <vPortFree+0xac>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	4a06      	ldr	r2, [pc, #24]	; (8003110 <vPortFree+0xac>)
 80030f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030fa:	6938      	ldr	r0, [r7, #16]
 80030fc:	f000 f86c 	bl	80031d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003100:	f7fe fea8 	bl	8001e54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003104:	bf00      	nop
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20012d74 	.word	0x20012d74
 8003110:	20012d6c 	.word	0x20012d6c

08003114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800311a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800311e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <prvHeapInit+0xac>)
 8003122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00c      	beq.n	8003148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3307      	adds	r3, #7
 8003132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0307 	bic.w	r3, r3, #7
 800313a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <prvHeapInit+0xac>)
 8003144:	4413      	add	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800314c:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <prvHeapInit+0xb0>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <prvHeapInit+0xb0>)
 8003154:	2200      	movs	r2, #0
 8003156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4413      	add	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003160:	2208      	movs	r2, #8
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0307 	bic.w	r3, r3, #7
 800316e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <prvHeapInit+0xb4>)
 8003174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <prvHeapInit+0xb4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <prvHeapInit+0xb4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	1ad2      	subs	r2, r2, r3
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <prvHeapInit+0xb4>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <prvHeapInit+0xb8>)
 80031a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <prvHeapInit+0xbc>)
 80031aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <prvHeapInit+0xc0>)
 80031ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031b2:	601a      	str	r2, [r3, #0]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	20000160 	.word	0x20000160
 80031c4:	20012d60 	.word	0x20012d60
 80031c8:	20012d68 	.word	0x20012d68
 80031cc:	20012d70 	.word	0x20012d70
 80031d0:	20012d6c 	.word	0x20012d6c
 80031d4:	20012d74 	.word	0x20012d74

080031d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031e0:	4b28      	ldr	r3, [pc, #160]	; (8003284 <prvInsertBlockIntoFreeList+0xac>)
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	e002      	b.n	80031ec <prvInsertBlockIntoFreeList+0x14>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d3f7      	bcc.n	80031e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	441a      	add	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d108      	bne.n	800321a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	441a      	add	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	441a      	add	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d118      	bne.n	8003260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <prvInsertBlockIntoFreeList+0xb0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d00d      	beq.n	8003256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	441a      	add	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e008      	b.n	8003268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <prvInsertBlockIntoFreeList+0xb0>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e003      	b.n	8003268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d002      	beq.n	8003276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20012d60 	.word	0x20012d60
 8003288:	20012d68 	.word	0x20012d68

0800328c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8003294:	4a06      	ldr	r2, [pc, #24]	; (80032b0 <NVIC_PriorityGroupConfig+0x24>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800329c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a0:	60d3      	str	r3, [r2, #12]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	2300      	movs	r3, #0
 80032c2:	73bb      	strb	r3, [r7, #14]
 80032c4:	230f      	movs	r3, #15
 80032c6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	78db      	ldrb	r3, [r3, #3]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d038      	beq.n	8003342 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <NVIC_Init+0xbc>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032da:	0a1b      	lsrs	r3, r3, #8
 80032dc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	f1c3 0304 	rsb	r3, r3, #4
 80032e4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80032e6:	7b7a      	ldrb	r2, [r7, #13]
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	fa42 f303 	asr.w	r3, r2, r3
 80032ee:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	461a      	mov	r2, r3
 80032f6:	7bbb      	ldrb	r3, [r7, #14]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	789a      	ldrb	r2, [r3, #2]
 8003302:	7b7b      	ldrb	r3, [r7, #13]
 8003304:	4013      	ands	r3, r2
 8003306:	b2da      	uxtb	r2, r3
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	4313      	orrs	r3, r2
 800330c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003314:	4a17      	ldr	r2, [pc, #92]	; (8003374 <NVIC_Init+0xc0>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	4413      	add	r3, r2
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003322:	4a14      	ldr	r2, [pc, #80]	; (8003374 <NVIC_Init+0xc0>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	b2db      	uxtb	r3, r3
 800332c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800333c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003340:	e00f      	b.n	8003362 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003342:	490c      	ldr	r1, [pc, #48]	; (8003374 <NVIC_Init+0xc0>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	2201      	movs	r2, #1
 8003358:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800335a:	f100 0320 	add.w	r3, r0, #32
 800335e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000ed00 	.word	0xe000ed00
 8003374:	e000e100 	.word	0xe000e100

08003378 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4b25      	ldr	r3, [pc, #148]	; (8003424 <DMA_Init+0xac>)
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80033a2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80033ae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80033ba:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80033c6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0307 	bic.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	4313      	orrs	r3, r2
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	60da      	str	r2, [r3, #12]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	f01c803f 	.word	0xf01c803f

08003428 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	639a      	str	r2, [r3, #56]	; 0x38
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop

08003498 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d006      	beq.n	80034b8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f043 0201 	orr.w	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80034b6:	e005      	b.n	80034c4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 0201 	bic.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	601a      	str	r2, [r3, #0]
  }
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00f      	beq.n	8003508 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d006      	beq.n	80034fc <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	615a      	str	r2, [r3, #20]
 80034fa:	e005      	b.n	8003508 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d014      	beq.n	8003538 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 031e 	and.w	r3, r3, #30
 800351e:	431a      	orrs	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8003524:	e008      	b.n	8003538 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f003 031e 	and.w	r3, r3, #30
 8003530:	43db      	mvns	r3, r3
 8003532:	401a      	ands	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	2300      	movs	r3, #0
 8003554:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8a1b      	ldrh	r3, [r3, #16]
 8003562:	b29b      	uxth	r3, r3
 8003564:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800356c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	88db      	ldrh	r3, [r3, #6]
 8003572:	461a      	mov	r2, r3
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	4313      	orrs	r3, r2
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	899b      	ldrh	r3, [r3, #12]
 8003586:	b29b      	uxth	r3, r3
 8003588:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003590:	f023 030c 	bic.w	r3, r3, #12
 8003594:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	889a      	ldrh	r2, [r3, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	891b      	ldrh	r3, [r3, #8]
 800359e:	4313      	orrs	r3, r2
 80035a0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80035a6:	4313      	orrs	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	4313      	orrs	r3, r2
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8a9b      	ldrh	r3, [r3, #20]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Confi
ure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	899b      	ldrh	r3, [r3, #12]
 80035ce:	461a      	mov	r2, r3
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	4313      	orrs	r3, r2
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80035de:	f107 0308 	add.w	r3, r7, #8
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f97e 	bl	80038e4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a30      	ldr	r2, [pc, #192]	; (80036ac <USART_Init+0x168>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <USART_Init+0xb4>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <USART_Init+0x16c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d102      	bne.n	80035fe <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	623b      	str	r3, [r7, #32]
 80035fc:	e001      	b.n	8003602 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	899b      	ldrh	r3, [r3, #12]
 8003606:	b29b      	uxth	r3, r3
 8003608:	b21b      	sxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	da0c      	bge.n	8003628 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800360e:	6a3a      	ldr	r2, [r7, #32]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009a      	lsls	r2, r3, #2
 8003618:	441a      	add	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	e00b      	b.n	8003640 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8003628:	6a3a      	ldr	r2, [r7, #32]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009a      	lsls	r2, r3, #2
 8003632:	441a      	add	r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <USART_Init+0x170>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	2264      	movs	r2, #100	; 0x64
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	899b      	ldrh	r3, [r3, #12]
 8003662:	b29b      	uxth	r3, r3
 8003664:	b21b      	sxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	da0c      	bge.n	8003684 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	3332      	adds	r3, #50	; 0x32
 8003670:	4a10      	ldr	r2, [pc, #64]	; (80036b4 <USART_Init+0x170>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367e:	4313      	orrs	r3, r2
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
 8003682:	e00b      	b.n	800369c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	3332      	adds	r3, #50	; 0x32
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <USART_Init+0x170>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	4313      	orrs	r3, r2
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	811a      	strh	r2, [r3, #8]
}
 80036a4:	bf00      	nop
 80036a6:	3728      	adds	r7, #40	; 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40011000 	.word	0x40011000
 80036b0:	40011400 	.word	0x40011400
 80036b4:	51eb851f 	.word	0x51eb851f

080036b8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	899b      	ldrh	r3, [r3, #12]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80036da:	e007      	b.n	80036ec <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	899b      	ldrh	r3, [r3, #12]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	819a      	strh	r2, [r3, #12]
  }
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	889b      	ldrh	r3, [r3, #4]
 8003704:	b29b      	uxth	r3, r3
 8003706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370a:	b29b      	uxth	r3, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	807b      	strh	r3, [r7, #2]
 8003724:	4613      	mov	r3, r2
 8003726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8003728:	787b      	ldrb	r3, [r7, #1]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8a9b      	ldrh	r3, [r3, #20]
 8003732:	b29a      	uxth	r2, r3
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	4313      	orrs	r3, r2
 8003738:	b29a      	uxth	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 800373e:	e009      	b.n	8003754 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8a9b      	ldrh	r3, [r3, #20]
 8003744:	b29a      	uxth	r2, r3
 8003746:	887b      	ldrh	r3, [r7, #2]
 8003748:	43db      	mvns	r3, r3
 800374a:	b29b      	uxth	r3, r3
 800374c:	4013      	ands	r3, r2
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	829a      	strh	r2, [r3, #20]
  }
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	2300      	movs	r3, #0
 800377a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003784:	887b      	ldrh	r3, [r7, #2]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	b2db      	uxtb	r3, r3
 800378c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8003796:	2201      	movs	r2, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d103      	bne.n	80037ae <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	330c      	adds	r3, #12
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	e009      	b.n	80037c2 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d103      	bne.n	80037bc <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3310      	adds	r3, #16
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e002      	b.n	80037c2 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	3314      	adds	r3, #20
 80037c0:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80037c2:	787b      	ldrb	r3, [r7, #1]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	6811      	ldr	r1, [r2, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80037d4:	e006      	b.n	80037e4 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	6811      	ldr	r1, [r2, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	43d2      	mvns	r2, r2
 80037e0:	400a      	ands	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]
  }
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8003808:	2300      	movs	r3, #0
 800380a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	b2db      	uxtb	r3, r3
 8003814:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8003816:	887b      	ldrh	r3, [r7, #2]
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800381e:	2201      	movs	r2, #1
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	899b      	ldrh	r3, [r3, #12]
 8003832:	b29b      	uxth	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	4013      	ands	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e011      	b.n	8003862 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d107      	bne.n	8003854 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8a1b      	ldrh	r3, [r3, #16]
 8003848:	b29b      	uxth	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	4013      	ands	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	e006      	b.n	8003862 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8a9b      	ldrh	r3, [r3, #20]
 8003858:	b29b      	uxth	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	4013      	ands	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8003862:	887b      	ldrh	r3, [r7, #2]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	b29b      	uxth	r3, r3
 8003868:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800386a:	2201      	movs	r2, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	b29b      	uxth	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4013      	ands	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <USART_GetITStatus+0xa4>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800388e:	2301      	movs	r3, #1
 8003890:	74fb      	strb	r3, [r7, #19]
 8003892:	e001      	b.n	8003898 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8003894:	2300      	movs	r3, #0
 8003896:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8003898:	7cfb      	ldrb	r3, [r7, #19]
}
 800389a:	4618      	mov	r0, r3
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop

080038a8 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80038b4:	2300      	movs	r3, #0
 80038b6:	81fb      	strh	r3, [r7, #14]
 80038b8:	2300      	movs	r3, #0
 80038ba:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80038bc:	887b      	ldrh	r3, [r7, #2]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80038c2:	89fb      	ldrh	r3, [r7, #14]
 80038c4:	2201      	movs	r2, #1
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80038cc:	89bb      	ldrh	r3, [r7, #12]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	801a      	strh	r2, [r3, #0]
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop

080038e4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	2302      	movs	r3, #2
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	2302      	movs	r3, #2
 8003902:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003904:	4b48      	ldr	r3, [pc, #288]	; (8003a28 <RCC_GetClocksFreq+0x144>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d007      	beq.n	8003924 <RCC_GetClocksFreq+0x40>
 8003914:	2b08      	cmp	r3, #8
 8003916:	d009      	beq.n	800392c <RCC_GetClocksFreq+0x48>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d13f      	bne.n	800399c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a43      	ldr	r2, [pc, #268]	; (8003a2c <RCC_GetClocksFreq+0x148>)
 8003920:	601a      	str	r2, [r3, #0]
      break;
 8003922:	e03f      	b.n	80039a4 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a42      	ldr	r2, [pc, #264]	; (8003a30 <RCC_GetClocksFreq+0x14c>)
 8003928:	601a      	str	r2, [r3, #0]
      break;
 800392a:	e03b      	b.n	80039a4 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800392c:	4b3e      	ldr	r3, [pc, #248]	; (8003a28 <RCC_GetClocksFreq+0x144>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003934:	0d9b      	lsrs	r3, r3, #22
 8003936:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003938:	4b3b      	ldr	r3, [pc, #236]	; (8003a28 <RCC_GetClocksFreq+0x144>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003940:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003948:	4a39      	ldr	r2, [pc, #228]	; (8003a30 <RCC_GetClocksFreq+0x14c>)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003950:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <RCC_GetClocksFreq+0x144>)
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003958:	400b      	ands	r3, r1
 800395a:	099b      	lsrs	r3, r3, #6
 800395c:	fb03 f302 	mul.w	r3, r3, r2
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	e00c      	b.n	800397e <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003964:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <RCC_GetClocksFreq+0x148>)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	fbb2 f2f3 	udiv	r2, r2, r3
 800396c:	4b2e      	ldr	r3, [pc, #184]	; (8003a28 <RCC_GetClocksFreq+0x144>)
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003974:	400b      	ands	r3, r1
 8003976:	099b      	lsrs	r3, r3, #6
 8003978:	fb03 f302 	mul.w	r3, r3, r2
 800397c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800397e:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <RCC_GetClocksFreq+0x144>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	3301      	adds	r3, #1
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	fbb2 f2f3 	udiv	r2, r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	601a      	str	r2, [r3, #0]
      break;
 800399a:	e003      	b.n	80039a4 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a23      	ldr	r2, [pc, #140]	; (8003a2c <RCC_GetClocksFreq+0x148>)
 80039a0:	601a      	str	r2, [r3, #0]
      break;
 80039a2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <RCC_GetClocksFreq+0x144>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ac:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80039b4:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <RCC_GetClocksFreq+0x150>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4413      	add	r3, r2
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	40da      	lsrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80039cc:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <RCC_GetClocksFreq+0x144>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80039d4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	0a9b      	lsrs	r3, r3, #10
 80039da:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <RCC_GetClocksFreq+0x150>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	40da      	lsrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <RCC_GetClocksFreq+0x144>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80039fc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	0b5b      	lsrs	r3, r3, #13
 8003a02:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003a04:	4a0b      	ldr	r2, [pc, #44]	; (8003a34 <RCC_GetClocksFreq+0x150>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	4413      	add	r3, r2
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	40da      	lsrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]
}
 8003a1c:	bf00      	nop
 8003a1e:	3724      	adds	r7, #36	; 0x24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	00f42400 	.word	0x00f42400
 8003a30:	007a1200 	.word	0x007a1200
 8003a34:	20000008 	.word	0x20000008

08003a38 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003a4a:	490a      	ldr	r1, [pc, #40]	; (8003a74 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8003a56:	e006      	b.n	8003a66 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003a58:	4906      	ldr	r1, [pc, #24]	; (8003a74 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	4013      	ands	r3, r2
 8003a64:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800

08003a78 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d006      	beq.n	8003a98 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003a8a:	490a      	ldr	r1, [pc, #40]	; (8003ab4 <RCC_APB1PeriphClockCmd+0x3c>)
 8003a8c:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <RCC_APB1PeriphClockCmd+0x3c>)
 8003a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8003a96:	e006      	b.n	8003aa6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003a98:	4906      	ldr	r1, [pc, #24]	; (8003ab4 <RCC_APB1PeriphClockCmd+0x3c>)
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <RCC_APB1PeriphClockCmd+0x3c>)
 8003a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800

08003ab8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d006      	beq.n	8003ad8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003aca:	490a      	ldr	r1, [pc, #40]	; (8003af4 <RCC_APB2PeriphClockCmd+0x3c>)
 8003acc:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <RCC_APB2PeriphClockCmd+0x3c>)
 8003ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8003ad6:	e006      	b.n	8003ae6 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003ad8:	4906      	ldr	r1, [pc, #24]	; (8003af4 <RCC_APB2PeriphClockCmd+0x3c>)
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <RCC_APB2PeriphClockCmd+0x3c>)
 8003adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800

08003af8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e076      	b.n	8003c02 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003b14:	2201      	movs	r2, #1
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d165      	bne.n	8003bfc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	2103      	movs	r1, #3
 8003b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	401a      	ands	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	791b      	ldrb	r3, [r3, #4]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa01 f303 	lsl.w	r3, r1, r3
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	791b      	ldrb	r3, [r3, #4]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d003      	beq.n	8003b6e <GPIO_Init+0x76>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	791b      	ldrb	r3, [r3, #4]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d12e      	bne.n	8003bcc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	2103      	movs	r1, #3
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	401a      	ands	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	795b      	ldrb	r3, [r3, #5]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	401a      	ands	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	799b      	ldrb	r3, [r3, #6]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	2103      	movs	r1, #3
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	401a      	ands	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	79db      	ldrb	r3, [r3, #7]
 8003bec:	4619      	mov	r1, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b0f      	cmp	r3, #15
 8003c06:	d985      	bls.n	8003b14 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
 8003c20:	4613      	mov	r3, r2
 8003c22:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003c2c:	787a      	ldrb	r2, [r7, #1]
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003c3c:	887b      	ldrh	r3, [r7, #2]
 8003c3e:	08db      	lsrs	r3, r3, #3
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4618      	mov	r0, r3
 8003c44:	887b      	ldrh	r3, [r7, #2]
 8003c46:	08db      	lsrs	r3, r3, #3
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3208      	adds	r2, #8
 8003c50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c54:	887b      	ldrh	r3, [r7, #2]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	210f      	movs	r1, #15
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	ea02 0103 	and.w	r1, r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f100 0208 	add.w	r2, r0, #8
 8003c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003c72:	887b      	ldrh	r3, [r7, #2]
 8003c74:	08db      	lsrs	r3, r3, #3
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3208      	adds	r2, #8
 8003c7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003c88:	887b      	ldrh	r3, [r7, #2]
 8003c8a:	08db      	lsrs	r3, r3, #3
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3208      	adds	r2, #8
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop

08003ca8 <Reset_Handler>:
 8003ca8:	f8df d030 	ldr.w	sp, [pc, #48]	; 8003cdc <LoopFillZerobss+0x10>
 8003cac:	2100      	movs	r1, #0
 8003cae:	e003      	b.n	8003cb8 <LoopCopyDataInit>

08003cb0 <CopyDataInit>:
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <LoopFillZerobss+0x14>)
 8003cb2:	585b      	ldr	r3, [r3, r1]
 8003cb4:	5043      	str	r3, [r0, r1]
 8003cb6:	3104      	adds	r1, #4

08003cb8 <LoopCopyDataInit>:
 8003cb8:	480a      	ldr	r0, [pc, #40]	; (8003ce4 <LoopFillZerobss+0x18>)
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <LoopFillZerobss+0x1c>)
 8003cbc:	1842      	adds	r2, r0, r1
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d3f6      	bcc.n	8003cb0 <CopyDataInit>
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <LoopFillZerobss+0x20>)
 8003cc4:	e002      	b.n	8003ccc <LoopFillZerobss>

08003cc6 <FillZerobss>:
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f842 3b04 	str.w	r3, [r2], #4

08003ccc <LoopFillZerobss>:
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <LoopFillZerobss+0x24>)
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d3f9      	bcc.n	8003cc6 <FillZerobss>
 8003cd2:	f7fc fe1d 	bl	8000910 <SystemInit>
 8003cd6:	f7fc fc99 	bl	800060c <main>
 8003cda:	4770      	bx	lr
 8003cdc:	20030000 	.word	0x20030000
 8003ce0:	08003dd8 	.word	0x08003dd8
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	20000018 	.word	0x20000018
 8003cec:	20000018 	.word	0x20000018
 8003cf0:	20012ea4 	.word	0x20012ea4

08003cf4 <ADC_IRQHandler>:
 8003cf4:	e7fe      	b.n	8003cf4 <ADC_IRQHandler>
	...

08003cf8 <memcmp>:
 8003cf8:	e3520003 	cmp	r2, #3
 8003cfc:	e92d4010 	push	{r4, lr}
 8003d00:	9a000011 	bls	8003d4c <memcmp+0x54>
 8003d04:	e1803001 	orr	r3, r0, r1
 8003d08:	e3130003 	tst	r3, #3
 8003d0c:	1a000010 	bne	8003d54 <memcmp+0x5c>
 8003d10:	e1a0c001 	mov	ip, r1
 8003d14:	e1a03000 	mov	r3, r0
 8003d18:	e5934000 	ldr	r4, [r3]
 8003d1c:	e59ce000 	ldr	lr, [ip]
 8003d20:	e154000e 	cmp	r4, lr
 8003d24:	e1a00003 	mov	r0, r3
 8003d28:	e1a0100c 	mov	r1, ip
 8003d2c:	e2833004 	add	r3, r3, #4
 8003d30:	e28cc004 	add	ip, ip, #4
 8003d34:	1a000006 	bne	8003d54 <memcmp+0x5c>
 8003d38:	e2422004 	sub	r2, r2, #4
 8003d3c:	e3520003 	cmp	r2, #3
 8003d40:	e1a00003 	mov	r0, r3
 8003d44:	e1a0100c 	mov	r1, ip
 8003d48:	8afffff2 	bhi	8003d18 <memcmp+0x20>
 8003d4c:	e3520000 	cmp	r2, #0
 8003d50:	0a000012 	beq	8003da0 <memcmp+0xa8>
 8003d54:	e5d0c000 	ldrb	ip, [r0]
 8003d58:	e5d1e000 	ldrb	lr, [r1]
 8003d5c:	e15c000e 	cmp	ip, lr
 8003d60:	00802002 	addeq	r2, r0, r2
 8003d64:	02803001 	addeq	r3, r0, #1
 8003d68:	0a000004 	beq	8003d80 <memcmp+0x88>
 8003d6c:	ea000008 	b	8003d94 <memcmp+0x9c>
 8003d70:	e4d3c001 	ldrb	ip, [r3], #1
 8003d74:	e5f1e001 	ldrb	lr, [r1, #1]!
 8003d78:	e15c000e 	cmp	ip, lr
 8003d7c:	1a000004 	bne	8003d94 <memcmp+0x9c>
 8003d80:	e1530002 	cmp	r3, r2
 8003d84:	1afffff9 	bne	8003d70 <memcmp+0x78>
 8003d88:	e3a00000 	mov	r0, #0
 8003d8c:	e8bd4010 	pop	{r4, lr}
 8003d90:	e12fff1e 	bx	lr
 8003d94:	e06e000c 	rsb	r0, lr, ip
 8003d98:	e8bd4010 	pop	{r4, lr}
 8003d9c:	e12fff1e 	bx	lr
 8003da0:	e1a00002 	mov	r0, r2
 8003da4:	eafffff8 	b	8003d8c <memcmp+0x94>
 8003da8:	00004b4f 	.word	0x00004b4f
 8003dac:	636e7953 	.word	0x636e7953
 8003db0:	0a0d6465 	.word	0x0a0d6465
 8003db4:	00000000 	.word	0x00000000
 8003db8:	73726170 	.word	0x73726170
 8003dbc:	00000065 	.word	0x00000065
 8003dc0:	454c4449 	.word	0x454c4449
 8003dc4:	00000000 	.word	0x00000000
 8003dc8:	20726d54 	.word	0x20726d54
 8003dcc:	00637653 	.word	0x00637653
 8003dd0:	51726d54 	.word	0x51726d54
	...
