cscope 15 $HOME/STM32F429_FreeRTOS/sys/inc               0001858587
	@cmsis/arm_common_tables.h

41 #i‚de‡
_ARM_COMMON_TABLES_H


42 
	#_ARM_COMMON_TABLES_H


	)

44 
	~"¨m_m©h.h
"

46 c⁄° 
uöt16_t
 
¨mBôRevTabÀ
[1024];

47 c⁄° 
q15_t
 
¨mRecùTabÀQ15
[64];

48 c⁄° 
q31_t
 
¨mRecùTabÀQ31
[64];

49 c⁄° 
q31_t
 
ªÆC€fAQ31
[1024];

50 c⁄° 
q31_t
 
ªÆC€fBQ31
[1024];

51 c⁄° 
Êﬂt32_t
 
twiddÀC€f_16
[32];

52 c⁄° 
Êﬂt32_t
 
twiddÀC€f_32
[64];

53 c⁄° 
Êﬂt32_t
 
twiddÀC€f_64
[128];

54 c⁄° 
Êﬂt32_t
 
twiddÀC€f_128
[256];

55 c⁄° 
Êﬂt32_t
 
twiddÀC€f_256
[512];

56 c⁄° 
Êﬂt32_t
 
twiddÀC€f_512
[1024];

57 c⁄° 
Êﬂt32_t
 
twiddÀC€f_1024
[2048];

58 c⁄° 
Êﬂt32_t
 
twiddÀC€f_2048
[4096];

59 c⁄° 
Êﬂt32_t
 
twiddÀC€f_4096
[8192];

60 
	#twiddÀC€f
 
twiddÀC€f_4096


	)

61 c⁄° 
q31_t
 
twiddÀC€fQ31
[6144];

62 c⁄° 
q15_t
 
twiddÀC€fQ15
[6144];

63 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_32
[32];

64 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_64
[64];

65 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_128
[128];

66 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_256
[256];

67 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_512
[512];

68 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_1024
[1024];

69 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_2048
[2048];

70 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_4096
[4096];

73 
	#ARMBITREVINDEXTABLE__16_TABLE_LENGTH
 ((
uöt16_t
)20 )

	)

74 
	#ARMBITREVINDEXTABLE__32_TABLE_LENGTH
 ((
uöt16_t
)48 )

	)

75 
	#ARMBITREVINDEXTABLE__64_TABLE_LENGTH
 ((
uöt16_t
)56 )

	)

76 
	#ARMBITREVINDEXTABLE_128_TABLE_LENGTH
 ((
uöt16_t
)208 )

	)

77 
	#ARMBITREVINDEXTABLE_256_TABLE_LENGTH
 ((
uöt16_t
)440 )

	)

78 
	#ARMBITREVINDEXTABLE_512_TABLE_LENGTH
 ((
uöt16_t
)448 )

	)

79 
	#ARMBITREVINDEXTABLE1024_TABLE_LENGTH
 ((
uöt16_t
)1800)

	)

80 
	#ARMBITREVINDEXTABLE2048_TABLE_LENGTH
 ((
uöt16_t
)3808)

	)

81 
	#ARMBITREVINDEXTABLE4096_TABLE_LENGTH
 ((
uöt16_t
)4032)

	)

83 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ16
[
ARMBITREVINDEXTABLE__16_TABLE_LENGTH
];

84 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ32
[
ARMBITREVINDEXTABLE__32_TABLE_LENGTH
];

85 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ64
[
ARMBITREVINDEXTABLE__64_TABLE_LENGTH
];

86 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ128
[
ARMBITREVINDEXTABLE_128_TABLE_LENGTH
];

87 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ256
[
ARMBITREVINDEXTABLE_256_TABLE_LENGTH
];

88 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ512
[
ARMBITREVINDEXTABLE_512_TABLE_LENGTH
];

89 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ1024
[
ARMBITREVINDEXTABLE1024_TABLE_LENGTH
];

90 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ2048
[
ARMBITREVINDEXTABLE2048_TABLE_LENGTH
];

91 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ4096
[
ARMBITREVINDEXTABLE4096_TABLE_LENGTH
];

	@cmsis/arm_const_structs.h

43 #i‚de‡
_ARM_CONST_STRUCTS_H


44 
	#_ARM_CONST_STRUCTS_H


	)

46 
	~"¨m_m©h.h
"

47 
	~"¨m_comm⁄_èbÀs.h
"

49 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn16
 = {

50 16, 
twiddÀC€f_16
, 
¨mBôRevIndexTabÀ16
, 
ARMBITREVINDEXTABLE__16_TABLE_LENGTH


53 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn32
 = {

54 32, 
twiddÀC€f_32
, 
¨mBôRevIndexTabÀ32
, 
ARMBITREVINDEXTABLE__32_TABLE_LENGTH


57 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn64
 = {

58 64, 
twiddÀC€f_64
, 
¨mBôRevIndexTabÀ64
, 
ARMBITREVINDEXTABLE__64_TABLE_LENGTH


61 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn128
 = {

62 128, 
twiddÀC€f_128
, 
¨mBôRevIndexTabÀ128
, 
ARMBITREVINDEXTABLE_128_TABLE_LENGTH


65 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn256
 = {

66 256, 
twiddÀC€f_256
, 
¨mBôRevIndexTabÀ256
, 
ARMBITREVINDEXTABLE_256_TABLE_LENGTH


69 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn512
 = {

70 512, 
twiddÀC€f_512
, 
¨mBôRevIndexTabÀ512
, 
ARMBITREVINDEXTABLE_512_TABLE_LENGTH


73 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn1024
 = {

74 1024, 
twiddÀC€f_1024
, 
¨mBôRevIndexTabÀ1024
, 
ARMBITREVINDEXTABLE1024_TABLE_LENGTH


77 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn2048
 = {

78 2048, 
twiddÀC€f_2048
, 
¨mBôRevIndexTabÀ2048
, 
ARMBITREVINDEXTABLE2048_TABLE_LENGTH


81 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn4096
 = {

82 4096, 
twiddÀC€f_4096
, 
¨mBôRevIndexTabÀ4096
, 
ARMBITREVINDEXTABLE4096_TABLE_LENGTH


	@cmsis/arm_math.h

264 #i‚de‡
_ARM_MATH_H


265 
	#_ARM_MATH_H


	)

267 
	#__CMSIS_GENERIC


	)

269 #i‡
deföed
 (
ARM_MATH_CM4
)

270 
	~"c‹e_cm4.h
"

271 #ñi‡
deföed
 (
ARM_MATH_CM3
)

272 
	~"c‹e_cm3.h
"

273 #ñi‡
deföed
 (
ARM_MATH_CM0
)

274 
	~"c‹e_cm0.h
"

275 
	#ARM_MATH_CM0_FAMILY


	)

276 #ñi‡
deföed
 (
ARM_MATH_CM0PLUS
)

277 
	~"c‹e_cm0∂us.h
"

278 
	#ARM_MATH_CM0_FAMILY


	)

280 
	~"ARMCM4.h
"

284 #unde‡
__CMSIS_GENERIC


285 
	~"°rög.h
"

286 
	~"m©h.h
"

287 #ifdef 
__˝lu•lus


297 
	#DELTA_Q31
 (0x100)

	)

298 
	#DELTA_Q15
 0x5

	)

299 
	#INDEX_MASK
 0x0000003F

	)

300 #i‚de‡
PI


301 
	#PI
 3.14159265358979f

	)

308 
	#TABLE_SIZE
 256

	)

309 
	#TABLE_SPACING_Q31
 0x800000

	)

310 
	#TABLE_SPACING_Q15
 0x80

	)

317 
	#INPUT_SPACING
 0xB60B61

	)

322 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


323 
	#ALIGN4


	)

325 #i‡
deföed
 (
__GNUC__
)

326 
	#ALIGN4
 
	`__©åibuã__
((
	`Æig√d
(4)))

	)

328 
	#ALIGN4
 
	`__Æign
(4)

	)

338 
ARM_MATH_SUCCESS
 = 0,

339 
ARM_MATH_ARGUMENT_ERROR
 = -1,

340 
ARM_MATH_LENGTH_ERROR
 = -2,

341 
ARM_MATH_SIZE_MISMATCH
 = -3,

342 
ARM_MATH_NANINF
 = -4,

343 
ARM_MATH_SINGULAR
 = -5,

344 
ARM_MATH_TEST_FAILURE
 = -6

345 } 
	t¨m_°©us
;

350 
öt8_t
 
	tq7_t
;

355 
öt16_t
 
	tq15_t
;

360 
öt32_t
 
	tq31_t
;

365 
öt64_t
 
	tq63_t
;

370 
	tÊﬂt32_t
;

375 
	tÊﬂt64_t
;

380 #i‡
deföed
 
__CC_ARM


381 
	#__SIMD32_TYPE
 
öt32_t
 
__∑cked


	)

382 
	#CMSIS_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

383 #ñi‡
deföed
 
__ICCARM__


384 
	#CMSIS_UNUSED


	)

385 
	#__SIMD32_TYPE
 
öt32_t
 
__∑cked


	)

386 #ñi‡
deföed
 
__GNUC__


387 
	#__SIMD32_TYPE
 
öt32_t


	)

388 
	#CMSIS_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

390 #îr‹ 
Unknown
 
compûî


393 
	#__SIMD32
(
addr
Ë(*(
__SIMD32_TYPE
 **Ë& (addr))

	)

394 
	#__SIMD32_CONST
(
addr
Ë((
__SIMD32_TYPE
 *)◊ddr))

	)

396 
	#_SIMD32_OFFSET
(
addr
Ë(*(
__SIMD32_TYPE
 *Ë◊ddr))

	)

398 
	#__SIMD64
(
addr
Ë(*(
öt64_t
 **Ë& (addr))

	)

400 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0_FAMILY
)

404 
	#__PKHBT
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1Ë<< 0Ë& (öt32_t)0x0000FFFFË| \

	)

405 (((
öt32_t
)(
ARG2
Ë<< 
ARG3
) & (int32_t)0xFFFF0000) )

406 
	#__PKHTB
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1Ë<< 0Ë& (öt32_t)0xFFFF0000Ë| \

	)

407 (((
öt32_t
)(
ARG2
Ë>> 
ARG3
) & (int32_t)0x0000FFFF) )

415 #i‚de‡
ARM_MATH_BIG_ENDIAN


417 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v0Ë<< 0Ë& (öt32_t)0x000000FFË| \

	)

418 (((
öt32_t
)(
v1
) << 8) & (int32_t)0x0000FF00) | \

419 (((
öt32_t
)(
v2
) << 16) & (int32_t)0x00FF0000) | \

420 (((
öt32_t
)(
v3
) << 24) & (int32_t)0xFF000000) )

423 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v3Ë<< 0Ë& (öt32_t)0x000000FFË| \

	)

424 (((
öt32_t
)(
v2
) << 8) & (int32_t)0x0000FF00) | \

425 (((
öt32_t
)(
v1
) << 16) & (int32_t)0x00FF0000) | \

426 (((
öt32_t
)(
v0
) << 24) & (int32_t)0xFF000000) )

434 
__INLINE
 
q31_t
 
˛ù_q63_to_q31
(

435 
q63_t
 
x
)

437  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

438 ((0x7FFFFFFF ^ ((
q31_t
Ë(
x
 >> 63)))) : (q31_t) x;

444 
__INLINE
 
q15_t
 
˛ù_q63_to_q15
(

445 
q63_t
 
x
)

447  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

448 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 63)))) : (q15_t) (x >> 15);

454 
__INLINE
 
q7_t
 
˛ù_q31_to_q7
(

455 
q31_t
 
x
)

457  ((
q31_t
Ë(
x
 >> 24) != ((q31_t) x >> 23)) ?

458 ((0x7F ^ ((
q7_t
Ë(
x
 >> 31)))) : (q7_t) x;

464 
__INLINE
 
q15_t
 
˛ù_q31_to_q15
(

465 
q31_t
 
x
)

467  ((
q31_t
Ë(
x
 >> 16) != ((q31_t) x >> 15)) ?

468 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 31)))) : (q15_t) x;

475 
__INLINE
 
q63_t
 
mu…32x64
(

476 
q63_t
 
x
,

477 
q31_t
 
y
)

479  ((((
q63_t
Ë(
x
 & 0x00000000FFFFFFFFË* 
y
) >> 32) +

480 (((
q63_t
Ë(
x
 >> 32Ë* 
y
)));

484 #i‡
deföed
 (
ARM_MATH_CM0_FAMILY
Ë&& deföed ( 
__CC_ARM
 )

485 
	#__CLZ
 
__˛z


	)

488 #i‡
deföed
 (
ARM_MATH_CM0_FAMILY
Ë&& ((deföed (
__ICCARM__
)Ë||(deföed (
__GNUC__
)Ë|| deföed (
__TASKING__
) )

490 
__INLINE
 
uöt32_t
 
__CLZ
(

491 
q31_t
 
d©a
);

494 
__INLINE
 
uöt32_t
 
__CLZ
(

495 
q31_t
 
d©a
)

497 
uöt32_t
 
cou¡
 = 0;

498 
uöt32_t
 
mask
 = 0x80000000;

500 (
d©a
 & 
mask
) == 0)

502 
cou¡
 += 1u;

503 
mask
 = mask >> 1u;

506  (
cou¡
);

516 
__INLINE
 
uöt32_t
 
¨m_ªcù_q31
(

517 
q31_t
 
ö
,

518 
q31_t
 * 
d°
,

519 
q31_t
 * 
pRecùTabÀ
)

522 
uöt32_t
 
out
, 
ãmpVÆ
;

523 
uöt32_t
 
ödex
, 
i
;

524 
uöt32_t
 
signBôs
;

526 if(
ö
 > 0)

528 
signBôs
 = 
__CLZ
(
ö
) - 1;

532 
signBôs
 = 
__CLZ
(-
ö
) - 1;

536 
ö
 = i¿<< 
signBôs
;

539 
ödex
 = (
uöt32_t
Ë(
ö
 >> 24u);

540 
ödex
 = (ödex & 
INDEX_MASK
);

543 
out
 = 
pRecùTabÀ
[
ödex
];

547 
i
 = 0u; i < 2u; i++)

549 
ãmpVÆ
 = (
q31_t
Ë(((
q63_t
Ë
ö
 * 
out
) >> 31u);

550 
ãmpVÆ
 = 0x7FFFFFFF -ÅempVal;

553 
out
 = (
q31_t
Ë
˛ù_q63_to_q31
(((
q63_t
Ëouà* 
ãmpVÆ
) >> 30u);

557 *
d°
 = 
out
;

560  (
signBôs
 + 1u);

567 
__INLINE
 
uöt32_t
 
¨m_ªcù_q15
(

568 
q15_t
 
ö
,

569 
q15_t
 * 
d°
,

570 
q15_t
 * 
pRecùTabÀ
)

573 
uöt32_t
 
out
 = 0, 
ãmpVÆ
 = 0;

574 
uöt32_t
 
ödex
 = 0, 
i
 = 0;

575 
uöt32_t
 
signBôs
 = 0;

577 if(
ö
 > 0)

579 
signBôs
 = 
__CLZ
(
ö
) - 17;

583 
signBôs
 = 
__CLZ
(-
ö
) - 17;

587 
ö
 = i¿<< 
signBôs
;

590 
ödex
 = 
ö
 >> 8;

591 
ödex
 = (ödex & 
INDEX_MASK
);

594 
out
 = 
pRecùTabÀ
[
ödex
];

598 
i
 = 0; i < 2; i++)

600 
ãmpVÆ
 = (
q15_t
Ë(((
q31_t
Ë
ö
 * 
out
) >> 15);

601 
ãmpVÆ
 = 0x7FFF -ÅempVal;

603 
out
 = (
q15_t
Ë(((
q31_t
Ëouà* 
ãmpVÆ
) >> 14);

607 *
d°
 = 
out
;

610  (
signBôs
 + 1);

618 #i‡
deföed
(
ARM_MATH_CM0_FAMILY
)

620 
__INLINE
 
q31_t
 
__SSAT
(

621 
q31_t
 
x
,

622 
uöt32_t
 
y
)

624 
öt32_t
 
posMax
, 
√gMö
;

625 
uöt32_t
 
i
;

627 
posMax
 = 1;

628 
i
 = 0; i < (
y
 - 1); i++)

630 
posMax
 =ÖosMax * 2;

633 if(
x
 > 0)

635 
posMax
 = (posMax - 1);

637 if(
x
 > 
posMax
)

639 
x
 = 
posMax
;

644 
√gMö
 = -
posMax
;

646 if(
x
 < 
√gMö
)

648 
x
 = 
√gMö
;

651  (
x
);

663 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0_FAMILY
)

668 
__INLINE
 
q31_t
 
__QADD8
(

669 
q31_t
 
x
,

670 
q31_t
 
y
)

673 
q31_t
 
sum
;

674 
q7_t
 
r
, 
s
, 
t
, 
u
;

676 
r
 = (
q7_t
Ë
x
;

677 
s
 = (
q7_t
Ë
y
;

679 
r
 = 
__SSAT
((
q31_t
Ë‘ + 
s
), 8);

680 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë+ ((
y
 << 16) >> 24))), 8);

681 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë+ ((
y
 << 8) >> 24))), 8);

682 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë+ (
y
 >> 24))), 8);

684 
sum
 =

685 (((
q31_t
Ë
u
 << 24Ë& 0xFF000000Ë| (((q31_tË
t
 << 16) & 0x00FF0000) |

686 (((
q31_t
Ë
s
 << 8Ë& 0x0000FF00Ë| (
r
 & 0x000000FF);

688  
sum
;

695 
__INLINE
 
q31_t
 
__QSUB8
(

696 
q31_t
 
x
,

697 
q31_t
 
y
)

700 
q31_t
 
sum
;

701 
q31_t
 
r
, 
s
, 
t
, 
u
;

703 
r
 = (
q7_t
Ë
x
;

704 
s
 = (
q7_t
Ë
y
;

706 
r
 = 
__SSAT
(‘ - 
s
), 8);

707 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë- ((
y
 << 16) >> 24))), 8) << 8;

708 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë- ((
y
 << 8) >> 24))), 8) << 16;

709 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë- (
y
 >> 24))), 8) << 24;

711 
sum
 =

712 (
u
 & 0xFF000000Ë| (
t
 & 0x00FF0000Ë| (
s
 & 0x0000FF00Ë| (
r
 &

715  
sum
;

725 
__INLINE
 
q31_t
 
__QADD16
(

726 
q31_t
 
x
,

727 
q31_t
 
y
)

730 
q31_t
 
sum
;

731 
q31_t
 
r
, 
s
;

733 
r
 = (Ë
x
;

734 
s
 = (Ë
y
;

736 
r
 = 
__SSAT
‘ + 
s
, 16);

737 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë+ (
y
 >> 16))), 16) << 16;

739 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

741  
sum
;

748 
__INLINE
 
q31_t
 
__SHADD16
(

749 
q31_t
 
x
,

750 
q31_t
 
y
)

753 
q31_t
 
sum
;

754 
q31_t
 
r
, 
s
;

756 
r
 = (Ë
x
;

757 
s
 = (Ë
y
;

759 
r
 = (‘ >> 1Ë+ (
s
 >> 1));

760 
s
 = ((
q31_t
Ë((
x
 >> 17Ë+ (
y
 >> 17))) << 16;

762 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

764  
sum
;

771 
__INLINE
 
q31_t
 
__QSUB16
(

772 
q31_t
 
x
,

773 
q31_t
 
y
)

776 
q31_t
 
sum
;

777 
q31_t
 
r
, 
s
;

779 
r
 = (Ë
x
;

780 
s
 = (Ë
y
;

782 
r
 = 
__SSAT
‘ - 
s
, 16);

783 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë- (
y
 >> 16))), 16) << 16;

785 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

787  
sum
;

793 
__INLINE
 
q31_t
 
__SHSUB16
(

794 
q31_t
 
x
,

795 
q31_t
 
y
)

798 
q31_t
 
diff
;

799 
q31_t
 
r
, 
s
;

801 
r
 = (Ë
x
;

802 
s
 = (Ë
y
;

804 
r
 = (‘ >> 1Ë- (
s
 >> 1));

805 
s
 = (((
x
 >> 17Ë- (
y
 >> 17)) << 16);

807 
diff
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

809  
diff
;

815 
__INLINE
 
q31_t
 
__QASX
(

816 
q31_t
 
x
,

817 
q31_t
 
y
)

820 
q31_t
 
sum
 = 0;

822 
sum
 =

823 ((
sum
 +

824 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë+ (Ë
y
))) << 16) +

825 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 - (Ë(
y
 >> 16)));

827  
sum
;

833 
__INLINE
 
q31_t
 
__SHASX
(

834 
q31_t
 
x
,

835 
q31_t
 
y
)

838 
q31_t
 
sum
;

839 
q31_t
 
r
, 
s
;

841 
r
 = (Ë
x
;

842 
s
 = (Ë
y
;

844 
r
 = (‘ >> 1Ë- (
y
 >> 17));

845 
s
 = (((
x
 >> 17) + (s >> 1)) << 16);

847 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

849  
sum
;

856 
__INLINE
 
q31_t
 
__QSAX
(

857 
q31_t
 
x
,

858 
q31_t
 
y
)

861 
q31_t
 
sum
 = 0;

863 
sum
 =

864 ((
sum
 +

865 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë- (Ë
y
))) << 16) +

866 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 + (Ë(
y
 >> 16)));

868  
sum
;

874 
__INLINE
 
q31_t
 
__SHSAX
(

875 
q31_t
 
x
,

876 
q31_t
 
y
)

879 
q31_t
 
sum
;

880 
q31_t
 
r
, 
s
;

882 
r
 = (Ë
x
;

883 
s
 = (Ë
y
;

885 
r
 = (‘ >> 1Ë+ (
y
 >> 17));

886 
s
 = (((
x
 >> 17) - (s >> 1)) << 16);

888 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

890  
sum
;

896 
__INLINE
 
q31_t
 
__SMUSDX
(

897 
q31_t
 
x
,

898 
q31_t
 
y
)

901  ((
q31_t
Ë(((Ë
x
 * (Ë(
y
 >> 16)) -

902 ((Ë(
x
 >> 16Ë* (Ë
y
)));

908 
__INLINE
 
q31_t
 
__SMUADX
(

909 
q31_t
 
x
,

910 
q31_t
 
y
)

913  ((
q31_t
Ë(((Ë
x
 * (Ë(
y
 >> 16)) +

914 ((Ë(
x
 >> 16Ë* (Ë
y
)));

920 
__INLINE
 
q31_t
 
__QADD
(

921 
q31_t
 
x
,

922 
q31_t
 
y
)

924  
˛ù_q63_to_q31
((
q63_t
Ë
x
 + 
y
);

930 
__INLINE
 
q31_t
 
__QSUB
(

931 
q31_t
 
x
,

932 
q31_t
 
y
)

934  
˛ù_q63_to_q31
((
q63_t
Ë
x
 - 
y
);

940 
__INLINE
 
q31_t
 
__SMLAD
(

941 
q31_t
 
x
,

942 
q31_t
 
y
,

943 
q31_t
 
sum
)

946  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

947 ((Ë
x
 * (Ë
y
));

953 
__INLINE
 
q31_t
 
__SMLADX
(

954 
q31_t
 
x
,

955 
q31_t
 
y
,

956 
q31_t
 
sum
)

959  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

960 ((Ë
x
 * (Ë(
y
 >> 16)));

966 
__INLINE
 
q31_t
 
__SMLSDX
(

967 
q31_t
 
x
,

968 
q31_t
 
y
,

969 
q31_t
 
sum
)

972  (
sum
 - ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

973 ((Ë
x
 * (Ë(
y
 >> 16)));

979 
__INLINE
 
q63_t
 
__SMLALD
(

980 
q31_t
 
x
,

981 
q31_t
 
y
,

982 
q63_t
 
sum
)

985  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

986 ((Ë
x
 * (Ë
y
));

992 
__INLINE
 
q63_t
 
__SMLALDX
(

993 
q31_t
 
x
,

994 
q31_t
 
y
,

995 
q63_t
 
sum
)

998  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë
y
)) +

999 ((Ë
x
 * (Ë(
y
 >> 16));

1005 
__INLINE
 
q31_t
 
__SMUAD
(

1006 
q31_t
 
x
,

1007 
q31_t
 
y
)

1010  (((
x
 >> 16Ë* (
y
 >> 16)) +

1011 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

1017 
__INLINE
 
q31_t
 
__SMUSD
(

1018 
q31_t
 
x
,

1019 
q31_t
 
y
)

1022  (-((
x
 >> 16Ë* (
y
 >> 16)) +

1023 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

1030 
__INLINE
 
q31_t
 
__SXTB16
(

1031 
q31_t
 
x
)

1034  ((((
x
 << 24) >> 24) & 0x0000FFFF) |

1035 (((
x
 << 8) >> 8) & 0xFFFF0000));

1047 
uöt16_t
 
numT≠s
;

1048 
q7_t
 *
pSèã
;

1049 
q7_t
 *
pC€ffs
;

1050 } 
	t¨m_fú_ö°™˚_q7
;

1057 
uöt16_t
 
numT≠s
;

1058 
q15_t
 *
pSèã
;

1059 
q15_t
 *
pC€ffs
;

1060 } 
	t¨m_fú_ö°™˚_q15
;

1067 
uöt16_t
 
numT≠s
;

1068 
q31_t
 *
pSèã
;

1069 
q31_t
 *
pC€ffs
;

1070 } 
	t¨m_fú_ö°™˚_q31
;

1077 
uöt16_t
 
numT≠s
;

1078 
Êﬂt32_t
 *
pSèã
;

1079 
Êﬂt32_t
 *
pC€ffs
;

1080 } 
	t¨m_fú_ö°™˚_f32
;

1091 
¨m_fú_q7
(

1092 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

1093 
q7_t
 * 
pSrc
,

1094 
q7_t
 * 
pD°
,

1095 
uöt32_t
 
blockSize
);

1107 
¨m_fú_öô_q7
(

1108 
¨m_fú_ö°™˚_q7
 * 
S
,

1109 
uöt16_t
 
numT≠s
,

1110 
q7_t
 * 
pC€ffs
,

1111 
q7_t
 * 
pSèã
,

1112 
uöt32_t
 
blockSize
);

1123 
¨m_fú_q15
(

1124 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1125 
q15_t
 * 
pSrc
,

1126 
q15_t
 * 
pD°
,

1127 
uöt32_t
 
blockSize
);

1137 
¨m_fú_Á°_q15
(

1138 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1139 
q15_t
 * 
pSrc
,

1140 
q15_t
 * 
pD°
,

1141 
uöt32_t
 
blockSize
);

1154 
¨m_°©us
 
¨m_fú_öô_q15
(

1155 
¨m_fú_ö°™˚_q15
 * 
S
,

1156 
uöt16_t
 
numT≠s
,

1157 
q15_t
 * 
pC€ffs
,

1158 
q15_t
 * 
pSèã
,

1159 
uöt32_t
 
blockSize
);

1169 
¨m_fú_q31
(

1170 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1171 
q31_t
 * 
pSrc
,

1172 
q31_t
 * 
pD°
,

1173 
uöt32_t
 
blockSize
);

1183 
¨m_fú_Á°_q31
(

1184 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1185 
q31_t
 * 
pSrc
,

1186 
q31_t
 * 
pD°
,

1187 
uöt32_t
 
blockSize
);

1198 
¨m_fú_öô_q31
(

1199 
¨m_fú_ö°™˚_q31
 * 
S
,

1200 
uöt16_t
 
numT≠s
,

1201 
q31_t
 * 
pC€ffs
,

1202 
q31_t
 * 
pSèã
,

1203 
uöt32_t
 
blockSize
);

1213 
¨m_fú_f32
(

1214 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

1215 
Êﬂt32_t
 * 
pSrc
,

1216 
Êﬂt32_t
 * 
pD°
,

1217 
uöt32_t
 
blockSize
);

1228 
¨m_fú_öô_f32
(

1229 
¨m_fú_ö°™˚_f32
 * 
S
,

1230 
uöt16_t
 
numT≠s
,

1231 
Êﬂt32_t
 * 
pC€ffs
,

1232 
Êﬂt32_t
 * 
pSèã
,

1233 
uöt32_t
 
blockSize
);

1241 
öt8_t
 
numSèges
;

1242 
q15_t
 *
pSèã
;

1243 
q15_t
 *
pC€ffs
;

1244 
öt8_t
 
po°Shi·
;

1246 } 
	t¨m_biquad_ˇsd_df1_ö°_q15
;

1254 
uöt32_t
 
numSèges
;

1255 
q31_t
 *
pSèã
;

1256 
q31_t
 *
pC€ffs
;

1257 
uöt8_t
 
po°Shi·
;

1259 } 
	t¨m_biquad_ˇsd_df1_ö°_q31
;

1266 
uöt32_t
 
numSèges
;

1267 
Êﬂt32_t
 *
pSèã
;

1268 
Êﬂt32_t
 *
pC€ffs
;

1271 } 
	t¨m_biquad_ˇsd_df1_ö°_f32
;

1284 
¨m_biquad_ˇsˇde_df1_q15
(

1285 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1286 
q15_t
 * 
pSrc
,

1287 
q15_t
 * 
pD°
,

1288 
uöt32_t
 
blockSize
);

1300 
¨m_biquad_ˇsˇde_df1_öô_q15
(

1301 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1302 
uöt8_t
 
numSèges
,

1303 
q15_t
 * 
pC€ffs
,

1304 
q15_t
 * 
pSèã
,

1305 
öt8_t
 
po°Shi·
);

1317 
¨m_biquad_ˇsˇde_df1_Á°_q15
(

1318 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1319 
q15_t
 * 
pSrc
,

1320 
q15_t
 * 
pD°
,

1321 
uöt32_t
 
blockSize
);

1333 
¨m_biquad_ˇsˇde_df1_q31
(

1334 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1335 
q31_t
 * 
pSrc
,

1336 
q31_t
 * 
pD°
,

1337 
uöt32_t
 
blockSize
);

1348 
¨m_biquad_ˇsˇde_df1_Á°_q31
(

1349 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1350 
q31_t
 * 
pSrc
,

1351 
q31_t
 * 
pD°
,

1352 
uöt32_t
 
blockSize
);

1364 
¨m_biquad_ˇsˇde_df1_öô_q31
(

1365 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1366 
uöt8_t
 
numSèges
,

1367 
q31_t
 * 
pC€ffs
,

1368 
q31_t
 * 
pSèã
,

1369 
öt8_t
 
po°Shi·
);

1380 
¨m_biquad_ˇsˇde_df1_f32
(

1381 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1382 
Êﬂt32_t
 * 
pSrc
,

1383 
Êﬂt32_t
 * 
pD°
,

1384 
uöt32_t
 
blockSize
);

1395 
¨m_biquad_ˇsˇde_df1_öô_f32
(

1396 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1397 
uöt8_t
 
numSèges
,

1398 
Êﬂt32_t
 * 
pC€ffs
,

1399 
Êﬂt32_t
 * 
pSèã
);

1408 
uöt16_t
 
numRows
;

1409 
uöt16_t
 
numCﬁs
;

1410 
Êﬂt32_t
 *
pD©a
;

1411 } 
	t¨m_m©rix_ö°™˚_f32
;

1419 
uöt16_t
 
numRows
;

1420 
uöt16_t
 
numCﬁs
;

1421 
q15_t
 *
pD©a
;

1423 } 
	t¨m_m©rix_ö°™˚_q15
;

1431 
uöt16_t
 
numRows
;

1432 
uöt16_t
 
numCﬁs
;

1433 
q31_t
 *
pD©a
;

1435 } 
	t¨m_m©rix_ö°™˚_q31
;

1448 
¨m_°©us
 
¨m_m©_add_f32
(

1449 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1450 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1451 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1462 
¨m_°©us
 
¨m_m©_add_q15
(

1463 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1464 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1465 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1476 
¨m_°©us
 
¨m_m©_add_q31
(

1477 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1478 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1479 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1490 
¨m_°©us
 
¨m_m©_å™s_f32
(

1491 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1492 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1503 
¨m_°©us
 
¨m_m©_å™s_q15
(

1504 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1505 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1515 
¨m_°©us
 
¨m_m©_å™s_q31
(

1516 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1517 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1529 
¨m_°©us
 
¨m_m©_mu…_f32
(

1530 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1531 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1532 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1544 
¨m_°©us
 
¨m_m©_mu…_q15
(

1545 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1546 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1547 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1548 
q15_t
 * 
pSèã
);

1560 
¨m_°©us
 
¨m_m©_mu…_Á°_q15
(

1561 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1562 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1563 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1564 
q15_t
 * 
pSèã
);

1575 
¨m_°©us
 
¨m_m©_mu…_q31
(

1576 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1577 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1578 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1589 
¨m_°©us
 
¨m_m©_mu…_Á°_q31
(

1590 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1591 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1592 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1604 
¨m_°©us
 
¨m_m©_sub_f32
(

1605 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1606 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1607 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1618 
¨m_°©us
 
¨m_m©_sub_q15
(

1619 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1620 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1621 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1632 
¨m_°©us
 
¨m_m©_sub_q31
(

1633 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1634 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1635 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1646 
¨m_°©us
 
¨m_m©_sˇÀ_f32
(

1647 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1648 
Êﬂt32_t
 
sˇÀ
,

1649 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1661 
¨m_°©us
 
¨m_m©_sˇÀ_q15
(

1662 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1663 
q15_t
 
sˇÀFø˘
,

1664 
öt32_t
 
shi·
,

1665 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1677 
¨m_°©us
 
¨m_m©_sˇÀ_q31
(

1678 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1679 
q31_t
 
sˇÀFø˘
,

1680 
öt32_t
 
shi·
,

1681 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1693 
¨m_m©_öô_q31
(

1694 
¨m_m©rix_ö°™˚_q31
 * 
S
,

1695 
uöt16_t
 
nRows
,

1696 
uöt16_t
 
nCﬁumns
,

1697 
q31_t
 * 
pD©a
);

1708 
¨m_m©_öô_q15
(

1709 
¨m_m©rix_ö°™˚_q15
 * 
S
,

1710 
uöt16_t
 
nRows
,

1711 
uöt16_t
 
nCﬁumns
,

1712 
q15_t
 * 
pD©a
);

1723 
¨m_m©_öô_f32
(

1724 
¨m_m©rix_ö°™˚_f32
 * 
S
,

1725 
uöt16_t
 
nRows
,

1726 
uöt16_t
 
nCﬁumns
,

1727 
Êﬂt32_t
 * 
pD©a
);

1736 
q15_t
 
A0
;

1737 #ifde‡
ARM_MATH_CM0_FAMILY


1738 
q15_t
 
A1
;

1739 
q15_t
 
A2
;

1741 
q31_t
 
A1
;

1743 
q15_t
 
°©e
[3];

1744 
q15_t
 
Kp
;

1745 
q15_t
 
Ki
;

1746 
q15_t
 
Kd
;

1747 } 
	t¨m_pid_ö°™˚_q15
;

1754 
q31_t
 
A0
;

1755 
q31_t
 
A1
;

1756 
q31_t
 
A2
;

1757 
q31_t
 
°©e
[3];

1758 
q31_t
 
Kp
;

1759 
q31_t
 
Ki
;

1760 
q31_t
 
Kd
;

1762 } 
	t¨m_pid_ö°™˚_q31
;

1769 
Êﬂt32_t
 
A0
;

1770 
Êﬂt32_t
 
A1
;

1771 
Êﬂt32_t
 
A2
;

1772 
Êﬂt32_t
 
°©e
[3];

1773 
Êﬂt32_t
 
Kp
;

1774 
Êﬂt32_t
 
Ki
;

1775 
Êﬂt32_t
 
Kd
;

1776 } 
	t¨m_pid_ö°™˚_f32
;

1786 
¨m_pid_öô_f32
(

1787 
¨m_pid_ö°™˚_f32
 * 
S
,

1788 
öt32_t
 
ª£tSèãFœg
);

1795 
¨m_pid_ª£t_f32
(

1796 
¨m_pid_ö°™˚_f32
 * 
S
);

1805 
¨m_pid_öô_q31
(

1806 
¨m_pid_ö°™˚_q31
 * 
S
,

1807 
öt32_t
 
ª£tSèãFœg
);

1816 
¨m_pid_ª£t_q31
(

1817 
¨m_pid_ö°™˚_q31
 * 
S
);

1825 
¨m_pid_öô_q15
(

1826 
¨m_pid_ö°™˚_q15
 * 
S
,

1827 
öt32_t
 
ª£tSèãFœg
);

1834 
¨m_pid_ª£t_q15
(

1835 
¨m_pid_ö°™˚_q15
 * 
S
);

1843 
uöt32_t
 
nVÆues
;

1844 
Êﬂt32_t
 
x1
;

1845 
Êﬂt32_t
 
xS∑cög
;

1846 
Êﬂt32_t
 *
pYD©a
;

1847 } 
	t¨m_löór_öãΩ_ö°™˚_f32
;

1855 
uöt16_t
 
numRows
;

1856 
uöt16_t
 
numCﬁs
;

1857 
Êﬂt32_t
 *
pD©a
;

1858 } 
	t¨m_bûöór_öãΩ_ö°™˚_f32
;

1866 
uöt16_t
 
numRows
;

1867 
uöt16_t
 
numCﬁs
;

1868 
q31_t
 *
pD©a
;

1869 } 
	t¨m_bûöór_öãΩ_ö°™˚_q31
;

1877 
uöt16_t
 
numRows
;

1878 
uöt16_t
 
numCﬁs
;

1879 
q15_t
 *
pD©a
;

1880 } 
	t¨m_bûöór_öãΩ_ö°™˚_q15
;

1888 
uöt16_t
 
numRows
;

1889 
uöt16_t
 
numCﬁs
;

1890 
q7_t
 *
pD©a
;

1891 } 
	t¨m_bûöór_öãΩ_ö°™˚_q7
;

1903 
¨m_mu…_q7
(

1904 
q7_t
 * 
pSrcA
,

1905 
q7_t
 * 
pSrcB
,

1906 
q7_t
 * 
pD°
,

1907 
uöt32_t
 
blockSize
);

1918 
¨m_mu…_q15
(

1919 
q15_t
 * 
pSrcA
,

1920 
q15_t
 * 
pSrcB
,

1921 
q15_t
 * 
pD°
,

1922 
uöt32_t
 
blockSize
);

1933 
¨m_mu…_q31
(

1934 
q31_t
 * 
pSrcA
,

1935 
q31_t
 * 
pSrcB
,

1936 
q31_t
 * 
pD°
,

1937 
uöt32_t
 
blockSize
);

1948 
¨m_mu…_f32
(

1949 
Êﬂt32_t
 * 
pSrcA
,

1950 
Êﬂt32_t
 * 
pSrcB
,

1951 
Êﬂt32_t
 * 
pD°
,

1952 
uöt32_t
 
blockSize
);

1965 
uöt16_t
 
f·Lí
;

1966 
uöt8_t
 
if·Fœg
;

1967 
uöt8_t
 
bôRevî£Fœg
;

1968 
q15_t
 *
pTwiddÀ
;

1969 
uöt16_t
 *
pBôRevTabÀ
;

1970 
uöt16_t
 
twidC€fModifõr
;

1971 
uöt16_t
 
bôRevFa˘‹
;

1972 } 
	t¨m_cf·_ødix2_ö°™˚_q15
;

1974 
¨m_°©us
 
¨m_cf·_ødix2_öô_q15
(

1975 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

1976 
uöt16_t
 
f·Lí
,

1977 
uöt8_t
 
if·Fœg
,

1978 
uöt8_t
 
bôRevî£Fœg
);

1980 
¨m_cf·_ødix2_q15
(

1981 c⁄° 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

1982 
q15_t
 * 
pSrc
);

1992 
uöt16_t
 
f·Lí
;

1993 
uöt8_t
 
if·Fœg
;

1994 
uöt8_t
 
bôRevî£Fœg
;

1995 
q15_t
 *
pTwiddÀ
;

1996 
uöt16_t
 *
pBôRevTabÀ
;

1997 
uöt16_t
 
twidC€fModifõr
;

1998 
uöt16_t
 
bôRevFa˘‹
;

1999 } 
	t¨m_cf·_ødix4_ö°™˚_q15
;

2001 
¨m_°©us
 
¨m_cf·_ødix4_öô_q15
(

2002 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

2003 
uöt16_t
 
f·Lí
,

2004 
uöt8_t
 
if·Fœg
,

2005 
uöt8_t
 
bôRevî£Fœg
);

2007 
¨m_cf·_ødix4_q15
(

2008 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

2009 
q15_t
 * 
pSrc
);

2017 
uöt16_t
 
f·Lí
;

2018 
uöt8_t
 
if·Fœg
;

2019 
uöt8_t
 
bôRevî£Fœg
;

2020 
q31_t
 *
pTwiddÀ
;

2021 
uöt16_t
 *
pBôRevTabÀ
;

2022 
uöt16_t
 
twidC€fModifõr
;

2023 
uöt16_t
 
bôRevFa˘‹
;

2024 } 
	t¨m_cf·_ødix2_ö°™˚_q31
;

2026 
¨m_°©us
 
¨m_cf·_ødix2_öô_q31
(

2027 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

2028 
uöt16_t
 
f·Lí
,

2029 
uöt8_t
 
if·Fœg
,

2030 
uöt8_t
 
bôRevî£Fœg
);

2032 
¨m_cf·_ødix2_q31
(

2033 c⁄° 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

2034 
q31_t
 * 
pSrc
);

2042 
uöt16_t
 
f·Lí
;

2043 
uöt8_t
 
if·Fœg
;

2044 
uöt8_t
 
bôRevî£Fœg
;

2045 
q31_t
 *
pTwiddÀ
;

2046 
uöt16_t
 *
pBôRevTabÀ
;

2047 
uöt16_t
 
twidC€fModifõr
;

2048 
uöt16_t
 
bôRevFa˘‹
;

2049 } 
	t¨m_cf·_ødix4_ö°™˚_q31
;

2052 
¨m_cf·_ødix4_q31
(

2053 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

2054 
q31_t
 * 
pSrc
);

2056 
¨m_°©us
 
¨m_cf·_ødix4_öô_q31
(

2057 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

2058 
uöt16_t
 
f·Lí
,

2059 
uöt8_t
 
if·Fœg
,

2060 
uöt8_t
 
bôRevî£Fœg
);

2068 
uöt16_t
 
f·Lí
;

2069 
uöt8_t
 
if·Fœg
;

2070 
uöt8_t
 
bôRevî£Fœg
;

2071 
Êﬂt32_t
 *
pTwiddÀ
;

2072 
uöt16_t
 *
pBôRevTabÀ
;

2073 
uöt16_t
 
twidC€fModifõr
;

2074 
uöt16_t
 
bôRevFa˘‹
;

2075 
Êﬂt32_t
 
⁄ebyf·Lí
;

2076 } 
	t¨m_cf·_ødix2_ö°™˚_f32
;

2079 
¨m_°©us
 
¨m_cf·_ødix2_öô_f32
(

2080 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

2081 
uöt16_t
 
f·Lí
,

2082 
uöt8_t
 
if·Fœg
,

2083 
uöt8_t
 
bôRevî£Fœg
);

2086 
¨m_cf·_ødix2_f32
(

2087 c⁄° 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

2088 
Êﬂt32_t
 * 
pSrc
);

2096 
uöt16_t
 
f·Lí
;

2097 
uöt8_t
 
if·Fœg
;

2098 
uöt8_t
 
bôRevî£Fœg
;

2099 
Êﬂt32_t
 *
pTwiddÀ
;

2100 
uöt16_t
 *
pBôRevTabÀ
;

2101 
uöt16_t
 
twidC€fModifõr
;

2102 
uöt16_t
 
bôRevFa˘‹
;

2103 
Êﬂt32_t
 
⁄ebyf·Lí
;

2104 } 
	t¨m_cf·_ødix4_ö°™˚_f32
;

2107 
¨m_°©us
 
¨m_cf·_ødix4_öô_f32
(

2108 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2109 
uöt16_t
 
f·Lí
,

2110 
uöt8_t
 
if·Fœg
,

2111 
uöt8_t
 
bôRevî£Fœg
);

2114 
¨m_cf·_ødix4_f32
(

2115 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2116 
Êﬂt32_t
 * 
pSrc
);

2124 
uöt16_t
 
f·Lí
;

2125 c⁄° 
Êﬂt32_t
 *
pTwiddÀ
;

2126 c⁄° 
uöt16_t
 *
pBôRevTabÀ
;

2127 
uöt16_t
 
bôRevLígth
;

2128 } 
	t¨m_cf·_ö°™˚_f32
;

2130 
¨m_cf·_f32
(

2131 c⁄° 
¨m_cf·_ö°™˚_f32
 * 
S
,

2132 
Êﬂt32_t
 * 
p1
,

2133 
uöt8_t
 
if·Fœg
,

2134 
uöt8_t
 
bôRevî£Fœg
);

2142 
uöt32_t
 
f·LíRól
;

2143 
uöt32_t
 
f·LíBy2
;

2144 
uöt8_t
 
if·FœgR
;

2145 
uöt8_t
 
bôRevî£FœgR
;

2146 
uöt32_t
 
twidC€fRModifõr
;

2147 
q15_t
 *
pTwiddÀARól
;

2148 
q15_t
 *
pTwiddÀBRól
;

2149 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2150 } 
	t¨m_rf·_ö°™˚_q15
;

2152 
¨m_°©us
 
¨m_rf·_öô_q15
(

2153 
¨m_rf·_ö°™˚_q15
 * 
S
,

2154 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2155 
uöt32_t
 
f·LíRól
,

2156 
uöt32_t
 
if·FœgR
,

2157 
uöt32_t
 
bôRevî£Fœg
);

2159 
¨m_rf·_q15
(

2160 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

2161 
q15_t
 * 
pSrc
,

2162 
q15_t
 * 
pD°
);

2170 
uöt32_t
 
f·LíRól
;

2171 
uöt32_t
 
f·LíBy2
;

2172 
uöt8_t
 
if·FœgR
;

2173 
uöt8_t
 
bôRevî£FœgR
;

2174 
uöt32_t
 
twidC€fRModifõr
;

2175 
q31_t
 *
pTwiddÀARól
;

2176 
q31_t
 *
pTwiddÀBRól
;

2177 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2178 } 
	t¨m_rf·_ö°™˚_q31
;

2180 
¨m_°©us
 
¨m_rf·_öô_q31
(

2181 
¨m_rf·_ö°™˚_q31
 * 
S
,

2182 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2183 
uöt32_t
 
f·LíRól
,

2184 
uöt32_t
 
if·FœgR
,

2185 
uöt32_t
 
bôRevî£Fœg
);

2187 
¨m_rf·_q31
(

2188 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

2189 
q31_t
 * 
pSrc
,

2190 
q31_t
 * 
pD°
);

2198 
uöt32_t
 
f·LíRól
;

2199 
uöt16_t
 
f·LíBy2
;

2200 
uöt8_t
 
if·FœgR
;

2201 
uöt8_t
 
bôRevî£FœgR
;

2202 
uöt32_t
 
twidC€fRModifõr
;

2203 
Êﬂt32_t
 *
pTwiddÀARól
;

2204 
Êﬂt32_t
 *
pTwiddÀBRól
;

2205 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2206 } 
	t¨m_rf·_ö°™˚_f32
;

2208 
¨m_°©us
 
¨m_rf·_öô_f32
(

2209 
¨m_rf·_ö°™˚_f32
 * 
S
,

2210 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2211 
uöt32_t
 
f·LíRól
,

2212 
uöt32_t
 
if·FœgR
,

2213 
uöt32_t
 
bôRevî£Fœg
);

2215 
¨m_rf·_f32
(

2216 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

2217 
Êﬂt32_t
 * 
pSrc
,

2218 
Êﬂt32_t
 * 
pD°
);

2226 
¨m_cf·_ö°™˚_f32
 
Söt
;

2227 
uöt16_t
 
f·LíRFFT
;

2228 
Êﬂt32_t
 * 
pTwiddÀRFFT
;

2229 } 
	t¨m_rf·_Á°_ö°™˚_f32
 ;

2231 
¨m_°©us
 
¨m_rf·_Á°_öô_f32
 (

2232 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

2233 
uöt16_t
 
f·Lí
);

2235 
¨m_rf·_Á°_f32
(

2236 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

2237 
Êﬂt32_t
 * 
p
, flﬂt32_à* 
pOut
,

2238 
uöt8_t
 
if·Fœg
);

2246 
uöt16_t
 
N
;

2247 
uöt16_t
 
Nby2
;

2248 
Êﬂt32_t
 
n‹mÆize
;

2249 
Êﬂt32_t
 *
pTwiddÀ
;

2250 
Êﬂt32_t
 *
pCosFa˘‹
;

2251 
¨m_rf·_ö°™˚_f32
 *
pRf·
;

2252 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2253 } 
	t¨m_d˘4_ö°™˚_f32
;

2266 
¨m_°©us
 
¨m_d˘4_öô_f32
(

2267 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2268 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

2269 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2270 
uöt16_t
 
N
,

2271 
uöt16_t
 
Nby2
,

2272 
Êﬂt32_t
 
n‹mÆize
);

2282 
¨m_d˘4_f32
(

2283 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2284 
Êﬂt32_t
 * 
pSèã
,

2285 
Êﬂt32_t
 * 
pI∆öeBuf„r
);

2293 
uöt16_t
 
N
;

2294 
uöt16_t
 
Nby2
;

2295 
q31_t
 
n‹mÆize
;

2296 
q31_t
 *
pTwiddÀ
;

2297 
q31_t
 *
pCosFa˘‹
;

2298 
¨m_rf·_ö°™˚_q31
 *
pRf·
;

2299 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2300 } 
	t¨m_d˘4_ö°™˚_q31
;

2313 
¨m_°©us
 
¨m_d˘4_öô_q31
(

2314 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2315 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

2316 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2317 
uöt16_t
 
N
,

2318 
uöt16_t
 
Nby2
,

2319 
q31_t
 
n‹mÆize
);

2329 
¨m_d˘4_q31
(

2330 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2331 
q31_t
 * 
pSèã
,

2332 
q31_t
 * 
pI∆öeBuf„r
);

2340 
uöt16_t
 
N
;

2341 
uöt16_t
 
Nby2
;

2342 
q15_t
 
n‹mÆize
;

2343 
q15_t
 *
pTwiddÀ
;

2344 
q15_t
 *
pCosFa˘‹
;

2345 
¨m_rf·_ö°™˚_q15
 *
pRf·
;

2346 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2347 } 
	t¨m_d˘4_ö°™˚_q15
;

2360 
¨m_°©us
 
¨m_d˘4_öô_q15
(

2361 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2362 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

2363 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2364 
uöt16_t
 
N
,

2365 
uöt16_t
 
Nby2
,

2366 
q15_t
 
n‹mÆize
);

2376 
¨m_d˘4_q15
(

2377 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2378 
q15_t
 * 
pSèã
,

2379 
q15_t
 * 
pI∆öeBuf„r
);

2390 
¨m_add_f32
(

2391 
Êﬂt32_t
 * 
pSrcA
,

2392 
Êﬂt32_t
 * 
pSrcB
,

2393 
Êﬂt32_t
 * 
pD°
,

2394 
uöt32_t
 
blockSize
);

2405 
¨m_add_q7
(

2406 
q7_t
 * 
pSrcA
,

2407 
q7_t
 * 
pSrcB
,

2408 
q7_t
 * 
pD°
,

2409 
uöt32_t
 
blockSize
);

2420 
¨m_add_q15
(

2421 
q15_t
 * 
pSrcA
,

2422 
q15_t
 * 
pSrcB
,

2423 
q15_t
 * 
pD°
,

2424 
uöt32_t
 
blockSize
);

2435 
¨m_add_q31
(

2436 
q31_t
 * 
pSrcA
,

2437 
q31_t
 * 
pSrcB
,

2438 
q31_t
 * 
pD°
,

2439 
uöt32_t
 
blockSize
);

2450 
¨m_sub_f32
(

2451 
Êﬂt32_t
 * 
pSrcA
,

2452 
Êﬂt32_t
 * 
pSrcB
,

2453 
Êﬂt32_t
 * 
pD°
,

2454 
uöt32_t
 
blockSize
);

2465 
¨m_sub_q7
(

2466 
q7_t
 * 
pSrcA
,

2467 
q7_t
 * 
pSrcB
,

2468 
q7_t
 * 
pD°
,

2469 
uöt32_t
 
blockSize
);

2480 
¨m_sub_q15
(

2481 
q15_t
 * 
pSrcA
,

2482 
q15_t
 * 
pSrcB
,

2483 
q15_t
 * 
pD°
,

2484 
uöt32_t
 
blockSize
);

2495 
¨m_sub_q31
(

2496 
q31_t
 * 
pSrcA
,

2497 
q31_t
 * 
pSrcB
,

2498 
q31_t
 * 
pD°
,

2499 
uöt32_t
 
blockSize
);

2510 
¨m_sˇÀ_f32
(

2511 
Êﬂt32_t
 * 
pSrc
,

2512 
Êﬂt32_t
 
sˇÀ
,

2513 
Êﬂt32_t
 * 
pD°
,

2514 
uöt32_t
 
blockSize
);

2526 
¨m_sˇÀ_q7
(

2527 
q7_t
 * 
pSrc
,

2528 
q7_t
 
sˇÀFø˘
,

2529 
öt8_t
 
shi·
,

2530 
q7_t
 * 
pD°
,

2531 
uöt32_t
 
blockSize
);

2543 
¨m_sˇÀ_q15
(

2544 
q15_t
 * 
pSrc
,

2545 
q15_t
 
sˇÀFø˘
,

2546 
öt8_t
 
shi·
,

2547 
q15_t
 * 
pD°
,

2548 
uöt32_t
 
blockSize
);

2560 
¨m_sˇÀ_q31
(

2561 
q31_t
 * 
pSrc
,

2562 
q31_t
 
sˇÀFø˘
,

2563 
öt8_t
 
shi·
,

2564 
q31_t
 * 
pD°
,

2565 
uöt32_t
 
blockSize
);

2575 
¨m_abs_q7
(

2576 
q7_t
 * 
pSrc
,

2577 
q7_t
 * 
pD°
,

2578 
uöt32_t
 
blockSize
);

2588 
¨m_abs_f32
(

2589 
Êﬂt32_t
 * 
pSrc
,

2590 
Êﬂt32_t
 * 
pD°
,

2591 
uöt32_t
 
blockSize
);

2601 
¨m_abs_q15
(

2602 
q15_t
 * 
pSrc
,

2603 
q15_t
 * 
pD°
,

2604 
uöt32_t
 
blockSize
);

2614 
¨m_abs_q31
(

2615 
q31_t
 * 
pSrc
,

2616 
q31_t
 * 
pD°
,

2617 
uöt32_t
 
blockSize
);

2628 
¨m_dŸ_¥od_f32
(

2629 
Êﬂt32_t
 * 
pSrcA
,

2630 
Êﬂt32_t
 * 
pSrcB
,

2631 
uöt32_t
 
blockSize
,

2632 
Êﬂt32_t
 * 
ªsu…
);

2643 
¨m_dŸ_¥od_q7
(

2644 
q7_t
 * 
pSrcA
,

2645 
q7_t
 * 
pSrcB
,

2646 
uöt32_t
 
blockSize
,

2647 
q31_t
 * 
ªsu…
);

2658 
¨m_dŸ_¥od_q15
(

2659 
q15_t
 * 
pSrcA
,

2660 
q15_t
 * 
pSrcB
,

2661 
uöt32_t
 
blockSize
,

2662 
q63_t
 * 
ªsu…
);

2673 
¨m_dŸ_¥od_q31
(

2674 
q31_t
 * 
pSrcA
,

2675 
q31_t
 * 
pSrcB
,

2676 
uöt32_t
 
blockSize
,

2677 
q63_t
 * 
ªsu…
);

2688 
¨m_shi·_q7
(

2689 
q7_t
 * 
pSrc
,

2690 
öt8_t
 
shi·Bôs
,

2691 
q7_t
 * 
pD°
,

2692 
uöt32_t
 
blockSize
);

2703 
¨m_shi·_q15
(

2704 
q15_t
 * 
pSrc
,

2705 
öt8_t
 
shi·Bôs
,

2706 
q15_t
 * 
pD°
,

2707 
uöt32_t
 
blockSize
);

2718 
¨m_shi·_q31
(

2719 
q31_t
 * 
pSrc
,

2720 
öt8_t
 
shi·Bôs
,

2721 
q31_t
 * 
pD°
,

2722 
uöt32_t
 
blockSize
);

2733 
¨m_off£t_f32
(

2734 
Êﬂt32_t
 * 
pSrc
,

2735 
Êﬂt32_t
 
off£t
,

2736 
Êﬂt32_t
 * 
pD°
,

2737 
uöt32_t
 
blockSize
);

2748 
¨m_off£t_q7
(

2749 
q7_t
 * 
pSrc
,

2750 
q7_t
 
off£t
,

2751 
q7_t
 * 
pD°
,

2752 
uöt32_t
 
blockSize
);

2763 
¨m_off£t_q15
(

2764 
q15_t
 * 
pSrc
,

2765 
q15_t
 
off£t
,

2766 
q15_t
 * 
pD°
,

2767 
uöt32_t
 
blockSize
);

2778 
¨m_off£t_q31
(

2779 
q31_t
 * 
pSrc
,

2780 
q31_t
 
off£t
,

2781 
q31_t
 * 
pD°
,

2782 
uöt32_t
 
blockSize
);

2792 
¨m_√g©e_f32
(

2793 
Êﬂt32_t
 * 
pSrc
,

2794 
Êﬂt32_t
 * 
pD°
,

2795 
uöt32_t
 
blockSize
);

2805 
¨m_√g©e_q7
(

2806 
q7_t
 * 
pSrc
,

2807 
q7_t
 * 
pD°
,

2808 
uöt32_t
 
blockSize
);

2818 
¨m_√g©e_q15
(

2819 
q15_t
 * 
pSrc
,

2820 
q15_t
 * 
pD°
,

2821 
uöt32_t
 
blockSize
);

2831 
¨m_√g©e_q31
(

2832 
q31_t
 * 
pSrc
,

2833 
q31_t
 * 
pD°
,

2834 
uöt32_t
 
blockSize
);

2842 
¨m_c›y_f32
(

2843 
Êﬂt32_t
 * 
pSrc
,

2844 
Êﬂt32_t
 * 
pD°
,

2845 
uöt32_t
 
blockSize
);

2854 
¨m_c›y_q7
(

2855 
q7_t
 * 
pSrc
,

2856 
q7_t
 * 
pD°
,

2857 
uöt32_t
 
blockSize
);

2866 
¨m_c›y_q15
(

2867 
q15_t
 * 
pSrc
,

2868 
q15_t
 * 
pD°
,

2869 
uöt32_t
 
blockSize
);

2878 
¨m_c›y_q31
(

2879 
q31_t
 * 
pSrc
,

2880 
q31_t
 * 
pD°
,

2881 
uöt32_t
 
blockSize
);

2889 
¨m_fûl_f32
(

2890 
Êﬂt32_t
 
vÆue
,

2891 
Êﬂt32_t
 * 
pD°
,

2892 
uöt32_t
 
blockSize
);

2901 
¨m_fûl_q7
(

2902 
q7_t
 
vÆue
,

2903 
q7_t
 * 
pD°
,

2904 
uöt32_t
 
blockSize
);

2913 
¨m_fûl_q15
(

2914 
q15_t
 
vÆue
,

2915 
q15_t
 * 
pD°
,

2916 
uöt32_t
 
blockSize
);

2925 
¨m_fûl_q31
(

2926 
q31_t
 
vÆue
,

2927 
q31_t
 * 
pD°
,

2928 
uöt32_t
 
blockSize
);

2940 
¨m_c⁄v_f32
(

2941 
Êﬂt32_t
 * 
pSrcA
,

2942 
uöt32_t
 
§cALí
,

2943 
Êﬂt32_t
 * 
pSrcB
,

2944 
uöt32_t
 
§cBLí
,

2945 
Êﬂt32_t
 * 
pD°
);

2961 
¨m_c⁄v_›t_q15
(

2962 
q15_t
 * 
pSrcA
,

2963 
uöt32_t
 
§cALí
,

2964 
q15_t
 * 
pSrcB
,

2965 
uöt32_t
 
§cBLí
,

2966 
q15_t
 * 
pD°
,

2967 
q15_t
 * 
pS¸©ch1
,

2968 
q15_t
 * 
pS¸©ch2
);

2981 
¨m_c⁄v_q15
(

2982 
q15_t
 * 
pSrcA
,

2983 
uöt32_t
 
§cALí
,

2984 
q15_t
 * 
pSrcB
,

2985 
uöt32_t
 
§cBLí
,

2986 
q15_t
 * 
pD°
);

2998 
¨m_c⁄v_Á°_q15
(

2999 
q15_t
 * 
pSrcA
,

3000 
uöt32_t
 
§cALí
,

3001 
q15_t
 * 
pSrcB
,

3002 
uöt32_t
 
§cBLí
,

3003 
q15_t
 * 
pD°
);

3017 
¨m_c⁄v_Á°_›t_q15
(

3018 
q15_t
 * 
pSrcA
,

3019 
uöt32_t
 
§cALí
,

3020 
q15_t
 * 
pSrcB
,

3021 
uöt32_t
 
§cBLí
,

3022 
q15_t
 * 
pD°
,

3023 
q15_t
 * 
pS¸©ch1
,

3024 
q15_t
 * 
pS¸©ch2
);

3038 
¨m_c⁄v_q31
(

3039 
q31_t
 * 
pSrcA
,

3040 
uöt32_t
 
§cALí
,

3041 
q31_t
 * 
pSrcB
,

3042 
uöt32_t
 
§cBLí
,

3043 
q31_t
 * 
pD°
);

3055 
¨m_c⁄v_Á°_q31
(

3056 
q31_t
 * 
pSrcA
,

3057 
uöt32_t
 
§cALí
,

3058 
q31_t
 * 
pSrcB
,

3059 
uöt32_t
 
§cBLí
,

3060 
q31_t
 * 
pD°
);

3075 
¨m_c⁄v_›t_q7
(

3076 
q7_t
 * 
pSrcA
,

3077 
uöt32_t
 
§cALí
,

3078 
q7_t
 * 
pSrcB
,

3079 
uöt32_t
 
§cBLí
,

3080 
q7_t
 * 
pD°
,

3081 
q15_t
 * 
pS¸©ch1
,

3082 
q15_t
 * 
pS¸©ch2
);

3096 
¨m_c⁄v_q7
(

3097 
q7_t
 * 
pSrcA
,

3098 
uöt32_t
 
§cALí
,

3099 
q7_t
 * 
pSrcB
,

3100 
uöt32_t
 
§cBLí
,

3101 
q7_t
 * 
pD°
);

3116 
¨m_°©us
 
¨m_c⁄v_∑πül_f32
(

3117 
Êﬂt32_t
 * 
pSrcA
,

3118 
uöt32_t
 
§cALí
,

3119 
Êﬂt32_t
 * 
pSrcB
,

3120 
uöt32_t
 
§cBLí
,

3121 
Êﬂt32_t
 * 
pD°
,

3122 
uöt32_t
 
fú°Index
,

3123 
uöt32_t
 
numPoöts
);

3139 
¨m_°©us
 
¨m_c⁄v_∑πül_›t_q15
(

3140 
q15_t
 * 
pSrcA
,

3141 
uöt32_t
 
§cALí
,

3142 
q15_t
 * 
pSrcB
,

3143 
uöt32_t
 
§cBLí
,

3144 
q15_t
 * 
pD°
,

3145 
uöt32_t
 
fú°Index
,

3146 
uöt32_t
 
numPoöts
,

3147 
q15_t
 * 
pS¸©ch1
,

3148 
q15_t
 * 
pS¸©ch2
);

3163 
¨m_°©us
 
¨m_c⁄v_∑πül_q15
(

3164 
q15_t
 * 
pSrcA
,

3165 
uöt32_t
 
§cALí
,

3166 
q15_t
 * 
pSrcB
,

3167 
uöt32_t
 
§cBLí
,

3168 
q15_t
 * 
pD°
,

3169 
uöt32_t
 
fú°Index
,

3170 
uöt32_t
 
numPoöts
);

3184 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q15
(

3185 
q15_t
 * 
pSrcA
,

3186 
uöt32_t
 
§cALí
,

3187 
q15_t
 * 
pSrcB
,

3188 
uöt32_t
 
§cBLí
,

3189 
q15_t
 * 
pD°
,

3190 
uöt32_t
 
fú°Index
,

3191 
uöt32_t
 
numPoöts
);

3208 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_›t_q15
(

3209 
q15_t
 * 
pSrcA
,

3210 
uöt32_t
 
§cALí
,

3211 
q15_t
 * 
pSrcB
,

3212 
uöt32_t
 
§cBLí
,

3213 
q15_t
 * 
pD°
,

3214 
uöt32_t
 
fú°Index
,

3215 
uöt32_t
 
numPoöts
,

3216 
q15_t
 * 
pS¸©ch1
,

3217 
q15_t
 * 
pS¸©ch2
);

3232 
¨m_°©us
 
¨m_c⁄v_∑πül_q31
(

3233 
q31_t
 * 
pSrcA
,

3234 
uöt32_t
 
§cALí
,

3235 
q31_t
 * 
pSrcB
,

3236 
uöt32_t
 
§cBLí
,

3237 
q31_t
 * 
pD°
,

3238 
uöt32_t
 
fú°Index
,

3239 
uöt32_t
 
numPoöts
);

3254 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q31
(

3255 
q31_t
 * 
pSrcA
,

3256 
uöt32_t
 
§cALí
,

3257 
q31_t
 * 
pSrcB
,

3258 
uöt32_t
 
§cBLí
,

3259 
q31_t
 * 
pD°
,

3260 
uöt32_t
 
fú°Index
,

3261 
uöt32_t
 
numPoöts
);

3278 
¨m_°©us
 
¨m_c⁄v_∑πül_›t_q7
(

3279 
q7_t
 * 
pSrcA
,

3280 
uöt32_t
 
§cALí
,

3281 
q7_t
 * 
pSrcB
,

3282 
uöt32_t
 
§cBLí
,

3283 
q7_t
 * 
pD°
,

3284 
uöt32_t
 
fú°Index
,

3285 
uöt32_t
 
numPoöts
,

3286 
q15_t
 * 
pS¸©ch1
,

3287 
q15_t
 * 
pS¸©ch2
);

3302 
¨m_°©us
 
¨m_c⁄v_∑πül_q7
(

3303 
q7_t
 * 
pSrcA
,

3304 
uöt32_t
 
§cALí
,

3305 
q7_t
 * 
pSrcB
,

3306 
uöt32_t
 
§cBLí
,

3307 
q7_t
 * 
pD°
,

3308 
uöt32_t
 
fú°Index
,

3309 
uöt32_t
 
numPoöts
);

3319 
uöt8_t
 
M
;

3320 
uöt16_t
 
numT≠s
;

3321 
q15_t
 *
pC€ffs
;

3322 
q15_t
 *
pSèã
;

3323 } 
	t¨m_fú_decim©e_ö°™˚_q15
;

3331 
uöt8_t
 
M
;

3332 
uöt16_t
 
numT≠s
;

3333 
q31_t
 *
pC€ffs
;

3334 
q31_t
 *
pSèã
;

3336 } 
	t¨m_fú_decim©e_ö°™˚_q31
;

3344 
uöt8_t
 
M
;

3345 
uöt16_t
 
numT≠s
;

3346 
Êﬂt32_t
 *
pC€ffs
;

3347 
Êﬂt32_t
 *
pSèã
;

3349 } 
	t¨m_fú_decim©e_ö°™˚_f32
;

3362 
¨m_fú_decim©e_f32
(

3363 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3364 
Êﬂt32_t
 * 
pSrc
,

3365 
Êﬂt32_t
 * 
pD°
,

3366 
uöt32_t
 
blockSize
);

3381 
¨m_°©us
 
¨m_fú_decim©e_öô_f32
(

3382 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3383 
uöt16_t
 
numT≠s
,

3384 
uöt8_t
 
M
,

3385 
Êﬂt32_t
 * 
pC€ffs
,

3386 
Êﬂt32_t
 * 
pSèã
,

3387 
uöt32_t
 
blockSize
);

3398 
¨m_fú_decim©e_q15
(

3399 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3400 
q15_t
 * 
pSrc
,

3401 
q15_t
 * 
pD°
,

3402 
uöt32_t
 
blockSize
);

3413 
¨m_fú_decim©e_Á°_q15
(

3414 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3415 
q15_t
 * 
pSrc
,

3416 
q15_t
 * 
pD°
,

3417 
uöt32_t
 
blockSize
);

3433 
¨m_°©us
 
¨m_fú_decim©e_öô_q15
(

3434 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3435 
uöt16_t
 
numT≠s
,

3436 
uöt8_t
 
M
,

3437 
q15_t
 * 
pC€ffs
,

3438 
q15_t
 * 
pSèã
,

3439 
uöt32_t
 
blockSize
);

3450 
¨m_fú_decim©e_q31
(

3451 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3452 
q31_t
 * 
pSrc
,

3453 
q31_t
 * 
pD°
,

3454 
uöt32_t
 
blockSize
);

3465 
¨m_fú_decim©e_Á°_q31
(

3466 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3467 
q31_t
 * 
pSrc
,

3468 
q31_t
 * 
pD°
,

3469 
uöt32_t
 
blockSize
);

3484 
¨m_°©us
 
¨m_fú_decim©e_öô_q31
(

3485 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3486 
uöt16_t
 
numT≠s
,

3487 
uöt8_t
 
M
,

3488 
q31_t
 * 
pC€ffs
,

3489 
q31_t
 * 
pSèã
,

3490 
uöt32_t
 
blockSize
);

3500 
uöt8_t
 
L
;

3501 
uöt16_t
 
pha£Lígth
;

3502 
q15_t
 *
pC€ffs
;

3503 
q15_t
 *
pSèã
;

3504 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q15
;

3512 
uöt8_t
 
L
;

3513 
uöt16_t
 
pha£Lígth
;

3514 
q31_t
 *
pC€ffs
;

3515 
q31_t
 *
pSèã
;

3516 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q31
;

3524 
uöt8_t
 
L
;

3525 
uöt16_t
 
pha£Lígth
;

3526 
Êﬂt32_t
 *
pC€ffs
;

3527 
Êﬂt32_t
 *
pSèã
;

3528 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_f32
;

3540 
¨m_fú_öãΩﬁ©e_q15
(

3541 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3542 
q15_t
 * 
pSrc
,

3543 
q15_t
 * 
pD°
,

3544 
uöt32_t
 
blockSize
);

3559 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q15
(

3560 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3561 
uöt8_t
 
L
,

3562 
uöt16_t
 
numT≠s
,

3563 
q15_t
 * 
pC€ffs
,

3564 
q15_t
 * 
pSèã
,

3565 
uöt32_t
 
blockSize
);

3576 
¨m_fú_öãΩﬁ©e_q31
(

3577 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3578 
q31_t
 * 
pSrc
,

3579 
q31_t
 * 
pD°
,

3580 
uöt32_t
 
blockSize
);

3594 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q31
(

3595 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3596 
uöt8_t
 
L
,

3597 
uöt16_t
 
numT≠s
,

3598 
q31_t
 * 
pC€ffs
,

3599 
q31_t
 * 
pSèã
,

3600 
uöt32_t
 
blockSize
);

3612 
¨m_fú_öãΩﬁ©e_f32
(

3613 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3614 
Êﬂt32_t
 * 
pSrc
,

3615 
Êﬂt32_t
 * 
pD°
,

3616 
uöt32_t
 
blockSize
);

3630 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_f32
(

3631 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3632 
uöt8_t
 
L
,

3633 
uöt16_t
 
numT≠s
,

3634 
Êﬂt32_t
 * 
pC€ffs
,

3635 
Êﬂt32_t
 * 
pSèã
,

3636 
uöt32_t
 
blockSize
);

3644 
uöt8_t
 
numSèges
;

3645 
q63_t
 *
pSèã
;

3646 
q31_t
 *
pC€ffs
;

3647 
uöt8_t
 
po°Shi·
;

3649 } 
	t¨m_biquad_ˇs_df1_32x64_ös_q31
;

3660 
¨m_biquad_ˇs_df1_32x64_q31
(

3661 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3662 
q31_t
 * 
pSrc
,

3663 
q31_t
 * 
pD°
,

3664 
uöt32_t
 
blockSize
);

3676 
¨m_biquad_ˇs_df1_32x64_öô_q31
(

3677 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3678 
uöt8_t
 
numSèges
,

3679 
q31_t
 * 
pC€ffs
,

3680 
q63_t
 * 
pSèã
,

3681 
uöt8_t
 
po°Shi·
);

3691 
uöt8_t
 
numSèges
;

3692 
Êﬂt32_t
 *
pSèã
;

3693 
Êﬂt32_t
 *
pC€ffs
;

3694 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
;

3706 
¨m_biquad_ˇsˇde_df2T_f32
(

3707 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3708 
Êﬂt32_t
 * 
pSrc
,

3709 
Êﬂt32_t
 * 
pD°
,

3710 
uöt32_t
 
blockSize
);

3722 
¨m_biquad_ˇsˇde_df2T_öô_f32
(

3723 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3724 
uöt8_t
 
numSèges
,

3725 
Êﬂt32_t
 * 
pC€ffs
,

3726 
Êﬂt32_t
 * 
pSèã
);

3736 
uöt16_t
 
numSèges
;

3737 
q15_t
 *
pSèã
;

3738 
q15_t
 *
pC€ffs
;

3739 } 
	t¨m_fú_œâi˚_ö°™˚_q15
;

3747 
uöt16_t
 
numSèges
;

3748 
q31_t
 *
pSèã
;

3749 
q31_t
 *
pC€ffs
;

3750 } 
	t¨m_fú_œâi˚_ö°™˚_q31
;

3758 
uöt16_t
 
numSèges
;

3759 
Êﬂt32_t
 *
pSèã
;

3760 
Êﬂt32_t
 *
pC€ffs
;

3761 } 
	t¨m_fú_œâi˚_ö°™˚_f32
;

3772 
¨m_fú_œâi˚_öô_q15
(

3773 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3774 
uöt16_t
 
numSèges
,

3775 
q15_t
 * 
pC€ffs
,

3776 
q15_t
 * 
pSèã
);

3787 
¨m_fú_œâi˚_q15
(

3788 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3789 
q15_t
 * 
pSrc
,

3790 
q15_t
 * 
pD°
,

3791 
uöt32_t
 
blockSize
);

3802 
¨m_fú_œâi˚_öô_q31
(

3803 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3804 
uöt16_t
 
numSèges
,

3805 
q31_t
 * 
pC€ffs
,

3806 
q31_t
 * 
pSèã
);

3818 
¨m_fú_œâi˚_q31
(

3819 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3820 
q31_t
 * 
pSrc
,

3821 
q31_t
 * 
pD°
,

3822 
uöt32_t
 
blockSize
);

3833 
¨m_fú_œâi˚_öô_f32
(

3834 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3835 
uöt16_t
 
numSèges
,

3836 
Êﬂt32_t
 * 
pC€ffs
,

3837 
Êﬂt32_t
 * 
pSèã
);

3848 
¨m_fú_œâi˚_f32
(

3849 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3850 
Êﬂt32_t
 * 
pSrc
,

3851 
Êﬂt32_t
 * 
pD°
,

3852 
uöt32_t
 
blockSize
);

3859 
uöt16_t
 
numSèges
;

3860 
q15_t
 *
pSèã
;

3861 
q15_t
 *
pkC€ffs
;

3862 
q15_t
 *
pvC€ffs
;

3863 } 
	t¨m_iú_œâi˚_ö°™˚_q15
;

3870 
uöt16_t
 
numSèges
;

3871 
q31_t
 *
pSèã
;

3872 
q31_t
 *
pkC€ffs
;

3873 
q31_t
 *
pvC€ffs
;

3874 } 
	t¨m_iú_œâi˚_ö°™˚_q31
;

3881 
uöt16_t
 
numSèges
;

3882 
Êﬂt32_t
 *
pSèã
;

3883 
Êﬂt32_t
 *
pkC€ffs
;

3884 
Êﬂt32_t
 *
pvC€ffs
;

3885 } 
	t¨m_iú_œâi˚_ö°™˚_f32
;

3896 
¨m_iú_œâi˚_f32
(

3897 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3898 
Êﬂt32_t
 * 
pSrc
,

3899 
Êﬂt32_t
 * 
pD°
,

3900 
uöt32_t
 
blockSize
);

3913 
¨m_iú_œâi˚_öô_f32
(

3914 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3915 
uöt16_t
 
numSèges
,

3916 
Êﬂt32_t
 * 
pkC€ffs
,

3917 
Êﬂt32_t
 * 
pvC€ffs
,

3918 
Êﬂt32_t
 * 
pSèã
,

3919 
uöt32_t
 
blockSize
);

3931 
¨m_iú_œâi˚_q31
(

3932 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3933 
q31_t
 * 
pSrc
,

3934 
q31_t
 * 
pD°
,

3935 
uöt32_t
 
blockSize
);

3949 
¨m_iú_œâi˚_öô_q31
(

3950 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3951 
uöt16_t
 
numSèges
,

3952 
q31_t
 * 
pkC€ffs
,

3953 
q31_t
 * 
pvC€ffs
,

3954 
q31_t
 * 
pSèã
,

3955 
uöt32_t
 
blockSize
);

3967 
¨m_iú_œâi˚_q15
(

3968 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3969 
q15_t
 * 
pSrc
,

3970 
q15_t
 * 
pD°
,

3971 
uöt32_t
 
blockSize
);

3985 
¨m_iú_œâi˚_öô_q15
(

3986 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3987 
uöt16_t
 
numSèges
,

3988 
q15_t
 * 
pkC€ffs
,

3989 
q15_t
 * 
pvC€ffs
,

3990 
q15_t
 * 
pSèã
,

3991 
uöt32_t
 
blockSize
);

3999 
uöt16_t
 
numT≠s
;

4000 
Êﬂt32_t
 *
pSèã
;

4001 
Êﬂt32_t
 *
pC€ffs
;

4002 
Êﬂt32_t
 
mu
;

4003 } 
	t¨m_lms_ö°™˚_f32
;

4016 
¨m_lms_f32
(

4017 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

4018 
Êﬂt32_t
 * 
pSrc
,

4019 
Êﬂt32_t
 * 
pRef
,

4020 
Êﬂt32_t
 * 
pOut
,

4021 
Êﬂt32_t
 * 
pEº
,

4022 
uöt32_t
 
blockSize
);

4035 
¨m_lms_öô_f32
(

4036 
¨m_lms_ö°™˚_f32
 * 
S
,

4037 
uöt16_t
 
numT≠s
,

4038 
Êﬂt32_t
 * 
pC€ffs
,

4039 
Êﬂt32_t
 * 
pSèã
,

4040 
Êﬂt32_t
 
mu
,

4041 
uöt32_t
 
blockSize
);

4049 
uöt16_t
 
numT≠s
;

4050 
q15_t
 *
pSèã
;

4051 
q15_t
 *
pC€ffs
;

4052 
q15_t
 
mu
;

4053 
uöt32_t
 
po°Shi·
;

4054 } 
	t¨m_lms_ö°™˚_q15
;

4069 
¨m_lms_öô_q15
(

4070 
¨m_lms_ö°™˚_q15
 * 
S
,

4071 
uöt16_t
 
numT≠s
,

4072 
q15_t
 * 
pC€ffs
,

4073 
q15_t
 * 
pSèã
,

4074 
q15_t
 
mu
,

4075 
uöt32_t
 
blockSize
,

4076 
uöt32_t
 
po°Shi·
);

4089 
¨m_lms_q15
(

4090 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

4091 
q15_t
 * 
pSrc
,

4092 
q15_t
 * 
pRef
,

4093 
q15_t
 * 
pOut
,

4094 
q15_t
 * 
pEº
,

4095 
uöt32_t
 
blockSize
);

4104 
uöt16_t
 
numT≠s
;

4105 
q31_t
 *
pSèã
;

4106 
q31_t
 *
pC€ffs
;

4107 
q31_t
 
mu
;

4108 
uöt32_t
 
po°Shi·
;

4110 } 
	t¨m_lms_ö°™˚_q31
;

4123 
¨m_lms_q31
(

4124 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

4125 
q31_t
 * 
pSrc
,

4126 
q31_t
 * 
pRef
,

4127 
q31_t
 * 
pOut
,

4128 
q31_t
 * 
pEº
,

4129 
uöt32_t
 
blockSize
);

4143 
¨m_lms_öô_q31
(

4144 
¨m_lms_ö°™˚_q31
 * 
S
,

4145 
uöt16_t
 
numT≠s
,

4146 
q31_t
 * 
pC€ffs
,

4147 
q31_t
 * 
pSèã
,

4148 
q31_t
 
mu
,

4149 
uöt32_t
 
blockSize
,

4150 
uöt32_t
 
po°Shi·
);

4158 
uöt16_t
 
numT≠s
;

4159 
Êﬂt32_t
 *
pSèã
;

4160 
Êﬂt32_t
 *
pC€ffs
;

4161 
Êﬂt32_t
 
mu
;

4162 
Êﬂt32_t
 
íîgy
;

4163 
Êﬂt32_t
 
x0
;

4164 } 
	t¨m_lms_n‹m_ö°™˚_f32
;

4177 
¨m_lms_n‹m_f32
(

4178 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4179 
Êﬂt32_t
 * 
pSrc
,

4180 
Êﬂt32_t
 * 
pRef
,

4181 
Êﬂt32_t
 * 
pOut
,

4182 
Êﬂt32_t
 * 
pEº
,

4183 
uöt32_t
 
blockSize
);

4196 
¨m_lms_n‹m_öô_f32
(

4197 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4198 
uöt16_t
 
numT≠s
,

4199 
Êﬂt32_t
 * 
pC€ffs
,

4200 
Êﬂt32_t
 * 
pSèã
,

4201 
Êﬂt32_t
 
mu
,

4202 
uöt32_t
 
blockSize
);

4210 
uöt16_t
 
numT≠s
;

4211 
q31_t
 *
pSèã
;

4212 
q31_t
 *
pC€ffs
;

4213 
q31_t
 
mu
;

4214 
uöt8_t
 
po°Shi·
;

4215 
q31_t
 *
ªcùTabÀ
;

4216 
q31_t
 
íîgy
;

4217 
q31_t
 
x0
;

4218 } 
	t¨m_lms_n‹m_ö°™˚_q31
;

4231 
¨m_lms_n‹m_q31
(

4232 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4233 
q31_t
 * 
pSrc
,

4234 
q31_t
 * 
pRef
,

4235 
q31_t
 * 
pOut
,

4236 
q31_t
 * 
pEº
,

4237 
uöt32_t
 
blockSize
);

4251 
¨m_lms_n‹m_öô_q31
(

4252 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4253 
uöt16_t
 
numT≠s
,

4254 
q31_t
 * 
pC€ffs
,

4255 
q31_t
 * 
pSèã
,

4256 
q31_t
 
mu
,

4257 
uöt32_t
 
blockSize
,

4258 
uöt8_t
 
po°Shi·
);

4266 
uöt16_t
 
numT≠s
;

4267 
q15_t
 *
pSèã
;

4268 
q15_t
 *
pC€ffs
;

4269 
q15_t
 
mu
;

4270 
uöt8_t
 
po°Shi·
;

4271 
q15_t
 *
ªcùTabÀ
;

4272 
q15_t
 
íîgy
;

4273 
q15_t
 
x0
;

4274 } 
	t¨m_lms_n‹m_ö°™˚_q15
;

4287 
¨m_lms_n‹m_q15
(

4288 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4289 
q15_t
 * 
pSrc
,

4290 
q15_t
 * 
pRef
,

4291 
q15_t
 * 
pOut
,

4292 
q15_t
 * 
pEº
,

4293 
uöt32_t
 
blockSize
);

4308 
¨m_lms_n‹m_öô_q15
(

4309 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4310 
uöt16_t
 
numT≠s
,

4311 
q15_t
 * 
pC€ffs
,

4312 
q15_t
 * 
pSèã
,

4313 
q15_t
 
mu
,

4314 
uöt32_t
 
blockSize
,

4315 
uöt8_t
 
po°Shi·
);

4327 
¨m_c‹ªœã_f32
(

4328 
Êﬂt32_t
 * 
pSrcA
,

4329 
uöt32_t
 
§cALí
,

4330 
Êﬂt32_t
 * 
pSrcB
,

4331 
uöt32_t
 
§cBLí
,

4332 
Êﬂt32_t
 * 
pD°
);

4345 
¨m_c‹ªœã_›t_q15
(

4346 
q15_t
 * 
pSrcA
,

4347 
uöt32_t
 
§cALí
,

4348 
q15_t
 * 
pSrcB
,

4349 
uöt32_t
 
§cBLí
,

4350 
q15_t
 * 
pD°
,

4351 
q15_t
 * 
pS¸©ch
);

4364 
¨m_c‹ªœã_q15
(

4365 
q15_t
 * 
pSrcA
,

4366 
uöt32_t
 
§cALí
,

4367 
q15_t
 * 
pSrcB
,

4368 
uöt32_t
 
§cBLí
,

4369 
q15_t
 * 
pD°
);

4381 
¨m_c‹ªœã_Á°_q15
(

4382 
q15_t
 * 
pSrcA
,

4383 
uöt32_t
 
§cALí
,

4384 
q15_t
 * 
pSrcB
,

4385 
uöt32_t
 
§cBLí
,

4386 
q15_t
 * 
pD°
);

4401 
¨m_c‹ªœã_Á°_›t_q15
(

4402 
q15_t
 * 
pSrcA
,

4403 
uöt32_t
 
§cALí
,

4404 
q15_t
 * 
pSrcB
,

4405 
uöt32_t
 
§cBLí
,

4406 
q15_t
 * 
pD°
,

4407 
q15_t
 * 
pS¸©ch
);

4419 
¨m_c‹ªœã_q31
(

4420 
q31_t
 * 
pSrcA
,

4421 
uöt32_t
 
§cALí
,

4422 
q31_t
 * 
pSrcB
,

4423 
uöt32_t
 
§cBLí
,

4424 
q31_t
 * 
pD°
);

4436 
¨m_c‹ªœã_Á°_q31
(

4437 
q31_t
 * 
pSrcA
,

4438 
uöt32_t
 
§cALí
,

4439 
q31_t
 * 
pSrcB
,

4440 
uöt32_t
 
§cBLí
,

4441 
q31_t
 * 
pD°
);

4457 
¨m_c‹ªœã_›t_q7
(

4458 
q7_t
 * 
pSrcA
,

4459 
uöt32_t
 
§cALí
,

4460 
q7_t
 * 
pSrcB
,

4461 
uöt32_t
 
§cBLí
,

4462 
q7_t
 * 
pD°
,

4463 
q15_t
 * 
pS¸©ch1
,

4464 
q15_t
 * 
pS¸©ch2
);

4477 
¨m_c‹ªœã_q7
(

4478 
q7_t
 * 
pSrcA
,

4479 
uöt32_t
 
§cALí
,

4480 
q7_t
 * 
pSrcB
,

4481 
uöt32_t
 
§cBLí
,

4482 
q7_t
 * 
pD°
);

4490 
uöt16_t
 
numT≠s
;

4491 
uöt16_t
 
°©eIndex
;

4492 
Êﬂt32_t
 *
pSèã
;

4493 
Êﬂt32_t
 *
pC€ffs
;

4494 
uöt16_t
 
maxDñay
;

4495 
öt32_t
 *
pT≠Dñay
;

4496 } 
	t¨m_fú_•¨£_ö°™˚_f32
;

4504 
uöt16_t
 
numT≠s
;

4505 
uöt16_t
 
°©eIndex
;

4506 
q31_t
 *
pSèã
;

4507 
q31_t
 *
pC€ffs
;

4508 
uöt16_t
 
maxDñay
;

4509 
öt32_t
 *
pT≠Dñay
;

4510 } 
	t¨m_fú_•¨£_ö°™˚_q31
;

4518 
uöt16_t
 
numT≠s
;

4519 
uöt16_t
 
°©eIndex
;

4520 
q15_t
 *
pSèã
;

4521 
q15_t
 *
pC€ffs
;

4522 
uöt16_t
 
maxDñay
;

4523 
öt32_t
 *
pT≠Dñay
;

4524 } 
	t¨m_fú_•¨£_ö°™˚_q15
;

4532 
uöt16_t
 
numT≠s
;

4533 
uöt16_t
 
°©eIndex
;

4534 
q7_t
 *
pSèã
;

4535 
q7_t
 *
pC€ffs
;

4536 
uöt16_t
 
maxDñay
;

4537 
öt32_t
 *
pT≠Dñay
;

4538 } 
	t¨m_fú_•¨£_ö°™˚_q7
;

4550 
¨m_fú_•¨£_f32
(

4551 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4552 
Êﬂt32_t
 * 
pSrc
,

4553 
Êﬂt32_t
 * 
pD°
,

4554 
Êﬂt32_t
 * 
pS¸©chIn
,

4555 
uöt32_t
 
blockSize
);

4569 
¨m_fú_•¨£_öô_f32
(

4570 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4571 
uöt16_t
 
numT≠s
,

4572 
Êﬂt32_t
 * 
pC€ffs
,

4573 
Êﬂt32_t
 * 
pSèã
,

4574 
öt32_t
 * 
pT≠Dñay
,

4575 
uöt16_t
 
maxDñay
,

4576 
uöt32_t
 
blockSize
);

4588 
¨m_fú_•¨£_q31
(

4589 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4590 
q31_t
 * 
pSrc
,

4591 
q31_t
 * 
pD°
,

4592 
q31_t
 * 
pS¸©chIn
,

4593 
uöt32_t
 
blockSize
);

4607 
¨m_fú_•¨£_öô_q31
(

4608 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4609 
uöt16_t
 
numT≠s
,

4610 
q31_t
 * 
pC€ffs
,

4611 
q31_t
 * 
pSèã
,

4612 
öt32_t
 * 
pT≠Dñay
,

4613 
uöt16_t
 
maxDñay
,

4614 
uöt32_t
 
blockSize
);

4627 
¨m_fú_•¨£_q15
(

4628 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4629 
q15_t
 * 
pSrc
,

4630 
q15_t
 * 
pD°
,

4631 
q15_t
 * 
pS¸©chIn
,

4632 
q31_t
 * 
pS¸©chOut
,

4633 
uöt32_t
 
blockSize
);

4648 
¨m_fú_•¨£_öô_q15
(

4649 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4650 
uöt16_t
 
numT≠s
,

4651 
q15_t
 * 
pC€ffs
,

4652 
q15_t
 * 
pSèã
,

4653 
öt32_t
 * 
pT≠Dñay
,

4654 
uöt16_t
 
maxDñay
,

4655 
uöt32_t
 
blockSize
);

4668 
¨m_fú_•¨£_q7
(

4669 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4670 
q7_t
 * 
pSrc
,

4671 
q7_t
 * 
pD°
,

4672 
q7_t
 * 
pS¸©chIn
,

4673 
q31_t
 * 
pS¸©chOut
,

4674 
uöt32_t
 
blockSize
);

4688 
¨m_fú_•¨£_öô_q7
(

4689 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4690 
uöt16_t
 
numT≠s
,

4691 
q7_t
 * 
pC€ffs
,

4692 
q7_t
 * 
pSèã
,

4693 
öt32_t
 * 
pT≠Dñay
,

4694 
uöt16_t
 
maxDñay
,

4695 
uöt32_t
 
blockSize
);

4706 
¨m_sö_cos_f32
(

4707 
Êﬂt32_t
 
thëa
,

4708 
Êﬂt32_t
 * 
pSöVÆ
,

4709 
Êﬂt32_t
 * 
pCcosVÆ
);

4719 
¨m_sö_cos_q31
(

4720 
q31_t
 
thëa
,

4721 
q31_t
 * 
pSöVÆ
,

4722 
q31_t
 * 
pCosVÆ
);

4733 
¨m_cm∂x_c⁄j_f32
(

4734 
Êﬂt32_t
 * 
pSrc
,

4735 
Êﬂt32_t
 * 
pD°
,

4736 
uöt32_t
 
numSam∂es
);

4746 
¨m_cm∂x_c⁄j_q31
(

4747 
q31_t
 * 
pSrc
,

4748 
q31_t
 * 
pD°
,

4749 
uöt32_t
 
numSam∂es
);

4759 
¨m_cm∂x_c⁄j_q15
(

4760 
q15_t
 * 
pSrc
,

4761 
q15_t
 * 
pD°
,

4762 
uöt32_t
 
numSam∂es
);

4774 
¨m_cm∂x_mag_squ¨ed_f32
(

4775 
Êﬂt32_t
 * 
pSrc
,

4776 
Êﬂt32_t
 * 
pD°
,

4777 
uöt32_t
 
numSam∂es
);

4787 
¨m_cm∂x_mag_squ¨ed_q31
(

4788 
q31_t
 * 
pSrc
,

4789 
q31_t
 * 
pD°
,

4790 
uöt32_t
 
numSam∂es
);

4800 
¨m_cm∂x_mag_squ¨ed_q15
(

4801 
q15_t
 * 
pSrc
,

4802 
q15_t
 * 
pD°
,

4803 
uöt32_t
 
numSam∂es
);

4880 
__INLINE
 
Êﬂt32_t
 
¨m_pid_f32
(

4881 
¨m_pid_ö°™˚_f32
 * 
S
,

4882 
Êﬂt32_t
 
ö
)

4884 
Êﬂt32_t
 
out
;

4887 
out
 = (
S
->
A0
 * 
ö
) +

4888 (
S
->
A1
 * S->
°©e
[0]Ë+ (S->
A2
 * S->state[1]) + (S->state[2]);

4891 
S
->
°©e
[1] = S->state[0];

4892 
S
->
°©e
[0] = 
ö
;

4893 
S
->
°©e
[2] = 
out
;

4896  (
out
);

4915 
__INLINE
 
q31_t
 
¨m_pid_q31
(

4916 
¨m_pid_ö°™˚_q31
 * 
S
,

4917 
q31_t
 
ö
)

4919 
q63_t
 
acc
;

4920 
q31_t
 
out
;

4923 
acc
 = (
q63_t
Ë
S
->
A0
 * 
ö
;

4926 
acc
 +(
q63_t
Ë
S
->
A1
 * S->
°©e
[0];

4929 
acc
 +(
q63_t
Ë
S
->
A2
 * S->
°©e
[1];

4932 
out
 = (
q31_t
Ë(
acc
 >> 31u);

4935 
out
 +
S
->
°©e
[2];

4938 
S
->
°©e
[1] = S->state[0];

4939 
S
->
°©e
[0] = 
ö
;

4940 
S
->
°©e
[2] = 
out
;

4943  (
out
);

4963 
__INLINE
 
q15_t
 
¨m_pid_q15
(

4964 
¨m_pid_ö°™˚_q15
 * 
S
,

4965 
q15_t
 
ö
)

4967 
q63_t
 
acc
;

4968 
q15_t
 
out
;

4970 #i‚de‡
ARM_MATH_CM0_FAMILY


4971 
__SIMD32_TYPE
 *
v°©e
;

4976 
acc
 = (
q31_t
Ë
__SMUAD
(
S
->
A0
, 
ö
);

4979 
v°©e
 = 
__SIMD32_CONST
(
S
->
°©e
);

4980 
acc
 = 
__SMLALD
(
S
->
A1
, (
q31_t
Ë*
v°©e
,ácc);

4984 
acc
 = ((
q31_t
Ë
S
->
A0
Ë* 
ö
;

4987 
acc
 +(
q31_t
Ë
S
->
A1
 * S->
°©e
[0];

4988 
acc
 +(
q31_t
Ë
S
->
A2
 * S->
°©e
[1];

4993 
acc
 +(
q31_t
Ë
S
->
°©e
[2] << 15;

4996 
out
 = (
q15_t
Ë(
__SSAT
((
acc
 >> 15), 16));

4999 
S
->
°©e
[1] = S->state[0];

5000 
S
->
°©e
[0] = 
ö
;

5001 
S
->
°©e
[2] = 
out
;

5004  (
out
);

5021 
¨m_°©us
 
¨m_m©_övî£_f32
(

5022 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
§c
,

5023 
¨m_m©rix_ö°™˚_f32
 * 
d°
);

5069 
__INLINE
 
¨m_˛¨ke_f32
(

5070 
Êﬂt32_t
 
Ia
,

5071 
Êﬂt32_t
 
Ib
,

5072 
Êﬂt32_t
 * 
pIÆpha
,

5073 
Êﬂt32_t
 * 
pIbëa
)

5076 *
pIÆpha
 = 
Ia
;

5079 *
pIbëa
 =

5080 ((
Êﬂt32_t
Ë0.57735026919 * 
Ia
 + (Êﬂt32_tË1.15470053838 * 
Ib
);

5099 
__INLINE
 
¨m_˛¨ke_q31
(

5100 
q31_t
 
Ia
,

5101 
q31_t
 
Ib
,

5102 
q31_t
 * 
pIÆpha
,

5103 
q31_t
 * 
pIbëa
)

5105 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5108 *
pIÆpha
 = 
Ia
;

5111 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë
Ia
 * 0x24F34E8B) >> 30);

5114 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë
Ib
 * 0x49E69D16) >> 30);

5117 *
pIbëa
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5131 
¨m_q7_to_q31
(

5132 
q7_t
 * 
pSrc
,

5133 
q31_t
 * 
pD°
,

5134 
uöt32_t
 
blockSize
);

5174 
__INLINE
 
¨m_öv_˛¨ke_f32
(

5175 
Êﬂt32_t
 
IÆpha
,

5176 
Êﬂt32_t
 
Ibëa
,

5177 
Êﬂt32_t
 * 
pIa
,

5178 
Êﬂt32_t
 * 
pIb
)

5181 *
pIa
 = 
IÆpha
;

5184 *
pIb
 = -0.5 * 
IÆpha
 + (
Êﬂt32_t
Ë0.8660254039 *
Ibëa
;

5203 
__INLINE
 
¨m_öv_˛¨ke_q31
(

5204 
q31_t
 
IÆpha
,

5205 
q31_t
 
Ibëa
,

5206 
q31_t
 * 
pIa
,

5207 
q31_t
 * 
pIb
)

5209 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5212 *
pIa
 = 
IÆpha
;

5215 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
) * (0x40000000)) >> 31);

5218 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
) * (0x6ED9EBA1)) >> 31);

5221 *
pIb
 = 
__QSUB
(
¥odu˘2
, 
¥odu˘1
);

5236 
¨m_q7_to_q15
(

5237 
q7_t
 * 
pSrc
,

5238 
q15_t
 * 
pD°
,

5239 
uöt32_t
 
blockSize
);

5290 
__INLINE
 
¨m_∑rk_f32
(

5291 
Êﬂt32_t
 
IÆpha
,

5292 
Êﬂt32_t
 
Ibëa
,

5293 
Êﬂt32_t
 * 
pId
,

5294 
Êﬂt32_t
 * 
pIq
,

5295 
Êﬂt32_t
 
söVÆ
,

5296 
Êﬂt32_t
 
cosVÆ
)

5299 *
pId
 = 
IÆpha
 * 
cosVÆ
 + 
Ibëa
 * 
söVÆ
;

5302 *
pIq
 = -
IÆpha
 * 
söVÆ
 + 
Ibëa
 * 
cosVÆ
;

5324 
__INLINE
 
¨m_∑rk_q31
(

5325 
q31_t
 
IÆpha
,

5326 
q31_t
 
Ibëa
,

5327 
q31_t
 * 
pId
,

5328 
q31_t
 * 
pIq
,

5329 
q31_t
 
söVÆ
,

5330 
q31_t
 
cosVÆ
)

5332 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5333 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5336 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
cosVÆ
)) >> 31);

5339 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
söVÆ
)) >> 31);

5343 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
söVÆ
)) >> 31);

5346 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
cosVÆ
)) >> 31);

5349 *
pId
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5352 *
pIq
 = 
__QSUB
(
¥odu˘4
, 
¥odu˘3
);

5366 
¨m_q7_to_Êﬂt
(

5367 
q7_t
 * 
pSrc
,

5368 
Êﬂt32_t
 * 
pD°
,

5369 
uöt32_t
 
blockSize
);

5409 
__INLINE
 
¨m_öv_∑rk_f32
(

5410 
Êﬂt32_t
 
Id
,

5411 
Êﬂt32_t
 
Iq
,

5412 
Êﬂt32_t
 * 
pIÆpha
,

5413 
Êﬂt32_t
 * 
pIbëa
,

5414 
Êﬂt32_t
 
söVÆ
,

5415 
Êﬂt32_t
 
cosVÆ
)

5418 *
pIÆpha
 = 
Id
 * 
cosVÆ
 - 
Iq
 * 
söVÆ
;

5421 *
pIbëa
 = 
Id
 * 
söVÆ
 + 
Iq
 * 
cosVÆ
;

5444 
__INLINE
 
¨m_öv_∑rk_q31
(

5445 
q31_t
 
Id
,

5446 
q31_t
 
Iq
,

5447 
q31_t
 * 
pIÆpha
,

5448 
q31_t
 * 
pIbëa
,

5449 
q31_t
 
söVÆ
,

5450 
q31_t
 
cosVÆ
)

5452 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5453 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5456 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
cosVÆ
)) >> 31);

5459 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
söVÆ
)) >> 31);

5463 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
söVÆ
)) >> 31);

5466 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
cosVÆ
)) >> 31);

5469 *
pIÆpha
 = 
__QSUB
(
¥odu˘1
, 
¥odu˘2
);

5472 *
pIbëa
 = 
__QADD
(
¥odu˘4
, 
¥odu˘3
);

5488 
¨m_q31_to_Êﬂt
(

5489 
q31_t
 * 
pSrc
,

5490 
Êﬂt32_t
 * 
pD°
,

5491 
uöt32_t
 
blockSize
);

5542 
__INLINE
 
Êﬂt32_t
 
¨m_löór_öãΩ_f32
(

5543 
¨m_löór_öãΩ_ö°™˚_f32
 * 
S
,

5544 
Êﬂt32_t
 
x
)

5547 
Êﬂt32_t
 
y
;

5548 
Êﬂt32_t
 
x0
, 
x1
;

5549 
Êﬂt32_t
 
y0
, 
y1
;

5550 
Êﬂt32_t
 
xS∑cög
 = 
S
->xSpacing;

5551 
öt32_t
 
i
;

5552 
Êﬂt32_t
 *
pYD©a
 = 
S
->pYData;

5555 
i
 = (
öt32_t
Ë((
x
 - 
S
->
x1
Ë/ 
xS∑cög
);

5557 if(
i
 < 0)

5560 
y
 = 
pYD©a
[0];

5562 if((
uöt32_t
)
i
 >
S
->
nVÆues
)

5565 
y
 = 
pYD©a
[
S
->
nVÆues
 - 1];

5570 
x0
 = 
S
->
x1
 + 
i
 * 
xS∑cög
;

5571 
x1
 = 
S
->x1 + (
i
 + 1Ë* 
xS∑cög
;

5574 
y0
 = 
pYD©a
[
i
];

5575 
y1
 = 
pYD©a
[
i
 + 1];

5578 
y
 = 
y0
 + (
x
 - 
x0
Ë* ((
y1
 - y0Ë/ (
x1
 - x0));

5583  (
y
);

5601 
__INLINE
 
q31_t
 
¨m_löór_öãΩ_q31
(

5602 
q31_t
 * 
pYD©a
,

5603 
q31_t
 
x
,

5604 
uöt32_t
 
nVÆues
)

5606 
q31_t
 
y
;

5607 
q31_t
 
y0
, 
y1
;

5608 
q31_t
 
‰a˘
;

5609 
öt32_t
 
ödex
;

5614 
ödex
 = ((
x
 & 0xFFF00000) >> 20);

5616 if(
ödex
 >(
öt32_t
)(
nVÆues
 - 1))

5618  (
pYD©a
[
nVÆues
 - 1]);

5620 if(
ödex
 < 0)

5622  (
pYD©a
[0]);

5629 
‰a˘
 = (
x
 & 0x000FFFFF) << 11;

5632 
y0
 = 
pYD©a
[
ödex
];

5633 
y1
 = 
pYD©a
[
ödex
 + 1u];

5636 
y
 = ((
q31_t
Ë((
q63_t
Ë
y0
 * (0x7FFFFFFF - 
‰a˘
) >> 32));

5639 
y
 +((
q31_t
Ë(((
q63_t
Ë
y1
 * 
‰a˘
) >> 32));

5642  (
y
 << 1u);

5663 
__INLINE
 
q15_t
 
¨m_löór_öãΩ_q15
(

5664 
q15_t
 * 
pYD©a
,

5665 
q31_t
 
x
,

5666 
uöt32_t
 
nVÆues
)

5668 
q63_t
 
y
;

5669 
q15_t
 
y0
, 
y1
;

5670 
q31_t
 
‰a˘
;

5671 
öt32_t
 
ödex
;

5676 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5678 if(
ödex
 >(
öt32_t
)(
nVÆues
 - 1))

5680  (
pYD©a
[
nVÆues
 - 1]);

5682 if(
ödex
 < 0)

5684  (
pYD©a
[0]);

5690 
‰a˘
 = (
x
 & 0x000FFFFF);

5693 
y0
 = 
pYD©a
[
ödex
];

5694 
y1
 = 
pYD©a
[
ödex
 + 1u];

5697 
y
 = ((
q63_t
Ë
y0
 * (0xFFFFF - 
‰a˘
));

5700 
y
 +((
q63_t
Ë
y1
 * (
‰a˘
));

5703  (
y
 >> 20);

5723 
__INLINE
 
q7_t
 
¨m_löór_öãΩ_q7
(

5724 
q7_t
 * 
pYD©a
,

5725 
q31_t
 
x
,

5726 
uöt32_t
 
nVÆues
)

5728 
q31_t
 
y
;

5729 
q7_t
 
y0
, 
y1
;

5730 
q31_t
 
‰a˘
;

5731 
uöt32_t
 
ödex
;

5736 i‡(
x
 < 0)

5738  (
pYD©a
[0]);

5740 
ödex
 = (
x
 >> 20) & 0xfff;

5743 if(
ödex
 >(
nVÆues
 - 1))

5745  (
pYD©a
[
nVÆues
 - 1]);

5752 
‰a˘
 = (
x
 & 0x000FFFFF);

5755 
y0
 = 
pYD©a
[
ödex
];

5756 
y1
 = 
pYD©a
[
ödex
 + 1u];

5759 
y
 = ((
y0
 * (0xFFFFF - 
‰a˘
)));

5762 
y
 +(
y1
 * 
‰a˘
);

5765  (
y
 >> 20u);

5780 
Êﬂt32_t
 
¨m_sö_f32
(

5781 
Êﬂt32_t
 
x
);

5789 
q31_t
 
¨m_sö_q31
(

5790 
q31_t
 
x
);

5798 
q15_t
 
¨m_sö_q15
(

5799 
q15_t
 
x
);

5807 
Êﬂt32_t
 
¨m_cos_f32
(

5808 
Êﬂt32_t
 
x
);

5816 
q31_t
 
¨m_cos_q31
(

5817 
q31_t
 
x
);

5825 
q15_t
 
¨m_cos_q15
(

5826 
q15_t
 
x
);

5868 
__INLINE
 
¨m_°©us
 
¨m_sqπ_f32
(

5869 
Êﬂt32_t
 
ö
,

5870 
Êﬂt32_t
 * 
pOut
)

5872 if(
ö
 > 0)

5876 #i‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__CC_ARM
 )

5877 *
pOut
 = 
__sqπf
(
ö
);

5879 *
pOut
 = 
sqπf
(
ö
);

5882  (
ARM_MATH_SUCCESS
);

5886 *
pOut
 = 0.0f;

5887  (
ARM_MATH_ARGUMENT_ERROR
);

5900 
¨m_°©us
 
¨m_sqπ_q31
(

5901 
q31_t
 
ö
,

5902 
q31_t
 * 
pOut
);

5911 
¨m_°©us
 
¨m_sqπ_q15
(

5912 
q15_t
 
ö
,

5913 
q15_t
 * 
pOut
);

5928 
__INLINE
 
¨m_cúcuœrWrôe_f32
(

5929 
öt32_t
 * 
cúcBuf„r
,

5930 
öt32_t
 
L
,

5931 
uöt16_t
 * 
wrôeOff£t
,

5932 
öt32_t
 
buf„rInc
,

5933 c⁄° 
öt32_t
 * 
§c
,

5934 
öt32_t
 
§cInc
,

5935 
uöt32_t
 
blockSize
)

5937 
uöt32_t
 
i
 = 0u;

5938 
öt32_t
 
wOff£t
;

5942 
wOff£t
 = *
wrôeOff£t
;

5945 
i
 = 
blockSize
;

5947 
i
 > 0u)

5950 
cúcBuf„r
[
wOff£t
] = *
§c
;

5953 
§c
 +
§cInc
;

5956 
wOff£t
 +
buf„rInc
;

5957 if(
wOff£t
 >
L
)

5958 
wOff£t
 -
L
;

5961 
i
--;

5965 *
wrôeOff£t
 = 
wOff£t
;

5973 
__INLINE
 
¨m_cúcuœrRód_f32
(

5974 
öt32_t
 * 
cúcBuf„r
,

5975 
öt32_t
 
L
,

5976 
öt32_t
 * 
ªadOff£t
,

5977 
öt32_t
 
buf„rInc
,

5978 
öt32_t
 * 
d°
,

5979 
öt32_t
 * 
d°_ba£
,

5980 
öt32_t
 
d°_Àngth
,

5981 
öt32_t
 
d°Inc
,

5982 
uöt32_t
 
blockSize
)

5984 
uöt32_t
 
i
 = 0u;

5985 
öt32_t
 
rOff£t
, 
d°_íd
;

5989 
rOff£t
 = *
ªadOff£t
;

5990 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5993 
i
 = 
blockSize
;

5995 
i
 > 0u)

5998 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6001 
d°
 +
d°Inc
;

6003 if(
d°
 =(
öt32_t
 *Ë
d°_íd
)

6005 
d°
 = 
d°_ba£
;

6009 
rOff£t
 +
buf„rInc
;

6011 if(
rOff£t
 >
L
)

6013 
rOff£t
 -
L
;

6017 
i
--;

6021 *
ªadOff£t
 = 
rOff£t
;

6028 
__INLINE
 
¨m_cúcuœrWrôe_q15
(

6029 
q15_t
 * 
cúcBuf„r
,

6030 
öt32_t
 
L
,

6031 
uöt16_t
 * 
wrôeOff£t
,

6032 
öt32_t
 
buf„rInc
,

6033 c⁄° 
q15_t
 * 
§c
,

6034 
öt32_t
 
§cInc
,

6035 
uöt32_t
 
blockSize
)

6037 
uöt32_t
 
i
 = 0u;

6038 
öt32_t
 
wOff£t
;

6042 
wOff£t
 = *
wrôeOff£t
;

6045 
i
 = 
blockSize
;

6047 
i
 > 0u)

6050 
cúcBuf„r
[
wOff£t
] = *
§c
;

6053 
§c
 +
§cInc
;

6056 
wOff£t
 +
buf„rInc
;

6057 if(
wOff£t
 >
L
)

6058 
wOff£t
 -
L
;

6061 
i
--;

6065 *
wrôeOff£t
 = 
wOff£t
;

6073 
__INLINE
 
¨m_cúcuœrRód_q15
(

6074 
q15_t
 * 
cúcBuf„r
,

6075 
öt32_t
 
L
,

6076 
öt32_t
 * 
ªadOff£t
,

6077 
öt32_t
 
buf„rInc
,

6078 
q15_t
 * 
d°
,

6079 
q15_t
 * 
d°_ba£
,

6080 
öt32_t
 
d°_Àngth
,

6081 
öt32_t
 
d°Inc
,

6082 
uöt32_t
 
blockSize
)

6084 
uöt32_t
 
i
 = 0;

6085 
öt32_t
 
rOff£t
, 
d°_íd
;

6089 
rOff£t
 = *
ªadOff£t
;

6091 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6094 
i
 = 
blockSize
;

6096 
i
 > 0u)

6099 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6102 
d°
 +
d°Inc
;

6104 if(
d°
 =(
q15_t
 *Ë
d°_íd
)

6106 
d°
 = 
d°_ba£
;

6110 
rOff£t
 +
buf„rInc
;

6112 if(
rOff£t
 >
L
)

6114 
rOff£t
 -
L
;

6118 
i
--;

6122 *
ªadOff£t
 = 
rOff£t
;

6130 
__INLINE
 
¨m_cúcuœrWrôe_q7
(

6131 
q7_t
 * 
cúcBuf„r
,

6132 
öt32_t
 
L
,

6133 
uöt16_t
 * 
wrôeOff£t
,

6134 
öt32_t
 
buf„rInc
,

6135 c⁄° 
q7_t
 * 
§c
,

6136 
öt32_t
 
§cInc
,

6137 
uöt32_t
 
blockSize
)

6139 
uöt32_t
 
i
 = 0u;

6140 
öt32_t
 
wOff£t
;

6144 
wOff£t
 = *
wrôeOff£t
;

6147 
i
 = 
blockSize
;

6149 
i
 > 0u)

6152 
cúcBuf„r
[
wOff£t
] = *
§c
;

6155 
§c
 +
§cInc
;

6158 
wOff£t
 +
buf„rInc
;

6159 if(
wOff£t
 >
L
)

6160 
wOff£t
 -
L
;

6163 
i
--;

6167 *
wrôeOff£t
 = 
wOff£t
;

6175 
__INLINE
 
¨m_cúcuœrRód_q7
(

6176 
q7_t
 * 
cúcBuf„r
,

6177 
öt32_t
 
L
,

6178 
öt32_t
 * 
ªadOff£t
,

6179 
öt32_t
 
buf„rInc
,

6180 
q7_t
 * 
d°
,

6181 
q7_t
 * 
d°_ba£
,

6182 
öt32_t
 
d°_Àngth
,

6183 
öt32_t
 
d°Inc
,

6184 
uöt32_t
 
blockSize
)

6186 
uöt32_t
 
i
 = 0;

6187 
öt32_t
 
rOff£t
, 
d°_íd
;

6191 
rOff£t
 = *
ªadOff£t
;

6193 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6196 
i
 = 
blockSize
;

6198 
i
 > 0u)

6201 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6204 
d°
 +
d°Inc
;

6206 if(
d°
 =(
q7_t
 *Ë
d°_íd
)

6208 
d°
 = 
d°_ba£
;

6212 
rOff£t
 +
buf„rInc
;

6214 if(
rOff£t
 >
L
)

6216 
rOff£t
 -
L
;

6220 
i
--;

6224 *
ªadOff£t
 = 
rOff£t
;

6236 
¨m_powî_q31
(

6237 
q31_t
 * 
pSrc
,

6238 
uöt32_t
 
blockSize
,

6239 
q63_t
 * 
pResu…
);

6249 
¨m_powî_f32
(

6250 
Êﬂt32_t
 * 
pSrc
,

6251 
uöt32_t
 
blockSize
,

6252 
Êﬂt32_t
 * 
pResu…
);

6262 
¨m_powî_q15
(

6263 
q15_t
 * 
pSrc
,

6264 
uöt32_t
 
blockSize
,

6265 
q63_t
 * 
pResu…
);

6275 
¨m_powî_q7
(

6276 
q7_t
 * 
pSrc
,

6277 
uöt32_t
 
blockSize
,

6278 
q31_t
 * 
pResu…
);

6288 
¨m_món_q7
(

6289 
q7_t
 * 
pSrc
,

6290 
uöt32_t
 
blockSize
,

6291 
q7_t
 * 
pResu…
);

6300 
¨m_món_q15
(

6301 
q15_t
 * 
pSrc
,

6302 
uöt32_t
 
blockSize
,

6303 
q15_t
 * 
pResu…
);

6312 
¨m_món_q31
(

6313 
q31_t
 * 
pSrc
,

6314 
uöt32_t
 
blockSize
,

6315 
q31_t
 * 
pResu…
);

6324 
¨m_món_f32
(

6325 
Êﬂt32_t
 * 
pSrc
,

6326 
uöt32_t
 
blockSize
,

6327 
Êﬂt32_t
 * 
pResu…
);

6337 
¨m_v¨_f32
(

6338 
Êﬂt32_t
 * 
pSrc
,

6339 
uöt32_t
 
blockSize
,

6340 
Êﬂt32_t
 * 
pResu…
);

6350 
¨m_v¨_q31
(

6351 
q31_t
 * 
pSrc
,

6352 
uöt32_t
 
blockSize
,

6353 
q63_t
 * 
pResu…
);

6363 
¨m_v¨_q15
(

6364 
q15_t
 * 
pSrc
,

6365 
uöt32_t
 
blockSize
,

6366 
q31_t
 * 
pResu…
);

6376 
¨m_rms_f32
(

6377 
Êﬂt32_t
 * 
pSrc
,

6378 
uöt32_t
 
blockSize
,

6379 
Êﬂt32_t
 * 
pResu…
);

6389 
¨m_rms_q31
(

6390 
q31_t
 * 
pSrc
,

6391 
uöt32_t
 
blockSize
,

6392 
q31_t
 * 
pResu…
);

6402 
¨m_rms_q15
(

6403 
q15_t
 * 
pSrc
,

6404 
uöt32_t
 
blockSize
,

6405 
q15_t
 * 
pResu…
);

6415 
¨m_°d_f32
(

6416 
Êﬂt32_t
 * 
pSrc
,

6417 
uöt32_t
 
blockSize
,

6418 
Êﬂt32_t
 * 
pResu…
);

6428 
¨m_°d_q31
(

6429 
q31_t
 * 
pSrc
,

6430 
uöt32_t
 
blockSize
,

6431 
q31_t
 * 
pResu…
);

6441 
¨m_°d_q15
(

6442 
q15_t
 * 
pSrc
,

6443 
uöt32_t
 
blockSize
,

6444 
q15_t
 * 
pResu…
);

6454 
¨m_cm∂x_mag_f32
(

6455 
Êﬂt32_t
 * 
pSrc
,

6456 
Êﬂt32_t
 * 
pD°
,

6457 
uöt32_t
 
numSam∂es
);

6467 
¨m_cm∂x_mag_q31
(

6468 
q31_t
 * 
pSrc
,

6469 
q31_t
 * 
pD°
,

6470 
uöt32_t
 
numSam∂es
);

6480 
¨m_cm∂x_mag_q15
(

6481 
q15_t
 * 
pSrc
,

6482 
q15_t
 * 
pD°
,

6483 
uöt32_t
 
numSam∂es
);

6495 
¨m_cm∂x_dŸ_¥od_q15
(

6496 
q15_t
 * 
pSrcA
,

6497 
q15_t
 * 
pSrcB
,

6498 
uöt32_t
 
numSam∂es
,

6499 
q31_t
 * 
ªÆResu…
,

6500 
q31_t
 * 
imagResu…
);

6512 
¨m_cm∂x_dŸ_¥od_q31
(

6513 
q31_t
 * 
pSrcA
,

6514 
q31_t
 * 
pSrcB
,

6515 
uöt32_t
 
numSam∂es
,

6516 
q63_t
 * 
ªÆResu…
,

6517 
q63_t
 * 
imagResu…
);

6529 
¨m_cm∂x_dŸ_¥od_f32
(

6530 
Êﬂt32_t
 * 
pSrcA
,

6531 
Êﬂt32_t
 * 
pSrcB
,

6532 
uöt32_t
 
numSam∂es
,

6533 
Êﬂt32_t
 * 
ªÆResu…
,

6534 
Êﬂt32_t
 * 
imagResu…
);

6545 
¨m_cm∂x_mu…_ªÆ_q15
(

6546 
q15_t
 * 
pSrcCm∂x
,

6547 
q15_t
 * 
pSrcRól
,

6548 
q15_t
 * 
pCm∂xD°
,

6549 
uöt32_t
 
numSam∂es
);

6560 
¨m_cm∂x_mu…_ªÆ_q31
(

6561 
q31_t
 * 
pSrcCm∂x
,

6562 
q31_t
 * 
pSrcRól
,

6563 
q31_t
 * 
pCm∂xD°
,

6564 
uöt32_t
 
numSam∂es
);

6575 
¨m_cm∂x_mu…_ªÆ_f32
(

6576 
Êﬂt32_t
 * 
pSrcCm∂x
,

6577 
Êﬂt32_t
 * 
pSrcRól
,

6578 
Êﬂt32_t
 * 
pCm∂xD°
,

6579 
uöt32_t
 
numSam∂es
);

6590 
¨m_mö_q7
(

6591 
q7_t
 * 
pSrc
,

6592 
uöt32_t
 
blockSize
,

6593 
q7_t
 * 
ªsu…
,

6594 
uöt32_t
 * 
ödex
);

6605 
¨m_mö_q15
(

6606 
q15_t
 * 
pSrc
,

6607 
uöt32_t
 
blockSize
,

6608 
q15_t
 * 
pResu…
,

6609 
uöt32_t
 * 
pIndex
);

6619 
¨m_mö_q31
(

6620 
q31_t
 * 
pSrc
,

6621 
uöt32_t
 
blockSize
,

6622 
q31_t
 * 
pResu…
,

6623 
uöt32_t
 * 
pIndex
);

6634 
¨m_mö_f32
(

6635 
Êﬂt32_t
 * 
pSrc
,

6636 
uöt32_t
 
blockSize
,

6637 
Êﬂt32_t
 * 
pResu…
,

6638 
uöt32_t
 * 
pIndex
);

6649 
¨m_max_q7
(

6650 
q7_t
 * 
pSrc
,

6651 
uöt32_t
 
blockSize
,

6652 
q7_t
 * 
pResu…
,

6653 
uöt32_t
 * 
pIndex
);

6664 
¨m_max_q15
(

6665 
q15_t
 * 
pSrc
,

6666 
uöt32_t
 
blockSize
,

6667 
q15_t
 * 
pResu…
,

6668 
uöt32_t
 * 
pIndex
);

6679 
¨m_max_q31
(

6680 
q31_t
 * 
pSrc
,

6681 
uöt32_t
 
blockSize
,

6682 
q31_t
 * 
pResu…
,

6683 
uöt32_t
 * 
pIndex
);

6694 
¨m_max_f32
(

6695 
Êﬂt32_t
 * 
pSrc
,

6696 
uöt32_t
 
blockSize
,

6697 
Êﬂt32_t
 * 
pResu…
,

6698 
uöt32_t
 * 
pIndex
);

6709 
¨m_cm∂x_mu…_cm∂x_q15
(

6710 
q15_t
 * 
pSrcA
,

6711 
q15_t
 * 
pSrcB
,

6712 
q15_t
 * 
pD°
,

6713 
uöt32_t
 
numSam∂es
);

6724 
¨m_cm∂x_mu…_cm∂x_q31
(

6725 
q31_t
 * 
pSrcA
,

6726 
q31_t
 * 
pSrcB
,

6727 
q31_t
 * 
pD°
,

6728 
uöt32_t
 
numSam∂es
);

6739 
¨m_cm∂x_mu…_cm∂x_f32
(

6740 
Êﬂt32_t
 * 
pSrcA
,

6741 
Êﬂt32_t
 * 
pSrcB
,

6742 
Êﬂt32_t
 * 
pD°
,

6743 
uöt32_t
 
numSam∂es
);

6752 
¨m_Êﬂt_to_q31
(

6753 
Êﬂt32_t
 * 
pSrc
,

6754 
q31_t
 * 
pD°
,

6755 
uöt32_t
 
blockSize
);

6764 
¨m_Êﬂt_to_q15
(

6765 
Êﬂt32_t
 * 
pSrc
,

6766 
q15_t
 * 
pD°
,

6767 
uöt32_t
 
blockSize
);

6776 
¨m_Êﬂt_to_q7
(

6777 
Êﬂt32_t
 * 
pSrc
,

6778 
q7_t
 * 
pD°
,

6779 
uöt32_t
 
blockSize
);

6789 
¨m_q31_to_q15
(

6790 
q31_t
 * 
pSrc
,

6791 
q15_t
 * 
pD°
,

6792 
uöt32_t
 
blockSize
);

6801 
¨m_q31_to_q7
(

6802 
q31_t
 * 
pSrc
,

6803 
q7_t
 * 
pD°
,

6804 
uöt32_t
 
blockSize
);

6813 
¨m_q15_to_Êﬂt
(

6814 
q15_t
 * 
pSrc
,

6815 
Êﬂt32_t
 * 
pD°
,

6816 
uöt32_t
 
blockSize
);

6826 
¨m_q15_to_q31
(

6827 
q15_t
 * 
pSrc
,

6828 
q31_t
 * 
pD°
,

6829 
uöt32_t
 
blockSize
);

6839 
¨m_q15_to_q7
(

6840 
q15_t
 * 
pSrc
,

6841 
q7_t
 * 
pD°
,

6842 
uöt32_t
 
blockSize
);

6916 
__INLINE
 
Êﬂt32_t
 
¨m_bûöór_öãΩ_f32
(

6917 c⁄° 
¨m_bûöór_öãΩ_ö°™˚_f32
 * 
S
,

6918 
Êﬂt32_t
 
X
,

6919 
Êﬂt32_t
 
Y
)

6921 
Êﬂt32_t
 
out
;

6922 
Êﬂt32_t
 
f00
, 
f01
, 
f10
, 
f11
;

6923 
Êﬂt32_t
 *
pD©a
 = 
S
->pData;

6924 
öt32_t
 
xIndex
, 
yIndex
, 
ödex
;

6925 
Êﬂt32_t
 
xdiff
, 
ydiff
;

6926 
Êﬂt32_t
 
b1
, 
b2
, 
b3
, 
b4
;

6928 
xIndex
 = (
öt32_t
Ë
X
;

6929 
yIndex
 = (
öt32_t
Ë
Y
;

6933 if(
xIndex
 < 0 || xIndex > (
S
->
numRows
 - 1Ë|| 
yIndex
 < 0

6934 || 
yIndex
 > (
S
->
numCﬁs
 - 1))

6940 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
 - 1Ë* 
S
->
numCﬁs
;

6944 
f00
 = 
pD©a
[
ödex
];

6945 
f01
 = 
pD©a
[
ödex
 + 1];

6948 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
Ë* 
S
->
numCﬁs
;

6952 
f10
 = 
pD©a
[
ödex
];

6953 
f11
 = 
pD©a
[
ödex
 + 1];

6956 
b1
 = 
f00
;

6957 
b2
 = 
f01
 - 
f00
;

6958 
b3
 = 
f10
 - 
f00
;

6959 
b4
 = 
f00
 - 
f01
 - 
f10
 + 
f11
;

6962 
xdiff
 = 
X
 - 
xIndex
;

6965 
ydiff
 = 
Y
 - 
yIndex
;

6968 
out
 = 
b1
 + 
b2
 * 
xdiff
 + 
b3
 * 
ydiff
 + 
b4
 * xdiff * ydiff;

6971  (
out
);

6984 
__INLINE
 
q31_t
 
¨m_bûöór_öãΩ_q31
(

6985 
¨m_bûöór_öãΩ_ö°™˚_q31
 * 
S
,

6986 
q31_t
 
X
,

6987 
q31_t
 
Y
)

6989 
q31_t
 
out
;

6990 
q31_t
 
acc
 = 0;

6991 
q31_t
 
x‰a˘
, 
y‰a˘
;

6992 
q31_t
 
x1
, 
x2
, 
y1
, 
y2
;

6993 
öt32_t
 
rI
, 
cI
;

6994 
q31_t
 *
pYD©a
 = 
S
->
pD©a
;

6995 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

7001 
rI
 = ((
X
 & 0xFFF00000) >> 20u);

7006 
cI
 = ((
Y
 & 0xFFF00000) >> 20u);

7010 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

7017 
x‰a˘
 = (
X
 & 0x000FFFFF) << 11u;

7020 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

7021 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7025 
y‰a˘
 = (
Y
 & 0x000FFFFF) << 11u;

7028 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7029 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7032 
out
 = ((
q31_t
Ë(((
q63_t
Ë
x1
 * (0x7FFFFFFF - 
x‰a˘
)) >> 32));

7033 
acc
 = ((
q31_t
Ë(((
q63_t
Ë
out
 * (0x7FFFFFFF - 
y‰a˘
)) >> 32));

7036 
out
 = ((
q31_t
Ë((
q63_t
Ë
x2
 * (0x7FFFFFFF - 
y‰a˘
) >> 32));

7037 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
x‰a˘
) >> 32));

7040 
out
 = ((
q31_t
Ë((
q63_t
Ë
y1
 * (0x7FFFFFFF - 
x‰a˘
) >> 32));

7041 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

7044 
out
 = ((
q31_t
Ë((
q63_t
Ë
y2
 * (
x‰a˘
) >> 32));

7045 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

7048  (
acc
 << 2u);

7060 
__INLINE
 
q15_t
 
¨m_bûöór_öãΩ_q15
(

7061 
¨m_bûöór_öãΩ_ö°™˚_q15
 * 
S
,

7062 
q31_t
 
X
,

7063 
q31_t
 
Y
)

7065 
q63_t
 
acc
 = 0;

7066 
q31_t
 
out
;

7067 
q15_t
 
x1
, 
x2
, 
y1
, 
y2
;

7068 
q31_t
 
x‰a˘
, 
y‰a˘
;

7069 
öt32_t
 
rI
, 
cI
;

7070 
q15_t
 *
pYD©a
 = 
S
->
pD©a
;

7071 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

7076 
rI
 = ((
X
 & 0xFFF00000) >> 20);

7081 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

7085 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

7092 
x‰a˘
 = (
X
 & 0x000FFFFF);

7095 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

7096 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7101 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7104 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7105 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7111 
out
 = (
q31_t
Ë(((
q63_t
Ë
x1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

7112 
acc
 = ((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
));

7115 
out
 = (
q31_t
Ë(((
q63_t
Ë
x2
 * (0xFFFFF - 
y‰a˘
)) >> 4u);

7116 
acc
 +((
q63_t
Ë
out
 * (
x‰a˘
));

7119 
out
 = (
q31_t
Ë(((
q63_t
Ë
y1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

7120 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

7123 
out
 = (
q31_t
Ë(((
q63_t
Ë
y2
 * (
x‰a˘
)) >> 4u);

7124 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

7128  (
acc
 >> 36);

7140 
__INLINE
 
q7_t
 
¨m_bûöór_öãΩ_q7
(

7141 
¨m_bûöór_öãΩ_ö°™˚_q7
 * 
S
,

7142 
q31_t
 
X
,

7143 
q31_t
 
Y
)

7145 
q63_t
 
acc
 = 0;

7146 
q31_t
 
out
;

7147 
q31_t
 
x‰a˘
, 
y‰a˘
;

7148 
q7_t
 
x1
, 
x2
, 
y1
, 
y2
;

7149 
öt32_t
 
rI
, 
cI
;

7150 
q7_t
 *
pYD©a
 = 
S
->
pD©a
;

7151 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

7156 
rI
 = ((
X
 & 0xFFF00000) >> 20);

7161 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

7165 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

7172 
x‰a˘
 = (
X
 & 0x000FFFFF);

7175 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

7176 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7181 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7184 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7185 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7188 
out
 = ((
x1
 * (0xFFFFF - 
x‰a˘
)));

7189 
acc
 = (((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
)));

7192 
out
 = ((
x2
 * (0xFFFFF - 
y‰a˘
)));

7193 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7196 
out
 = ((
y1
 * (0xFFFFF - 
x‰a˘
)));

7197 
acc
 +(((
q63_t
Ë
out
 * (
y‰a˘
)));

7200 
out
 = ((
y2
 * (
y‰a˘
)));

7201 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7204  (
acc
 >> 40);

7213 #i‡ 
deföed
 ( 
__CC_ARM
 )

7215 
	#mu…Acc_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7216 
a
 = (
q31_t
Ë(((((
q63_t
ËaË<< 32Ë+ ((q63_tË
x
 * 
y
) + 0x80000000LL ) >> 32)

7219 
	#mu…Sub_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7220 
a
 = (
q31_t
Ë(((((
q63_t
ËaË<< 32Ë- ((q63_tË
x
 * 
y
) + 0x80000000LL ) >> 32)

7223 
	#mu…_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7224 
a
 = (
q31_t
Ë(((
q63_t
Ë
x
 * 
y
 + 0x80000000LL ) >> 32)

7227 
	#LOW_OPTIMIZATION_ENTER
 \

	)

7228 
_Pøgma
 ("push") \

7229 
_Pøgma
 ("O1")

7232 
	#LOW_OPTIMIZATION_EXIT
 \

	)

7233 
_Pøgma
 ("pop")

7236 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7239 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7241 #ñi‡
deföed
(
__ICCARM__
)

7243 
	#mu…Acc_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7244 
a
 +(
q31_t
Ë(((
q63_t
Ë
x
 * 
y
) >> 32)

7247 
	#mu…Sub_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7248 
a
 -(
q31_t
Ë(((
q63_t
Ë
x
 * 
y
) >> 32)

7251 
	#mu…_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7252 
a
 = (
q31_t
Ë(((
q63_t
Ë
x
 * 
y
 ) >> 32)

7255 
	#LOW_OPTIMIZATION_ENTER
 \

	)

7256 
_Pøgma
 ("optimize=low")

7259 
	#LOW_OPTIMIZATION_EXIT


	)

7262 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER
 \

	)

7263 
_Pøgma
 ("optimize=low")

7266 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7268 #ñi‡
deföed
(
__GNUC__
)

7270 
	#mu…Acc_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7271 
a
 +(
q31_t
Ë(((
q63_t
Ë
x
 * 
y
) >> 32)

7274 
	#mu…Sub_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7275 
a
 -(
q31_t
Ë(((
q63_t
Ë
x
 * 
y
) >> 32)

7278 
	#mu…_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7279 
a
 = (
q31_t
Ë(((
q63_t
Ë
x
 * 
y
 ) >> 32)

7281 
	#LOW_OPTIMIZATION_ENTER
 
	`__©åibuã__
(–
	`›timize
("-O1"Ë))

	)

7283 
	#LOW_OPTIMIZATION_EXIT


	)

7285 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7287 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7295 #ifdef 
__˝lu•lus


	@cmsis/core_cm0.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #ifde‡
__˝lu•lus


46 #i‚de‡
__CORE_CM0_H_GENERIC


47 
	#__CORE_CM0_H_GENERIC


	)

71 
	#__CM0_CMSIS_VERSION_MAIN
 (0x03Ë

	)

72 
	#__CM0_CMSIS_VERSION_SUB
 (0x20Ë

	)

73 
	#__CM0_CMSIS_VERSION
 ((
__CM0_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__CM0_CMSIS_VERSION_SUB
 )

76 
	#__CORTEX_M
 (0x00Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__ICCARM__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__GNUC__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TASKING__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__INLINE
 
ölöe


	)

97 
	#__STATIC_INLINE
 
ölöe


	)

103 
	#__FPU_USED
 0

	)

105 #i‡
deföed
 ( 
__CC_ARM
 )

106 #i‡
deföed
 
__TARGET_FPU_VFP


110 #ñi‡
deföed
 ( 
__ICCARM__
 )

111 #i‡
deföed
 
__ARMVFP__


115 #ñi‡
deföed
 ( 
__GNUC__
 )

116 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

120 #ñi‡
deföed
 ( 
__TASKING__
 )

121 #i‡
deföed
 
__FPU_VFP__


126 
	~<°döt.h
>

127 
	~<c‹e_cmIn°r.h
>

128 
	~<c‹e_cmFunc.h
>

132 #i‚de‡
__CMSIS_GENERIC


134 #i‚de‡
__CORE_CM0_H_DEPENDANT


135 
	#__CORE_CM0_H_DEPENDANT


	)

138 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


139 #i‚de‡
__CM0_REV


140 
	#__CM0_REV
 0x0000

	)

144 #i‚de‡
__NVIC_PRIO_BITS


145 
	#__NVIC_PRIO_BITS
 2

	)

149 #i‚de‡
__Víd‹_SysTickC⁄fig


150 
	#__Víd‹_SysTickC⁄fig
 0

	)

163 #ifde‡
__˝lu•lus


164 
	#__I
 vﬁ©ûê

	)

166 
	#__I
 vﬁ©ûêc⁄°

	)

168 
	#__O
 vﬁ©ûê

	)

169 
	#__IO
 vﬁ©ûê

	)

199 #i‡(
__CORTEX_M
 != 0x04)

200 
uöt32_t
 
_ª£rved0
:27;

202 
uöt32_t
 
_ª£rved0
:16;

203 
uöt32_t
 
GE
:4;

204 
uöt32_t
 
_ª£rved1
:7;

206 
uöt32_t
 
Q
:1;

207 
uöt32_t
 
V
:1;

208 
uöt32_t
 
C
:1;

209 
uöt32_t
 
Z
:1;

210 
uöt32_t
 
N
:1;

211 } 
b
;

212 
uöt32_t
 
w
;

213 } 
	tAPSR_Ty≥
;

222 
uöt32_t
 
	mISR
:9;

223 
uöt32_t
 
	m_ª£rved0
:23;

224 } 
	mb
;

225 
uöt32_t
 
	mw
;

226 } 
	tIPSR_Ty≥
;

235 
uöt32_t
 
	mISR
:9;

236 #i‡(
__CORTEX_M
 != 0x04)

237 
uöt32_t
 
	m_ª£rved0
:15;

239 
uöt32_t
 
	m_ª£rved0
:7;

240 
uöt32_t
 
	mGE
:4;

241 
uöt32_t
 
	m_ª£rved1
:4;

243 
uöt32_t
 
	mT
:1;

244 
uöt32_t
 
	mIT
:2;

245 
uöt32_t
 
	mQ
:1;

246 
uöt32_t
 
	mV
:1;

247 
uöt32_t
 
	mC
:1;

248 
uöt32_t
 
	mZ
:1;

249 
uöt32_t
 
	mN
:1;

250 } 
	mb
;

251 
uöt32_t
 
	mw
;

252 } 
	txPSR_Ty≥
;

261 
uöt32_t
 
	mnPRIV
:1;

262 
uöt32_t
 
	mSPSEL
:1;

263 
uöt32_t
 
	mFPCA
:1;

264 
uöt32_t
 
	m_ª£rved0
:29;

265 } 
	mb
;

266 
uöt32_t
 
	mw
;

267 } 
	tCONTROL_Ty≥
;

282 
__IO
 
uöt32_t
 
	mISER
[1];

283 
uöt32_t
 
	mRESERVED0
[31];

284 
__IO
 
uöt32_t
 
	mICER
[1];

285 
uöt32_t
 
	mRSERVED1
[31];

286 
__IO
 
uöt32_t
 
	mISPR
[1];

287 
uöt32_t
 
	mRESERVED2
[31];

288 
__IO
 
uöt32_t
 
	mICPR
[1];

289 
uöt32_t
 
	mRESERVED3
[31];

290 
uöt32_t
 
	mRESERVED4
[64];

291 
__IO
 
uöt32_t
 
	mIP
[8];

292 } 
	tNVIC_Ty≥
;

307 
__I
 
uöt32_t
 
	mCPUID
;

308 
__IO
 
uöt32_t
 
	mICSR
;

309 
uöt32_t
 
	mRESERVED0
;

310 
__IO
 
uöt32_t
 
	mAIRCR
;

311 
__IO
 
uöt32_t
 
	mSCR
;

312 
__IO
 
uöt32_t
 
	mCCR
;

313 
uöt32_t
 
	mRESERVED1
;

314 
__IO
 
uöt32_t
 
	mSHP
[2];

315 
__IO
 
uöt32_t
 
	mSHCSR
;

316 } 
	tSCB_Ty≥
;

319 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

320 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

322 
	#SCB_CPUID_VARIANT_Pos
 20

	)

323 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

325 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

326 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

328 
	#SCB_CPUID_PARTNO_Pos
 4

	)

329 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

331 
	#SCB_CPUID_REVISION_Pos
 0

	)

332 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

335 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

336 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

338 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

339 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

341 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

342 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

344 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

345 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

347 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

348 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

350 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

351 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

353 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

354 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

356 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

357 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

359 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

360 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

363 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

364 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

366 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

367 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

369 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

370 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

372 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

373 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

375 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

376 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

379 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

380 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

382 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

383 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

385 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

386 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

389 
	#SCB_CCR_STKALIGN_Pos
 9

	)

390 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

392 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

393 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

396 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

397 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

412 
__IO
 
uöt32_t
 
	mCTRL
;

413 
__IO
 
uöt32_t
 
	mLOAD
;

414 
__IO
 
uöt32_t
 
	mVAL
;

415 
__I
 
uöt32_t
 
	mCALIB
;

416 } 
	tSysTick_Ty≥
;

419 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

420 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

422 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

423 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

425 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

426 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

428 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

429 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

432 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

433 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

436 
	#SysTick_VAL_CURRENT_Pos
 0

	)

437 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

440 
	#SysTick_CALIB_NOREF_Pos
 31

	)

441 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

443 
	#SysTick_CALIB_SKEW_Pos
 30

	)

444 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

446 
	#SysTick_CALIB_TENMS_Pos
 0

	)

447 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

469 
	#SCS_BASE
 (0xE000E000ULË

	)

470 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

471 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

472 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

474 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

475 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

476 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

504 
	#_BIT_SHIFT
(
IRQn
Ë–(((
uöt32_t
)(IRQnËË& 0x03Ë* 8 )

	)

505 
	#_SHP_IDX
(
IRQn
Ë–((((
uöt32_t
)(IRQnË& 0x0F)-8Ë>> 2Ë)

	)

506 
	#_IP_IDX
(
IRQn
Ë–((
uöt32_t
)(IRQnË>> 2Ë)

	)

515 
__STATIC_INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

517 
NVIC
->
ISER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

518 
	}
}

527 
__STATIC_INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

529 
NVIC
->
ICER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

530 
	}
}

543 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

545 ((
uöt32_t
Ë((
NVIC
->
ISPR
[0] & (1 << ((uöt32_t)(
IRQn
) & 0x1F)))?1:0));

546 
	}
}

555 
__STATIC_INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

557 
NVIC
->
ISPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

558 
	}
}

567 
__STATIC_INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

569 
NVIC
->
ICPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

570 
	}
}

582 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

584 if(
IRQn
 < 0) {

585 
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

586 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

588 
NVIC
->
IP
[
	`_IP_IDX
(
IRQn
)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

589 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

590 
	}
}

604 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

607 if(
IRQn
 < 0) {

608 ((
uöt32_t
)(((
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

610 ((
uöt32_t
)(((
NVIC
->
IP
[ 
	`_IP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

611 
	}
}

618 
__STATIC_INLINE
 
	$NVIC_Sy°emRe£t
()

620 
	`__DSB
();

622 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

623 
SCB_AIRCR_SYSRESETREQ_Msk
);

624 
	`__DSB
();

626 
	}
}

639 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

656 
__STATIC_INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

658 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

660 
SysTick
->
LOAD
 = 
ticks
 - 1;

661 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

662 
SysTick
->
VAL
 = 0;

663 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

664 
SysTick_CTRL_TICKINT_Msk
 |

665 
SysTick_CTRL_ENABLE_Msk
;

667 
	}
}

680 #ifde‡
__˝lu•lus


	@cmsis/core_cm0plus.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #ifde‡
__˝lu•lus


46 #i‚de‡
__CORE_CM0PLUS_H_GENERIC


47 
	#__CORE_CM0PLUS_H_GENERIC


	)

71 
	#__CM0PLUS_CMSIS_VERSION_MAIN
 (0x03Ë

	)

72 
	#__CM0PLUS_CMSIS_VERSION_SUB
 (0x20Ë

	)

73 
	#__CM0PLUS_CMSIS_VERSION
 ((
__CM0PLUS_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__CM0PLUS_CMSIS_VERSION_SUB
)

76 
	#__CORTEX_M
 (0x00Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__ICCARM__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__GNUC__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TASKING__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__INLINE
 
ölöe


	)

97 
	#__STATIC_INLINE
 
ölöe


	)

103 
	#__FPU_USED
 0

	)

105 #i‡
deföed
 ( 
__CC_ARM
 )

106 #i‡
deföed
 
__TARGET_FPU_VFP


110 #ñi‡
deföed
 ( 
__ICCARM__
 )

111 #i‡
deföed
 
__ARMVFP__


115 #ñi‡
deföed
 ( 
__GNUC__
 )

116 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

120 #ñi‡
deföed
 ( 
__TASKING__
 )

121 #i‡
deföed
 
__FPU_VFP__


126 
	~<°döt.h
>

127 
	~<c‹e_cmIn°r.h
>

128 
	~<c‹e_cmFunc.h
>

132 #i‚de‡
__CMSIS_GENERIC


134 #i‚de‡
__CORE_CM0PLUS_H_DEPENDANT


135 
	#__CORE_CM0PLUS_H_DEPENDANT


	)

138 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


139 #i‚de‡
__CM0PLUS_REV


140 
	#__CM0PLUS_REV
 0x0000

	)

144 #i‚de‡
__MPU_PRESENT


145 
	#__MPU_PRESENT
 0

	)

149 #i‚de‡
__VTOR_PRESENT


150 
	#__VTOR_PRESENT
 0

	)

154 #i‚de‡
__NVIC_PRIO_BITS


155 
	#__NVIC_PRIO_BITS
 2

	)

159 #i‚de‡
__Víd‹_SysTickC⁄fig


160 
	#__Víd‹_SysTickC⁄fig
 0

	)

173 #ifde‡
__˝lu•lus


174 
	#__I
 vﬁ©ûê

	)

176 
	#__I
 vﬁ©ûêc⁄°

	)

178 
	#__O
 vﬁ©ûê

	)

179 
	#__IO
 vﬁ©ûê

	)

210 #i‡(
__CORTEX_M
 != 0x04)

211 
uöt32_t
 
_ª£rved0
:27;

213 
uöt32_t
 
_ª£rved0
:16;

214 
uöt32_t
 
GE
:4;

215 
uöt32_t
 
_ª£rved1
:7;

217 
uöt32_t
 
Q
:1;

218 
uöt32_t
 
V
:1;

219 
uöt32_t
 
C
:1;

220 
uöt32_t
 
Z
:1;

221 
uöt32_t
 
N
:1;

222 } 
b
;

223 
uöt32_t
 
w
;

224 } 
	tAPSR_Ty≥
;

233 
uöt32_t
 
	mISR
:9;

234 
uöt32_t
 
	m_ª£rved0
:23;

235 } 
	mb
;

236 
uöt32_t
 
	mw
;

237 } 
	tIPSR_Ty≥
;

246 
uöt32_t
 
	mISR
:9;

247 #i‡(
__CORTEX_M
 != 0x04)

248 
uöt32_t
 
	m_ª£rved0
:15;

250 
uöt32_t
 
	m_ª£rved0
:7;

251 
uöt32_t
 
	mGE
:4;

252 
uöt32_t
 
	m_ª£rved1
:4;

254 
uöt32_t
 
	mT
:1;

255 
uöt32_t
 
	mIT
:2;

256 
uöt32_t
 
	mQ
:1;

257 
uöt32_t
 
	mV
:1;

258 
uöt32_t
 
	mC
:1;

259 
uöt32_t
 
	mZ
:1;

260 
uöt32_t
 
	mN
:1;

261 } 
	mb
;

262 
uöt32_t
 
	mw
;

263 } 
	txPSR_Ty≥
;

272 
uöt32_t
 
	mnPRIV
:1;

273 
uöt32_t
 
	mSPSEL
:1;

274 
uöt32_t
 
	mFPCA
:1;

275 
uöt32_t
 
	m_ª£rved0
:29;

276 } 
	mb
;

277 
uöt32_t
 
	mw
;

278 } 
	tCONTROL_Ty≥
;

293 
__IO
 
uöt32_t
 
	mISER
[1];

294 
uöt32_t
 
	mRESERVED0
[31];

295 
__IO
 
uöt32_t
 
	mICER
[1];

296 
uöt32_t
 
	mRSERVED1
[31];

297 
__IO
 
uöt32_t
 
	mISPR
[1];

298 
uöt32_t
 
	mRESERVED2
[31];

299 
__IO
 
uöt32_t
 
	mICPR
[1];

300 
uöt32_t
 
	mRESERVED3
[31];

301 
uöt32_t
 
	mRESERVED4
[64];

302 
__IO
 
uöt32_t
 
	mIP
[8];

303 } 
	tNVIC_Ty≥
;

318 
__I
 
uöt32_t
 
	mCPUID
;

319 
__IO
 
uöt32_t
 
	mICSR
;

320 #i‡(
__VTOR_PRESENT
 == 1)

321 
__IO
 
uöt32_t
 
	mVTOR
;

323 
uöt32_t
 
	mRESERVED0
;

325 
__IO
 
uöt32_t
 
	mAIRCR
;

326 
__IO
 
uöt32_t
 
	mSCR
;

327 
__IO
 
uöt32_t
 
	mCCR
;

328 
uöt32_t
 
	mRESERVED1
;

329 
__IO
 
uöt32_t
 
	mSHP
[2];

330 
__IO
 
uöt32_t
 
	mSHCSR
;

331 } 
	tSCB_Ty≥
;

334 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

335 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

337 
	#SCB_CPUID_VARIANT_Pos
 20

	)

338 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

340 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

341 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

343 
	#SCB_CPUID_PARTNO_Pos
 4

	)

344 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

346 
	#SCB_CPUID_REVISION_Pos
 0

	)

347 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

350 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

351 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

353 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

354 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

356 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

357 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

359 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

360 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

362 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

363 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

365 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

366 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

368 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

369 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

371 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

372 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

374 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

375 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

377 #i‡(
__VTOR_PRESENT
 == 1)

379 
	#SCB_VTOR_TBLOFF_Pos
 8

	)

380 
	#SCB_VTOR_TBLOFF_Msk
 (0xFFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

384 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

385 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

387 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

388 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

390 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

391 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

393 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

394 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

396 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

397 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

400 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

401 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

403 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

404 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

406 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

407 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

410 
	#SCB_CCR_STKALIGN_Pos
 9

	)

411 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

413 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

414 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

417 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

418 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

433 
__IO
 
uöt32_t
 
	mCTRL
;

434 
__IO
 
uöt32_t
 
	mLOAD
;

435 
__IO
 
uöt32_t
 
	mVAL
;

436 
__I
 
uöt32_t
 
	mCALIB
;

437 } 
	tSysTick_Ty≥
;

440 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

441 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

443 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

444 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

446 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

447 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

449 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

450 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

453 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

454 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

457 
	#SysTick_VAL_CURRENT_Pos
 0

	)

458 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

461 
	#SysTick_CALIB_NOREF_Pos
 31

	)

462 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

464 
	#SysTick_CALIB_SKEW_Pos
 30

	)

465 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

467 
	#SysTick_CALIB_TENMS_Pos
 0

	)

468 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

472 #i‡(
__MPU_PRESENT
 == 1)

483 
__I
 
uöt32_t
 
	mTYPE
;

484 
__IO
 
uöt32_t
 
	mCTRL
;

485 
__IO
 
uöt32_t
 
	mRNR
;

486 
__IO
 
uöt32_t
 
	mRBAR
;

487 
__IO
 
uöt32_t
 
	mRASR
;

488 } 
	tMPU_Ty≥
;

491 
	#MPU_TYPE_IREGION_Pos
 16

	)

492 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

494 
	#MPU_TYPE_DREGION_Pos
 8

	)

495 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

497 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

498 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

501 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

502 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

504 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

505 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

507 
	#MPU_CTRL_ENABLE_Pos
 0

	)

508 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

511 
	#MPU_RNR_REGION_Pos
 0

	)

512 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

515 
	#MPU_RBAR_ADDR_Pos
 8

	)

516 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

518 
	#MPU_RBAR_VALID_Pos
 4

	)

519 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

521 
	#MPU_RBAR_REGION_Pos
 0

	)

522 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

525 
	#MPU_RASR_ATTRS_Pos
 16

	)

526 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

528 
	#MPU_RASR_XN_Pos
 28

	)

529 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

531 
	#MPU_RASR_AP_Pos
 24

	)

532 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

534 
	#MPU_RASR_TEX_Pos
 19

	)

535 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

537 
	#MPU_RASR_S_Pos
 18

	)

538 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

540 
	#MPU_RASR_C_Pos
 17

	)

541 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

543 
	#MPU_RASR_B_Pos
 16

	)

544 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

546 
	#MPU_RASR_SRD_Pos
 8

	)

547 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

549 
	#MPU_RASR_SIZE_Pos
 1

	)

550 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

552 
	#MPU_RASR_ENABLE_Pos
 0

	)

553 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

576 
	#SCS_BASE
 (0xE000E000ULË

	)

577 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

578 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

579 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

581 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

582 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

583 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

585 #i‡(
__MPU_PRESENT
 == 1)

586 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

587 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

615 
	#_BIT_SHIFT
(
IRQn
Ë–(((
uöt32_t
)(IRQnËË& 0x03Ë* 8 )

	)

616 
	#_SHP_IDX
(
IRQn
Ë–((((
uöt32_t
)(IRQnË& 0x0F)-8Ë>> 2Ë)

	)

617 
	#_IP_IDX
(
IRQn
Ë–((
uöt32_t
)(IRQnË>> 2Ë)

	)

626 
__STATIC_INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

628 
NVIC
->
ISER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

629 
	}
}

638 
__STATIC_INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

640 
NVIC
->
ICER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

641 
	}
}

654 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

656 ((
uöt32_t
Ë((
NVIC
->
ISPR
[0] & (1 << ((uöt32_t)(
IRQn
) & 0x1F)))?1:0));

657 
	}
}

666 
__STATIC_INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

668 
NVIC
->
ISPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

669 
	}
}

678 
__STATIC_INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

680 
NVIC
->
ICPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

681 
	}
}

693 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

695 if(
IRQn
 < 0) {

696 
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

697 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

699 
NVIC
->
IP
[
	`_IP_IDX
(
IRQn
)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

700 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

701 
	}
}

715 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

718 if(
IRQn
 < 0) {

719 ((
uöt32_t
)(((
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

721 ((
uöt32_t
)(((
NVIC
->
IP
[ 
	`_IP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

722 
	}
}

729 
__STATIC_INLINE
 
	$NVIC_Sy°emRe£t
()

731 
	`__DSB
();

733 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

734 
SCB_AIRCR_SYSRESETREQ_Msk
);

735 
	`__DSB
();

737 
	}
}

750 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

767 
__STATIC_INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

769 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

771 
SysTick
->
LOAD
 = 
ticks
 - 1;

772 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

773 
SysTick
->
VAL
 = 0;

774 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

775 
SysTick_CTRL_TICKINT_Msk
 |

776 
SysTick_CTRL_ENABLE_Msk
;

778 
	}
}

791 #ifde‡
__˝lu•lus


	@cmsis/core_cm3.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #ifde‡
__˝lu•lus


46 #i‚de‡
__CORE_CM3_H_GENERIC


47 
	#__CORE_CM3_H_GENERIC


	)

71 
	#__CM3_CMSIS_VERSION_MAIN
 (0x03Ë

	)

72 
	#__CM3_CMSIS_VERSION_SUB
 (0x20Ë

	)

73 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__CM3_CMSIS_VERSION_SUB
 )

76 
	#__CORTEX_M
 (0x03Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__ICCARM__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__TMS470__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__STATIC_INLINE
 
ölöe


	)

93 #ñi‡
deföed
 ( 
__GNUC__
 )

94 
	#__ASM
 
__asm


	)

95 
	#__INLINE
 
ölöe


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

107 
	#__FPU_USED
 0

	)

109 #i‡
deföed
 ( 
__CC_ARM
 )

110 #i‡
deföed
 
__TARGET_FPU_VFP


114 #ñi‡
deföed
 ( 
__ICCARM__
 )

115 #i‡
deföed
 
__ARMVFP__


119 #ñi‡
deföed
 ( 
__TMS470__
 )

120 #i‡
deföed
 
__TI__VFP_SUPPORT____


124 #ñi‡
deföed
 ( 
__GNUC__
 )

125 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

129 #ñi‡
deföed
 ( 
__TASKING__
 )

130 #i‡
deföed
 
__FPU_VFP__


135 
	~<°döt.h
>

136 
	~<c‹e_cmIn°r.h
>

137 
	~<c‹e_cmFunc.h
>

141 #i‚de‡
__CMSIS_GENERIC


143 #i‚de‡
__CORE_CM3_H_DEPENDANT


144 
	#__CORE_CM3_H_DEPENDANT


	)

147 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


148 #i‚de‡
__CM3_REV


149 
	#__CM3_REV
 0x0200

	)

153 #i‚de‡
__MPU_PRESENT


154 
	#__MPU_PRESENT
 0

	)

158 #i‚de‡
__NVIC_PRIO_BITS


159 
	#__NVIC_PRIO_BITS
 4

	)

163 #i‚de‡
__Víd‹_SysTickC⁄fig


164 
	#__Víd‹_SysTickC⁄fig
 0

	)

177 #ifde‡
__˝lu•lus


178 
	#__I
 vﬁ©ûê

	)

180 
	#__I
 vﬁ©ûêc⁄°

	)

182 
	#__O
 vﬁ©ûê

	)

183 
	#__IO
 vﬁ©ûê

	)

215 #i‡(
__CORTEX_M
 != 0x04)

216 
uöt32_t
 
_ª£rved0
:27;

218 
uöt32_t
 
_ª£rved0
:16;

219 
uöt32_t
 
GE
:4;

220 
uöt32_t
 
_ª£rved1
:7;

222 
uöt32_t
 
Q
:1;

223 
uöt32_t
 
V
:1;

224 
uöt32_t
 
C
:1;

225 
uöt32_t
 
Z
:1;

226 
uöt32_t
 
N
:1;

227 } 
b
;

228 
uöt32_t
 
w
;

229 } 
	tAPSR_Ty≥
;

238 
uöt32_t
 
	mISR
:9;

239 
uöt32_t
 
	m_ª£rved0
:23;

240 } 
	mb
;

241 
uöt32_t
 
	mw
;

242 } 
	tIPSR_Ty≥
;

251 
uöt32_t
 
	mISR
:9;

252 #i‡(
__CORTEX_M
 != 0x04)

253 
uöt32_t
 
	m_ª£rved0
:15;

255 
uöt32_t
 
	m_ª£rved0
:7;

256 
uöt32_t
 
	mGE
:4;

257 
uöt32_t
 
	m_ª£rved1
:4;

259 
uöt32_t
 
	mT
:1;

260 
uöt32_t
 
	mIT
:2;

261 
uöt32_t
 
	mQ
:1;

262 
uöt32_t
 
	mV
:1;

263 
uöt32_t
 
	mC
:1;

264 
uöt32_t
 
	mZ
:1;

265 
uöt32_t
 
	mN
:1;

266 } 
	mb
;

267 
uöt32_t
 
	mw
;

268 } 
	txPSR_Ty≥
;

277 
uöt32_t
 
	mnPRIV
:1;

278 
uöt32_t
 
	mSPSEL
:1;

279 
uöt32_t
 
	mFPCA
:1;

280 
uöt32_t
 
	m_ª£rved0
:29;

281 } 
	mb
;

282 
uöt32_t
 
	mw
;

283 } 
	tCONTROL_Ty≥
;

298 
__IO
 
uöt32_t
 
	mISER
[8];

299 
uöt32_t
 
	mRESERVED0
[24];

300 
__IO
 
uöt32_t
 
	mICER
[8];

301 
uöt32_t
 
	mRSERVED1
[24];

302 
__IO
 
uöt32_t
 
	mISPR
[8];

303 
uöt32_t
 
	mRESERVED2
[24];

304 
__IO
 
uöt32_t
 
	mICPR
[8];

305 
uöt32_t
 
	mRESERVED3
[24];

306 
__IO
 
uöt32_t
 
	mIABR
[8];

307 
uöt32_t
 
	mRESERVED4
[56];

308 
__IO
 
uöt8_t
 
	mIP
[240];

309 
uöt32_t
 
	mRESERVED5
[644];

310 
__O
 
uöt32_t
 
	mSTIR
;

311 } 
	tNVIC_Ty≥
;

314 
	#NVIC_STIR_INTID_Pos
 0

	)

315 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

330 
__I
 
uöt32_t
 
	mCPUID
;

331 
__IO
 
uöt32_t
 
	mICSR
;

332 
__IO
 
uöt32_t
 
	mVTOR
;

333 
__IO
 
uöt32_t
 
	mAIRCR
;

334 
__IO
 
uöt32_t
 
	mSCR
;

335 
__IO
 
uöt32_t
 
	mCCR
;

336 
__IO
 
uöt8_t
 
	mSHP
[12];

337 
__IO
 
uöt32_t
 
	mSHCSR
;

338 
__IO
 
uöt32_t
 
	mCFSR
;

339 
__IO
 
uöt32_t
 
	mHFSR
;

340 
__IO
 
uöt32_t
 
	mDFSR
;

341 
__IO
 
uöt32_t
 
	mMMFAR
;

342 
__IO
 
uöt32_t
 
	mBFAR
;

343 
__IO
 
uöt32_t
 
	mAFSR
;

344 
__I
 
uöt32_t
 
	mPFR
[2];

345 
__I
 
uöt32_t
 
	mDFR
;

346 
__I
 
uöt32_t
 
	mADR
;

347 
__I
 
uöt32_t
 
	mMMFR
[4];

348 
__I
 
uöt32_t
 
	mISAR
[5];

349 
uöt32_t
 
	mRESERVED0
[5];

350 
__IO
 
uöt32_t
 
	mCPACR
;

351 } 
	tSCB_Ty≥
;

354 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

355 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

357 
	#SCB_CPUID_VARIANT_Pos
 20

	)

358 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

360 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

361 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

363 
	#SCB_CPUID_PARTNO_Pos
 4

	)

364 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

366 
	#SCB_CPUID_REVISION_Pos
 0

	)

367 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

370 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

371 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

373 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

374 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

376 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

377 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

379 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

380 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

382 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

383 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

385 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

386 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

388 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

389 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

391 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

392 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

394 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

395 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

397 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

398 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

401 #i‡(
__CM3_REV
 < 0x0201)

402 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

403 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

405 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

406 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

408 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

409 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

413 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

414 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

416 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

417 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

419 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

420 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

422 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

423 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

425 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

426 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

428 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

429 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

431 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

432 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

435 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

436 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

438 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

439 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

441 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

442 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

445 
	#SCB_CCR_STKALIGN_Pos
 9

	)

446 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

448 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

449 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

451 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

452 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

454 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

455 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

457 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

458 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

460 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

461 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

464 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

465 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

467 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

468 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

470 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

471 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

473 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

474 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

476 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

477 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

479 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

480 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

482 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

483 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

485 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

486 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

488 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

489 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

491 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

492 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

494 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

495 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

497 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

498 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

500 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

501 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

503 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

504 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

507 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

508 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

510 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

511 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

513 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

514 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

517 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

518 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

520 
	#SCB_HFSR_FORCED_Pos
 30

	)

521 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

523 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

524 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

527 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

528 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

530 
	#SCB_DFSR_VCATCH_Pos
 3

	)

531 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

533 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

534 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

536 
	#SCB_DFSR_BKPT_Pos
 1

	)

537 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

539 
	#SCB_DFSR_HALTED_Pos
 0

	)

540 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

555 
uöt32_t
 
	mRESERVED0
[1];

556 
__I
 
uöt32_t
 
	mICTR
;

557 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

558 
__IO
 
uöt32_t
 
	mACTLR
;

560 
uöt32_t
 
	mRESERVED1
[1];

562 } 
	tSCnSCB_Ty≥
;

565 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

566 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

570 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

571 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

573 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

574 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

576 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

577 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

592 
__IO
 
uöt32_t
 
	mCTRL
;

593 
__IO
 
uöt32_t
 
	mLOAD
;

594 
__IO
 
uöt32_t
 
	mVAL
;

595 
__I
 
uöt32_t
 
	mCALIB
;

596 } 
	tSysTick_Ty≥
;

599 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

600 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

602 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

603 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

605 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

606 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

608 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

609 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

612 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

613 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

616 
	#SysTick_VAL_CURRENT_Pos
 0

	)

617 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

620 
	#SysTick_CALIB_NOREF_Pos
 31

	)

621 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

623 
	#SysTick_CALIB_SKEW_Pos
 30

	)

624 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

626 
	#SysTick_CALIB_TENMS_Pos
 0

	)

627 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

642 
__O
 union

644 
__O
 
uöt8_t
 
	mu8
;

645 
__O
 
uöt16_t
 
	mu16
;

646 
__O
 
uöt32_t
 
	mu32
;

647 } 
	mPORT
 [32];

648 
uöt32_t
 
	mRESERVED0
[864];

649 
__IO
 
uöt32_t
 
	mTER
;

650 
uöt32_t
 
	mRESERVED1
[15];

651 
__IO
 
uöt32_t
 
	mTPR
;

652 
uöt32_t
 
	mRESERVED2
[15];

653 
__IO
 
uöt32_t
 
	mTCR
;

654 
uöt32_t
 
	mRESERVED3
[29];

655 
__O
 
uöt32_t
 
	mIWR
;

656 
__I
 
uöt32_t
 
	mIRR
;

657 
__IO
 
uöt32_t
 
	mIMCR
;

658 
uöt32_t
 
	mRESERVED4
[43];

659 
__O
 
uöt32_t
 
	mLAR
;

660 
__I
 
uöt32_t
 
	mLSR
;

661 
uöt32_t
 
	mRESERVED5
[6];

662 
__I
 
uöt32_t
 
	mPID4
;

663 
__I
 
uöt32_t
 
	mPID5
;

664 
__I
 
uöt32_t
 
	mPID6
;

665 
__I
 
uöt32_t
 
	mPID7
;

666 
__I
 
uöt32_t
 
	mPID0
;

667 
__I
 
uöt32_t
 
	mPID1
;

668 
__I
 
uöt32_t
 
	mPID2
;

669 
__I
 
uöt32_t
 
	mPID3
;

670 
__I
 
uöt32_t
 
	mCID0
;

671 
__I
 
uöt32_t
 
	mCID1
;

672 
__I
 
uöt32_t
 
	mCID2
;

673 
__I
 
uöt32_t
 
	mCID3
;

674 } 
	tITM_Ty≥
;

677 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

678 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

681 
	#ITM_TCR_BUSY_Pos
 23

	)

682 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

684 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

685 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

687 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

688 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

690 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

691 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

693 
	#ITM_TCR_SWOENA_Pos
 4

	)

694 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

696 
	#ITM_TCR_DWTENA_Pos
 3

	)

697 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

699 
	#ITM_TCR_SYNCENA_Pos
 2

	)

700 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

702 
	#ITM_TCR_TSENA_Pos
 1

	)

703 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

705 
	#ITM_TCR_ITMENA_Pos
 0

	)

706 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

709 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

710 
	#ITM_IWR_ATVALIDM_Msk
 (1UL << 
ITM_IWR_ATVALIDM_Pos
Ë

	)

713 
	#ITM_IRR_ATREADYM_Pos
 0

	)

714 
	#ITM_IRR_ATREADYM_Msk
 (1UL << 
ITM_IRR_ATREADYM_Pos
Ë

	)

717 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

718 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL << 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

721 
	#ITM_LSR_ByãAcc_Pos
 2

	)

722 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

724 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

725 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

727 
	#ITM_LSR_Pª£¡_Pos
 0

	)

728 
	#ITM_LSR_Pª£¡_Msk
 (1UL << 
ITM_LSR_Pª£¡_Pos
Ë

	)

743 
__IO
 
uöt32_t
 
	mCTRL
;

744 
__IO
 
uöt32_t
 
	mCYCCNT
;

745 
__IO
 
uöt32_t
 
	mCPICNT
;

746 
__IO
 
uöt32_t
 
	mEXCCNT
;

747 
__IO
 
uöt32_t
 
	mSLEEPCNT
;

748 
__IO
 
uöt32_t
 
	mLSUCNT
;

749 
__IO
 
uöt32_t
 
	mFOLDCNT
;

750 
__I
 
uöt32_t
 
	mPCSR
;

751 
__IO
 
uöt32_t
 
	mCOMP0
;

752 
__IO
 
uöt32_t
 
	mMASK0
;

753 
__IO
 
uöt32_t
 
	mFUNCTION0
;

754 
uöt32_t
 
	mRESERVED0
[1];

755 
__IO
 
uöt32_t
 
	mCOMP1
;

756 
__IO
 
uöt32_t
 
	mMASK1
;

757 
__IO
 
uöt32_t
 
	mFUNCTION1
;

758 
uöt32_t
 
	mRESERVED1
[1];

759 
__IO
 
uöt32_t
 
	mCOMP2
;

760 
__IO
 
uöt32_t
 
	mMASK2
;

761 
__IO
 
uöt32_t
 
	mFUNCTION2
;

762 
uöt32_t
 
	mRESERVED2
[1];

763 
__IO
 
uöt32_t
 
	mCOMP3
;

764 
__IO
 
uöt32_t
 
	mMASK3
;

765 
__IO
 
uöt32_t
 
	mFUNCTION3
;

766 } 
	tDWT_Ty≥
;

769 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

770 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

772 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

773 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

775 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

776 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

778 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

779 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

781 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

782 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

784 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

785 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

787 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

788 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

790 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

791 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

793 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

794 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

796 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

797 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

799 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

800 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

802 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

803 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

805 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

806 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

808 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

809 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

811 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

812 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

814 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

815 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

817 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

818 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

820 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

821 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

824 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

825 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

828 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

829 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

832 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

833 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

836 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

837 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

840 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

841 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

844 
	#DWT_MASK_MASK_Pos
 0

	)

845 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

848 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

849 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

851 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

852 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

854 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

855 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

857 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

858 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

860 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

861 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

863 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

864 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

866 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

867 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

869 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

870 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

872 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

873 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

888 
__IO
 
uöt32_t
 
	mSSPSR
;

889 
__IO
 
uöt32_t
 
	mCSPSR
;

890 
uöt32_t
 
	mRESERVED0
[2];

891 
__IO
 
uöt32_t
 
	mACPR
;

892 
uöt32_t
 
	mRESERVED1
[55];

893 
__IO
 
uöt32_t
 
	mSPPR
;

894 
uöt32_t
 
	mRESERVED2
[131];

895 
__I
 
uöt32_t
 
	mFFSR
;

896 
__IO
 
uöt32_t
 
	mFFCR
;

897 
__I
 
uöt32_t
 
	mFSCR
;

898 
uöt32_t
 
	mRESERVED3
[759];

899 
__I
 
uöt32_t
 
	mTRIGGER
;

900 
__I
 
uöt32_t
 
	mFIFO0
;

901 
__I
 
uöt32_t
 
	mITATBCTR2
;

902 
uöt32_t
 
	mRESERVED4
[1];

903 
__I
 
uöt32_t
 
	mITATBCTR0
;

904 
__I
 
uöt32_t
 
	mFIFO1
;

905 
__IO
 
uöt32_t
 
	mITCTRL
;

906 
uöt32_t
 
	mRESERVED5
[39];

907 
__IO
 
uöt32_t
 
	mCLAIMSET
;

908 
__IO
 
uöt32_t
 
	mCLAIMCLR
;

909 
uöt32_t
 
	mRESERVED7
[8];

910 
__I
 
uöt32_t
 
	mDEVID
;

911 
__I
 
uöt32_t
 
	mDEVTYPE
;

912 } 
	tTPI_Ty≥
;

915 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

916 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

919 
	#TPI_SPPR_TXMODE_Pos
 0

	)

920 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

923 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

924 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

926 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

927 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

929 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

930 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

932 
	#TPI_FFSR_FlInProg_Pos
 0

	)

933 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

936 
	#TPI_FFCR_TrigIn_Pos
 8

	)

937 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

939 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

940 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

943 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

944 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

947 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

948 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

950 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

951 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

953 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

954 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

956 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

957 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

959 
	#TPI_FIFO0_ETM2_Pos
 16

	)

960 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

962 
	#TPI_FIFO0_ETM1_Pos
 8

	)

963 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

965 
	#TPI_FIFO0_ETM0_Pos
 0

	)

966 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

969 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

970 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

973 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

974 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

976 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

977 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

979 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

980 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

982 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

983 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

985 
	#TPI_FIFO1_ITM2_Pos
 16

	)

986 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

988 
	#TPI_FIFO1_ITM1_Pos
 8

	)

989 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

991 
	#TPI_FIFO1_ITM0_Pos
 0

	)

992 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

995 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

996 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

999 
	#TPI_ITCTRL_Mode_Pos
 0

	)

1000 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

1003 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

1004 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1006 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

1007 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1009 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

1010 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1012 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

1013 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1015 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

1016 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1018 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

1019 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

1022 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

1023 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

1025 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

1026 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1031 #i‡(
__MPU_PRESENT
 == 1)

1042 
__I
 
uöt32_t
 
	mTYPE
;

1043 
__IO
 
uöt32_t
 
	mCTRL
;

1044 
__IO
 
uöt32_t
 
	mRNR
;

1045 
__IO
 
uöt32_t
 
	mRBAR
;

1046 
__IO
 
uöt32_t
 
	mRASR
;

1047 
__IO
 
uöt32_t
 
	mRBAR_A1
;

1048 
__IO
 
uöt32_t
 
	mRASR_A1
;

1049 
__IO
 
uöt32_t
 
	mRBAR_A2
;

1050 
__IO
 
uöt32_t
 
	mRASR_A2
;

1051 
__IO
 
uöt32_t
 
	mRBAR_A3
;

1052 
__IO
 
uöt32_t
 
	mRASR_A3
;

1053 } 
	tMPU_Ty≥
;

1056 
	#MPU_TYPE_IREGION_Pos
 16

	)

1057 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1059 
	#MPU_TYPE_DREGION_Pos
 8

	)

1060 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1062 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1063 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1066 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1067 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1069 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1070 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1072 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1073 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1076 
	#MPU_RNR_REGION_Pos
 0

	)

1077 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1080 
	#MPU_RBAR_ADDR_Pos
 5

	)

1081 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1083 
	#MPU_RBAR_VALID_Pos
 4

	)

1084 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1086 
	#MPU_RBAR_REGION_Pos
 0

	)

1087 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1090 
	#MPU_RASR_ATTRS_Pos
 16

	)

1091 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1093 
	#MPU_RASR_XN_Pos
 28

	)

1094 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1096 
	#MPU_RASR_AP_Pos
 24

	)

1097 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1099 
	#MPU_RASR_TEX_Pos
 19

	)

1100 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1102 
	#MPU_RASR_S_Pos
 18

	)

1103 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1105 
	#MPU_RASR_C_Pos
 17

	)

1106 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1108 
	#MPU_RASR_B_Pos
 16

	)

1109 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1111 
	#MPU_RASR_SRD_Pos
 8

	)

1112 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1114 
	#MPU_RASR_SIZE_Pos
 1

	)

1115 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1117 
	#MPU_RASR_ENABLE_Pos
 0

	)

1118 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1134 
__IO
 
uöt32_t
 
	mDHCSR
;

1135 
__O
 
uöt32_t
 
	mDCRSR
;

1136 
__IO
 
uöt32_t
 
	mDCRDR
;

1137 
__IO
 
uöt32_t
 
	mDEMCR
;

1138 } 
	tC‹eDebug_Ty≥
;

1141 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1142 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1144 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1145 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1147 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1148 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1150 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1151 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1153 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1154 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1156 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1157 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1159 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1160 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1162 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1163 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1165 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1166 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1168 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1169 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1171 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1172 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1174 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1175 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1178 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1179 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1181 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1182 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1185 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1186 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1188 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1189 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1191 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1192 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1194 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1195 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1197 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1198 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1200 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1201 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1203 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1204 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1206 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1207 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1209 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1210 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1212 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1213 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1215 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1216 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1218 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1219 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1221 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1222 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1234 
	#SCS_BASE
 (0xE000E000ULË

	)

1235 
	#ITM_BASE
 (0xE0000000ULË

	)

1236 
	#DWT_BASE
 (0xE0001000ULË

	)

1237 
	#TPI_BASE
 (0xE0040000ULË

	)

1238 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1239 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1240 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1241 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1243 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1244 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1245 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1246 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1247 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1248 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1249 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1250 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1252 #i‡(
__MPU_PRESENT
 == 1)

1253 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1254 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1291 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1293 
uöt32_t
 
ªg_vÆue
;

1294 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1296 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1297 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1298 
ªg_vÆue
 = (reg_value |

1299 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1300 (
Pri‹ôyGroupTmp
 << 8));

1301 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1302 
	}
}

1311 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôyGroupög
()

1313  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1314 
	}
}

1323 
__STATIC_INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1325 
NVIC
->
ISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1326 
	}
}

1335 
__STATIC_INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1337 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1338 
	}
}

1351 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1353 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1354 
	}
}

1363 
__STATIC_INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1365 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1366 
	}
}

1375 
__STATIC_INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1377 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1378 
	}
}

1390 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1392 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1393 
	}
}

1405 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1407 if(
IRQn
 < 0) {

1408 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1410 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1411 
	}
}

1425 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1428 if(
IRQn
 < 0) {

1429 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1431 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1432 
	}
}

1447 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_EncodePri‹ôy
 (
uöt32_t
 
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1449 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1450 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1451 
uöt32_t
 
SubPri‹ôyBôs
;

1453 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1454 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1457 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1458 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1460 
	}
}

1475 
__STATIC_INLINE
 
	$NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1477 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1478 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1479 
uöt32_t
 
SubPri‹ôyBôs
;

1481 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1482 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1484 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1485 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1486 
	}
}

1493 
__STATIC_INLINE
 
	$NVIC_Sy°emRe£t
()

1495 
	`__DSB
();

1497 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1498 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1499 
SCB_AIRCR_SYSRESETREQ_Msk
);

1500 
	`__DSB
();

1502 
	}
}

1515 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1532 
__STATIC_INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

1534 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

1536 
SysTick
->
LOAD
 = 
ticks
 - 1;

1537 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1538 
SysTick
->
VAL
 = 0;

1539 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1540 
SysTick_CTRL_TICKINT_Msk
 |

1541 
SysTick_CTRL_ENABLE_Msk
;

1543 
	}
}

1558 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1559 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1572 
__STATIC_INLINE
 
uöt32_t
 
	$ITM_SídCh¨
 (
uöt32_t
 
ch
)

1574 i‡((
ITM
->
TCR
 & 
ITM_TCR_ITMENA_Msk
) &&

1575 (
ITM
->
TER
 & (1UL << 0) ) )

1577 
ITM
->
PORT
[0].
u32
 == 0);

1578 
ITM
->
PORT
[0].
u8
 = (
uöt8_t
Ë
ch
;

1580  (
ch
);

1581 
	}
}

1591 
__STATIC_INLINE
 
öt32_t
 
	$ITM_Re˚iveCh¨
 () {

1592 
öt32_t
 
ch
 = -1;

1594 i‡(
ITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1595 
ch
 = 
ITM_RxBuf„r
;

1596 
ITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1599  (
ch
);

1600 
	}
}

1610 
__STATIC_INLINE
 
öt32_t
 
	$ITM_CheckCh¨
 () {

1612 i‡(
ITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1617 
	}
}

1625 #ifde‡
__˝lu•lus


	@cmsis/core_cm4.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #ifde‡
__˝lu•lus


46 #i‚de‡
__CORE_CM4_H_GENERIC


47 
	#__CORE_CM4_H_GENERIC


	)

71 
	#__CM4_CMSIS_VERSION_MAIN
 (0x03Ë

	)

72 
	#__CM4_CMSIS_VERSION_SUB
 (0x20Ë

	)

73 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__CM4_CMSIS_VERSION_SUB
 )

76 
	#__CORTEX_M
 (0x04Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__ICCARM__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__TMS470__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__STATIC_INLINE
 
ölöe


	)

93 #ñi‡
deföed
 ( 
__GNUC__
 )

94 
	#__ASM
 
__asm


	)

95 
	#__INLINE
 
ölöe


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

107 #i‡
deföed
 ( 
__CC_ARM
 )

108 #i‡
deföed
 
__TARGET_FPU_VFP


109 #i‡(
__FPU_PRESENT
 == 1)

110 
	#__FPU_USED
 1

	)

113 
	#__FPU_USED
 0

	)

116 
	#__FPU_USED
 0

	)

119 #ñi‡
deföed
 ( 
__ICCARM__
 )

120 #i‡
deföed
 
__ARMVFP__


121 #i‡(
__FPU_PRESENT
 == 1)

122 
	#__FPU_USED
 1

	)

125 
	#__FPU_USED
 0

	)

128 
	#__FPU_USED
 0

	)

131 #ñi‡
deföed
 ( 
__TMS470__
 )

132 #i‡
deföed
 
__TI_VFP_SUPPORT__


133 #i‡(
__FPU_PRESENT
 == 1)

134 
	#__FPU_USED
 1

	)

137 
	#__FPU_USED
 0

	)

140 
	#__FPU_USED
 0

	)

143 #ñi‡
deföed
 ( 
__GNUC__
 )

144 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

145 #i‡(
__FPU_PRESENT
 == 1)

146 
	#__FPU_USED
 1

	)

149 
	#__FPU_USED
 0

	)

152 
	#__FPU_USED
 0

	)

155 #ñi‡
deföed
 ( 
__TASKING__
 )

156 #i‡
deföed
 
__FPU_VFP__


157 #i‡(
__FPU_PRESENT
 == 1)

158 
	#__FPU_USED
 1

	)

161 
	#__FPU_USED
 0

	)

164 
	#__FPU_USED
 0

	)

168 
	~<°döt.h
>

169 
	~<c‹e_cmIn°r.h
>

170 
	~<c‹e_cmFunc.h
>

171 
	~<c‹e_cm4_simd.h
>

175 #i‚de‡
__CMSIS_GENERIC


177 #i‚de‡
__CORE_CM4_H_DEPENDANT


178 
	#__CORE_CM4_H_DEPENDANT


	)

181 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


182 #i‚de‡
__CM4_REV


183 
	#__CM4_REV
 0x0000

	)

187 #i‚de‡
__FPU_PRESENT


188 
	#__FPU_PRESENT
 0

	)

192 #i‚de‡
__MPU_PRESENT


193 
	#__MPU_PRESENT
 0

	)

197 #i‚de‡
__NVIC_PRIO_BITS


198 
	#__NVIC_PRIO_BITS
 4

	)

202 #i‚de‡
__Víd‹_SysTickC⁄fig


203 
	#__Víd‹_SysTickC⁄fig
 0

	)

216 #ifde‡
__˝lu•lus


217 
	#__I
 vﬁ©ûê

	)

219 
	#__I
 vﬁ©ûêc⁄°

	)

221 
	#__O
 vﬁ©ûê

	)

222 
	#__IO
 vﬁ©ûê

	)

255 #i‡(
__CORTEX_M
 != 0x04)

256 
uöt32_t
 
_ª£rved0
:27;

258 
uöt32_t
 
_ª£rved0
:16;

259 
uöt32_t
 
GE
:4;

260 
uöt32_t
 
_ª£rved1
:7;

262 
uöt32_t
 
Q
:1;

263 
uöt32_t
 
V
:1;

264 
uöt32_t
 
C
:1;

265 
uöt32_t
 
Z
:1;

266 
uöt32_t
 
N
:1;

267 } 
b
;

268 
uöt32_t
 
w
;

269 } 
	tAPSR_Ty≥
;

278 
uöt32_t
 
ISR
:9;

279 
uöt32_t
 
_ª£rved0
:23;

280 } 
b
;

281 
uöt32_t
 
w
;

282 } 
	tIPSR_Ty≥
;

291 
uöt32_t
 
ISR
:9;

292 #i‡(
__CORTEX_M
 != 0x04)

293 
uöt32_t
 
_ª£rved0
:15;

295 
uöt32_t
 
_ª£rved0
:7;

296 
uöt32_t
 
GE
:4;

297 
uöt32_t
 
_ª£rved1
:4;

299 
uöt32_t
 
T
:1;

300 
uöt32_t
 
IT
:2;

301 
uöt32_t
 
Q
:1;

302 
uöt32_t
 
V
:1;

303 
uöt32_t
 
C
:1;

304 
uöt32_t
 
Z
:1;

305 
uöt32_t
 
N
:1;

306 } 
b
;

307 
uöt32_t
 
w
;

308 } 
	txPSR_Ty≥
;

317 
uöt32_t
 
nPRIV
:1;

318 
uöt32_t
 
SPSEL
:1;

319 
uöt32_t
 
FPCA
:1;

320 
uöt32_t
 
_ª£rved0
:29;

321 } 
b
;

322 
uöt32_t
 
w
;

323 } 
	tCONTROL_Ty≥
;

338 
__IO
 
uöt32_t
 
ISER
[8];

339 
uöt32_t
 
RESERVED0
[24];

340 
__IO
 
uöt32_t
 
ICER
[8];

341 
uöt32_t
 
RSERVED1
[24];

342 
__IO
 
uöt32_t
 
ISPR
[8];

343 
uöt32_t
 
RESERVED2
[24];

344 
__IO
 
uöt32_t
 
ICPR
[8];

345 
uöt32_t
 
RESERVED3
[24];

346 
__IO
 
uöt32_t
 
IABR
[8];

347 
uöt32_t
 
RESERVED4
[56];

348 
__IO
 
uöt8_t
 
IP
[240];

349 
uöt32_t
 
RESERVED5
[644];

350 
__O
 
uöt32_t
 
STIR
;

351 } 
	tNVIC_Ty≥
;

354 
	#NVIC_STIR_INTID_Pos
 0

	)

355 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

370 
__I
 
uöt32_t
 
CPUID
;

371 
__IO
 
uöt32_t
 
ICSR
;

372 
__IO
 
uöt32_t
 
VTOR
;

373 
__IO
 
uöt32_t
 
AIRCR
;

374 
__IO
 
uöt32_t
 
SCR
;

375 
__IO
 
uöt32_t
 
CCR
;

376 
__IO
 
uöt8_t
 
SHP
[12];

377 
__IO
 
uöt32_t
 
SHCSR
;

378 
__IO
 
uöt32_t
 
CFSR
;

379 
__IO
 
uöt32_t
 
HFSR
;

380 
__IO
 
uöt32_t
 
DFSR
;

381 
__IO
 
uöt32_t
 
MMFAR
;

382 
__IO
 
uöt32_t
 
BFAR
;

383 
__IO
 
uöt32_t
 
AFSR
;

384 
__I
 
uöt32_t
 
PFR
[2];

385 
__I
 
uöt32_t
 
DFR
;

386 
__I
 
uöt32_t
 
ADR
;

387 
__I
 
uöt32_t
 
MMFR
[4];

388 
__I
 
uöt32_t
 
ISAR
[5];

389 
uöt32_t
 
RESERVED0
[5];

390 
__IO
 
uöt32_t
 
CPACR
;

391 } 
	tSCB_Ty≥
;

394 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

395 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

397 
	#SCB_CPUID_VARIANT_Pos
 20

	)

398 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

400 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

401 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

403 
	#SCB_CPUID_PARTNO_Pos
 4

	)

404 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

406 
	#SCB_CPUID_REVISION_Pos
 0

	)

407 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

410 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

411 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

413 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

414 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

416 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

417 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

419 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

420 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

422 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

423 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

425 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

426 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

428 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

429 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

431 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

432 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

434 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

435 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

437 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

438 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

441 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

442 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

445 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

446 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

448 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

449 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

451 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

452 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

454 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

455 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

457 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

458 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

460 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

461 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

463 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

464 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

467 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

468 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

470 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

471 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

473 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

474 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

477 
	#SCB_CCR_STKALIGN_Pos
 9

	)

478 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

480 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

481 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

483 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

484 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

486 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

487 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

489 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

490 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

492 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

493 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

496 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

497 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

499 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

500 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

502 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

503 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

505 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

506 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

508 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

509 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

511 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

512 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

514 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

515 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

517 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

518 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

520 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

521 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

523 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

524 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

526 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

527 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

529 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

530 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

532 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

533 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

535 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

536 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

539 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

540 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

542 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

543 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

545 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

546 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

549 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

550 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

552 
	#SCB_HFSR_FORCED_Pos
 30

	)

553 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

555 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

556 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

559 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

560 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

562 
	#SCB_DFSR_VCATCH_Pos
 3

	)

563 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

565 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

566 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

568 
	#SCB_DFSR_BKPT_Pos
 1

	)

569 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

571 
	#SCB_DFSR_HALTED_Pos
 0

	)

572 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

587 
uöt32_t
 
RESERVED0
[1];

588 
__I
 
uöt32_t
 
ICTR
;

589 
__IO
 
uöt32_t
 
ACTLR
;

590 } 
	tSCnSCB_Ty≥
;

593 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

594 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

597 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9

	)

598 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

600 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8

	)

601 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

603 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

604 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

606 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

607 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

609 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

610 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

625 
__IO
 
uöt32_t
 
CTRL
;

626 
__IO
 
uöt32_t
 
LOAD
;

627 
__IO
 
uöt32_t
 
VAL
;

628 
__I
 
uöt32_t
 
CALIB
;

629 } 
	tSysTick_Ty≥
;

632 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

633 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

635 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

636 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

638 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

639 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

641 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

642 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

645 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

646 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

649 
	#SysTick_VAL_CURRENT_Pos
 0

	)

650 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

653 
	#SysTick_CALIB_NOREF_Pos
 31

	)

654 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

656 
	#SysTick_CALIB_SKEW_Pos
 30

	)

657 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

659 
	#SysTick_CALIB_TENMS_Pos
 0

	)

660 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

675 
__O
 union

677 
__O
 
uöt8_t
 
u8
;

678 
__O
 
uöt16_t
 
u16
;

679 
__O
 
uöt32_t
 
u32
;

680 } 
PORT
 [32];

681 
uöt32_t
 
RESERVED0
[864];

682 
__IO
 
uöt32_t
 
TER
;

683 
uöt32_t
 
RESERVED1
[15];

684 
__IO
 
uöt32_t
 
TPR
;

685 
uöt32_t
 
RESERVED2
[15];

686 
__IO
 
uöt32_t
 
TCR
;

687 
uöt32_t
 
RESERVED3
[29];

688 
__O
 
uöt32_t
 
IWR
;

689 
__I
 
uöt32_t
 
IRR
;

690 
__IO
 
uöt32_t
 
IMCR
;

691 
uöt32_t
 
RESERVED4
[43];

692 
__O
 
uöt32_t
 
LAR
;

693 
__I
 
uöt32_t
 
LSR
;

694 
uöt32_t
 
RESERVED5
[6];

695 
__I
 
uöt32_t
 
PID4
;

696 
__I
 
uöt32_t
 
PID5
;

697 
__I
 
uöt32_t
 
PID6
;

698 
__I
 
uöt32_t
 
PID7
;

699 
__I
 
uöt32_t
 
PID0
;

700 
__I
 
uöt32_t
 
PID1
;

701 
__I
 
uöt32_t
 
PID2
;

702 
__I
 
uöt32_t
 
PID3
;

703 
__I
 
uöt32_t
 
CID0
;

704 
__I
 
uöt32_t
 
CID1
;

705 
__I
 
uöt32_t
 
CID2
;

706 
__I
 
uöt32_t
 
CID3
;

707 } 
	tITM_Ty≥
;

710 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

711 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

714 
	#ITM_TCR_BUSY_Pos
 23

	)

715 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

717 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

718 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

720 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

721 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

723 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

724 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

726 
	#ITM_TCR_SWOENA_Pos
 4

	)

727 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

729 
	#ITM_TCR_DWTENA_Pos
 3

	)

730 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

732 
	#ITM_TCR_SYNCENA_Pos
 2

	)

733 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

735 
	#ITM_TCR_TSENA_Pos
 1

	)

736 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

738 
	#ITM_TCR_ITMENA_Pos
 0

	)

739 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

742 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

743 
	#ITM_IWR_ATVALIDM_Msk
 (1UL << 
ITM_IWR_ATVALIDM_Pos
Ë

	)

746 
	#ITM_IRR_ATREADYM_Pos
 0

	)

747 
	#ITM_IRR_ATREADYM_Msk
 (1UL << 
ITM_IRR_ATREADYM_Pos
Ë

	)

750 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

751 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL << 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

754 
	#ITM_LSR_ByãAcc_Pos
 2

	)

755 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

757 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

758 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

760 
	#ITM_LSR_Pª£¡_Pos
 0

	)

761 
	#ITM_LSR_Pª£¡_Msk
 (1UL << 
ITM_LSR_Pª£¡_Pos
Ë

	)

776 
__IO
 
uöt32_t
 
CTRL
;

777 
__IO
 
uöt32_t
 
CYCCNT
;

778 
__IO
 
uöt32_t
 
CPICNT
;

779 
__IO
 
uöt32_t
 
EXCCNT
;

780 
__IO
 
uöt32_t
 
SLEEPCNT
;

781 
__IO
 
uöt32_t
 
LSUCNT
;

782 
__IO
 
uöt32_t
 
FOLDCNT
;

783 
__I
 
uöt32_t
 
PCSR
;

784 
__IO
 
uöt32_t
 
COMP0
;

785 
__IO
 
uöt32_t
 
MASK0
;

786 
__IO
 
uöt32_t
 
FUNCTION0
;

787 
uöt32_t
 
RESERVED0
[1];

788 
__IO
 
uöt32_t
 
COMP1
;

789 
__IO
 
uöt32_t
 
MASK1
;

790 
__IO
 
uöt32_t
 
FUNCTION1
;

791 
uöt32_t
 
RESERVED1
[1];

792 
__IO
 
uöt32_t
 
COMP2
;

793 
__IO
 
uöt32_t
 
MASK2
;

794 
__IO
 
uöt32_t
 
FUNCTION2
;

795 
uöt32_t
 
RESERVED2
[1];

796 
__IO
 
uöt32_t
 
COMP3
;

797 
__IO
 
uöt32_t
 
MASK3
;

798 
__IO
 
uöt32_t
 
FUNCTION3
;

799 } 
	tDWT_Ty≥
;

802 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

803 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

805 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

806 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

808 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

809 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

811 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

812 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

814 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

815 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

817 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

818 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

820 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

821 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

823 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

824 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

826 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

827 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

829 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

830 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

832 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

833 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

835 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

836 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

838 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

839 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

841 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

842 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

844 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

845 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

847 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

848 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

850 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

851 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

853 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

854 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

857 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

858 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

861 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

862 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

865 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

866 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

869 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

870 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

873 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

874 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

877 
	#DWT_MASK_MASK_Pos
 0

	)

878 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

881 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

882 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

884 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

885 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

887 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

888 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

890 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

891 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

893 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

894 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

896 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

897 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

899 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

900 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

902 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

903 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

905 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

906 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

921 
__IO
 
uöt32_t
 
SSPSR
;

922 
__IO
 
uöt32_t
 
CSPSR
;

923 
uöt32_t
 
RESERVED0
[2];

924 
__IO
 
uöt32_t
 
ACPR
;

925 
uöt32_t
 
RESERVED1
[55];

926 
__IO
 
uöt32_t
 
SPPR
;

927 
uöt32_t
 
RESERVED2
[131];

928 
__I
 
uöt32_t
 
FFSR
;

929 
__IO
 
uöt32_t
 
FFCR
;

930 
__I
 
uöt32_t
 
FSCR
;

931 
uöt32_t
 
RESERVED3
[759];

932 
__I
 
uöt32_t
 
TRIGGER
;

933 
__I
 
uöt32_t
 
FIFO0
;

934 
__I
 
uöt32_t
 
ITATBCTR2
;

935 
uöt32_t
 
RESERVED4
[1];

936 
__I
 
uöt32_t
 
ITATBCTR0
;

937 
__I
 
uöt32_t
 
FIFO1
;

938 
__IO
 
uöt32_t
 
ITCTRL
;

939 
uöt32_t
 
RESERVED5
[39];

940 
__IO
 
uöt32_t
 
CLAIMSET
;

941 
__IO
 
uöt32_t
 
CLAIMCLR
;

942 
uöt32_t
 
RESERVED7
[8];

943 
__I
 
uöt32_t
 
DEVID
;

944 
__I
 
uöt32_t
 
DEVTYPE
;

945 } 
	tTPI_Ty≥
;

948 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

949 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

952 
	#TPI_SPPR_TXMODE_Pos
 0

	)

953 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

956 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

957 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

959 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

960 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

962 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

963 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

965 
	#TPI_FFSR_FlInProg_Pos
 0

	)

966 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

969 
	#TPI_FFCR_TrigIn_Pos
 8

	)

970 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

972 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

973 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

976 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

977 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

980 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

981 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

983 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

984 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

986 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

987 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

989 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

990 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

992 
	#TPI_FIFO0_ETM2_Pos
 16

	)

993 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

995 
	#TPI_FIFO0_ETM1_Pos
 8

	)

996 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

998 
	#TPI_FIFO0_ETM0_Pos
 0

	)

999 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

1002 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

1003 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

1006 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

1007 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1009 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

1010 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1012 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

1013 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1015 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

1016 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1018 
	#TPI_FIFO1_ITM2_Pos
 16

	)

1019 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1021 
	#TPI_FIFO1_ITM1_Pos
 8

	)

1022 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1024 
	#TPI_FIFO1_ITM0_Pos
 0

	)

1025 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

1028 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

1029 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

1032 
	#TPI_ITCTRL_Mode_Pos
 0

	)

1033 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

1036 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

1037 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1039 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

1040 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1042 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

1043 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1045 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

1046 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1048 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

1049 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1051 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

1052 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

1055 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

1056 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

1058 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

1059 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1064 #i‡(
__MPU_PRESENT
 == 1)

1075 
__I
 
uöt32_t
 
TYPE
;

1076 
__IO
 
uöt32_t
 
CTRL
;

1077 
__IO
 
uöt32_t
 
RNR
;

1078 
__IO
 
uöt32_t
 
RBAR
;

1079 
__IO
 
uöt32_t
 
RASR
;

1080 
__IO
 
uöt32_t
 
RBAR_A1
;

1081 
__IO
 
uöt32_t
 
RASR_A1
;

1082 
__IO
 
uöt32_t
 
RBAR_A2
;

1083 
__IO
 
uöt32_t
 
RASR_A2
;

1084 
__IO
 
uöt32_t
 
RBAR_A3
;

1085 
__IO
 
uöt32_t
 
RASR_A3
;

1086 } 
	tMPU_Ty≥
;

1089 
	#MPU_TYPE_IREGION_Pos
 16

	)

1090 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1092 
	#MPU_TYPE_DREGION_Pos
 8

	)

1093 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1095 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1096 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1099 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1100 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1102 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1103 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1105 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1106 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1109 
	#MPU_RNR_REGION_Pos
 0

	)

1110 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1113 
	#MPU_RBAR_ADDR_Pos
 5

	)

1114 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1116 
	#MPU_RBAR_VALID_Pos
 4

	)

1117 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1119 
	#MPU_RBAR_REGION_Pos
 0

	)

1120 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1123 
	#MPU_RASR_ATTRS_Pos
 16

	)

1124 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1126 
	#MPU_RASR_XN_Pos
 28

	)

1127 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1129 
	#MPU_RASR_AP_Pos
 24

	)

1130 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1132 
	#MPU_RASR_TEX_Pos
 19

	)

1133 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1135 
	#MPU_RASR_S_Pos
 18

	)

1136 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1138 
	#MPU_RASR_C_Pos
 17

	)

1139 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1141 
	#MPU_RASR_B_Pos
 16

	)

1142 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1144 
	#MPU_RASR_SRD_Pos
 8

	)

1145 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1147 
	#MPU_RASR_SIZE_Pos
 1

	)

1148 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1150 
	#MPU_RASR_ENABLE_Pos
 0

	)

1151 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1157 #i‡(
__FPU_PRESENT
 == 1)

1168 
uöt32_t
 
RESERVED0
[1];

1169 
__IO
 
uöt32_t
 
FPCCR
;

1170 
__IO
 
uöt32_t
 
FPCAR
;

1171 
__IO
 
uöt32_t
 
FPDSCR
;

1172 
__I
 
uöt32_t
 
MVFR0
;

1173 
__I
 
uöt32_t
 
MVFR1
;

1174 } 
	tFPU_Ty≥
;

1177 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

1178 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1180 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

1181 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1183 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

1184 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1186 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

1187 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1189 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

1190 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1192 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

1193 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1195 
	#FPU_FPCCR_THREAD_Pos
 3

	)

1196 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1198 
	#FPU_FPCCR_USER_Pos
 1

	)

1199 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1201 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

1202 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

1205 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

1206 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1209 
	#FPU_FPDSCR_AHP_Pos
 26

	)

1210 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1212 
	#FPU_FPDSCR_DN_Pos
 25

	)

1213 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1215 
	#FPU_FPDSCR_FZ_Pos
 24

	)

1216 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1218 
	#FPU_FPDSCR_RMode_Pos
 22

	)

1219 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1222 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

1223 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1225 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

1226 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1228 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

1229 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1231 
	#FPU_MVFR0_Divide_Pos
 16

	)

1232 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1234 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

1235 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1237 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

1238 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1240 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

1241 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1243 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

1244 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

1247 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

1248 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1250 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

1251 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1253 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

1254 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1256 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

1257 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

1273 
__IO
 
uöt32_t
 
DHCSR
;

1274 
__O
 
uöt32_t
 
DCRSR
;

1275 
__IO
 
uöt32_t
 
DCRDR
;

1276 
__IO
 
uöt32_t
 
DEMCR
;

1277 } 
	tC‹eDebug_Ty≥
;

1280 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1281 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1283 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1284 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1286 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1287 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1289 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1290 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1292 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1293 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1295 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1296 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1298 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1299 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1301 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1302 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1304 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1305 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1307 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1308 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1310 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1311 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1313 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1314 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1317 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1318 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1320 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1321 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1324 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1325 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1327 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1328 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1330 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1331 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1333 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1334 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1336 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1337 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1339 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1340 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1342 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1343 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1345 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1346 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1348 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1349 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1351 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1352 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1354 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1355 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1357 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1358 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1360 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1361 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1373 
	#SCS_BASE
 (0xE000E000ULË

	)

1374 
	#ITM_BASE
 (0xE0000000ULË

	)

1375 
	#DWT_BASE
 (0xE0001000ULË

	)

1376 
	#TPI_BASE
 (0xE0040000ULË

	)

1377 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1378 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1379 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1380 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1382 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1383 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1384 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1385 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1386 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1387 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1388 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1389 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1391 #i‡(
__MPU_PRESENT
 == 1)

1392 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1393 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1396 #i‡(
__FPU_PRESENT
 == 1)

1397 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1398 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1435 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1437 
uöt32_t
 
ªg_vÆue
;

1438 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1440 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1441 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1442 
ªg_vÆue
 = (reg_value |

1443 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1444 (
Pri‹ôyGroupTmp
 << 8));

1445 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1455 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1457  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1467 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1470 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1480 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1482 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1496 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1498 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1508 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1510 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1520 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1522 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1535 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1537 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1550 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1552 if(
IRQn
 < 0) {

1553 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1555 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1570 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1573 if(
IRQn
 < 0) {

1574 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1576 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1592 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1594 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1595 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1596 
uöt32_t
 
SubPri‹ôyBôs
;

1598 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1599 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1602 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1603 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1620 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1622 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1623 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1624 
uöt32_t
 
SubPri‹ôyBôs
;

1626 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1627 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1629 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1630 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1638 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1640 
__DSB
();

1642 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1643 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1644 
SCB_AIRCR_SYSRESETREQ_Msk
);

1645 
__DSB
();

1660 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1677 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1679 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

1681 
SysTick
->
LOAD
 = 
ticks
 - 1;

1682 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1683 
SysTick
->
VAL
 = 0;

1684 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1685 
SysTick_CTRL_TICKINT_Msk
 |

1686 
SysTick_CTRL_ENABLE_Msk
;

1703 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1704 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1717 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1719 i‡((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1720 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1722 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1723 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1725  (
	gch
);

1736 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1737 
öt32_t
 
	gch
 = -1;

1739 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1740 
ch
 = 
ITM_RxBuf„r
;

1741 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1744  (
	gch
);

1755 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1757 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1770 #ifde‡
__˝lu•lus


	@cmsis/core_cm4_simd.h

38 #ifde‡
__˝lu•lus


42 #i‚de‡
__CORE_CM4_SIMD_H


43 
	#__CORE_CM4_SIMD_H


	)

57 #i‡ 
deföed
 ( 
__CC_ARM
 )

61 
	#__SADD8
 
__ßdd8


	)

62 
	#__QADD8
 
__qadd8


	)

63 
	#__SHADD8
 
__shadd8


	)

64 
	#__UADD8
 
__uadd8


	)

65 
	#__UQADD8
 
__uqadd8


	)

66 
	#__UHADD8
 
__uhadd8


	)

67 
	#__SSUB8
 
__ssub8


	)

68 
	#__QSUB8
 
__qsub8


	)

69 
	#__SHSUB8
 
__shsub8


	)

70 
	#__USUB8
 
__usub8


	)

71 
	#__UQSUB8
 
__uqsub8


	)

72 
	#__UHSUB8
 
__uhsub8


	)

73 
	#__SADD16
 
__ßdd16


	)

74 
	#__QADD16
 
__qadd16


	)

75 
	#__SHADD16
 
__shadd16


	)

76 
	#__UADD16
 
__uadd16


	)

77 
	#__UQADD16
 
__uqadd16


	)

78 
	#__UHADD16
 
__uhadd16


	)

79 
	#__SSUB16
 
__ssub16


	)

80 
	#__QSUB16
 
__qsub16


	)

81 
	#__SHSUB16
 
__shsub16


	)

82 
	#__USUB16
 
__usub16


	)

83 
	#__UQSUB16
 
__uqsub16


	)

84 
	#__UHSUB16
 
__uhsub16


	)

85 
	#__SASX
 
__ßsx


	)

86 
	#__QASX
 
__qasx


	)

87 
	#__SHASX
 
__shasx


	)

88 
	#__UASX
 
__uasx


	)

89 
	#__UQASX
 
__uqasx


	)

90 
	#__UHASX
 
__uhasx


	)

91 
	#__SSAX
 
__sßx


	)

92 
	#__QSAX
 
__qßx


	)

93 
	#__SHSAX
 
__shßx


	)

94 
	#__USAX
 
__ußx


	)

95 
	#__UQSAX
 
__uqßx


	)

96 
	#__UHSAX
 
__uhßx


	)

97 
	#__USAD8
 
__ußd8


	)

98 
	#__USADA8
 
__ußda8


	)

99 
	#__SSAT16
 
__sßt16


	)

100 
	#__USAT16
 
__ußt16


	)

101 
	#__UXTB16
 
__uxtb16


	)

102 
	#__UXTAB16
 
__uxèb16


	)

103 
	#__SXTB16
 
__sxtb16


	)

104 
	#__SXTAB16
 
__sxèb16


	)

105 
	#__SMUAD
 
__smuad


	)

106 
	#__SMUADX
 
__smuadx


	)

107 
	#__SMLAD
 
__smœd


	)

108 
	#__SMLADX
 
__smœdx


	)

109 
	#__SMLALD
 
__smœld


	)

110 
	#__SMLALDX
 
__smœldx


	)

111 
	#__SMUSD
 
__smusd


	)

112 
	#__SMUSDX
 
__smusdx


	)

113 
	#__SMLSD
 
__smlsd


	)

114 
	#__SMLSDX
 
__smlsdx


	)

115 
	#__SMLSLD
 
__sml¶d


	)

116 
	#__SMLSLDX
 
__sml¶dx


	)

117 
	#__SEL
 
__£l


	)

118 
	#__QADD
 
__qadd


	)

119 
	#__QSUB
 
__qsub


	)

121 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)ËË& 0x0000FFFFULË| \

	)

122 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)) & 0xFFFF0000UL) )

124 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)ËË& 0xFFFF0000ULË| \

	)

125 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)) & 0x0000FFFFUL) )

127 
	#__SMMLA
(
ARG1
,
ARG2
,
ARG3
Ë–(
öt32_t
)((((
öt64_t
)(ARG1Ë* (ARG2)Ë+ \

	)

128 ((
öt64_t
)(
ARG3
) << 32) ) >> 32))

134 #ñi‡
deföed
 ( 
__ICCARM__
 )

138 
	~<cmsis_ür.h
>

144 #ñi‡
deföed
 ( 
__TMS470__
 )

148 
	~<cmsis_ccs.h
>

154 #ñi‡
deföed
 ( 
__GNUC__
 )

158 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

160 
uöt32_t
 
ªsu…
;

162 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

163 (
ªsu…
);

164 
	}
}

166 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

168 
uöt32_t
 
ªsu…
;

170 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

171 (
ªsu…
);

172 
	}
}

174 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

176 
uöt32_t
 
ªsu…
;

178 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

179 (
ªsu…
);

180 
	}
}

182 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

184 
uöt32_t
 
ªsu…
;

186 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

187 (
ªsu…
);

188 
	}
}

190 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

192 
uöt32_t
 
ªsu…
;

194 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

195 (
ªsu…
);

196 
	}
}

198 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

200 
uöt32_t
 
ªsu…
;

202 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

203 (
ªsu…
);

204 
	}
}

207 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

209 
uöt32_t
 
ªsu…
;

211 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

212 (
ªsu…
);

213 
	}
}

215 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

217 
uöt32_t
 
ªsu…
;

219 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

220 (
ªsu…
);

221 
	}
}

223 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

225 
uöt32_t
 
ªsu…
;

227 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

228 (
ªsu…
);

229 
	}
}

231 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

233 
uöt32_t
 
ªsu…
;

235 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

236 (
ªsu…
);

237 
	}
}

239 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

241 
uöt32_t
 
ªsu…
;

243 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

244 (
ªsu…
);

245 
	}
}

247 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

249 
uöt32_t
 
ªsu…
;

251 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

252 (
ªsu…
);

253 
	}
}

256 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

258 
uöt32_t
 
ªsu…
;

260 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

261 (
ªsu…
);

262 
	}
}

264 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

266 
uöt32_t
 
ªsu…
;

268 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

269 (
ªsu…
);

270 
	}
}

272 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

274 
uöt32_t
 
ªsu…
;

276 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

277 (
ªsu…
);

278 
	}
}

280 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

282 
uöt32_t
 
ªsu…
;

284 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

285 (
ªsu…
);

286 
	}
}

288 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

290 
uöt32_t
 
ªsu…
;

292 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

293 (
ªsu…
);

294 
	}
}

296 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

298 
uöt32_t
 
ªsu…
;

300 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

301 (
ªsu…
);

302 
	}
}

304 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

306 
uöt32_t
 
ªsu…
;

308 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

309 (
ªsu…
);

310 
	}
}

312 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

314 
uöt32_t
 
ªsu…
;

316 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

317 (
ªsu…
);

318 
	}
}

320 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

322 
uöt32_t
 
ªsu…
;

324 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

325 (
ªsu…
);

326 
	}
}

328 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

330 
uöt32_t
 
ªsu…
;

332 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

333 (
ªsu…
);

334 
	}
}

336 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

338 
uöt32_t
 
ªsu…
;

340 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

341 (
ªsu…
);

342 
	}
}

344 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

346 
uöt32_t
 
ªsu…
;

348 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

349 (
ªsu…
);

350 
	}
}

352 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

354 
uöt32_t
 
ªsu…
;

356 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

357 (
ªsu…
);

358 
	}
}

360 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

362 
uöt32_t
 
ªsu…
;

364 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

365 (
ªsu…
);

366 
	}
}

368 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

370 
uöt32_t
 
ªsu…
;

372 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

373 (
ªsu…
);

374 
	}
}

376 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

378 
uöt32_t
 
ªsu…
;

380 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

381 (
ªsu…
);

382 
	}
}

384 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

386 
uöt32_t
 
ªsu…
;

388 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

389 (
ªsu…
);

390 
	}
}

392 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

394 
uöt32_t
 
ªsu…
;

396 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

397 (
ªsu…
);

398 
	}
}

400 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

402 
uöt32_t
 
ªsu…
;

404 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

405 (
ªsu…
);

406 
	}
}

408 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

410 
uöt32_t
 
ªsu…
;

412 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

413 (
ªsu…
);

414 
	}
}

416 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

418 
uöt32_t
 
ªsu…
;

420 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

421 (
ªsu…
);

422 
	}
}

424 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

426 
uöt32_t
 
ªsu…
;

428 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

429 (
ªsu…
);

430 
	}
}

432 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

434 
uöt32_t
 
ªsu…
;

436 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

437 (
ªsu…
);

438 
	}
}

440 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

442 
uöt32_t
 
ªsu…
;

444 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

445 (
ªsu…
);

446 
	}
}

448 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

450 
uöt32_t
 
ªsu…
;

452 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

453 (
ªsu…
);

454 
	}
}

456 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

458 
uöt32_t
 
ªsu…
;

460 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

461 (
ªsu…
);

462 
	}
}

464 
	#__SSAT16
(
ARG1
,
ARG2
Ë\

	)

466 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

467 
__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

468 
__RES
; \

471 
	#__USAT16
(
ARG1
,
ARG2
Ë\

	)

473 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

474 
__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

475 
__RES
; \

478 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

480 
uöt32_t
 
ªsu…
;

482 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

483 (
ªsu…
);

484 
	}
}

486 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

488 
uöt32_t
 
ªsu…
;

490 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

491 (
ªsu…
);

492 
	}
}

494 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

496 
uöt32_t
 
ªsu…
;

498 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

499 (
ªsu…
);

500 
	}
}

502 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

504 
uöt32_t
 
ªsu…
;

506 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

507 (
ªsu…
);

508 
	}
}

510 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

512 
uöt32_t
 
ªsu…
;

514 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

515 (
ªsu…
);

516 
	}
}

518 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

520 
uöt32_t
 
ªsu…
;

522 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

523 (
ªsu…
);

524 
	}
}

526 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

528 
uöt32_t
 
ªsu…
;

530 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

531 (
ªsu…
);

532 
	}
}

534 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

536 
uöt32_t
 
ªsu…
;

538 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

539 (
ªsu…
);

540 
	}
}

542 
	#__SMLALD
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

544 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

545 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

546 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

549 
	#__SMLALDX
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

551 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

552 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

553 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

556 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

558 
uöt32_t
 
ªsu…
;

560 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

561 (
ªsu…
);

562 
	}
}

564 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

566 
uöt32_t
 
ªsu…
;

568 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

569 (
ªsu…
);

570 
	}
}

572 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

574 
uöt32_t
 
ªsu…
;

576 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

577 (
ªsu…
);

578 
	}
}

580 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

582 
uöt32_t
 
ªsu…
;

584 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

585 (
ªsu…
);

586 
	}
}

588 
	#__SMLSLD
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

590 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

591 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

592 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

595 
	#__SMLSLDX
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

597 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

598 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

599 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

602 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

604 
uöt32_t
 
ªsu…
;

606 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

607 (
ªsu…
);

608 
	}
}

610 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD
(
uöt32_t
 
›1
, uöt32_à
›2
)

612 
uöt32_t
 
ªsu…
;

614 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

615 (
ªsu…
);

616 
	}
}

618 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB
(
uöt32_t
 
›1
, uöt32_à
›2
)

620 
uöt32_t
 
ªsu…
;

622 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

623 (
ªsu…
);

624 
	}
}

626 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

628 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

629 
__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

630 
__RES
; \

633 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

635 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

636 i‡(
ARG3
 == 0) \

637 
__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

639 
__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

640 
__RES
; \

643 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMMLA
 (
öt32_t
 
›1
, i¡32_à
›2
, i¡32_à
›3
)

645 
öt32_t
 
ªsu…
;

647 
__ASM
 vﬁ©ûê("smmœ %0, %1, %2, %3" : "Ù" (
ªsu…
): "r" (
›1
), "r" (
›2
), "r" (
›3
) );

648 (
ªsu…
);

649 
	}
}

655 #ñi‡
deföed
 ( 
__TASKING__
 )

671 #ifde‡
__˝lu•lus


	@cmsis/core_cmFunc.h

38 #i‚de‡
__CORE_CMFUNC_H


39 
	#__CORE_CMFUNC_H


	)

48 #i‡ 
deföed
 ( 
__CC_ARM
 )

51 #i‡(
__ARMCC_VERSION
 < 400677)

64 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

66 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

67 (
__ªgC⁄åﬁ
);

68 
	}
}

77 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

79 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

80 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

81 
	}
}

90 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

92 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

93 (
__ªgIPSR
);

94 
	}
}

103 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

105 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

106 (
__ªgAPSR
);

107 
	}
}

116 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

118 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

119 (
__ªgXPSR
);

120 
	}
}

129 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

131 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

132 (
__ªgPro˚ssSèckPoöãr
);

133 
	}
}

142 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

144 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

145 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

146 
	}
}

155 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

157 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

158 (
__ªgMaöSèckPoöãr
);

159 
	}
}

168 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

170 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

171 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

172 
	}
}

181 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

183 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

184 (
__ªgPriMask
);

185 
	}
}

194 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

196 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

197 
__ªgPriMask
 = (
¥iMask
);

198 
	}
}

201 #i‡ (
__CORTEX_M
 >= 0x03)

208 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

216 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

225 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

227 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

228 (
__ªgBa£Pri
);

229 
	}
}

238 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

240 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

241 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

242 
	}
}

251 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

253 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

254 (
__ªgFau…Mask
);

255 
	}
}

264 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

266 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

267 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

268 
	}
}

273 #i‡ (
__CORTEX_M
 == 0x04)

281 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

283 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

284 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

285 (
__ªgÂs¸
);

289 
	}
}

298 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

300 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

301 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

302 
__ªgÂs¸
 = (
Âs¸
);

304 
	}
}

309 #ñi‡
deföed
 ( 
__ICCARM__
 )

312 
	~<cmsis_ür.h
>

315 #ñi‡
deföed
 ( 
__TMS470__
 )

318 
	~<cmsis_ccs.h
>

321 #ñi‡
deföed
 ( 
__GNUC__
 )

329 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_úq
()

331 
__ASM
 volatile ("cpsie i" : : : "memory");

332 
	}
}

340 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_úq
()

342 
__ASM
 volatile ("cpsid i" : : : "memory");

343 
	}
}

352 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

354 
uöt32_t
 
ªsu…
;

356 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

357 (
ªsu…
);

358 
	}
}

367 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

369 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) : "memory");

370 
	}
}

379 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

381 
uöt32_t
 
ªsu…
;

383 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

384 (
ªsu…
);

385 
	}
}

394 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

396 
uöt32_t
 
ªsu…
;

398 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

399 (
ªsu…
);

400 
	}
}

409 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

411 
uöt32_t
 
ªsu…
;

413 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

414 (
ªsu…
);

415 
	}
}

424 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

426 
uöt32_t
 
ªsu…
;

428 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

429 (
ªsu…
);

430 
	}
}

439 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

441 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) : "sp");

442 
	}
}

451 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

453 
uöt32_t
 
ªsu…
;

455 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

456 (
ªsu…
);

457 
	}
}

466 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

468 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) : "sp");

469 
	}
}

478 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

480 
uöt32_t
 
ªsu…
;

482 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

483 (
ªsu…
);

484 
	}
}

493 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

495 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) : "memory");

496 
	}
}

499 #i‡ (
__CORTEX_M
 >= 0x03)

506 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_Áu…_úq
()

508 
__ASM
 volatile ("cpsie f" : : : "memory");

509 
	}
}

517 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_Áu…_úq
()

519 
__ASM
 volatile ("cpsid f" : : : "memory");

520 
	}
}

529 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

531 
uöt32_t
 
ªsu…
;

533 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

534 (
ªsu…
);

535 
	}
}

544 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

546 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) : "memory");

547 
	}
}

556 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

558 
uöt32_t
 
ªsu…
;

560 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

561 (
ªsu…
);

562 
	}
}

571 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

573 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) : "memory");

574 
	}
}

579 #i‡ (
__CORTEX_M
 == 0x04)

587 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

589 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

590 
uöt32_t
 
ªsu…
;

593 
__ASM
 volatile ("");

594 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

595 
__ASM
 volatile ("");

596 (
ªsu…
);

600 
	}
}

609 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

611 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

613 
__ASM
 volatile ("");

614 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) : "vfpcc");

615 
__ASM
 volatile ("");

617 
	}
}

622 #ñi‡
deföed
 ( 
__TASKING__
 )

	@cmsis/core_cmInstr.h

38 #i‚de‡
__CORE_CMINSTR_H


39 
	#__CORE_CMINSTR_H


	)

48 #i‡ 
deföed
 ( 
__CC_ARM
 )

51 #i‡(
__ARMCC_VERSION
 < 400677)

60 
	#__NOP
 
__n›


	)

68 
	#__WFI
 
__wfi


	)

76 
	#__WFE
 
__w„


	)

83 
	#__SEV
 
__£v


	)

92 
	#__ISB
(Ë
	`__isb
(0xF)

	)

100 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

108 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

118 
	#__REV
 
__ªv


	)

128 #i‚de‡
__NO_EMBEDDED_ASM


129 
__©åibuã__
((
£˘i⁄
(".ªv16_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

131 
ªv16
 
r0
,Ñ0

132 
bx
 
Ã


133 
	}
}

143 #i‚de‡
__NO_EMBEDDED_ASM


144 
__©åibuã__
((
£˘i⁄
(".ªvsh_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

146 
ªvsh
 
r0
,Ñ0

147 
bx
 
Ã


148 
	}
}

160 
	#__ROR
 
__r‹


	)

171 
	#__BKPT
(
vÆue
Ë
	`__bªakpoöt
(vÆue)

	)

174 #i‡ (
__CORTEX_M
 >= 0x03)

183 
	#__RBIT
 
__rbô


	)

193 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

203 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

213 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

225 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

237 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

249 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

257 
	#__CLREX
 
__˛ªx


	)

268 
	#__SSAT
 
__sßt


	)

279 
	#__USAT
 
__ußt


	)

289 
	#__CLZ
 
__˛z


	)

295 #ñi‡
deföed
 ( 
__ICCARM__
 )

298 
	~<cmsis_ür.h
>

301 #ñi‡
deföed
 ( 
__TMS470__
 )

304 
	~<cmsis_ccs.h
>

307 #ñi‡
deföed
 ( 
__GNUC__
 )

313 #i‡
deföed
 (
__thumb__
Ë&& !deföed (
__thumb2__
)

314 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"ˆ" (r)

	)

315 
	#__CMSIS_GCC_USE_REG
(
r
Ë"l" (r)

	)

317 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"Ù" (r)

	)

318 
	#__CMSIS_GCC_USE_REG
(
r
Ë"r" (r)

	)

325 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__NOP
()

327 
__ASM
 volatile ("nop");

328 
	}
}

336 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFI
()

338 
__ASM
 volatile ("wfi");

339 
	}
}

347 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFE
()

349 
__ASM
 volatile ("wfe");

350 
	}
}

357 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__SEV
()

359 
__ASM
 volatile ("sev");

360 
	}
}

369 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__ISB
()

371 
__ASM
 volatile ("isb");

372 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DSB
()

382 
__ASM
 volatile ("dsb");

383 
	}
}

391 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DMB
()

393 
__ASM
 volatile ("dmb");

394 
	}
}

404 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

406 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 5)

407  
	`__buûtö_bsw≠32
(
vÆue
);

409 
uöt32_t
 
ªsu…
;

411 
__ASM
 vﬁ©ûê("ªv %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

412 (
ªsu…
);

414 
	}
}

424 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

426 
uöt32_t
 
ªsu…
;

428 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

429 (
ªsu…
);

430 
	}
}

440 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

442 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

443  ()
	`__buûtö_bsw≠16
(
vÆue
);

445 
uöt32_t
 
ªsu…
;

447 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

448 (
ªsu…
);

450 
	}
}

461 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

463  (
›1
 >> 
›2
) | (op1 << (32 - op2));

464 
	}
}

475 
	#__BKPT
(
vÆue
Ë
__ASM
 vﬁ©ûê("bk± "#vÆue)

	)

478 #i‡ (
__CORTEX_M
 >= 0x03)

487 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

489 
uöt32_t
 
ªsu…
;

491 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

492 (
ªsu…
);

493 
	}
}

503 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

505 
uöt32_t
 
ªsu…
;

507 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

508 
__ASM
 vﬁ©ûê("ldªxb %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

513 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

515 (
ªsu…
);

516 
	}
}

526 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

528 
uöt32_t
 
ªsu…
;

530 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

531 
__ASM
 vﬁ©ûê("ldªxh %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

536 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

538 (
ªsu…
);

539 
	}
}

549 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

551 
uöt32_t
 
ªsu…
;

553 
__ASM
 vﬁ©ûê("ldªx %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

554 (
ªsu…
);

555 
	}
}

567 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

569 
uöt32_t
 
ªsu…
;

571 
__ASM
 vﬁ©ûê("°ªxb %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" (
vÆue
) );

572 (
ªsu…
);

573 
	}
}

585 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

587 
uöt32_t
 
ªsu…
;

589 
__ASM
 vﬁ©ûê("°ªxh %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" (
vÆue
) );

590 (
ªsu…
);

591 
	}
}

603 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

605 
uöt32_t
 
ªsu…
;

607 
__ASM
 vﬁ©ûê("°ªx %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" (
vÆue
) );

608 (
ªsu…
);

609 
	}
}

617 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__CLREX
()

619 
__ASM
 volatile ("clrex" ::: "memory");

620 
	}
}

631 
	#__SSAT
(
ARG1
,
ARG2
Ë\

	)

633 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

634 
__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

635 
	g__RES
; \

647 
	#__USAT
(
ARG1
,
ARG2
Ë\

	)

649 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

650 
__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

651 
	g__RES
; \

662 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

664 
uöt32_t
 
ªsu…
;

666 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

667 (
ªsu…
);

668 
	}
}

675 #ñi‡
deföed
 ( 
__TASKING__
 )

	@cmsis/core_sc000.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #ifde‡
__˝lu•lus


46 #i‚de‡
__CORE_SC000_H_GENERIC


47 
	#__CORE_SC000_H_GENERIC


	)

71 
	#__SC000_CMSIS_VERSION_MAIN
 (0x03Ë

	)

72 
	#__SC000_CMSIS_VERSION_SUB
 (0x20Ë

	)

73 
	#__SC000_CMSIS_VERSION
 ((
__SC000_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__SC000_CMSIS_VERSION_SUB
 )

76 
	#__CORTEX_SC
 (0Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__ICCARM__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__GNUC__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TASKING__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__INLINE
 
ölöe


	)

97 
	#__STATIC_INLINE
 
ölöe


	)

103 
	#__FPU_USED
 0

	)

105 #i‡
deföed
 ( 
__CC_ARM
 )

106 #i‡
deföed
 
__TARGET_FPU_VFP


110 #ñi‡
deföed
 ( 
__ICCARM__
 )

111 #i‡
deföed
 
__ARMVFP__


115 #ñi‡
deföed
 ( 
__GNUC__
 )

116 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

120 #ñi‡
deföed
 ( 
__TASKING__
 )

121 #i‡
deföed
 
__FPU_VFP__


126 
	~<°döt.h
>

127 
	~<c‹e_cmIn°r.h
>

128 
	~<c‹e_cmFunc.h
>

132 #i‚de‡
__CMSIS_GENERIC


134 #i‚de‡
__CORE_SC000_H_DEPENDANT


135 
	#__CORE_SC000_H_DEPENDANT


	)

138 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


139 #i‚de‡
__SC000_REV


140 
	#__SC000_REV
 0x0000

	)

144 #i‚de‡
__MPU_PRESENT


145 
	#__MPU_PRESENT
 0

	)

149 #i‚de‡
__NVIC_PRIO_BITS


150 
	#__NVIC_PRIO_BITS
 2

	)

154 #i‚de‡
__Víd‹_SysTickC⁄fig


155 
	#__Víd‹_SysTickC⁄fig
 0

	)

168 #ifde‡
__˝lu•lus


169 
	#__I
 vﬁ©ûê

	)

171 
	#__I
 vﬁ©ûêc⁄°

	)

173 
	#__O
 vﬁ©ûê

	)

174 
	#__IO
 vﬁ©ûê

	)

205 #i‡(
__CORTEX_M
 != 0x04)

206 
uöt32_t
 
_ª£rved0
:27;

208 
uöt32_t
 
_ª£rved0
:16;

209 
uöt32_t
 
GE
:4;

210 
uöt32_t
 
_ª£rved1
:7;

212 
uöt32_t
 
Q
:1;

213 
uöt32_t
 
V
:1;

214 
uöt32_t
 
C
:1;

215 
uöt32_t
 
Z
:1;

216 
uöt32_t
 
N
:1;

217 } 
b
;

218 
uöt32_t
 
w
;

219 } 
	tAPSR_Ty≥
;

228 
uöt32_t
 
	mISR
:9;

229 
uöt32_t
 
	m_ª£rved0
:23;

230 } 
	mb
;

231 
uöt32_t
 
	mw
;

232 } 
	tIPSR_Ty≥
;

241 
uöt32_t
 
	mISR
:9;

242 #i‡(
__CORTEX_M
 != 0x04)

243 
uöt32_t
 
	m_ª£rved0
:15;

245 
uöt32_t
 
	m_ª£rved0
:7;

246 
uöt32_t
 
	mGE
:4;

247 
uöt32_t
 
	m_ª£rved1
:4;

249 
uöt32_t
 
	mT
:1;

250 
uöt32_t
 
	mIT
:2;

251 
uöt32_t
 
	mQ
:1;

252 
uöt32_t
 
	mV
:1;

253 
uöt32_t
 
	mC
:1;

254 
uöt32_t
 
	mZ
:1;

255 
uöt32_t
 
	mN
:1;

256 } 
	mb
;

257 
uöt32_t
 
	mw
;

258 } 
	txPSR_Ty≥
;

267 
uöt32_t
 
	mnPRIV
:1;

268 
uöt32_t
 
	mSPSEL
:1;

269 
uöt32_t
 
	mFPCA
:1;

270 
uöt32_t
 
	m_ª£rved0
:29;

271 } 
	mb
;

272 
uöt32_t
 
	mw
;

273 } 
	tCONTROL_Ty≥
;

288 
__IO
 
uöt32_t
 
	mISER
[1];

289 
uöt32_t
 
	mRESERVED0
[31];

290 
__IO
 
uöt32_t
 
	mICER
[1];

291 
uöt32_t
 
	mRSERVED1
[31];

292 
__IO
 
uöt32_t
 
	mISPR
[1];

293 
uöt32_t
 
	mRESERVED2
[31];

294 
__IO
 
uöt32_t
 
	mICPR
[1];

295 
uöt32_t
 
	mRESERVED3
[31];

296 
uöt32_t
 
	mRESERVED4
[64];

297 
__IO
 
uöt32_t
 
	mIP
[8];

298 } 
	tNVIC_Ty≥
;

313 
__I
 
uöt32_t
 
	mCPUID
;

314 
__IO
 
uöt32_t
 
	mICSR
;

315 
__IO
 
uöt32_t
 
	mVTOR
;

316 
__IO
 
uöt32_t
 
	mAIRCR
;

317 
__IO
 
uöt32_t
 
	mSCR
;

318 
__IO
 
uöt32_t
 
	mCCR
;

319 
uöt32_t
 
	mRESERVED0
[1];

320 
__IO
 
uöt32_t
 
	mSHP
[2];

321 
__IO
 
uöt32_t
 
	mSHCSR
;

322 
uöt32_t
 
	mRESERVED1
[154];

323 
__IO
 
uöt32_t
 
	mSFCR
;

324 } 
	tSCB_Ty≥
;

327 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

328 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

330 
	#SCB_CPUID_VARIANT_Pos
 20

	)

331 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

333 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

334 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

336 
	#SCB_CPUID_PARTNO_Pos
 4

	)

337 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

339 
	#SCB_CPUID_REVISION_Pos
 0

	)

340 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

343 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

344 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

346 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

347 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

349 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

350 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

352 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

353 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

355 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

356 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

358 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

359 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

361 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

362 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

364 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

365 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

367 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

368 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

371 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

372 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

375 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

376 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

378 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

379 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

381 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

382 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

384 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

385 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

387 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

388 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

391 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

392 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

394 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

395 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

397 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

398 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

401 
	#SCB_CCR_STKALIGN_Pos
 9

	)

402 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

404 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

405 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

408 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

409 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

412 
	#SCB_SFCR_UNIBRTIMING_Pos
 0

	)

413 
	#SCB_SFCR_UNIBRTIMING_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

415 
	#SCB_SFCR_SECKEY_Pos
 16

	)

416 
	#SCB_SFCR_SECKEY_Msk
 (0xFFFFUL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

431 
uöt32_t
 
	mRESERVED0
[2];

432 
__IO
 
uöt32_t
 
	mACTLR
;

433 } 
	tSCnSCB_Ty≥
;

436 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

437 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

452 
__IO
 
uöt32_t
 
	mCTRL
;

453 
__IO
 
uöt32_t
 
	mLOAD
;

454 
__IO
 
uöt32_t
 
	mVAL
;

455 
__I
 
uöt32_t
 
	mCALIB
;

456 } 
	tSysTick_Ty≥
;

459 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

460 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

462 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

463 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

465 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

466 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

468 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

469 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

472 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

473 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

476 
	#SysTick_VAL_CURRENT_Pos
 0

	)

477 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

480 
	#SysTick_CALIB_NOREF_Pos
 31

	)

481 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

483 
	#SysTick_CALIB_SKEW_Pos
 30

	)

484 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

486 
	#SysTick_CALIB_TENMS_Pos
 0

	)

487 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

491 #i‡(
__MPU_PRESENT
 == 1)

502 
__I
 
uöt32_t
 
	mTYPE
;

503 
__IO
 
uöt32_t
 
	mCTRL
;

504 
__IO
 
uöt32_t
 
	mRNR
;

505 
__IO
 
uöt32_t
 
	mRBAR
;

506 
__IO
 
uöt32_t
 
	mRASR
;

507 } 
	tMPU_Ty≥
;

510 
	#MPU_TYPE_IREGION_Pos
 16

	)

511 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

513 
	#MPU_TYPE_DREGION_Pos
 8

	)

514 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

516 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

517 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

520 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

521 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

523 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

524 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

526 
	#MPU_CTRL_ENABLE_Pos
 0

	)

527 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

530 
	#MPU_RNR_REGION_Pos
 0

	)

531 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

534 
	#MPU_RBAR_ADDR_Pos
 8

	)

535 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

537 
	#MPU_RBAR_VALID_Pos
 4

	)

538 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

540 
	#MPU_RBAR_REGION_Pos
 0

	)

541 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

544 
	#MPU_RASR_ATTRS_Pos
 16

	)

545 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

547 
	#MPU_RASR_XN_Pos
 28

	)

548 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

550 
	#MPU_RASR_AP_Pos
 24

	)

551 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

553 
	#MPU_RASR_TEX_Pos
 19

	)

554 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

556 
	#MPU_RASR_S_Pos
 18

	)

557 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

559 
	#MPU_RASR_C_Pos
 17

	)

560 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

562 
	#MPU_RASR_B_Pos
 16

	)

563 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

565 
	#MPU_RASR_SRD_Pos
 8

	)

566 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

568 
	#MPU_RASR_SIZE_Pos
 1

	)

569 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

571 
	#MPU_RASR_ENABLE_Pos
 0

	)

572 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

595 
	#SCS_BASE
 (0xE000E000ULË

	)

596 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

597 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

598 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

600 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

601 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

602 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

603 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

605 #i‡(
__MPU_PRESENT
 == 1)

606 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

607 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

635 
	#_BIT_SHIFT
(
IRQn
Ë–(((
uöt32_t
)(IRQnËË& 0x03Ë* 8 )

	)

636 
	#_SHP_IDX
(
IRQn
Ë–((((
uöt32_t
)(IRQnË& 0x0F)-8Ë>> 2Ë)

	)

637 
	#_IP_IDX
(
IRQn
Ë–((
uöt32_t
)(IRQnË>> 2Ë)

	)

646 
__STATIC_INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

648 
NVIC
->
ISER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

649 
	}
}

658 
__STATIC_INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

660 
NVIC
->
ICER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

661 
	}
}

674 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

676 ((
uöt32_t
Ë((
NVIC
->
ISPR
[0] & (1 << ((uöt32_t)(
IRQn
) & 0x1F)))?1:0));

677 
	}
}

686 
__STATIC_INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

688 
NVIC
->
ISPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

689 
	}
}

698 
__STATIC_INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

700 
NVIC
->
ICPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

701 
	}
}

713 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

715 if(
IRQn
 < 0) {

716 
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

717 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

719 
NVIC
->
IP
[
	`_IP_IDX
(
IRQn
)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

720 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

721 
	}
}

735 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

738 if(
IRQn
 < 0) {

739 ((
uöt32_t
)(((
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

741 ((
uöt32_t
)(((
NVIC
->
IP
[ 
	`_IP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

742 
	}
}

749 
__STATIC_INLINE
 
	$NVIC_Sy°emRe£t
()

751 
	`__DSB
();

753 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

754 
SCB_AIRCR_SYSRESETREQ_Msk
);

755 
	`__DSB
();

757 
	}
}

770 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

787 
__STATIC_INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

789 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

791 
SysTick
->
LOAD
 = 
ticks
 - 1;

792 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

793 
SysTick
->
VAL
 = 0;

794 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

795 
SysTick_CTRL_TICKINT_Msk
 |

796 
SysTick_CTRL_ENABLE_Msk
;

798 
	}
}

811 #ifde‡
__˝lu•lus


	@cmsis/core_sc300.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #ifde‡
__˝lu•lus


46 #i‚de‡
__CORE_SC300_H_GENERIC


47 
	#__CORE_SC300_H_GENERIC


	)

71 
	#__SC300_CMSIS_VERSION_MAIN
 (0x03Ë

	)

72 
	#__SC300_CMSIS_VERSION_SUB
 (0x20Ë

	)

73 
	#__SC300_CMSIS_VERSION
 ((
__SC300_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__SC300_CMSIS_VERSION_SUB
 )

76 
	#__CORTEX_SC
 (300Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__ICCARM__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__GNUC__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TASKING__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__INLINE
 
ölöe


	)

97 
	#__STATIC_INLINE
 
ölöe


	)

103 
	#__FPU_USED
 0

	)

105 #i‡
deföed
 ( 
__CC_ARM
 )

106 #i‡
deföed
 
__TARGET_FPU_VFP


110 #ñi‡
deföed
 ( 
__ICCARM__
 )

111 #i‡
deföed
 
__ARMVFP__


115 #ñi‡
deföed
 ( 
__GNUC__
 )

116 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

120 #ñi‡
deföed
 ( 
__TASKING__
 )

121 #i‡
deföed
 
__FPU_VFP__


126 
	~<°döt.h
>

127 
	~<c‹e_cmIn°r.h
>

128 
	~<c‹e_cmFunc.h
>

132 #i‚de‡
__CMSIS_GENERIC


134 #i‚de‡
__CORE_SC300_H_DEPENDANT


135 
	#__CORE_SC300_H_DEPENDANT


	)

138 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


139 #i‚de‡
__SC300_REV


140 
	#__SC300_REV
 0x0000

	)

144 #i‚de‡
__MPU_PRESENT


145 
	#__MPU_PRESENT
 0

	)

149 #i‚de‡
__NVIC_PRIO_BITS


150 
	#__NVIC_PRIO_BITS
 4

	)

154 #i‚de‡
__Víd‹_SysTickC⁄fig


155 
	#__Víd‹_SysTickC⁄fig
 0

	)

168 #ifde‡
__˝lu•lus


169 
	#__I
 vﬁ©ûê

	)

171 
	#__I
 vﬁ©ûêc⁄°

	)

173 
	#__O
 vﬁ©ûê

	)

174 
	#__IO
 vﬁ©ûê

	)

206 #i‡(
__CORTEX_M
 != 0x04)

207 
uöt32_t
 
_ª£rved0
:27;

209 
uöt32_t
 
_ª£rved0
:16;

210 
uöt32_t
 
GE
:4;

211 
uöt32_t
 
_ª£rved1
:7;

213 
uöt32_t
 
Q
:1;

214 
uöt32_t
 
V
:1;

215 
uöt32_t
 
C
:1;

216 
uöt32_t
 
Z
:1;

217 
uöt32_t
 
N
:1;

218 } 
b
;

219 
uöt32_t
 
w
;

220 } 
	tAPSR_Ty≥
;

229 
uöt32_t
 
	mISR
:9;

230 
uöt32_t
 
	m_ª£rved0
:23;

231 } 
	mb
;

232 
uöt32_t
 
	mw
;

233 } 
	tIPSR_Ty≥
;

242 
uöt32_t
 
	mISR
:9;

243 #i‡(
__CORTEX_M
 != 0x04)

244 
uöt32_t
 
	m_ª£rved0
:15;

246 
uöt32_t
 
	m_ª£rved0
:7;

247 
uöt32_t
 
	mGE
:4;

248 
uöt32_t
 
	m_ª£rved1
:4;

250 
uöt32_t
 
	mT
:1;

251 
uöt32_t
 
	mIT
:2;

252 
uöt32_t
 
	mQ
:1;

253 
uöt32_t
 
	mV
:1;

254 
uöt32_t
 
	mC
:1;

255 
uöt32_t
 
	mZ
:1;

256 
uöt32_t
 
	mN
:1;

257 } 
	mb
;

258 
uöt32_t
 
	mw
;

259 } 
	txPSR_Ty≥
;

268 
uöt32_t
 
	mnPRIV
:1;

269 
uöt32_t
 
	mSPSEL
:1;

270 
uöt32_t
 
	mFPCA
:1;

271 
uöt32_t
 
	m_ª£rved0
:29;

272 } 
	mb
;

273 
uöt32_t
 
	mw
;

274 } 
	tCONTROL_Ty≥
;

289 
__IO
 
uöt32_t
 
	mISER
[8];

290 
uöt32_t
 
	mRESERVED0
[24];

291 
__IO
 
uöt32_t
 
	mICER
[8];

292 
uöt32_t
 
	mRSERVED1
[24];

293 
__IO
 
uöt32_t
 
	mISPR
[8];

294 
uöt32_t
 
	mRESERVED2
[24];

295 
__IO
 
uöt32_t
 
	mICPR
[8];

296 
uöt32_t
 
	mRESERVED3
[24];

297 
__IO
 
uöt32_t
 
	mIABR
[8];

298 
uöt32_t
 
	mRESERVED4
[56];

299 
__IO
 
uöt8_t
 
	mIP
[240];

300 
uöt32_t
 
	mRESERVED5
[644];

301 
__O
 
uöt32_t
 
	mSTIR
;

302 } 
	tNVIC_Ty≥
;

305 
	#NVIC_STIR_INTID_Pos
 0

	)

306 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

321 
__I
 
uöt32_t
 
	mCPUID
;

322 
__IO
 
uöt32_t
 
	mICSR
;

323 
__IO
 
uöt32_t
 
	mVTOR
;

324 
__IO
 
uöt32_t
 
	mAIRCR
;

325 
__IO
 
uöt32_t
 
	mSCR
;

326 
__IO
 
uöt32_t
 
	mCCR
;

327 
__IO
 
uöt8_t
 
	mSHP
[12];

328 
__IO
 
uöt32_t
 
	mSHCSR
;

329 
__IO
 
uöt32_t
 
	mCFSR
;

330 
__IO
 
uöt32_t
 
	mHFSR
;

331 
__IO
 
uöt32_t
 
	mDFSR
;

332 
__IO
 
uöt32_t
 
	mMMFAR
;

333 
__IO
 
uöt32_t
 
	mBFAR
;

334 
__IO
 
uöt32_t
 
	mAFSR
;

335 
__I
 
uöt32_t
 
	mPFR
[2];

336 
__I
 
uöt32_t
 
	mDFR
;

337 
__I
 
uöt32_t
 
	mADR
;

338 
__I
 
uöt32_t
 
	mMMFR
[4];

339 
__I
 
uöt32_t
 
	mISAR
[5];

340 
uöt32_t
 
	mRESERVED0
[5];

341 
__IO
 
uöt32_t
 
	mCPACR
;

342 } 
	tSCB_Ty≥
;

345 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

346 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

348 
	#SCB_CPUID_VARIANT_Pos
 20

	)

349 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

351 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

352 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

354 
	#SCB_CPUID_PARTNO_Pos
 4

	)

355 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

357 
	#SCB_CPUID_REVISION_Pos
 0

	)

358 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

361 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

362 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

364 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

365 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

367 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

368 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

370 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

371 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

373 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

374 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

376 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

377 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

379 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

380 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

382 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

383 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

385 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

386 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

388 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

389 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

392 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

393 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

395 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

396 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

399 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

400 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

402 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

403 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

405 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

406 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

408 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

409 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

411 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

412 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

414 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

415 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

417 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

418 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

421 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

422 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

424 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

425 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

427 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

428 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

431 
	#SCB_CCR_STKALIGN_Pos
 9

	)

432 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

434 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

435 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

437 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

438 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

440 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

441 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

443 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

444 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

446 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

447 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

450 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

451 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

453 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

454 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

456 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

457 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

459 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

460 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

462 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

463 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

465 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

466 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

468 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

469 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

471 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

472 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

474 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

475 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

477 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

478 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

480 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

481 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

483 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

484 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

486 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

487 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

489 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

490 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

493 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

494 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

496 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

497 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

499 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

500 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

503 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

504 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

506 
	#SCB_HFSR_FORCED_Pos
 30

	)

507 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

509 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

510 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

513 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

514 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

516 
	#SCB_DFSR_VCATCH_Pos
 3

	)

517 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

519 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

520 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

522 
	#SCB_DFSR_BKPT_Pos
 1

	)

523 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

525 
	#SCB_DFSR_HALTED_Pos
 0

	)

526 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

541 
uöt32_t
 
	mRESERVED0
[1];

542 
__I
 
uöt32_t
 
	mICTR
;

543 
uöt32_t
 
	mRESERVED1
[1];

544 } 
	tSCnSCB_Ty≥
;

547 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

548 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

563 
__IO
 
uöt32_t
 
	mCTRL
;

564 
__IO
 
uöt32_t
 
	mLOAD
;

565 
__IO
 
uöt32_t
 
	mVAL
;

566 
__I
 
uöt32_t
 
	mCALIB
;

567 } 
	tSysTick_Ty≥
;

570 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

571 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

573 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

574 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

576 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

577 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

579 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

580 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

583 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

584 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

587 
	#SysTick_VAL_CURRENT_Pos
 0

	)

588 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

591 
	#SysTick_CALIB_NOREF_Pos
 31

	)

592 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

594 
	#SysTick_CALIB_SKEW_Pos
 30

	)

595 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

597 
	#SysTick_CALIB_TENMS_Pos
 0

	)

598 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

613 
__O
 union

615 
__O
 
uöt8_t
 
	mu8
;

616 
__O
 
uöt16_t
 
	mu16
;

617 
__O
 
uöt32_t
 
	mu32
;

618 } 
	mPORT
 [32];

619 
uöt32_t
 
	mRESERVED0
[864];

620 
__IO
 
uöt32_t
 
	mTER
;

621 
uöt32_t
 
	mRESERVED1
[15];

622 
__IO
 
uöt32_t
 
	mTPR
;

623 
uöt32_t
 
	mRESERVED2
[15];

624 
__IO
 
uöt32_t
 
	mTCR
;

625 
uöt32_t
 
	mRESERVED3
[29];

626 
__O
 
uöt32_t
 
	mIWR
;

627 
__I
 
uöt32_t
 
	mIRR
;

628 
__IO
 
uöt32_t
 
	mIMCR
;

629 
uöt32_t
 
	mRESERVED4
[43];

630 
__O
 
uöt32_t
 
	mLAR
;

631 
__I
 
uöt32_t
 
	mLSR
;

632 
uöt32_t
 
	mRESERVED5
[6];

633 
__I
 
uöt32_t
 
	mPID4
;

634 
__I
 
uöt32_t
 
	mPID5
;

635 
__I
 
uöt32_t
 
	mPID6
;

636 
__I
 
uöt32_t
 
	mPID7
;

637 
__I
 
uöt32_t
 
	mPID0
;

638 
__I
 
uöt32_t
 
	mPID1
;

639 
__I
 
uöt32_t
 
	mPID2
;

640 
__I
 
uöt32_t
 
	mPID3
;

641 
__I
 
uöt32_t
 
	mCID0
;

642 
__I
 
uöt32_t
 
	mCID1
;

643 
__I
 
uöt32_t
 
	mCID2
;

644 
__I
 
uöt32_t
 
	mCID3
;

645 } 
	tITM_Ty≥
;

648 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

649 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

652 
	#ITM_TCR_BUSY_Pos
 23

	)

653 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

655 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

656 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

658 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

659 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

661 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

662 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

664 
	#ITM_TCR_SWOENA_Pos
 4

	)

665 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

667 
	#ITM_TCR_DWTENA_Pos
 3

	)

668 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

670 
	#ITM_TCR_SYNCENA_Pos
 2

	)

671 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

673 
	#ITM_TCR_TSENA_Pos
 1

	)

674 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

676 
	#ITM_TCR_ITMENA_Pos
 0

	)

677 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

680 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

681 
	#ITM_IWR_ATVALIDM_Msk
 (1UL << 
ITM_IWR_ATVALIDM_Pos
Ë

	)

684 
	#ITM_IRR_ATREADYM_Pos
 0

	)

685 
	#ITM_IRR_ATREADYM_Msk
 (1UL << 
ITM_IRR_ATREADYM_Pos
Ë

	)

688 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

689 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL << 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

692 
	#ITM_LSR_ByãAcc_Pos
 2

	)

693 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

695 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

696 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

698 
	#ITM_LSR_Pª£¡_Pos
 0

	)

699 
	#ITM_LSR_Pª£¡_Msk
 (1UL << 
ITM_LSR_Pª£¡_Pos
Ë

	)

714 
__IO
 
uöt32_t
 
	mCTRL
;

715 
__IO
 
uöt32_t
 
	mCYCCNT
;

716 
__IO
 
uöt32_t
 
	mCPICNT
;

717 
__IO
 
uöt32_t
 
	mEXCCNT
;

718 
__IO
 
uöt32_t
 
	mSLEEPCNT
;

719 
__IO
 
uöt32_t
 
	mLSUCNT
;

720 
__IO
 
uöt32_t
 
	mFOLDCNT
;

721 
__I
 
uöt32_t
 
	mPCSR
;

722 
__IO
 
uöt32_t
 
	mCOMP0
;

723 
__IO
 
uöt32_t
 
	mMASK0
;

724 
__IO
 
uöt32_t
 
	mFUNCTION0
;

725 
uöt32_t
 
	mRESERVED0
[1];

726 
__IO
 
uöt32_t
 
	mCOMP1
;

727 
__IO
 
uöt32_t
 
	mMASK1
;

728 
__IO
 
uöt32_t
 
	mFUNCTION1
;

729 
uöt32_t
 
	mRESERVED1
[1];

730 
__IO
 
uöt32_t
 
	mCOMP2
;

731 
__IO
 
uöt32_t
 
	mMASK2
;

732 
__IO
 
uöt32_t
 
	mFUNCTION2
;

733 
uöt32_t
 
	mRESERVED2
[1];

734 
__IO
 
uöt32_t
 
	mCOMP3
;

735 
__IO
 
uöt32_t
 
	mMASK3
;

736 
__IO
 
uöt32_t
 
	mFUNCTION3
;

737 } 
	tDWT_Ty≥
;

740 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

741 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

743 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

744 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

746 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

747 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

749 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

750 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

752 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

753 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

755 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

756 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

758 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

759 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

761 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

762 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

764 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

765 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

767 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

768 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

770 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

771 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

773 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

774 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

776 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

777 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

779 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

780 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

782 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

783 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

785 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

786 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

788 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

789 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

791 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

792 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

795 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

796 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

799 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

800 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

803 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

804 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

807 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

808 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

811 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

812 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

815 
	#DWT_MASK_MASK_Pos
 0

	)

816 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

819 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

820 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

822 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

823 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

825 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

826 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

828 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

829 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

831 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

832 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

834 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

835 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

837 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

838 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

840 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

841 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

843 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

844 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

859 
__IO
 
uöt32_t
 
	mSSPSR
;

860 
__IO
 
uöt32_t
 
	mCSPSR
;

861 
uöt32_t
 
	mRESERVED0
[2];

862 
__IO
 
uöt32_t
 
	mACPR
;

863 
uöt32_t
 
	mRESERVED1
[55];

864 
__IO
 
uöt32_t
 
	mSPPR
;

865 
uöt32_t
 
	mRESERVED2
[131];

866 
__I
 
uöt32_t
 
	mFFSR
;

867 
__IO
 
uöt32_t
 
	mFFCR
;

868 
__I
 
uöt32_t
 
	mFSCR
;

869 
uöt32_t
 
	mRESERVED3
[759];

870 
__I
 
uöt32_t
 
	mTRIGGER
;

871 
__I
 
uöt32_t
 
	mFIFO0
;

872 
__I
 
uöt32_t
 
	mITATBCTR2
;

873 
uöt32_t
 
	mRESERVED4
[1];

874 
__I
 
uöt32_t
 
	mITATBCTR0
;

875 
__I
 
uöt32_t
 
	mFIFO1
;

876 
__IO
 
uöt32_t
 
	mITCTRL
;

877 
uöt32_t
 
	mRESERVED5
[39];

878 
__IO
 
uöt32_t
 
	mCLAIMSET
;

879 
__IO
 
uöt32_t
 
	mCLAIMCLR
;

880 
uöt32_t
 
	mRESERVED7
[8];

881 
__I
 
uöt32_t
 
	mDEVID
;

882 
__I
 
uöt32_t
 
	mDEVTYPE
;

883 } 
	tTPI_Ty≥
;

886 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

887 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

890 
	#TPI_SPPR_TXMODE_Pos
 0

	)

891 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

894 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

895 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

897 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

898 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

900 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

901 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

903 
	#TPI_FFSR_FlInProg_Pos
 0

	)

904 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

907 
	#TPI_FFCR_TrigIn_Pos
 8

	)

908 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

910 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

911 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

914 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

915 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

918 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

919 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

921 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

922 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

924 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

925 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

927 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

928 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

930 
	#TPI_FIFO0_ETM2_Pos
 16

	)

931 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

933 
	#TPI_FIFO0_ETM1_Pos
 8

	)

934 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

936 
	#TPI_FIFO0_ETM0_Pos
 0

	)

937 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

940 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

941 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

944 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

945 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

947 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

948 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

950 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

951 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

953 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

954 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

956 
	#TPI_FIFO1_ITM2_Pos
 16

	)

957 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

959 
	#TPI_FIFO1_ITM1_Pos
 8

	)

960 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

962 
	#TPI_FIFO1_ITM0_Pos
 0

	)

963 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

966 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

967 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

970 
	#TPI_ITCTRL_Mode_Pos
 0

	)

971 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

974 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

975 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

977 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

978 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

980 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

981 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

983 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

984 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

986 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

987 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

989 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

990 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

993 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

994 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

996 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

997 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1002 #i‡(
__MPU_PRESENT
 == 1)

1013 
__I
 
uöt32_t
 
	mTYPE
;

1014 
__IO
 
uöt32_t
 
	mCTRL
;

1015 
__IO
 
uöt32_t
 
	mRNR
;

1016 
__IO
 
uöt32_t
 
	mRBAR
;

1017 
__IO
 
uöt32_t
 
	mRASR
;

1018 
__IO
 
uöt32_t
 
	mRBAR_A1
;

1019 
__IO
 
uöt32_t
 
	mRASR_A1
;

1020 
__IO
 
uöt32_t
 
	mRBAR_A2
;

1021 
__IO
 
uöt32_t
 
	mRASR_A2
;

1022 
__IO
 
uöt32_t
 
	mRBAR_A3
;

1023 
__IO
 
uöt32_t
 
	mRASR_A3
;

1024 } 
	tMPU_Ty≥
;

1027 
	#MPU_TYPE_IREGION_Pos
 16

	)

1028 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1030 
	#MPU_TYPE_DREGION_Pos
 8

	)

1031 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1033 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1034 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1037 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1038 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1040 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1041 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1043 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1044 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1047 
	#MPU_RNR_REGION_Pos
 0

	)

1048 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1051 
	#MPU_RBAR_ADDR_Pos
 5

	)

1052 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1054 
	#MPU_RBAR_VALID_Pos
 4

	)

1055 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1057 
	#MPU_RBAR_REGION_Pos
 0

	)

1058 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1061 
	#MPU_RASR_ATTRS_Pos
 16

	)

1062 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1064 
	#MPU_RASR_XN_Pos
 28

	)

1065 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1067 
	#MPU_RASR_AP_Pos
 24

	)

1068 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1070 
	#MPU_RASR_TEX_Pos
 19

	)

1071 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1073 
	#MPU_RASR_S_Pos
 18

	)

1074 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1076 
	#MPU_RASR_C_Pos
 17

	)

1077 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1079 
	#MPU_RASR_B_Pos
 16

	)

1080 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1082 
	#MPU_RASR_SRD_Pos
 8

	)

1083 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1085 
	#MPU_RASR_SIZE_Pos
 1

	)

1086 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1088 
	#MPU_RASR_ENABLE_Pos
 0

	)

1089 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1105 
__IO
 
uöt32_t
 
	mDHCSR
;

1106 
__O
 
uöt32_t
 
	mDCRSR
;

1107 
__IO
 
uöt32_t
 
	mDCRDR
;

1108 
__IO
 
uöt32_t
 
	mDEMCR
;

1109 } 
	tC‹eDebug_Ty≥
;

1112 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1113 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1115 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1116 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1118 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1119 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1121 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1122 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1124 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1125 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1127 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1128 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1130 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1131 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1133 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1134 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1136 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1137 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1139 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1140 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1142 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1143 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1145 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1146 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1149 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1150 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1152 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1153 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1156 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1157 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1159 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1160 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1162 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1163 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1165 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1166 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1168 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1169 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1171 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1172 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1174 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1175 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1177 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1178 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1180 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1181 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1183 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1184 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1186 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1187 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1189 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1190 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1192 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1193 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1205 
	#SCS_BASE
 (0xE000E000ULË

	)

1206 
	#ITM_BASE
 (0xE0000000ULË

	)

1207 
	#DWT_BASE
 (0xE0001000ULË

	)

1208 
	#TPI_BASE
 (0xE0040000ULË

	)

1209 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1210 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1211 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1212 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1214 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1215 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1216 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1217 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1218 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1219 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1220 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1221 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1223 #i‡(
__MPU_PRESENT
 == 1)

1224 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1225 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1262 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1264 
uöt32_t
 
ªg_vÆue
;

1265 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1267 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1268 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1269 
ªg_vÆue
 = (reg_value |

1270 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1271 (
Pri‹ôyGroupTmp
 << 8));

1272 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1273 
	}
}

1282 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôyGroupög
()

1284  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1285 
	}
}

1294 
__STATIC_INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1296 
NVIC
->
ISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1297 
	}
}

1306 
__STATIC_INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1308 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1309 
	}
}

1322 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1324 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1325 
	}
}

1334 
__STATIC_INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1336 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1337 
	}
}

1346 
__STATIC_INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1348 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1349 
	}
}

1361 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1363 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1364 
	}
}

1376 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1378 if(
IRQn
 < 0) {

1379 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1381 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1382 
	}
}

1396 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1399 if(
IRQn
 < 0) {

1400 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1402 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1403 
	}
}

1418 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_EncodePri‹ôy
 (
uöt32_t
 
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1420 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1421 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1422 
uöt32_t
 
SubPri‹ôyBôs
;

1424 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1425 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1428 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1429 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1431 
	}
}

1446 
__STATIC_INLINE
 
	$NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1448 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1449 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1450 
uöt32_t
 
SubPri‹ôyBôs
;

1452 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1453 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1455 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1456 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1457 
	}
}

1464 
__STATIC_INLINE
 
	$NVIC_Sy°emRe£t
()

1466 
	`__DSB
();

1468 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1469 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1470 
SCB_AIRCR_SYSRESETREQ_Msk
);

1471 
	`__DSB
();

1473 
	}
}

1486 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1503 
__STATIC_INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

1505 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

1507 
SysTick
->
LOAD
 = 
ticks
 - 1;

1508 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1509 
SysTick
->
VAL
 = 0;

1510 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1511 
SysTick_CTRL_TICKINT_Msk
 |

1512 
SysTick_CTRL_ENABLE_Msk
;

1514 
	}
}

1529 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1530 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1543 
__STATIC_INLINE
 
uöt32_t
 
	$ITM_SídCh¨
 (
uöt32_t
 
ch
)

1545 i‡((
ITM
->
TCR
 & 
ITM_TCR_ITMENA_Msk
) &&

1546 (
ITM
->
TER
 & (1UL << 0) ) )

1548 
ITM
->
PORT
[0].
u32
 == 0);

1549 
ITM
->
PORT
[0].
u8
 = (
uöt8_t
Ë
ch
;

1551  (
ch
);

1552 
	}
}

1562 
__STATIC_INLINE
 
öt32_t
 
	$ITM_Re˚iveCh¨
 () {

1563 
öt32_t
 
ch
 = -1;

1565 i‡(
ITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1566 
ch
 = 
ITM_RxBuf„r
;

1567 
ITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1570  (
ch
);

1571 
	}
}

1581 
__STATIC_INLINE
 
öt32_t
 
	$ITM_CheckCh¨
 () {

1583 i‡(
ITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1588 
	}
}

1596 #ifde‡
__˝lu•lus


	@cmsis/stm32f429xx.h

52 #i‚de‡
__STM32F429xx_H


53 
	#__STM32F429xx_H


	)

55 #ifde‡
__˝lu•lus


66 
	#__CM4_REV
 0x0001

	)

67 
	#__MPU_PRESENT
 1

	)

68 
	#__NVIC_PRIO_BITS
 4

	)

69 
	#__Víd‹_SysTickC⁄fig
 0

	)

70 
	#__FPU_PRESENT
 1

	)

87 
N⁄MaskabÀI¡_IRQn
 = -14,

88 
Mem‹yM™agemít_IRQn
 = -12,

89 
BusFau…_IRQn
 = -11,

90 
UßgeFau…_IRQn
 = -10,

91 
SVCÆl_IRQn
 = -5,

92 
DebugM⁄ô‹_IRQn
 = -4,

93 
PídSV_IRQn
 = -2,

94 
SysTick_IRQn
 = -1,

96 
WWDG_IRQn
 = 0,

97 
PVD_IRQn
 = 1,

98 
TAMP_STAMP_IRQn
 = 2,

99 
RTC_WKUP_IRQn
 = 3,

100 
FLASH_IRQn
 = 4,

101 
RCC_IRQn
 = 5,

102 
EXTI0_IRQn
 = 6,

103 
EXTI1_IRQn
 = 7,

104 
EXTI2_IRQn
 = 8,

105 
EXTI3_IRQn
 = 9,

106 
EXTI4_IRQn
 = 10,

107 
DMA1_Såóm0_IRQn
 = 11,

108 
DMA1_Såóm1_IRQn
 = 12,

109 
DMA1_Såóm2_IRQn
 = 13,

110 
DMA1_Såóm3_IRQn
 = 14,

111 
DMA1_Såóm4_IRQn
 = 15,

112 
DMA1_Såóm5_IRQn
 = 16,

113 
DMA1_Såóm6_IRQn
 = 17,

114 
ADC_IRQn
 = 18,

115 
CAN1_TX_IRQn
 = 19,

116 
CAN1_RX0_IRQn
 = 20,

117 
CAN1_RX1_IRQn
 = 21,

118 
CAN1_SCE_IRQn
 = 22,

119 
EXTI9_5_IRQn
 = 23,

120 
TIM1_BRK_TIM9_IRQn
 = 24,

121 
TIM1_UP_TIM10_IRQn
 = 25,

122 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

123 
TIM1_CC_IRQn
 = 27,

124 
TIM2_IRQn
 = 28,

125 
TIM3_IRQn
 = 29,

126 
TIM4_IRQn
 = 30,

127 
I2C1_EV_IRQn
 = 31,

128 
I2C1_ER_IRQn
 = 32,

129 
I2C2_EV_IRQn
 = 33,

130 
I2C2_ER_IRQn
 = 34,

131 
SPI1_IRQn
 = 35,

132 
SPI2_IRQn
 = 36,

133 
USART1_IRQn
 = 37,

134 
USART2_IRQn
 = 38,

135 
USART3_IRQn
 = 39,

136 
EXTI15_10_IRQn
 = 40,

137 
RTC_Aœrm_IRQn
 = 41,

138 
OTG_FS_WKUP_IRQn
 = 42,

139 
TIM8_BRK_TIM12_IRQn
 = 43,

140 
TIM8_UP_TIM13_IRQn
 = 44,

141 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

142 
TIM8_CC_IRQn
 = 46,

143 
DMA1_Såóm7_IRQn
 = 47,

144 
FMC_IRQn
 = 48,

145 
SDIO_IRQn
 = 49,

146 
TIM5_IRQn
 = 50,

147 
SPI3_IRQn
 = 51,

148 
UART4_IRQn
 = 52,

149 
UART5_IRQn
 = 53,

150 
TIM6_DAC_IRQn
 = 54,

151 
TIM7_IRQn
 = 55,

152 
DMA2_Såóm0_IRQn
 = 56,

153 
DMA2_Såóm1_IRQn
 = 57,

154 
DMA2_Såóm2_IRQn
 = 58,

155 
DMA2_Såóm3_IRQn
 = 59,

156 
DMA2_Såóm4_IRQn
 = 60,

157 
ETH_IRQn
 = 61,

158 
ETH_WKUP_IRQn
 = 62,

159 
CAN2_TX_IRQn
 = 63,

160 
CAN2_RX0_IRQn
 = 64,

161 
CAN2_RX1_IRQn
 = 65,

162 
CAN2_SCE_IRQn
 = 66,

163 
OTG_FS_IRQn
 = 67,

164 
DMA2_Såóm5_IRQn
 = 68,

165 
DMA2_Såóm6_IRQn
 = 69,

166 
DMA2_Såóm7_IRQn
 = 70,

167 
USART6_IRQn
 = 71,

168 
I2C3_EV_IRQn
 = 72,

169 
I2C3_ER_IRQn
 = 73,

170 
OTG_HS_EP1_OUT_IRQn
 = 74,

171 
OTG_HS_EP1_IN_IRQn
 = 75,

172 
OTG_HS_WKUP_IRQn
 = 76,

173 
OTG_HS_IRQn
 = 77,

174 
DCMI_IRQn
 = 78,

175 
HASH_RNG_IRQn
 = 80,

176 
FPU_IRQn
 = 81,

177 
UART7_IRQn
 = 82,

178 
UART8_IRQn
 = 83,

179 
SPI4_IRQn
 = 84,

180 
SPI5_IRQn
 = 85,

181 
SPI6_IRQn
 = 86,

182 
SAI1_IRQn
 = 87,

183 
LTDC_IRQn
 = 88,

184 
LTDC_ER_IRQn
 = 89,

185 
DMA2D_IRQn
 = 90

186 } 
	tIRQn_Ty≥
;

192 
	~"c‹e_cm4.h
"

193 
	~"sy°em_°m32f4xx.h
"

194 
	~<°döt.h
>

206 
__IO
 
uöt32_t
 
SR
;

207 
__IO
 
uöt32_t
 
CR1
;

208 
__IO
 
uöt32_t
 
CR2
;

209 
__IO
 
uöt32_t
 
SMPR1
;

210 
__IO
 
uöt32_t
 
SMPR2
;

211 
__IO
 
uöt32_t
 
JOFR1
;

212 
__IO
 
uöt32_t
 
JOFR2
;

213 
__IO
 
uöt32_t
 
JOFR3
;

214 
__IO
 
uöt32_t
 
JOFR4
;

215 
__IO
 
uöt32_t
 
HTR
;

216 
__IO
 
uöt32_t
 
LTR
;

217 
__IO
 
uöt32_t
 
SQR1
;

218 
__IO
 
uöt32_t
 
SQR2
;

219 
__IO
 
uöt32_t
 
SQR3
;

220 
__IO
 
uöt32_t
 
JSQR
;

221 
__IO
 
uöt32_t
 
JDR1
;

222 
__IO
 
uöt32_t
 
JDR2
;

223 
__IO
 
uöt32_t
 
JDR3
;

224 
__IO
 
uöt32_t
 
JDR4
;

225 
__IO
 
uöt32_t
 
DR
;

226 } 
	tADC_Ty≥Def
;

230 
__IO
 
uöt32_t
 
CSR
;

231 
__IO
 
uöt32_t
 
CCR
;

232 
__IO
 
uöt32_t
 
CDR
;

234 } 
	tADC_Comm⁄_Ty≥Def
;

243 
__IO
 
uöt32_t
 
TIR
;

244 
__IO
 
uöt32_t
 
TDTR
;

245 
__IO
 
uöt32_t
 
TDLR
;

246 
__IO
 
uöt32_t
 
TDHR
;

247 } 
	tCAN_TxMaûBox_Ty≥Def
;

255 
__IO
 
uöt32_t
 
RIR
;

256 
__IO
 
uöt32_t
 
RDTR
;

257 
__IO
 
uöt32_t
 
RDLR
;

258 
__IO
 
uöt32_t
 
RDHR
;

259 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

267 
__IO
 
uöt32_t
 
FR1
;

268 
__IO
 
uöt32_t
 
FR2
;

269 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

277 
__IO
 
uöt32_t
 
MCR
;

278 
__IO
 
uöt32_t
 
MSR
;

279 
__IO
 
uöt32_t
 
TSR
;

280 
__IO
 
uöt32_t
 
RF0R
;

281 
__IO
 
uöt32_t
 
RF1R
;

282 
__IO
 
uöt32_t
 
IER
;

283 
__IO
 
uöt32_t
 
ESR
;

284 
__IO
 
uöt32_t
 
BTR
;

285 
uöt32_t
 
RESERVED0
[88];

286 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

287 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

288 
uöt32_t
 
RESERVED1
[12];

289 
__IO
 
uöt32_t
 
FMR
;

290 
__IO
 
uöt32_t
 
FM1R
;

291 
uöt32_t
 
RESERVED2
;

292 
__IO
 
uöt32_t
 
FS1R
;

293 
uöt32_t
 
RESERVED3
;

294 
__IO
 
uöt32_t
 
FFA1R
;

295 
uöt32_t
 
RESERVED4
;

296 
__IO
 
uöt32_t
 
FA1R
;

297 
uöt32_t
 
RESERVED5
[8];

298 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

299 } 
	tCAN_Ty≥Def
;

307 
__IO
 
uöt32_t
 
DR
;

308 
__IO
 
uöt8_t
 
IDR
;

309 
uöt8_t
 
RESERVED0
;

310 
uöt16_t
 
RESERVED1
;

311 
__IO
 
uöt32_t
 
CR
;

312 } 
	tCRC_Ty≥Def
;

320 
__IO
 
uöt32_t
 
CR
;

321 
__IO
 
uöt32_t
 
SWTRIGR
;

322 
__IO
 
uöt32_t
 
DHR12R1
;

323 
__IO
 
uöt32_t
 
DHR12L1
;

324 
__IO
 
uöt32_t
 
DHR8R1
;

325 
__IO
 
uöt32_t
 
DHR12R2
;

326 
__IO
 
uöt32_t
 
DHR12L2
;

327 
__IO
 
uöt32_t
 
DHR8R2
;

328 
__IO
 
uöt32_t
 
DHR12RD
;

329 
__IO
 
uöt32_t
 
DHR12LD
;

330 
__IO
 
uöt32_t
 
DHR8RD
;

331 
__IO
 
uöt32_t
 
DOR1
;

332 
__IO
 
uöt32_t
 
DOR2
;

333 
__IO
 
uöt32_t
 
SR
;

334 } 
	tDAC_Ty≥Def
;

342 
__IO
 
uöt32_t
 
IDCODE
;

343 
__IO
 
uöt32_t
 
CR
;

344 
__IO
 
uöt32_t
 
APB1FZ
;

345 
__IO
 
uöt32_t
 
APB2FZ
;

346 }
	tDBGMCU_Ty≥Def
;

354 
__IO
 
uöt32_t
 
CR
;

355 
__IO
 
uöt32_t
 
SR
;

356 
__IO
 
uöt32_t
 
RISR
;

357 
__IO
 
uöt32_t
 
IER
;

358 
__IO
 
uöt32_t
 
MISR
;

359 
__IO
 
uöt32_t
 
ICR
;

360 
__IO
 
uöt32_t
 
ESCR
;

361 
__IO
 
uöt32_t
 
ESUR
;

362 
__IO
 
uöt32_t
 
CWSTRTR
;

363 
__IO
 
uöt32_t
 
CWSIZER
;

364 
__IO
 
uöt32_t
 
DR
;

365 } 
	tDCMI_Ty≥Def
;

373 
__IO
 
uöt32_t
 
CR
;

374 
__IO
 
uöt32_t
 
NDTR
;

375 
__IO
 
uöt32_t
 
PAR
;

376 
__IO
 
uöt32_t
 
M0AR
;

377 
__IO
 
uöt32_t
 
M1AR
;

378 
__IO
 
uöt32_t
 
FCR
;

379 } 
	tDMA_Såóm_Ty≥Def
;

383 
__IO
 
uöt32_t
 
LISR
;

384 
__IO
 
uöt32_t
 
HISR
;

385 
__IO
 
uöt32_t
 
LIFCR
;

386 
__IO
 
uöt32_t
 
HIFCR
;

387 } 
	tDMA_Ty≥Def
;

395 
__IO
 
uöt32_t
 
CR
;

396 
__IO
 
uöt32_t
 
ISR
;

397 
__IO
 
uöt32_t
 
IFCR
;

398 
__IO
 
uöt32_t
 
FGMAR
;

399 
__IO
 
uöt32_t
 
FGOR
;

400 
__IO
 
uöt32_t
 
BGMAR
;

401 
__IO
 
uöt32_t
 
BGOR
;

402 
__IO
 
uöt32_t
 
FGPFCCR
;

403 
__IO
 
uöt32_t
 
FGCOLR
;

404 
__IO
 
uöt32_t
 
BGPFCCR
;

405 
__IO
 
uöt32_t
 
BGCOLR
;

406 
__IO
 
uöt32_t
 
FGCMAR
;

407 
__IO
 
uöt32_t
 
BGCMAR
;

408 
__IO
 
uöt32_t
 
OPFCCR
;

409 
__IO
 
uöt32_t
 
OCOLR
;

410 
__IO
 
uöt32_t
 
OMAR
;

411 
__IO
 
uöt32_t
 
OOR
;

412 
__IO
 
uöt32_t
 
NLR
;

413 
__IO
 
uöt32_t
 
LWR
;

414 
__IO
 
uöt32_t
 
AMTCR
;

415 
uöt32_t
 
RESERVED
[236];

416 
__IO
 
uöt32_t
 
FGCLUT
[256];

417 
__IO
 
uöt32_t
 
BGCLUT
[256];

418 } 
	tDMA2D_Ty≥Def
;

426 
__IO
 
uöt32_t
 
MACCR
;

427 
__IO
 
uöt32_t
 
MACFFR
;

428 
__IO
 
uöt32_t
 
MACHTHR
;

429 
__IO
 
uöt32_t
 
MACHTLR
;

430 
__IO
 
uöt32_t
 
MACMIIAR
;

431 
__IO
 
uöt32_t
 
MACMIIDR
;

432 
__IO
 
uöt32_t
 
MACFCR
;

433 
__IO
 
uöt32_t
 
MACVLANTR
;

434 
uöt32_t
 
RESERVED0
[2];

435 
__IO
 
uöt32_t
 
MACRWUFFR
;

436 
__IO
 
uöt32_t
 
MACPMTCSR
;

437 
uöt32_t
 
RESERVED1
[2];

438 
__IO
 
uöt32_t
 
MACSR
;

439 
__IO
 
uöt32_t
 
MACIMR
;

440 
__IO
 
uöt32_t
 
MACA0HR
;

441 
__IO
 
uöt32_t
 
MACA0LR
;

442 
__IO
 
uöt32_t
 
MACA1HR
;

443 
__IO
 
uöt32_t
 
MACA1LR
;

444 
__IO
 
uöt32_t
 
MACA2HR
;

445 
__IO
 
uöt32_t
 
MACA2LR
;

446 
__IO
 
uöt32_t
 
MACA3HR
;

447 
__IO
 
uöt32_t
 
MACA3LR
;

448 
uöt32_t
 
RESERVED2
[40];

449 
__IO
 
uöt32_t
 
MMCCR
;

450 
__IO
 
uöt32_t
 
MMCRIR
;

451 
__IO
 
uöt32_t
 
MMCTIR
;

452 
__IO
 
uöt32_t
 
MMCRIMR
;

453 
__IO
 
uöt32_t
 
MMCTIMR
;

454 
uöt32_t
 
RESERVED3
[14];

455 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

456 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

457 
uöt32_t
 
RESERVED4
[5];

458 
__IO
 
uöt32_t
 
MMCTGFCR
;

459 
uöt32_t
 
RESERVED5
[10];

460 
__IO
 
uöt32_t
 
MMCRFCECR
;

461 
__IO
 
uöt32_t
 
MMCRFAECR
;

462 
uöt32_t
 
RESERVED6
[10];

463 
__IO
 
uöt32_t
 
MMCRGUFCR
;

464 
uöt32_t
 
RESERVED7
[334];

465 
__IO
 
uöt32_t
 
PTPTSCR
;

466 
__IO
 
uöt32_t
 
PTPSSIR
;

467 
__IO
 
uöt32_t
 
PTPTSHR
;

468 
__IO
 
uöt32_t
 
PTPTSLR
;

469 
__IO
 
uöt32_t
 
PTPTSHUR
;

470 
__IO
 
uöt32_t
 
PTPTSLUR
;

471 
__IO
 
uöt32_t
 
PTPTSAR
;

472 
__IO
 
uöt32_t
 
PTPTTHR
;

473 
__IO
 
uöt32_t
 
PTPTTLR
;

474 
__IO
 
uöt32_t
 
RESERVED8
;

475 
__IO
 
uöt32_t
 
PTPTSSR
;

476 
uöt32_t
 
RESERVED9
[565];

477 
__IO
 
uöt32_t
 
DMABMR
;

478 
__IO
 
uöt32_t
 
DMATPDR
;

479 
__IO
 
uöt32_t
 
DMARPDR
;

480 
__IO
 
uöt32_t
 
DMARDLAR
;

481 
__IO
 
uöt32_t
 
DMATDLAR
;

482 
__IO
 
uöt32_t
 
DMASR
;

483 
__IO
 
uöt32_t
 
DMAOMR
;

484 
__IO
 
uöt32_t
 
DMAIER
;

485 
__IO
 
uöt32_t
 
DMAMFBOCR
;

486 
__IO
 
uöt32_t
 
DMARSWTR
;

487 
uöt32_t
 
RESERVED10
[8];

488 
__IO
 
uöt32_t
 
DMACHTDR
;

489 
__IO
 
uöt32_t
 
DMACHRDR
;

490 
__IO
 
uöt32_t
 
DMACHTBAR
;

491 
__IO
 
uöt32_t
 
DMACHRBAR
;

492 } 
	tETH_Ty≥Def
;

500 
__IO
 
uöt32_t
 
IMR
;

501 
__IO
 
uöt32_t
 
EMR
;

502 
__IO
 
uöt32_t
 
RTSR
;

503 
__IO
 
uöt32_t
 
FTSR
;

504 
__IO
 
uöt32_t
 
SWIER
;

505 
__IO
 
uöt32_t
 
PR
;

506 } 
	tEXTI_Ty≥Def
;

514 
__IO
 
uöt32_t
 
ACR
;

515 
__IO
 
uöt32_t
 
KEYR
;

516 
__IO
 
uöt32_t
 
OPTKEYR
;

517 
__IO
 
uöt32_t
 
SR
;

518 
__IO
 
uöt32_t
 
CR
;

519 
__IO
 
uöt32_t
 
OPTCR
;

520 
__IO
 
uöt32_t
 
OPTCR1
;

521 } 
	tFLASH_Ty≥Def
;

529 
__IO
 
uöt32_t
 
BTCR
[8];

530 } 
	tFMC_B™k1_Ty≥Def
;

538 
__IO
 
uöt32_t
 
BWTR
[7];

539 } 
	tFMC_B™k1E_Ty≥Def
;

547 
__IO
 
uöt32_t
 
PCR2
;

548 
__IO
 
uöt32_t
 
SR2
;

549 
__IO
 
uöt32_t
 
PMEM2
;

550 
__IO
 
uöt32_t
 
PATT2
;

551 
uöt32_t
 
RESERVED0
;

552 
__IO
 
uöt32_t
 
ECCR2
;

553 
uöt32_t
 
RESERVED1
;

554 
uöt32_t
 
RESERVED2
;

555 
__IO
 
uöt32_t
 
PCR3
;

556 
__IO
 
uöt32_t
 
SR3
;

557 
__IO
 
uöt32_t
 
PMEM3
;

558 
__IO
 
uöt32_t
 
PATT3
;

559 
uöt32_t
 
RESERVED3
;

560 
__IO
 
uöt32_t
 
ECCR3
;

561 } 
	tFMC_B™k2_3_Ty≥Def
;

569 
__IO
 
uöt32_t
 
PCR4
;

570 
__IO
 
uöt32_t
 
SR4
;

571 
__IO
 
uöt32_t
 
PMEM4
;

572 
__IO
 
uöt32_t
 
PATT4
;

573 
__IO
 
uöt32_t
 
PIO4
;

574 } 
	tFMC_B™k4_Ty≥Def
;

582 
__IO
 
uöt32_t
 
SDCR
[2];

583 
__IO
 
uöt32_t
 
SDTR
[2];

584 
__IO
 
uöt32_t
 
SDCMR
;

585 
__IO
 
uöt32_t
 
SDRTR
;

586 
__IO
 
uöt32_t
 
SDSR
;

587 } 
	tFMC_B™k5_6_Ty≥Def
;

595 
__IO
 
uöt32_t
 
MODER
;

596 
__IO
 
uöt32_t
 
OTYPER
;

597 
__IO
 
uöt32_t
 
OSPEEDR
;

598 
__IO
 
uöt32_t
 
PUPDR
;

599 
__IO
 
uöt32_t
 
IDR
;

600 
__IO
 
uöt32_t
 
ODR
;

601 
__IO
 
uöt32_t
 
BSRR
;

602 
__IO
 
uöt32_t
 
LCKR
;

603 
__IO
 
uöt32_t
 
AFR
[2];

604 } 
	tGPIO_Ty≥Def
;

612 
__IO
 
uöt32_t
 
MEMRMP
;

613 
__IO
 
uöt32_t
 
PMC
;

614 
__IO
 
uöt32_t
 
EXTICR
[4];

615 
uöt32_t
 
RESERVED
[2];

616 
__IO
 
uöt32_t
 
CMPCR
;

617 } 
	tSYSCFG_Ty≥Def
;

625 
__IO
 
uöt32_t
 
CR1
;

626 
__IO
 
uöt32_t
 
CR2
;

627 
__IO
 
uöt32_t
 
OAR1
;

628 
__IO
 
uöt32_t
 
OAR2
;

629 
__IO
 
uöt32_t
 
DR
;

630 
__IO
 
uöt32_t
 
SR1
;

631 
__IO
 
uöt32_t
 
SR2
;

632 
__IO
 
uöt32_t
 
CCR
;

633 
__IO
 
uöt32_t
 
TRISE
;

634 
__IO
 
uöt32_t
 
FLTR
;

635 } 
	tI2C_Ty≥Def
;

643 
__IO
 
uöt32_t
 
KR
;

644 
__IO
 
uöt32_t
 
PR
;

645 
__IO
 
uöt32_t
 
RLR
;

646 
__IO
 
uöt32_t
 
SR
;

647 } 
	tIWDG_Ty≥Def
;

655 
uöt32_t
 
RESERVED0
[2];

656 
__IO
 
uöt32_t
 
SSCR
;

657 
__IO
 
uöt32_t
 
BPCR
;

658 
__IO
 
uöt32_t
 
AWCR
;

659 
__IO
 
uöt32_t
 
TWCR
;

660 
__IO
 
uöt32_t
 
GCR
;

661 
uöt32_t
 
RESERVED1
[2];

662 
__IO
 
uöt32_t
 
SRCR
;

663 
uöt32_t
 
RESERVED2
[1];

664 
__IO
 
uöt32_t
 
BCCR
;

665 
uöt32_t
 
RESERVED3
[1];

666 
__IO
 
uöt32_t
 
IER
;

667 
__IO
 
uöt32_t
 
ISR
;

668 
__IO
 
uöt32_t
 
ICR
;

669 
__IO
 
uöt32_t
 
LIPCR
;

670 
__IO
 
uöt32_t
 
CPSR
;

671 
__IO
 
uöt32_t
 
CDSR
;

672 } 
	tLTDC_Ty≥Def
;

680 
__IO
 
uöt32_t
 
CR
;

681 
__IO
 
uöt32_t
 
WHPCR
;

682 
__IO
 
uöt32_t
 
WVPCR
;

683 
__IO
 
uöt32_t
 
CKCR
;

684 
__IO
 
uöt32_t
 
PFCR
;

685 
__IO
 
uöt32_t
 
CACR
;

686 
__IO
 
uöt32_t
 
DCCR
;

687 
__IO
 
uöt32_t
 
BFCR
;

688 
uöt32_t
 
RESERVED0
[2];

689 
__IO
 
uöt32_t
 
CFBAR
;

690 
__IO
 
uöt32_t
 
CFBLR
;

691 
__IO
 
uöt32_t
 
CFBLNR
;

692 
uöt32_t
 
RESERVED1
[3];

693 
__IO
 
uöt32_t
 
CLUTWR
;

695 } 
	tLTDC_Layî_Ty≥Def
;

703 
__IO
 
uöt32_t
 
CR
;

704 
__IO
 
uöt32_t
 
CSR
;

705 } 
	tPWR_Ty≥Def
;

713 
__IO
 
uöt32_t
 
CR
;

714 
__IO
 
uöt32_t
 
PLLCFGR
;

715 
__IO
 
uöt32_t
 
CFGR
;

716 
__IO
 
uöt32_t
 
CIR
;

717 
__IO
 
uöt32_t
 
AHB1RSTR
;

718 
__IO
 
uöt32_t
 
AHB2RSTR
;

719 
__IO
 
uöt32_t
 
AHB3RSTR
;

720 
uöt32_t
 
RESERVED0
;

721 
__IO
 
uöt32_t
 
APB1RSTR
;

722 
__IO
 
uöt32_t
 
APB2RSTR
;

723 
uöt32_t
 
RESERVED1
[2];

724 
__IO
 
uöt32_t
 
AHB1ENR
;

725 
__IO
 
uöt32_t
 
AHB2ENR
;

726 
__IO
 
uöt32_t
 
AHB3ENR
;

727 
uöt32_t
 
RESERVED2
;

728 
__IO
 
uöt32_t
 
APB1ENR
;

729 
__IO
 
uöt32_t
 
APB2ENR
;

730 
uöt32_t
 
RESERVED3
[2];

731 
__IO
 
uöt32_t
 
AHB1LPENR
;

732 
__IO
 
uöt32_t
 
AHB2LPENR
;

733 
__IO
 
uöt32_t
 
AHB3LPENR
;

734 
uöt32_t
 
RESERVED4
;

735 
__IO
 
uöt32_t
 
APB1LPENR
;

736 
__IO
 
uöt32_t
 
APB2LPENR
;

737 
uöt32_t
 
RESERVED5
[2];

738 
__IO
 
uöt32_t
 
BDCR
;

739 
__IO
 
uöt32_t
 
CSR
;

740 
uöt32_t
 
RESERVED6
[2];

741 
__IO
 
uöt32_t
 
SSCGR
;

742 
__IO
 
uöt32_t
 
PLLI2SCFGR
;

743 
__IO
 
uöt32_t
 
PLLSAICFGR
;

744 
__IO
 
uöt32_t
 
DCKCFGR
;

746 } 
	tRCC_Ty≥Def
;

754 
__IO
 
uöt32_t
 
TR
;

755 
__IO
 
uöt32_t
 
DR
;

756 
__IO
 
uöt32_t
 
CR
;

757 
__IO
 
uöt32_t
 
ISR
;

758 
__IO
 
uöt32_t
 
PRER
;

759 
__IO
 
uöt32_t
 
WUTR
;

760 
__IO
 
uöt32_t
 
CALIBR
;

761 
__IO
 
uöt32_t
 
ALRMAR
;

762 
__IO
 
uöt32_t
 
ALRMBR
;

763 
__IO
 
uöt32_t
 
WPR
;

764 
__IO
 
uöt32_t
 
SSR
;

765 
__IO
 
uöt32_t
 
SHIFTR
;

766 
__IO
 
uöt32_t
 
TSTR
;

767 
__IO
 
uöt32_t
 
TSDR
;

768 
__IO
 
uöt32_t
 
TSSSR
;

769 
__IO
 
uöt32_t
 
CALR
;

770 
__IO
 
uöt32_t
 
TAFCR
;

771 
__IO
 
uöt32_t
 
ALRMASSR
;

772 
__IO
 
uöt32_t
 
ALRMBSSR
;

773 
uöt32_t
 
RESERVED7
;

774 
__IO
 
uöt32_t
 
BKP0R
;

775 
__IO
 
uöt32_t
 
BKP1R
;

776 
__IO
 
uöt32_t
 
BKP2R
;

777 
__IO
 
uöt32_t
 
BKP3R
;

778 
__IO
 
uöt32_t
 
BKP4R
;

779 
__IO
 
uöt32_t
 
BKP5R
;

780 
__IO
 
uöt32_t
 
BKP6R
;

781 
__IO
 
uöt32_t
 
BKP7R
;

782 
__IO
 
uöt32_t
 
BKP8R
;

783 
__IO
 
uöt32_t
 
BKP9R
;

784 
__IO
 
uöt32_t
 
BKP10R
;

785 
__IO
 
uöt32_t
 
BKP11R
;

786 
__IO
 
uöt32_t
 
BKP12R
;

787 
__IO
 
uöt32_t
 
BKP13R
;

788 
__IO
 
uöt32_t
 
BKP14R
;

789 
__IO
 
uöt32_t
 
BKP15R
;

790 
__IO
 
uöt32_t
 
BKP16R
;

791 
__IO
 
uöt32_t
 
BKP17R
;

792 
__IO
 
uöt32_t
 
BKP18R
;

793 
__IO
 
uöt32_t
 
BKP19R
;

794 } 
	tRTC_Ty≥Def
;

802 
__IO
 
uöt32_t
 
GCR
;

803 } 
	tSAI_Ty≥Def
;

807 
__IO
 
uöt32_t
 
CR1
;

808 
__IO
 
uöt32_t
 
CR2
;

809 
__IO
 
uöt32_t
 
FRCR
;

810 
__IO
 
uöt32_t
 
SLOTR
;

811 
__IO
 
uöt32_t
 
IMR
;

812 
__IO
 
uöt32_t
 
SR
;

813 
__IO
 
uöt32_t
 
CLRFR
;

814 
__IO
 
uöt32_t
 
DR
;

815 } 
	tSAI_Block_Ty≥Def
;

823 
__IO
 
uöt32_t
 
POWER
;

824 
__IO
 
uöt32_t
 
CLKCR
;

825 
__IO
 
uöt32_t
 
ARG
;

826 
__IO
 
uöt32_t
 
CMD
;

827 
__I
 
uöt32_t
 
RESPCMD
;

828 
__I
 
uöt32_t
 
RESP1
;

829 
__I
 
uöt32_t
 
RESP2
;

830 
__I
 
uöt32_t
 
RESP3
;

831 
__I
 
uöt32_t
 
RESP4
;

832 
__IO
 
uöt32_t
 
DTIMER
;

833 
__IO
 
uöt32_t
 
DLEN
;

834 
__IO
 
uöt32_t
 
DCTRL
;

835 
__I
 
uöt32_t
 
DCOUNT
;

836 
__I
 
uöt32_t
 
STA
;

837 
__IO
 
uöt32_t
 
ICR
;

838 
__IO
 
uöt32_t
 
MASK
;

839 
uöt32_t
 
RESERVED0
[2];

840 
__I
 
uöt32_t
 
FIFOCNT
;

841 
uöt32_t
 
RESERVED1
[13];

842 
__IO
 
uöt32_t
 
FIFO
;

843 } 
	tSDIO_Ty≥Def
;

851 
__IO
 
uöt32_t
 
CR1
;

852 
__IO
 
uöt32_t
 
CR2
;

853 
__IO
 
uöt32_t
 
SR
;

854 
__IO
 
uöt32_t
 
DR
;

855 
__IO
 
uöt32_t
 
CRCPR
;

856 
__IO
 
uöt32_t
 
RXCRCR
;

857 
__IO
 
uöt32_t
 
TXCRCR
;

858 
__IO
 
uöt32_t
 
I2SCFGR
;

859 
__IO
 
uöt32_t
 
I2SPR
;

860 } 
	tSPI_Ty≥Def
;

868 
__IO
 
uöt32_t
 
CR1
;

869 
__IO
 
uöt32_t
 
CR2
;

870 
__IO
 
uöt32_t
 
SMCR
;

871 
__IO
 
uöt32_t
 
DIER
;

872 
__IO
 
uöt32_t
 
SR
;

873 
__IO
 
uöt32_t
 
EGR
;

874 
__IO
 
uöt32_t
 
CCMR1
;

875 
__IO
 
uöt32_t
 
CCMR2
;

876 
__IO
 
uöt32_t
 
CCER
;

877 
__IO
 
uöt32_t
 
CNT
;

878 
__IO
 
uöt32_t
 
PSC
;

879 
__IO
 
uöt32_t
 
ARR
;

880 
__IO
 
uöt32_t
 
RCR
;

881 
__IO
 
uöt32_t
 
CCR1
;

882 
__IO
 
uöt32_t
 
CCR2
;

883 
__IO
 
uöt32_t
 
CCR3
;

884 
__IO
 
uöt32_t
 
CCR4
;

885 
__IO
 
uöt32_t
 
BDTR
;

886 
__IO
 
uöt32_t
 
DCR
;

887 
__IO
 
uöt32_t
 
DMAR
;

888 
__IO
 
uöt32_t
 
OR
;

889 } 
	tTIM_Ty≥Def
;

897 
__IO
 
uöt32_t
 
SR
;

898 
__IO
 
uöt32_t
 
DR
;

899 
__IO
 
uöt32_t
 
BRR
;

900 
__IO
 
uöt32_t
 
CR1
;

901 
__IO
 
uöt32_t
 
CR2
;

902 
__IO
 
uöt32_t
 
CR3
;

903 
__IO
 
uöt32_t
 
GTPR
;

904 } 
	tUSART_Ty≥Def
;

912 
__IO
 
uöt32_t
 
CR
;

913 
__IO
 
uöt32_t
 
CFR
;

914 
__IO
 
uöt32_t
 
SR
;

915 } 
	tWWDG_Ty≥Def
;

924 
__IO
 
uöt32_t
 
CR
;

925 
__IO
 
uöt32_t
 
SR
;

926 
__IO
 
uöt32_t
 
DR
;

927 } 
	tRNG_Ty≥Def
;

935 
__IO
 
uöt32_t
 
GOTGCTL
;

936 
__IO
 
uöt32_t
 
GOTGINT
;

937 
__IO
 
uöt32_t
 
GAHBCFG
;

938 
__IO
 
uöt32_t
 
GUSBCFG
;

939 
__IO
 
uöt32_t
 
GRSTCTL
;

940 
__IO
 
uöt32_t
 
GINTSTS
;

941 
__IO
 
uöt32_t
 
GINTMSK
;

942 
__IO
 
uöt32_t
 
GRXSTSR
;

943 
__IO
 
uöt32_t
 
GRXSTSP
;

944 
__IO
 
uöt32_t
 
GRXFSIZ
;

945 
__IO
 
uöt32_t
 
DIEPTXF0_HNPTXFSIZ
;

946 
__IO
 
uöt32_t
 
HNPTXSTS
;

947 
uöt32_t
 
Re£rved30
[2];

948 
__IO
 
uöt32_t
 
GCCFG
;

949 
__IO
 
uöt32_t
 
CID
;

950 
uöt32_t
 
Re£rved40
[48];

951 
__IO
 
uöt32_t
 
HPTXFSIZ
;

952 
__IO
 
uöt32_t
 
DIEPTXF
[0x0F];

954 
	tUSB_OTG_GlobÆTy≥Def
;

962 
__IO
 
uöt32_t
 
DCFG
;

963 
__IO
 
uöt32_t
 
DCTL
;

964 
__IO
 
uöt32_t
 
DSTS
;

965 
uöt32_t
 
Re£rved0C
;

966 
__IO
 
uöt32_t
 
DIEPMSK
;

967 
__IO
 
uöt32_t
 
DOEPMSK
;

968 
__IO
 
uöt32_t
 
DAINT
;

969 
__IO
 
uöt32_t
 
DAINTMSK
;

970 
uöt32_t
 
Re£rved20
;

971 
uöt32_t
 
Re£rved9
;

972 
__IO
 
uöt32_t
 
DVBUSDIS
;

973 
__IO
 
uöt32_t
 
DVBUSPULSE
;

974 
__IO
 
uöt32_t
 
DTHRCTL
;

975 
__IO
 
uöt32_t
 
DIEPEMPMSK
;

976 
__IO
 
uöt32_t
 
DEACHINT
;

977 
__IO
 
uöt32_t
 
DEACHMSK
;

978 
uöt32_t
 
Re£rved40
;

979 
__IO
 
uöt32_t
 
DINEP1MSK
;

980 
uöt32_t
 
Re£rved44
[15];

981 
__IO
 
uöt32_t
 
DOUTEP1MSK
;

983 
	tUSB_OTG_Devi˚Ty≥Def
;

991 
__IO
 
uöt32_t
 
DIEPCTL
;

992 
uöt32_t
 
Re£rved04
;

993 
__IO
 
uöt32_t
 
DIEPINT
;

994 
uöt32_t
 
Re£rved0C
;

995 
__IO
 
uöt32_t
 
DIEPTSIZ
;

996 
__IO
 
uöt32_t
 
DIEPDMA
;

997 
__IO
 
uöt32_t
 
DTXFSTS
;

998 
uöt32_t
 
Re£rved18
;

1000 
	tUSB_OTG_INEndpoötTy≥Def
;

1008 
__IO
 
uöt32_t
 
DOEPCTL
;

1009 
uöt32_t
 
Re£rved04
;

1010 
__IO
 
uöt32_t
 
DOEPINT
;

1011 
uöt32_t
 
Re£rved0C
;

1012 
__IO
 
uöt32_t
 
DOEPTSIZ
;

1013 
__IO
 
uöt32_t
 
DOEPDMA
;

1014 
uöt32_t
 
Re£rved18
[2];

1016 
	tUSB_OTG_OUTEndpoötTy≥Def
;

1024 
__IO
 
uöt32_t
 
HCFG
;

1025 
__IO
 
uöt32_t
 
HFIR
;

1026 
__IO
 
uöt32_t
 
HFNUM
;

1027 
uöt32_t
 
Re£rved40C
;

1028 
__IO
 
uöt32_t
 
HPTXSTS
;

1029 
__IO
 
uöt32_t
 
HAINT
;

1030 
__IO
 
uöt32_t
 
HAINTMSK
;

1032 
	tUSB_OTG_Ho°Ty≥Def
;

1039 
__IO
 
uöt32_t
 
HCCHAR
;

1040 
__IO
 
uöt32_t
 
HCSPLT
;

1041 
__IO
 
uöt32_t
 
HCINT
;

1042 
__IO
 
uöt32_t
 
HCINTMSK
;

1043 
__IO
 
uöt32_t
 
HCTSIZ
;

1044 
__IO
 
uöt32_t
 
HCDMA
;

1045 
uöt32_t
 
Re£rved
[2];

1047 
	tUSB_OTG_Ho°Ch™√lTy≥Def
;

1055 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1056 
	#CCMDATARAM_BASE
 ((
uöt32_t
)0x10000000Ë

	)

1057 
	#SRAM1_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1058 
	#SRAM2_BASE
 ((
uöt32_t
)0x2001C000Ë

	)

1059 
	#SRAM3_BASE
 ((
uöt32_t
)0x20020000Ë

	)

1060 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1061 
	#BKPSRAM_BASE
 ((
uöt32_t
)0x40024000Ë

	)

1062 
	#FMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1063 
	#SRAM1_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1064 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x22380000Ë

	)

1065 
	#SRAM3_BB_BASE
 ((
uöt32_t
)0x22400000Ë

	)

1066 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1067 
	#BKPSRAM_BB_BASE
 ((
uöt32_t
)0x42480000Ë

	)

1068 
	#FLASH_END
 ((
uöt32_t
)0x081FFFFFË

	)

1069 
	#CCMDATARAM_END
 ((
uöt32_t
)0x1000FFFFË

	)

1072 
	#SRAM_BASE
 
SRAM1_BASE


	)

1073 
	#SRAM_BB_BASE
 
SRAM1_BB_BASE


	)

1077 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1078 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

1079 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

1080 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

1083 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1084 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1085 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1086 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1087 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1088 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1089 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1090 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1091 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1092 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1093 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1094 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1095 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x3400)

	)

1096 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1097 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1098 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

1099 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1100 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1101 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1102 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1103 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1104 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1105 
	#I2C3_BASE
 (
APB1PERIPH_BASE
 + 0x5C00)

	)

1106 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1107 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1108 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1109 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1110 
	#UART7_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1111 
	#UART8_BASE
 (
APB1PERIPH_BASE
 + 0x7C00)

	)

1114 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1115 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1116 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1117 
	#USART6_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1118 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1119 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2100)

	)

1120 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x2200)

	)

1121 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2300)

	)

1122 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1123 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1124 
	#SPI4_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1125 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1126 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1127 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1128 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1129 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1130 
	#SPI5_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1131 
	#SPI6_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1132 
	#SAI1_BASE
 (
APB2PERIPH_BASE
 + 0x5800)

	)

1133 
	#SAI1_Block_A_BASE
 (
SAI1_BASE
 + 0x004)

	)

1134 
	#SAI1_Block_B_BASE
 (
SAI1_BASE
 + 0x024)

	)

1135 
	#LTDC_BASE
 (
APB2PERIPH_BASE
 + 0x6800)

	)

1136 
	#LTDC_Layî1_BASE
 (
LTDC_BASE
 + 0x84)

	)

1137 
	#LTDC_Layî2_BASE
 (
LTDC_BASE
 + 0x104)

	)

1140 
	#GPIOA_BASE
 (
AHB1PERIPH_BASE
 + 0x0000)

	)

1141 
	#GPIOB_BASE
 (
AHB1PERIPH_BASE
 + 0x0400)

	)

1142 
	#GPIOC_BASE
 (
AHB1PERIPH_BASE
 + 0x0800)

	)

1143 
	#GPIOD_BASE
 (
AHB1PERIPH_BASE
 + 0x0C00)

	)

1144 
	#GPIOE_BASE
 (
AHB1PERIPH_BASE
 + 0x1000)

	)

1145 
	#GPIOF_BASE
 (
AHB1PERIPH_BASE
 + 0x1400)

	)

1146 
	#GPIOG_BASE
 (
AHB1PERIPH_BASE
 + 0x1800)

	)

1147 
	#GPIOH_BASE
 (
AHB1PERIPH_BASE
 + 0x1C00)

	)

1148 
	#GPIOI_BASE
 (
AHB1PERIPH_BASE
 + 0x2000)

	)

1149 
	#GPIOJ_BASE
 (
AHB1PERIPH_BASE
 + 0x2400)

	)

1150 
	#GPIOK_BASE
 (
AHB1PERIPH_BASE
 + 0x2800)

	)

1151 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x3000)

	)

1152 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x3800)

	)

1153 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x3C00)

	)

1154 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x6000)

	)

1155 
	#DMA1_Såóm0_BASE
 (
DMA1_BASE
 + 0x010)

	)

1156 
	#DMA1_Såóm1_BASE
 (
DMA1_BASE
 + 0x028)

	)

1157 
	#DMA1_Såóm2_BASE
 (
DMA1_BASE
 + 0x040)

	)

1158 
	#DMA1_Såóm3_BASE
 (
DMA1_BASE
 + 0x058)

	)

1159 
	#DMA1_Såóm4_BASE
 (
DMA1_BASE
 + 0x070)

	)

1160 
	#DMA1_Såóm5_BASE
 (
DMA1_BASE
 + 0x088)

	)

1161 
	#DMA1_Såóm6_BASE
 (
DMA1_BASE
 + 0x0A0)

	)

1162 
	#DMA1_Såóm7_BASE
 (
DMA1_BASE
 + 0x0B8)

	)

1163 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x6400)

	)

1164 
	#DMA2_Såóm0_BASE
 (
DMA2_BASE
 + 0x010)

	)

1165 
	#DMA2_Såóm1_BASE
 (
DMA2_BASE
 + 0x028)

	)

1166 
	#DMA2_Såóm2_BASE
 (
DMA2_BASE
 + 0x040)

	)

1167 
	#DMA2_Såóm3_BASE
 (
DMA2_BASE
 + 0x058)

	)

1168 
	#DMA2_Såóm4_BASE
 (
DMA2_BASE
 + 0x070)

	)

1169 
	#DMA2_Såóm5_BASE
 (
DMA2_BASE
 + 0x088)

	)

1170 
	#DMA2_Såóm6_BASE
 (
DMA2_BASE
 + 0x0A0)

	)

1171 
	#DMA2_Såóm7_BASE
 (
DMA2_BASE
 + 0x0B8)

	)

1172 
	#ETH_BASE
 (
AHB1PERIPH_BASE
 + 0x8000)

	)

1173 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1174 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1175 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1176 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1177 
	#DMA2D_BASE
 (
AHB1PERIPH_BASE
 + 0xB000)

	)

1180 
	#DCMI_BASE
 (
AHB2PERIPH_BASE
 + 0x50000)

	)

1181 
	#RNG_BASE
 (
AHB2PERIPH_BASE
 + 0x60800)

	)

1184 
	#FMC_B™k1_R_BASE
 (
FMC_R_BASE
 + 0x0000)

	)

1185 
	#FMC_B™k1E_R_BASE
 (
FMC_R_BASE
 + 0x0104)

	)

1186 
	#FMC_B™k2_3_R_BASE
 (
FMC_R_BASE
 + 0x0060)

	)

1187 
	#FMC_B™k4_R_BASE
 (
FMC_R_BASE
 + 0x00A0)

	)

1188 
	#FMC_B™k5_6_R_BASE
 (
FMC_R_BASE
 + 0x0140)

	)

1191 
	#DBGMCU_BASE
 ((
uöt32_t
 )0xE0042000)

	)

1194 
	#USB_OTG_HS_PERIPH_BASE
 ((
uöt32_t
 )0x40040000)

	)

1195 
	#USB_OTG_FS_PERIPH_BASE
 ((
uöt32_t
 )0x50000000)

	)

1197 
	#USB_OTG_GLOBAL_BASE
 ((
uöt32_t
 )0x000)

	)

1198 
	#USB_OTG_DEVICE_BASE
 ((
uöt32_t
 )0x800)

	)

1199 
	#USB_OTG_IN_ENDPOINT_BASE
 ((
uöt32_t
 )0x900)

	)

1200 
	#USB_OTG_OUT_ENDPOINT_BASE
 ((
uöt32_t
 )0xB00)

	)

1201 
	#USB_OTG_EP_REG_SIZE
 ((
uöt32_t
 )0x20)

	)

1202 
	#USB_OTG_HOST_BASE
 ((
uöt32_t
 )0x400)

	)

1203 
	#USB_OTG_HOST_PORT_BASE
 ((
uöt32_t
 )0x440)

	)

1204 
	#USB_OTG_HOST_CHANNEL_BASE
 ((
uöt32_t
 )0x500)

	)

1205 
	#USB_OTG_HOST_CHANNEL_SIZE
 ((
uöt32_t
 )0x20)

	)

1206 
	#USB_OTG_PCGCCTL_BASE
 ((
uöt32_t
 )0xE00)

	)

1207 
	#USB_OTG_FIFO_BASE
 ((
uöt32_t
 )0x1000)

	)

1208 
	#USB_OTG_FIFO_SIZE
 ((
uöt32_t
 )0x1000)

	)

1217 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1218 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1219 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1220 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1221 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1222 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1223 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1224 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1225 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1226 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1227 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1228 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1229 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

1230 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1231 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1232 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

1233 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1234 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1235 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1236 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1237 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1238 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1239 
	#I2C3
 ((
I2C_Ty≥Def
 *Ë
I2C3_BASE
)

	)

1240 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1241 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1242 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1243 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1244 
	#UART7
 ((
USART_Ty≥Def
 *Ë
UART7_BASE
)

	)

1245 
	#UART8
 ((
USART_Ty≥Def
 *Ë
UART8_BASE
)

	)

1246 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1247 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1248 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1249 
	#USART6
 ((
USART_Ty≥Def
 *Ë
USART6_BASE
)

	)

1250 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

1251 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1252 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1253 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1254 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1255 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1256 
	#SPI4
 ((
SPI_Ty≥Def
 *Ë
SPI4_BASE
)

	)

1257 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

1258 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1259 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1260 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1261 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1262 
	#SPI5
 ((
SPI_Ty≥Def
 *Ë
SPI5_BASE
)

	)

1263 
	#SPI6
 ((
SPI_Ty≥Def
 *Ë
SPI6_BASE
)

	)

1264 
	#SAI1
 ((
SAI_Ty≥Def
 *Ë
SAI1_BASE
)

	)

1265 
	#SAI1_Block_A
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_A_BASE
)

	)

1266 
	#SAI1_Block_B
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_B_BASE
)

	)

1267 
	#LTDC
 ((
LTDC_Ty≥Def
 *)
LTDC_BASE
)

	)

1268 
	#LTDC_Layî1
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî1_BASE
)

	)

1269 
	#LTDC_Layî2
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî2_BASE
)

	)

1271 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1272 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1273 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1274 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1275 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1276 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1277 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1278 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

1279 
	#GPIOI
 ((
GPIO_Ty≥Def
 *Ë
GPIOI_BASE
)

	)

1280 
	#GPIOJ
 ((
GPIO_Ty≥Def
 *Ë
GPIOJ_BASE
)

	)

1281 
	#GPIOK
 ((
GPIO_Ty≥Def
 *Ë
GPIOK_BASE
)

	)

1282 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1283 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1284 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1285 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1286 
	#DMA1_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm0_BASE
)

	)

1287 
	#DMA1_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm1_BASE
)

	)

1288 
	#DMA1_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm2_BASE
)

	)

1289 
	#DMA1_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm3_BASE
)

	)

1290 
	#DMA1_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm4_BASE
)

	)

1291 
	#DMA1_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm5_BASE
)

	)

1292 
	#DMA1_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm6_BASE
)

	)

1293 
	#DMA1_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm7_BASE
)

	)

1294 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1295 
	#DMA2_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm0_BASE
)

	)

1296 
	#DMA2_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm1_BASE
)

	)

1297 
	#DMA2_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm2_BASE
)

	)

1298 
	#DMA2_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm3_BASE
)

	)

1299 
	#DMA2_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm4_BASE
)

	)

1300 
	#DMA2_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm5_BASE
)

	)

1301 
	#DMA2_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm6_BASE
)

	)

1302 
	#DMA2_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm7_BASE
)

	)

1303 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1304 
	#DMA2D
 ((
DMA2D_Ty≥Def
 *)
DMA2D_BASE
)

	)

1305 
	#DCMI
 ((
DCMI_Ty≥Def
 *Ë
DCMI_BASE
)

	)

1306 
	#RNG
 ((
RNG_Ty≥Def
 *Ë
RNG_BASE
)

	)

1307 
	#FMC_B™k1
 ((
FMC_B™k1_Ty≥Def
 *Ë
FMC_B™k1_R_BASE
)

	)

1308 
	#FMC_B™k1E
 ((
FMC_B™k1E_Ty≥Def
 *Ë
FMC_B™k1E_R_BASE
)

	)

1309 
	#FMC_B™k2_3
 ((
FMC_B™k2_3_Ty≥Def
 *Ë
FMC_B™k2_3_R_BASE
)

	)

1310 
	#FMC_B™k4
 ((
FMC_B™k4_Ty≥Def
 *Ë
FMC_B™k4_R_BASE
)

	)

1311 
	#FMC_B™k5_6
 ((
FMC_B™k5_6_Ty≥Def
 *Ë
FMC_B™k5_6_R_BASE
)

	)

1313 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1315 
	#USB_OTG_FS
 ((
USB_OTG_GlobÆTy≥Def
 *Ë
USB_OTG_FS_PERIPH_BASE
)

	)

1316 
	#USB_OTG_HS
 ((
USB_OTG_GlobÆTy≥Def
 *Ë
USB_OTG_HS_PERIPH_BASE
)

	)

1340 
	#ADC_SR_AWD
 ((
uöt32_t
)0x00000001Ë

	)

1341 
	#ADC_SR_EOC
 ((
uöt32_t
)0x00000002Ë

	)

1342 
	#ADC_SR_JEOC
 ((
uöt32_t
)0x00000004Ë

	)

1343 
	#ADC_SR_JSTRT
 ((
uöt32_t
)0x00000008Ë

	)

1344 
	#ADC_SR_STRT
 ((
uöt32_t
)0x00000010Ë

	)

1345 
	#ADC_SR_OVR
 ((
uöt32_t
)0x00000020Ë

	)

1348 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

1349 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

1350 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

1351 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

1352 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

1353 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

1354 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

1355 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

1356 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

1357 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

1358 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

1359 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

1360 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

1361 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

1362 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

1363 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

1364 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

1365 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

1366 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

1367 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

1368 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

1369 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

1370 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

1371 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

1374 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

1375 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

1376 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

1377 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

1378 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

1379 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

1380 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

1381 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

1382 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

1383 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

1384 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

1385 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

1386 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

1387 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

1388 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

1389 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

1390 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

1391 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

1392 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

1393 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

1394 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

1395 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

1396 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

1397 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

1400 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

1401 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

1402 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

1403 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

1404 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

1405 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

1406 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

1407 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

1408 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

1409 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

1410 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

1411 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

1412 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

1413 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

1414 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

1415 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

1416 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

1417 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

1418 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

1419 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

1420 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

1421 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

1422 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

1423 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

1424 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

1425 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

1426 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

1427 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

1428 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

1429 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

1430 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

1431 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

1432 
	#ADC_SMPR1_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

1433 
	#ADC_SMPR1_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

1434 
	#ADC_SMPR1_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

1435 
	#ADC_SMPR1_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

1438 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

1439 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

1440 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

1441 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

1442 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

1443 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

1444 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

1445 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

1446 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

1447 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

1448 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

1449 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

1450 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

1451 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

1452 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

1453 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

1454 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

1455 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

1456 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

1457 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

1458 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

1459 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

1460 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

1461 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

1462 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

1463 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

1464 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

1465 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

1466 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

1467 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

1468 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

1469 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

1470 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

1471 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

1472 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

1473 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

1474 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

1475 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

1476 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

1477 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

1480 
	#ADC_JOFR1_JOFFSET1
 ((
uöt32_t
)0x0FFFË

	)

1483 
	#ADC_JOFR2_JOFFSET2
 ((
uöt32_t
)0x0FFFË

	)

1486 
	#ADC_JOFR3_JOFFSET3
 ((
uöt32_t
)0x0FFFË

	)

1489 
	#ADC_JOFR4_JOFFSET4
 ((
uöt32_t
)0x0FFFË

	)

1492 
	#ADC_HTR_HT
 ((
uöt32_t
)0x0FFFË

	)

1495 
	#ADC_LTR_LT
 ((
uöt32_t
)0x0FFFË

	)

1498 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

1499 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

1500 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

1501 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

1502 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

1503 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

1504 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

1505 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

1506 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

1507 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

1508 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

1509 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

1510 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

1511 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

1512 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

1513 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

1514 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

1515 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

1516 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

1517 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

1518 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

1519 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

1520 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

1521 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

1522 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

1523 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

1524 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

1525 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

1526 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

1529 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

1530 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

1531 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

1532 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

1533 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

1534 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

1535 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

1536 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

1537 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

1538 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

1539 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

1540 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

1541 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

1542 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

1543 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

1544 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

1545 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

1546 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

1547 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

1548 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

1549 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

1550 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

1551 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

1552 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

1553 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

1554 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

1555 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

1556 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

1557 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

1558 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

1559 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

1560 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

1561 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

1562 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

1563 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

1564 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

1567 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

1568 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1569 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1570 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1571 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1572 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1573 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1574 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1575 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1576 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1577 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1578 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1579 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1580 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1581 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1582 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1583 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1584 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1585 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1586 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1587 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1588 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1589 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1590 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1591 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

1592 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

1593 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

1594 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

1595 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

1596 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

1597 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

1598 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

1599 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

1600 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

1601 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

1602 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

1605 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

1606 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1607 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1608 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1609 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1610 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1611 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1612 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1613 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1614 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1615 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1616 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1617 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1618 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1619 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1620 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1621 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1622 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1623 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1624 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1625 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1626 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1627 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1628 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1629 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

1630 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

1631 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

1634 
	#ADC_JDR1_JDATA
 ((
uöt32_t
)0xFFFFË

	)

1637 
	#ADC_JDR2_JDATA
 ((
uöt32_t
)0xFFFFË

	)

1640 
	#ADC_JDR3_JDATA
 ((
uöt32_t
)0xFFFFË

	)

1643 
	#ADC_JDR4_JDATA
 ((
uöt32_t
)0xFFFFË

	)

1646 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

1647 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

1650 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

1651 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

1652 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

1653 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

1654 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

1655 
	#ADC_CSR_DOVR1
 ((
uöt32_t
)0x00000020Ë

	)

1656 
	#ADC_CSR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

1657 
	#ADC_CSR_EOC2
 ((
uöt32_t
)0x00000200Ë

	)

1658 
	#ADC_CSR_JEOC2
 ((
uöt32_t
)0x00000400Ë

	)

1659 
	#ADC_CSR_JSTRT2
 ((
uöt32_t
)0x00000800Ë

	)

1660 
	#ADC_CSR_STRT2
 ((
uöt32_t
)0x00001000Ë

	)

1661 
	#ADC_CSR_DOVR2
 ((
uöt32_t
)0x00002000Ë

	)

1662 
	#ADC_CSR_AWD3
 ((
uöt32_t
)0x00010000Ë

	)

1663 
	#ADC_CSR_EOC3
 ((
uöt32_t
)0x00020000Ë

	)

1664 
	#ADC_CSR_JEOC3
 ((
uöt32_t
)0x00040000Ë

	)

1665 
	#ADC_CSR_JSTRT3
 ((
uöt32_t
)0x00080000Ë

	)

1666 
	#ADC_CSR_STRT3
 ((
uöt32_t
)0x00100000Ë

	)

1667 
	#ADC_CSR_DOVR3
 ((
uöt32_t
)0x00200000Ë

	)

1670 
	#ADC_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

1671 
	#ADC_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

1672 
	#ADC_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

1673 
	#ADC_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

1674 
	#ADC_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

1675 
	#ADC_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

1676 
	#ADC_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

1677 
	#ADC_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

1678 
	#ADC_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

1679 
	#ADC_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

1680 
	#ADC_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

1681 
	#ADC_CCR_DDS
 ((
uöt32_t
)0x00002000Ë

	)

1682 
	#ADC_CCR_DMA
 ((
uöt32_t
)0x0000C000Ë

	)

1683 
	#ADC_CCR_DMA_0
 ((
uöt32_t
)0x00004000Ë

	)

1684 
	#ADC_CCR_DMA_1
 ((
uöt32_t
)0x00008000Ë

	)

1685 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

1686 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

1687 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

1688 
	#ADC_CCR_VBATE
 ((
uöt32_t
)0x00400000Ë

	)

1689 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

1692 
	#ADC_CDR_DATA1
 ((
uöt32_t
)0x0000FFFFË

	)

1693 
	#ADC_CDR_DATA2
 ((
uöt32_t
)0xFFFF0000Ë

	)

1702 
	#CAN_MCR_INRQ
 ((
uöt32_t
)0x00000001Ë

	)

1703 
	#CAN_MCR_SLEEP
 ((
uöt32_t
)0x00000002Ë

	)

1704 
	#CAN_MCR_TXFP
 ((
uöt32_t
)0x00000004Ë

	)

1705 
	#CAN_MCR_RFLM
 ((
uöt32_t
)0x00000008Ë

	)

1706 
	#CAN_MCR_NART
 ((
uöt32_t
)0x00000010Ë

	)

1707 
	#CAN_MCR_AWUM
 ((
uöt32_t
)0x00000020Ë

	)

1708 
	#CAN_MCR_ABOM
 ((
uöt32_t
)0x00000040Ë

	)

1709 
	#CAN_MCR_TTCM
 ((
uöt32_t
)0x00000080Ë

	)

1710 
	#CAN_MCR_RESET
 ((
uöt32_t
)0x00008000Ë

	)

1711 
	#CAN_MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

1713 
	#CAN_MSR_INAK
 ((
uöt32_t
)0x0001Ë

	)

1714 
	#CAN_MSR_SLAK
 ((
uöt32_t
)0x0002Ë

	)

1715 
	#CAN_MSR_ERRI
 ((
uöt32_t
)0x0004Ë

	)

1716 
	#CAN_MSR_WKUI
 ((
uöt32_t
)0x0008Ë

	)

1717 
	#CAN_MSR_SLAKI
 ((
uöt32_t
)0x0010Ë

	)

1718 
	#CAN_MSR_TXM
 ((
uöt32_t
)0x0100Ë

	)

1719 
	#CAN_MSR_RXM
 ((
uöt32_t
)0x0200Ë

	)

1720 
	#CAN_MSR_SAMP
 ((
uöt32_t
)0x0400Ë

	)

1721 
	#CAN_MSR_RX
 ((
uöt32_t
)0x0800Ë

	)

1724 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

1725 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

1726 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

1727 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

1728 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

1729 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

1730 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

1731 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

1732 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

1733 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

1734 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

1735 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

1736 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

1737 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

1738 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

1739 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

1741 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

1742 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

1743 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

1744 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

1746 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

1747 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

1748 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

1749 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

1752 
	#CAN_RF0R_FMP0
 ((
uöt32_t
)0x03Ë

	)

1753 
	#CAN_RF0R_FULL0
 ((
uöt32_t
)0x08Ë

	)

1754 
	#CAN_RF0R_FOVR0
 ((
uöt32_t
)0x10Ë

	)

1755 
	#CAN_RF0R_RFOM0
 ((
uöt32_t
)0x20Ë

	)

1758 
	#CAN_RF1R_FMP1
 ((
uöt32_t
)0x03Ë

	)

1759 
	#CAN_RF1R_FULL1
 ((
uöt32_t
)0x08Ë

	)

1760 
	#CAN_RF1R_FOVR1
 ((
uöt32_t
)0x10Ë

	)

1761 
	#CAN_RF1R_RFOM1
 ((
uöt32_t
)0x20Ë

	)

1764 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

1765 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

1766 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

1767 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

1768 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

1769 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

1770 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

1771 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

1772 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

1773 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

1774 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

1775 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

1776 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

1777 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

1778 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

1779 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

1780 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

1781 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

1782 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

1786 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

1787 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

1788 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

1790 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

1791 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

1792 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

1793 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

1795 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

1796 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

1799 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

1800 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

1801 
	#CAN_BTR_TS1_0
 ((
uöt32_t
)0x00010000Ë

	)

1802 
	#CAN_BTR_TS1_1
 ((
uöt32_t
)0x00020000Ë

	)

1803 
	#CAN_BTR_TS1_2
 ((
uöt32_t
)0x00040000Ë

	)

1804 
	#CAN_BTR_TS1_3
 ((
uöt32_t
)0x00080000Ë

	)

1805 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

1806 
	#CAN_BTR_TS2_0
 ((
uöt32_t
)0x00100000Ë

	)

1807 
	#CAN_BTR_TS2_1
 ((
uöt32_t
)0x00200000Ë

	)

1808 
	#CAN_BTR_TS2_2
 ((
uöt32_t
)0x00400000Ë

	)

1809 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

1810 
	#CAN_BTR_SJW_0
 ((
uöt32_t
)0x01000000Ë

	)

1811 
	#CAN_BTR_SJW_1
 ((
uöt32_t
)0x02000000Ë

	)

1812 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

1813 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

1818 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

1819 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

1820 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

1821 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

1822 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

1825 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

1826 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

1827 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

1830 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

1831 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

1832 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

1833 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

1836 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

1837 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

1838 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

1839 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

1842 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

1843 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

1844 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

1845 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

1846 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

1849 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

1850 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

1851 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

1854 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

1855 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

1856 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

1857 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

1860 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

1861 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

1862 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

1863 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

1866 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

1867 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

1868 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

1869 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

1870 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

1873 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

1874 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

1875 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

1878 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

1879 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

1880 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

1881 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

1884 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

1885 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

1886 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

1887 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

1890 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

1891 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

1892 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

1893 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

1896 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

1897 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

1898 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

1901 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

1902 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

1903 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

1904 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

1907 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

1908 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

1909 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

1910 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

1913 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

1914 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

1915 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

1916 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

1919 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

1920 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

1921 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

1924 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

1925 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

1926 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

1927 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

1930 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

1931 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

1932 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

1933 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

1937 
	#CAN_FMR_FINIT
 ((
uöt32_t
)0x01Ë

	)

1938 
	#CAN_FMR_CAN2SB
 ((
uöt32_t
)0x00003F00Ë

	)

1941 
	#CAN_FM1R_FBM
 ((
uöt32_t
)0x0FFFFFFFË

	)

1942 
	#CAN_FM1R_FBM0
 ((
uöt32_t
)0x00000001Ë

	)

1943 
	#CAN_FM1R_FBM1
 ((
uöt32_t
)0x00000002Ë

	)

1944 
	#CAN_FM1R_FBM2
 ((
uöt32_t
)0x00000004Ë

	)

1945 
	#CAN_FM1R_FBM3
 ((
uöt32_t
)0x00000008Ë

	)

1946 
	#CAN_FM1R_FBM4
 ((
uöt32_t
)0x00000010Ë

	)

1947 
	#CAN_FM1R_FBM5
 ((
uöt32_t
)0x00000020Ë

	)

1948 
	#CAN_FM1R_FBM6
 ((
uöt32_t
)0x00000040Ë

	)

1949 
	#CAN_FM1R_FBM7
 ((
uöt32_t
)0x00000080Ë

	)

1950 
	#CAN_FM1R_FBM8
 ((
uöt32_t
)0x00000100Ë

	)

1951 
	#CAN_FM1R_FBM9
 ((
uöt32_t
)0x00000200Ë

	)

1952 
	#CAN_FM1R_FBM10
 ((
uöt32_t
)0x00000400Ë

	)

1953 
	#CAN_FM1R_FBM11
 ((
uöt32_t
)0x00000800Ë

	)

1954 
	#CAN_FM1R_FBM12
 ((
uöt32_t
)0x00001000Ë

	)

1955 
	#CAN_FM1R_FBM13
 ((
uöt32_t
)0x00002000Ë

	)

1956 
	#CAN_FM1R_FBM14
 ((
uöt32_t
)0x00004000Ë

	)

1957 
	#CAN_FM1R_FBM15
 ((
uöt32_t
)0x00008000Ë

	)

1958 
	#CAN_FM1R_FBM16
 ((
uöt32_t
)0x00010000Ë

	)

1959 
	#CAN_FM1R_FBM17
 ((
uöt32_t
)0x00020000Ë

	)

1960 
	#CAN_FM1R_FBM18
 ((
uöt32_t
)0x00040000Ë

	)

1961 
	#CAN_FM1R_FBM19
 ((
uöt32_t
)0x00080000Ë

	)

1962 
	#CAN_FM1R_FBM20
 ((
uöt32_t
)0x00100000Ë

	)

1963 
	#CAN_FM1R_FBM21
 ((
uöt32_t
)0x00200000Ë

	)

1964 
	#CAN_FM1R_FBM22
 ((
uöt32_t
)0x00400000Ë

	)

1965 
	#CAN_FM1R_FBM23
 ((
uöt32_t
)0x00800000Ë

	)

1966 
	#CAN_FM1R_FBM24
 ((
uöt32_t
)0x01000000Ë

	)

1967 
	#CAN_FM1R_FBM25
 ((
uöt32_t
)0x02000000Ë

	)

1968 
	#CAN_FM1R_FBM26
 ((
uöt32_t
)0x04000000Ë

	)

1969 
	#CAN_FM1R_FBM27
 ((
uöt32_t
)0x08000000Ë

	)

1972 
	#CAN_FS1R_FSC
 ((
uöt32_t
)0x0FFFFFFFË

	)

1973 
	#CAN_FS1R_FSC0
 ((
uöt32_t
)0x00000001Ë

	)

1974 
	#CAN_FS1R_FSC1
 ((
uöt32_t
)0x00000002Ë

	)

1975 
	#CAN_FS1R_FSC2
 ((
uöt32_t
)0x00000004Ë

	)

1976 
	#CAN_FS1R_FSC3
 ((
uöt32_t
)0x00000008Ë

	)

1977 
	#CAN_FS1R_FSC4
 ((
uöt32_t
)0x00000010Ë

	)

1978 
	#CAN_FS1R_FSC5
 ((
uöt32_t
)0x00000020Ë

	)

1979 
	#CAN_FS1R_FSC6
 ((
uöt32_t
)0x00000040Ë

	)

1980 
	#CAN_FS1R_FSC7
 ((
uöt32_t
)0x00000080Ë

	)

1981 
	#CAN_FS1R_FSC8
 ((
uöt32_t
)0x00000100Ë

	)

1982 
	#CAN_FS1R_FSC9
 ((
uöt32_t
)0x00000200Ë

	)

1983 
	#CAN_FS1R_FSC10
 ((
uöt32_t
)0x00000400Ë

	)

1984 
	#CAN_FS1R_FSC11
 ((
uöt32_t
)0x00000800Ë

	)

1985 
	#CAN_FS1R_FSC12
 ((
uöt32_t
)0x00001000Ë

	)

1986 
	#CAN_FS1R_FSC13
 ((
uöt32_t
)0x00002000Ë

	)

1987 
	#CAN_FS1R_FSC14
 ((
uöt32_t
)0x00004000Ë

	)

1988 
	#CAN_FS1R_FSC15
 ((
uöt32_t
)0x00008000Ë

	)

1989 
	#CAN_FS1R_FSC16
 ((
uöt32_t
)0x00010000Ë

	)

1990 
	#CAN_FS1R_FSC17
 ((
uöt32_t
)0x00020000Ë

	)

1991 
	#CAN_FS1R_FSC18
 ((
uöt32_t
)0x00040000Ë

	)

1992 
	#CAN_FS1R_FSC19
 ((
uöt32_t
)0x00080000Ë

	)

1993 
	#CAN_FS1R_FSC20
 ((
uöt32_t
)0x00100000Ë

	)

1994 
	#CAN_FS1R_FSC21
 ((
uöt32_t
)0x00200000Ë

	)

1995 
	#CAN_FS1R_FSC22
 ((
uöt32_t
)0x00400000Ë

	)

1996 
	#CAN_FS1R_FSC23
 ((
uöt32_t
)0x00800000Ë

	)

1997 
	#CAN_FS1R_FSC24
 ((
uöt32_t
)0x01000000Ë

	)

1998 
	#CAN_FS1R_FSC25
 ((
uöt32_t
)0x02000000Ë

	)

1999 
	#CAN_FS1R_FSC26
 ((
uöt32_t
)0x04000000Ë

	)

2000 
	#CAN_FS1R_FSC27
 ((
uöt32_t
)0x08000000Ë

	)

2003 
	#CAN_FFA1R_FFA
 ((
uöt32_t
)0x0FFFFFFFË

	)

2004 
	#CAN_FFA1R_FFA0
 ((
uöt32_t
)0x00000001Ë

	)

2005 
	#CAN_FFA1R_FFA1
 ((
uöt32_t
)0x00000002Ë

	)

2006 
	#CAN_FFA1R_FFA2
 ((
uöt32_t
)0x00000004Ë

	)

2007 
	#CAN_FFA1R_FFA3
 ((
uöt32_t
)0x00000008Ë

	)

2008 
	#CAN_FFA1R_FFA4
 ((
uöt32_t
)0x00000010Ë

	)

2009 
	#CAN_FFA1R_FFA5
 ((
uöt32_t
)0x00000020Ë

	)

2010 
	#CAN_FFA1R_FFA6
 ((
uöt32_t
)0x00000040Ë

	)

2011 
	#CAN_FFA1R_FFA7
 ((
uöt32_t
)0x00000080Ë

	)

2012 
	#CAN_FFA1R_FFA8
 ((
uöt32_t
)0x00000100Ë

	)

2013 
	#CAN_FFA1R_FFA9
 ((
uöt32_t
)0x00000200Ë

	)

2014 
	#CAN_FFA1R_FFA10
 ((
uöt32_t
)0x00000400Ë

	)

2015 
	#CAN_FFA1R_FFA11
 ((
uöt32_t
)0x00000800Ë

	)

2016 
	#CAN_FFA1R_FFA12
 ((
uöt32_t
)0x00001000Ë

	)

2017 
	#CAN_FFA1R_FFA13
 ((
uöt32_t
)0x00002000Ë

	)

2018 
	#CAN_FFA1R_FFA14
 ((
uöt32_t
)0x00004000Ë

	)

2019 
	#CAN_FFA1R_FFA15
 ((
uöt32_t
)0x00008000Ë

	)

2020 
	#CAN_FFA1R_FFA16
 ((
uöt32_t
)0x00010000Ë

	)

2021 
	#CAN_FFA1R_FFA17
 ((
uöt32_t
)0x00020000Ë

	)

2022 
	#CAN_FFA1R_FFA18
 ((
uöt32_t
)0x00040000Ë

	)

2023 
	#CAN_FFA1R_FFA19
 ((
uöt32_t
)0x00080000Ë

	)

2024 
	#CAN_FFA1R_FFA20
 ((
uöt32_t
)0x00100000Ë

	)

2025 
	#CAN_FFA1R_FFA21
 ((
uöt32_t
)0x00200000Ë

	)

2026 
	#CAN_FFA1R_FFA22
 ((
uöt32_t
)0x00400000Ë

	)

2027 
	#CAN_FFA1R_FFA23
 ((
uöt32_t
)0x00800000Ë

	)

2028 
	#CAN_FFA1R_FFA24
 ((
uöt32_t
)0x01000000Ë

	)

2029 
	#CAN_FFA1R_FFA25
 ((
uöt32_t
)0x02000000Ë

	)

2030 
	#CAN_FFA1R_FFA26
 ((
uöt32_t
)0x04000000Ë

	)

2031 
	#CAN_FFA1R_FFA27
 ((
uöt32_t
)0x08000000Ë

	)

2034 
	#CAN_FA1R_FACT
 ((
uöt32_t
)0x0FFFFFFFË

	)

2035 
	#CAN_FA1R_FACT0
 ((
uöt32_t
)0x00000001Ë

	)

2036 
	#CAN_FA1R_FACT1
 ((
uöt32_t
)0x00000002Ë

	)

2037 
	#CAN_FA1R_FACT2
 ((
uöt32_t
)0x00000004Ë

	)

2038 
	#CAN_FA1R_FACT3
 ((
uöt32_t
)0x00000008Ë

	)

2039 
	#CAN_FA1R_FACT4
 ((
uöt32_t
)0x00000010Ë

	)

2040 
	#CAN_FA1R_FACT5
 ((
uöt32_t
)0x00000020Ë

	)

2041 
	#CAN_FA1R_FACT6
 ((
uöt32_t
)0x00000040Ë

	)

2042 
	#CAN_FA1R_FACT7
 ((
uöt32_t
)0x00000080Ë

	)

2043 
	#CAN_FA1R_FACT8
 ((
uöt32_t
)0x00000100Ë

	)

2044 
	#CAN_FA1R_FACT9
 ((
uöt32_t
)0x00000200Ë

	)

2045 
	#CAN_FA1R_FACT10
 ((
uöt32_t
)0x00000400Ë

	)

2046 
	#CAN_FA1R_FACT11
 ((
uöt32_t
)0x00000800Ë

	)

2047 
	#CAN_FA1R_FACT12
 ((
uöt32_t
)0x00001000Ë

	)

2048 
	#CAN_FA1R_FACT13
 ((
uöt32_t
)0x00002000Ë

	)

2049 
	#CAN_FA1R_FACT14
 ((
uöt32_t
)0x00004000Ë

	)

2050 
	#CAN_FA1R_FACT15
 ((
uöt32_t
)0x00008000Ë

	)

2051 
	#CAN_FA1R_FACT16
 ((
uöt32_t
)0x00010000Ë

	)

2052 
	#CAN_FA1R_FACT17
 ((
uöt32_t
)0x00020000Ë

	)

2053 
	#CAN_FA1R_FACT18
 ((
uöt32_t
)0x00040000Ë

	)

2054 
	#CAN_FA1R_FACT19
 ((
uöt32_t
)0x00080000Ë

	)

2055 
	#CAN_FA1R_FACT20
 ((
uöt32_t
)0x00100000Ë

	)

2056 
	#CAN_FA1R_FACT21
 ((
uöt32_t
)0x00200000Ë

	)

2057 
	#CAN_FA1R_FACT22
 ((
uöt32_t
)0x00400000Ë

	)

2058 
	#CAN_FA1R_FACT23
 ((
uöt32_t
)0x00800000Ë

	)

2059 
	#CAN_FA1R_FACT24
 ((
uöt32_t
)0x01000000Ë

	)

2060 
	#CAN_FA1R_FACT25
 ((
uöt32_t
)0x02000000Ë

	)

2061 
	#CAN_FA1R_FACT26
 ((
uöt32_t
)0x04000000Ë

	)

2062 
	#CAN_FA1R_FACT27
 ((
uöt32_t
)0x08000000Ë

	)

2065 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2066 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2067 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2068 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2069 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2070 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2071 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2072 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2073 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2074 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2075 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2076 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2077 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2078 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2079 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2080 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2081 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2082 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2083 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2084 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2085 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2086 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2087 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2088 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2089 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2090 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2091 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2092 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2093 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2094 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2095 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2096 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2099 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2100 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2101 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2102 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2103 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2104 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2105 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2106 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2107 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2108 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2109 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2110 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2111 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2112 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2113 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2114 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2115 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2116 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2117 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2118 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2119 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2120 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2121 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2122 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2123 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2124 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2125 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2126 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2127 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2128 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2129 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2130 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2133 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2134 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2135 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2136 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2137 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2138 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2139 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2140 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2141 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2142 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2143 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2144 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2145 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2146 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2147 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2148 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2149 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2150 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2151 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2152 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2153 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2154 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2155 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2156 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2157 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2158 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2159 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2160 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2161 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2162 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2163 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2164 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2167 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2168 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2169 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2170 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2171 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2172 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2173 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2174 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2175 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2176 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2177 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2178 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2179 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2180 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2181 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2182 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2183 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2184 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2185 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2186 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2187 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2188 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2189 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2190 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2191 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2192 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2193 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2194 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2195 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2196 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2197 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2198 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2201 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2202 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2203 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2204 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2205 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2206 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2207 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2208 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2209 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2210 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2211 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2212 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2213 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2214 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2215 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2216 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2217 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2218 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2219 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2220 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2221 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2222 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2223 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2224 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2225 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2226 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2227 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2228 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2229 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2230 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2231 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2232 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2235 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2236 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2237 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2238 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2239 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2240 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2241 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2242 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2243 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2244 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2245 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2246 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2247 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2248 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2249 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2250 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2251 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2252 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2253 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2254 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2255 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2256 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2257 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2258 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2259 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2260 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2261 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2262 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2263 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2264 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2265 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2266 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2269 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2270 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2271 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2272 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2273 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2274 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2275 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2276 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2277 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2278 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2279 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2280 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2281 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2282 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2283 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2284 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2285 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2286 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2287 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2288 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2289 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2290 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2291 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2292 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2293 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2294 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2295 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2296 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2297 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2298 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2299 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2300 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2303 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2304 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2305 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2306 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2307 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2308 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2309 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2310 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2311 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2312 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2313 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2314 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2315 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2316 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2317 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2318 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2319 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2320 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2321 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2322 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2323 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2324 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2325 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2326 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2327 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2328 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2329 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2330 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2331 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2332 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2333 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2334 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2337 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2338 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2339 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2340 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2341 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2342 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2343 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2344 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2345 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2346 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2347 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2348 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2349 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2350 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2351 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2352 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2353 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2354 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2355 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2356 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2357 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2358 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2359 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2360 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2361 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2362 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2363 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2364 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2365 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2366 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2367 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2368 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2371 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2372 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2373 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2374 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2375 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2376 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2377 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2378 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2379 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2380 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2381 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2382 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2383 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2384 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2385 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2386 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2387 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2388 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2389 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2390 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2391 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2392 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2393 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2394 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2395 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2396 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2397 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2398 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2399 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2400 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2401 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2402 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2405 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2406 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2407 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2408 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2409 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2410 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2411 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2412 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2413 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2414 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2415 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2416 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2417 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2418 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2419 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2420 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2421 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2422 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2423 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2424 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2425 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2426 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2427 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2428 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2429 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2430 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2431 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2432 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2433 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2434 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2435 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2436 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2439 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2440 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2441 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2442 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2443 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2444 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2445 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2446 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2447 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2448 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2449 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2450 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2451 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2452 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2453 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2454 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2455 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2456 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2457 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2458 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2459 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2460 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2461 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2462 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2463 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2464 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2465 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2466 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2467 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2468 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2469 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2470 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2473 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2474 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2475 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2476 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2477 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2478 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2479 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2480 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2481 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2482 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2483 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2484 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2485 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2486 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2487 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2488 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2489 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2490 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2491 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2492 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2493 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2494 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2495 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2496 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2497 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2498 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2499 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2500 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2501 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2502 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2503 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2504 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2507 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2508 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2509 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2510 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2511 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2512 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2513 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2514 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2515 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2516 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2517 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2518 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2519 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2520 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2521 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2522 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2523 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2524 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2525 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2526 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2527 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2528 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2529 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2530 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2531 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2532 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2533 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2534 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2535 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2536 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2537 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2538 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2541 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2542 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2543 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2544 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2545 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2546 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2547 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2548 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2549 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2550 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2551 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2552 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2553 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2554 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2555 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2556 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2557 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2558 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2559 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2560 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2561 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2562 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2563 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2564 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2565 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2566 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2567 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2568 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2569 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2570 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2571 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2572 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2575 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2576 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2577 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2578 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2579 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2580 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2581 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2582 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2583 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2584 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2585 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2586 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2587 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2588 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2589 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2590 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2591 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2592 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2593 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2594 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2595 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2596 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2597 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2598 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2599 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2600 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2601 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2602 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2603 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2604 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2605 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2606 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2609 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2610 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2611 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2612 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2613 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2614 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2615 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2616 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2617 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2618 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2619 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2620 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2621 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2622 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2623 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2624 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2625 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2626 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2627 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2628 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2629 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2630 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2631 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2632 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2633 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2634 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2635 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2636 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2637 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2638 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2639 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2640 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2643 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2644 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2645 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2646 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2647 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2648 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2649 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2650 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2651 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2652 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2653 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2654 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2655 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2656 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2657 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2658 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2659 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2660 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2661 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2662 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2663 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2664 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2665 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2666 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2667 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2668 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2669 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2670 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2671 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2672 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2673 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2674 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2677 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2678 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2679 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2680 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2681 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2682 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2683 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2684 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2685 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2686 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2687 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2688 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2689 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2690 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2691 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2692 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2693 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2694 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2695 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2696 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2697 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2698 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2699 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2700 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2701 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2702 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2703 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2704 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2705 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2706 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2707 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2708 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2711 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2712 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2713 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2714 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2715 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2716 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2717 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2718 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2719 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2720 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2721 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2722 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2723 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2724 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2725 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2726 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2727 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2728 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2729 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2730 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2731 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2732 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2733 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2734 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2735 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2736 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2737 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2738 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2739 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2740 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2741 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2742 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2745 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2746 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2747 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2748 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2749 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2750 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2751 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2752 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2753 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2754 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2755 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2756 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2757 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2758 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2759 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2760 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2761 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2762 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2763 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2764 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2765 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2766 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2767 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2768 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2769 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2770 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2771 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2772 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2773 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2774 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2775 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2776 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2779 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2780 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2781 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2782 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2783 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2784 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2785 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2786 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2787 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2788 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2789 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2790 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2791 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2792 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2793 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2794 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2795 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2796 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2797 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2798 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2799 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2800 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2801 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2802 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2803 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2804 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2805 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2806 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2807 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2808 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2809 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2810 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2813 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2814 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2815 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2816 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2817 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2818 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2819 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2820 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2821 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2822 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2823 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2824 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2825 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2826 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2827 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2828 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2829 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2830 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2831 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2832 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2833 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2834 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2835 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2836 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2837 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2838 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2839 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2840 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2841 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2842 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2843 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2844 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2847 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2848 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2849 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2850 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2851 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2852 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2853 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2854 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2855 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2856 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2857 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2858 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2859 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2860 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2861 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2862 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2863 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2864 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2865 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2866 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2867 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2868 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2869 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2870 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2871 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2872 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2873 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2874 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2875 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2876 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2877 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2878 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2881 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2882 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2883 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2884 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2885 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2886 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2887 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2888 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2889 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2890 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2891 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2892 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2893 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2894 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2895 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2896 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2897 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2898 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2899 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2900 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2901 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2902 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2903 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2904 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2905 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2906 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2907 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2908 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2909 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2910 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2911 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2912 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2915 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2916 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2917 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2918 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2919 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2920 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2921 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2922 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2923 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2924 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2925 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2926 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2927 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2928 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2929 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2930 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2931 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2932 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2933 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2934 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2935 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2936 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2937 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2938 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2939 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2940 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2941 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2942 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2943 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2944 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2945 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2946 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2949 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2950 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2951 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2952 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2953 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2954 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2955 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2956 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2957 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2958 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2959 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2960 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2961 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2962 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2963 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2964 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2965 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2966 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2967 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2968 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2969 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2970 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2971 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2972 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2973 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2974 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2975 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2976 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2977 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2978 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2979 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2980 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2983 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2984 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2985 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2986 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2987 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2988 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2989 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2990 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2991 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2992 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2993 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2994 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2995 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2996 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2997 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2998 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2999 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3000 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3001 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3002 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3003 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3004 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3005 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3006 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3007 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3008 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3009 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3010 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3011 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3012 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3013 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3014 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3022 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3026 
	#CRC_IDR_IDR
 ((
uöt32_t
)0xFFË

	)

3030 
	#CRC_CR_RESET
 ((
uöt32_t
)0x01Ë

	)

3038 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3039 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3040 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3042 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3043 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3044 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3045 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3047 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3048 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3049 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3051 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3052 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3053 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3054 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3055 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3057 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3058 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3059 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3060 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3062 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3063 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3064 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3065 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3067 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3068 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3069 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3071 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3072 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3073 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3074 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3075 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3077 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3080 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt32_t
)0x01Ë

	)

3081 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt32_t
)0x02Ë

	)

3084 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt32_t
)0x0FFFË

	)

3087 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt32_t
)0xFFF0Ë

	)

3090 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt32_t
)0xFFË

	)

3093 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt32_t
)0x0FFFË

	)

3096 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt32_t
)0xFFF0Ë

	)

3099 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt32_t
)0xFFË

	)

3102 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3103 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3106 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3107 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3110 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt32_t
)0x00FFË

	)

3111 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt32_t
)0xFF00Ë

	)

3114 
	#DAC_DOR1_DACC1DOR
 ((
uöt32_t
)0x0FFFË

	)

3117 
	#DAC_DOR2_DACC2DOR
 ((
uöt32_t
)0x0FFFË

	)

3120 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

3121 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

3135 
	#DCMI_CR_CAPTURE
 ((
uöt32_t
)0x00000001)

	)

3136 
	#DCMI_CR_CM
 ((
uöt32_t
)0x00000002)

	)

3137 
	#DCMI_CR_CROP
 ((
uöt32_t
)0x00000004)

	)

3138 
	#DCMI_CR_JPEG
 ((
uöt32_t
)0x00000008)

	)

3139 
	#DCMI_CR_ESS
 ((
uöt32_t
)0x00000010)

	)

3140 
	#DCMI_CR_PCKPOL
 ((
uöt32_t
)0x00000020)

	)

3141 
	#DCMI_CR_HSPOL
 ((
uöt32_t
)0x00000040)

	)

3142 
	#DCMI_CR_VSPOL
 ((
uöt32_t
)0x00000080)

	)

3143 
	#DCMI_CR_FCRC_0
 ((
uöt32_t
)0x00000100)

	)

3144 
	#DCMI_CR_FCRC_1
 ((
uöt32_t
)0x00000200)

	)

3145 
	#DCMI_CR_EDM_0
 ((
uöt32_t
)0x00000400)

	)

3146 
	#DCMI_CR_EDM_1
 ((
uöt32_t
)0x00000800)

	)

3147 
	#DCMI_CR_CRE
 ((
uöt32_t
)0x00001000)

	)

3148 
	#DCMI_CR_ENABLE
 ((
uöt32_t
)0x00004000)

	)

3151 
	#DCMI_SR_HSYNC
 ((
uöt32_t
)0x00000001)

	)

3152 
	#DCMI_SR_VSYNC
 ((
uöt32_t
)0x00000002)

	)

3153 
	#DCMI_SR_FNE
 ((
uöt32_t
)0x00000004)

	)

3156 
	#DCMI_RISR_FRAME_RIS
 ((
uöt32_t
)0x00000001)

	)

3157 
	#DCMI_RISR_OVF_RIS
 ((
uöt32_t
)0x00000002)

	)

3158 
	#DCMI_RISR_ERR_RIS
 ((
uöt32_t
)0x00000004)

	)

3159 
	#DCMI_RISR_VSYNC_RIS
 ((
uöt32_t
)0x00000008)

	)

3160 
	#DCMI_RISR_LINE_RIS
 ((
uöt32_t
)0x00000010)

	)

3163 
	#DCMI_IER_FRAME_IE
 ((
uöt32_t
)0x00000001)

	)

3164 
	#DCMI_IER_OVF_IE
 ((
uöt32_t
)0x00000002)

	)

3165 
	#DCMI_IER_ERR_IE
 ((
uöt32_t
)0x00000004)

	)

3166 
	#DCMI_IER_VSYNC_IE
 ((
uöt32_t
)0x00000008)

	)

3167 
	#DCMI_IER_LINE_IE
 ((
uöt32_t
)0x00000010)

	)

3170 
	#DCMI_MISR_FRAME_MIS
 ((
uöt32_t
)0x00000001)

	)

3171 
	#DCMI_MISR_OVF_MIS
 ((
uöt32_t
)0x00000002)

	)

3172 
	#DCMI_MISR_ERR_MIS
 ((
uöt32_t
)0x00000004)

	)

3173 
	#DCMI_MISR_VSYNC_MIS
 ((
uöt32_t
)0x00000008)

	)

3174 
	#DCMI_MISR_LINE_MIS
 ((
uöt32_t
)0x00000010)

	)

3177 
	#DCMI_ICR_FRAME_ISC
 ((
uöt32_t
)0x00000001)

	)

3178 
	#DCMI_ICR_OVF_ISC
 ((
uöt32_t
)0x00000002)

	)

3179 
	#DCMI_ICR_ERR_ISC
 ((
uöt32_t
)0x00000004)

	)

3180 
	#DCMI_ICR_VSYNC_ISC
 ((
uöt32_t
)0x00000008)

	)

3181 
	#DCMI_ICR_LINE_ISC
 ((
uöt32_t
)0x00000010)

	)

3189 
	#DMA_SxCR_CHSEL
 ((
uöt32_t
)0x0E000000)

	)

3190 
	#DMA_SxCR_CHSEL_0
 ((
uöt32_t
)0x02000000)

	)

3191 
	#DMA_SxCR_CHSEL_1
 ((
uöt32_t
)0x04000000)

	)

3192 
	#DMA_SxCR_CHSEL_2
 ((
uöt32_t
)0x08000000)

	)

3193 
	#DMA_SxCR_MBURST
 ((
uöt32_t
)0x01800000)

	)

3194 
	#DMA_SxCR_MBURST_0
 ((
uöt32_t
)0x00800000)

	)

3195 
	#DMA_SxCR_MBURST_1
 ((
uöt32_t
)0x01000000)

	)

3196 
	#DMA_SxCR_PBURST
 ((
uöt32_t
)0x00600000)

	)

3197 
	#DMA_SxCR_PBURST_0
 ((
uöt32_t
)0x00200000)

	)

3198 
	#DMA_SxCR_PBURST_1
 ((
uöt32_t
)0x00400000)

	)

3199 
	#DMA_SxCR_ACK
 ((
uöt32_t
)0x00100000)

	)

3200 
	#DMA_SxCR_CT
 ((
uöt32_t
)0x00080000)

	)

3201 
	#DMA_SxCR_DBM
 ((
uöt32_t
)0x00040000)

	)

3202 
	#DMA_SxCR_PL
 ((
uöt32_t
)0x00030000)

	)

3203 
	#DMA_SxCR_PL_0
 ((
uöt32_t
)0x00010000)

	)

3204 
	#DMA_SxCR_PL_1
 ((
uöt32_t
)0x00020000)

	)

3205 
	#DMA_SxCR_PINCOS
 ((
uöt32_t
)0x00008000)

	)

3206 
	#DMA_SxCR_MSIZE
 ((
uöt32_t
)0x00006000)

	)

3207 
	#DMA_SxCR_MSIZE_0
 ((
uöt32_t
)0x00002000)

	)

3208 
	#DMA_SxCR_MSIZE_1
 ((
uöt32_t
)0x00004000)

	)

3209 
	#DMA_SxCR_PSIZE
 ((
uöt32_t
)0x00001800)

	)

3210 
	#DMA_SxCR_PSIZE_0
 ((
uöt32_t
)0x00000800)

	)

3211 
	#DMA_SxCR_PSIZE_1
 ((
uöt32_t
)0x00001000)

	)

3212 
	#DMA_SxCR_MINC
 ((
uöt32_t
)0x00000400)

	)

3213 
	#DMA_SxCR_PINC
 ((
uöt32_t
)0x00000200)

	)

3214 
	#DMA_SxCR_CIRC
 ((
uöt32_t
)0x00000100)

	)

3215 
	#DMA_SxCR_DIR
 ((
uöt32_t
)0x000000C0)

	)

3216 
	#DMA_SxCR_DIR_0
 ((
uöt32_t
)0x00000040)

	)

3217 
	#DMA_SxCR_DIR_1
 ((
uöt32_t
)0x00000080)

	)

3218 
	#DMA_SxCR_PFCTRL
 ((
uöt32_t
)0x00000020)

	)

3219 
	#DMA_SxCR_TCIE
 ((
uöt32_t
)0x00000010)

	)

3220 
	#DMA_SxCR_HTIE
 ((
uöt32_t
)0x00000008)

	)

3221 
	#DMA_SxCR_TEIE
 ((
uöt32_t
)0x00000004)

	)

3222 
	#DMA_SxCR_DMEIE
 ((
uöt32_t
)0x00000002)

	)

3223 
	#DMA_SxCR_EN
 ((
uöt32_t
)0x00000001)

	)

3226 
	#DMA_SxNDT
 ((
uöt32_t
)0x0000FFFF)

	)

3227 
	#DMA_SxNDT_0
 ((
uöt32_t
)0x00000001)

	)

3228 
	#DMA_SxNDT_1
 ((
uöt32_t
)0x00000002)

	)

3229 
	#DMA_SxNDT_2
 ((
uöt32_t
)0x00000004)

	)

3230 
	#DMA_SxNDT_3
 ((
uöt32_t
)0x00000008)

	)

3231 
	#DMA_SxNDT_4
 ((
uöt32_t
)0x00000010)

	)

3232 
	#DMA_SxNDT_5
 ((
uöt32_t
)0x00000020)

	)

3233 
	#DMA_SxNDT_6
 ((
uöt32_t
)0x00000040)

	)

3234 
	#DMA_SxNDT_7
 ((
uöt32_t
)0x00000080)

	)

3235 
	#DMA_SxNDT_8
 ((
uöt32_t
)0x00000100)

	)

3236 
	#DMA_SxNDT_9
 ((
uöt32_t
)0x00000200)

	)

3237 
	#DMA_SxNDT_10
 ((
uöt32_t
)0x00000400)

	)

3238 
	#DMA_SxNDT_11
 ((
uöt32_t
)0x00000800)

	)

3239 
	#DMA_SxNDT_12
 ((
uöt32_t
)0x00001000)

	)

3240 
	#DMA_SxNDT_13
 ((
uöt32_t
)0x00002000)

	)

3241 
	#DMA_SxNDT_14
 ((
uöt32_t
)0x00004000)

	)

3242 
	#DMA_SxNDT_15
 ((
uöt32_t
)0x00008000)

	)

3245 
	#DMA_SxFCR_FEIE
 ((
uöt32_t
)0x00000080)

	)

3246 
	#DMA_SxFCR_FS
 ((
uöt32_t
)0x00000038)

	)

3247 
	#DMA_SxFCR_FS_0
 ((
uöt32_t
)0x00000008)

	)

3248 
	#DMA_SxFCR_FS_1
 ((
uöt32_t
)0x00000010)

	)

3249 
	#DMA_SxFCR_FS_2
 ((
uöt32_t
)0x00000020)

	)

3250 
	#DMA_SxFCR_DMDIS
 ((
uöt32_t
)0x00000004)

	)

3251 
	#DMA_SxFCR_FTH
 ((
uöt32_t
)0x00000003)

	)

3252 
	#DMA_SxFCR_FTH_0
 ((
uöt32_t
)0x00000001)

	)

3253 
	#DMA_SxFCR_FTH_1
 ((
uöt32_t
)0x00000002)

	)

3256 
	#DMA_LISR_TCIF3
 ((
uöt32_t
)0x08000000)

	)

3257 
	#DMA_LISR_HTIF3
 ((
uöt32_t
)0x04000000)

	)

3258 
	#DMA_LISR_TEIF3
 ((
uöt32_t
)0x02000000)

	)

3259 
	#DMA_LISR_DMEIF3
 ((
uöt32_t
)0x01000000)

	)

3260 
	#DMA_LISR_FEIF3
 ((
uöt32_t
)0x00400000)

	)

3261 
	#DMA_LISR_TCIF2
 ((
uöt32_t
)0x00200000)

	)

3262 
	#DMA_LISR_HTIF2
 ((
uöt32_t
)0x00100000)

	)

3263 
	#DMA_LISR_TEIF2
 ((
uöt32_t
)0x00080000)

	)

3264 
	#DMA_LISR_DMEIF2
 ((
uöt32_t
)0x00040000)

	)

3265 
	#DMA_LISR_FEIF2
 ((
uöt32_t
)0x00010000)

	)

3266 
	#DMA_LISR_TCIF1
 ((
uöt32_t
)0x00000800)

	)

3267 
	#DMA_LISR_HTIF1
 ((
uöt32_t
)0x00000400)

	)

3268 
	#DMA_LISR_TEIF1
 ((
uöt32_t
)0x00000200)

	)

3269 
	#DMA_LISR_DMEIF1
 ((
uöt32_t
)0x00000100)

	)

3270 
	#DMA_LISR_FEIF1
 ((
uöt32_t
)0x00000040)

	)

3271 
	#DMA_LISR_TCIF0
 ((
uöt32_t
)0x00000020)

	)

3272 
	#DMA_LISR_HTIF0
 ((
uöt32_t
)0x00000010)

	)

3273 
	#DMA_LISR_TEIF0
 ((
uöt32_t
)0x00000008)

	)

3274 
	#DMA_LISR_DMEIF0
 ((
uöt32_t
)0x00000004)

	)

3275 
	#DMA_LISR_FEIF0
 ((
uöt32_t
)0x00000001)

	)

3278 
	#DMA_HISR_TCIF7
 ((
uöt32_t
)0x08000000)

	)

3279 
	#DMA_HISR_HTIF7
 ((
uöt32_t
)0x04000000)

	)

3280 
	#DMA_HISR_TEIF7
 ((
uöt32_t
)0x02000000)

	)

3281 
	#DMA_HISR_DMEIF7
 ((
uöt32_t
)0x01000000)

	)

3282 
	#DMA_HISR_FEIF7
 ((
uöt32_t
)0x00400000)

	)

3283 
	#DMA_HISR_TCIF6
 ((
uöt32_t
)0x00200000)

	)

3284 
	#DMA_HISR_HTIF6
 ((
uöt32_t
)0x00100000)

	)

3285 
	#DMA_HISR_TEIF6
 ((
uöt32_t
)0x00080000)

	)

3286 
	#DMA_HISR_DMEIF6
 ((
uöt32_t
)0x00040000)

	)

3287 
	#DMA_HISR_FEIF6
 ((
uöt32_t
)0x00010000)

	)

3288 
	#DMA_HISR_TCIF5
 ((
uöt32_t
)0x00000800)

	)

3289 
	#DMA_HISR_HTIF5
 ((
uöt32_t
)0x00000400)

	)

3290 
	#DMA_HISR_TEIF5
 ((
uöt32_t
)0x00000200)

	)

3291 
	#DMA_HISR_DMEIF5
 ((
uöt32_t
)0x00000100)

	)

3292 
	#DMA_HISR_FEIF5
 ((
uöt32_t
)0x00000040)

	)

3293 
	#DMA_HISR_TCIF4
 ((
uöt32_t
)0x00000020)

	)

3294 
	#DMA_HISR_HTIF4
 ((
uöt32_t
)0x00000010)

	)

3295 
	#DMA_HISR_TEIF4
 ((
uöt32_t
)0x00000008)

	)

3296 
	#DMA_HISR_DMEIF4
 ((
uöt32_t
)0x00000004)

	)

3297 
	#DMA_HISR_FEIF4
 ((
uöt32_t
)0x00000001)

	)

3300 
	#DMA_LIFCR_CTCIF3
 ((
uöt32_t
)0x08000000)

	)

3301 
	#DMA_LIFCR_CHTIF3
 ((
uöt32_t
)0x04000000)

	)

3302 
	#DMA_LIFCR_CTEIF3
 ((
uöt32_t
)0x02000000)

	)

3303 
	#DMA_LIFCR_CDMEIF3
 ((
uöt32_t
)0x01000000)

	)

3304 
	#DMA_LIFCR_CFEIF3
 ((
uöt32_t
)0x00400000)

	)

3305 
	#DMA_LIFCR_CTCIF2
 ((
uöt32_t
)0x00200000)

	)

3306 
	#DMA_LIFCR_CHTIF2
 ((
uöt32_t
)0x00100000)

	)

3307 
	#DMA_LIFCR_CTEIF2
 ((
uöt32_t
)0x00080000)

	)

3308 
	#DMA_LIFCR_CDMEIF2
 ((
uöt32_t
)0x00040000)

	)

3309 
	#DMA_LIFCR_CFEIF2
 ((
uöt32_t
)0x00010000)

	)

3310 
	#DMA_LIFCR_CTCIF1
 ((
uöt32_t
)0x00000800)

	)

3311 
	#DMA_LIFCR_CHTIF1
 ((
uöt32_t
)0x00000400)

	)

3312 
	#DMA_LIFCR_CTEIF1
 ((
uöt32_t
)0x00000200)

	)

3313 
	#DMA_LIFCR_CDMEIF1
 ((
uöt32_t
)0x00000100)

	)

3314 
	#DMA_LIFCR_CFEIF1
 ((
uöt32_t
)0x00000040)

	)

3315 
	#DMA_LIFCR_CTCIF0
 ((
uöt32_t
)0x00000020)

	)

3316 
	#DMA_LIFCR_CHTIF0
 ((
uöt32_t
)0x00000010)

	)

3317 
	#DMA_LIFCR_CTEIF0
 ((
uöt32_t
)0x00000008)

	)

3318 
	#DMA_LIFCR_CDMEIF0
 ((
uöt32_t
)0x00000004)

	)

3319 
	#DMA_LIFCR_CFEIF0
 ((
uöt32_t
)0x00000001)

	)

3322 
	#DMA_HIFCR_CTCIF7
 ((
uöt32_t
)0x08000000)

	)

3323 
	#DMA_HIFCR_CHTIF7
 ((
uöt32_t
)0x04000000)

	)

3324 
	#DMA_HIFCR_CTEIF7
 ((
uöt32_t
)0x02000000)

	)

3325 
	#DMA_HIFCR_CDMEIF7
 ((
uöt32_t
)0x01000000)

	)

3326 
	#DMA_HIFCR_CFEIF7
 ((
uöt32_t
)0x00400000)

	)

3327 
	#DMA_HIFCR_CTCIF6
 ((
uöt32_t
)0x00200000)

	)

3328 
	#DMA_HIFCR_CHTIF6
 ((
uöt32_t
)0x00100000)

	)

3329 
	#DMA_HIFCR_CTEIF6
 ((
uöt32_t
)0x00080000)

	)

3330 
	#DMA_HIFCR_CDMEIF6
 ((
uöt32_t
)0x00040000)

	)

3331 
	#DMA_HIFCR_CFEIF6
 ((
uöt32_t
)0x00010000)

	)

3332 
	#DMA_HIFCR_CTCIF5
 ((
uöt32_t
)0x00000800)

	)

3333 
	#DMA_HIFCR_CHTIF5
 ((
uöt32_t
)0x00000400)

	)

3334 
	#DMA_HIFCR_CTEIF5
 ((
uöt32_t
)0x00000200)

	)

3335 
	#DMA_HIFCR_CDMEIF5
 ((
uöt32_t
)0x00000100)

	)

3336 
	#DMA_HIFCR_CFEIF5
 ((
uöt32_t
)0x00000040)

	)

3337 
	#DMA_HIFCR_CTCIF4
 ((
uöt32_t
)0x00000020)

	)

3338 
	#DMA_HIFCR_CHTIF4
 ((
uöt32_t
)0x00000010)

	)

3339 
	#DMA_HIFCR_CTEIF4
 ((
uöt32_t
)0x00000008)

	)

3340 
	#DMA_HIFCR_CDMEIF4
 ((
uöt32_t
)0x00000004)

	)

3341 
	#DMA_HIFCR_CFEIF4
 ((
uöt32_t
)0x00000001)

	)

3352 
	#DMA2D_CR_START
 ((
uöt32_t
)0x00000001Ë

	)

3353 
	#DMA2D_CR_SUSP
 ((
uöt32_t
)0x00000002Ë

	)

3354 
	#DMA2D_CR_ABORT
 ((
uöt32_t
)0x00000004Ë

	)

3355 
	#DMA2D_CR_TEIE
 ((
uöt32_t
)0x00000100Ë

	)

3356 
	#DMA2D_CR_TCIE
 ((
uöt32_t
)0x00000200Ë

	)

3357 
	#DMA2D_CR_TWIE
 ((
uöt32_t
)0x00000400Ë

	)

3358 
	#DMA2D_CR_CAEIE
 ((
uöt32_t
)0x00000800Ë

	)

3359 
	#DMA2D_CR_CTCIE
 ((
uöt32_t
)0x00001000Ë

	)

3360 
	#DMA2D_CR_CEIE
 ((
uöt32_t
)0x00002000Ë

	)

3361 
	#DMA2D_CR_MODE
 ((
uöt32_t
)0x00030000Ë

	)

3365 
	#DMA2D_ISR_TEIF
 ((
uöt32_t
)0x00000001Ë

	)

3366 
	#DMA2D_ISR_TCIF
 ((
uöt32_t
)0x00000002Ë

	)

3367 
	#DMA2D_ISR_TWIF
 ((
uöt32_t
)0x00000004Ë

	)

3368 
	#DMA2D_ISR_CAEIF
 ((
uöt32_t
)0x00000008Ë

	)

3369 
	#DMA2D_ISR_CTCIF
 ((
uöt32_t
)0x00000010Ë

	)

3370 
	#DMA2D_ISR_CEIF
 ((
uöt32_t
)0x00000020Ë

	)

3374 
	#DMA2D_IFSR_CTEIF
 ((
uöt32_t
)0x00000001Ë

	)

3375 
	#DMA2D_IFSR_CTCIF
 ((
uöt32_t
)0x00000002Ë

	)

3376 
	#DMA2D_IFSR_CTWIF
 ((
uöt32_t
)0x00000004Ë

	)

3377 
	#DMA2D_IFSR_CCAEIF
 ((
uöt32_t
)0x00000008Ë

	)

3378 
	#DMA2D_IFSR_CCTCIF
 ((
uöt32_t
)0x00000010Ë

	)

3379 
	#DMA2D_IFSR_CCEIF
 ((
uöt32_t
)0x00000020Ë

	)

3383 
	#DMA2D_FGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3387 
	#DMA2D_FGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3391 
	#DMA2D_BGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3395 
	#DMA2D_BGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3399 
	#DMA2D_FGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

3400 
	#DMA2D_FGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

3401 
	#DMA2D_FGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

3402 
	#DMA2D_FGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

3403 
	#DMA2D_FGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

3404 
	#DMA2D_FGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

3408 
	#DMA2D_FGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

3409 
	#DMA2D_FGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

3410 
	#DMA2D_FGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

3414 
	#DMA2D_BGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

3415 
	#DMA2D_BGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

3416 
	#DMA2D_BGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

3417 
	#DMA2D_BGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

3418 
	#DMA2D_BGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

3419 
	#DMA2D_BGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

3423 
	#DMA2D_BGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

3424 
	#DMA2D_BGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

3425 
	#DMA2D_BGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

3429 
	#DMA2D_FGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3433 
	#DMA2D_BGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3437 
	#DMA2D_OPFCCR_CM
 ((
uöt32_t
)0x00000007Ë

	)

3443 
	#DMA2D_OCOLR_BLUE_1
 ((
uöt32_t
)0x000000FFË

	)

3444 
	#DMA2D_OCOLR_GREEN_1
 ((
uöt32_t
)0x0000FF00Ë

	)

3445 
	#DMA2D_OCOLR_RED_1
 ((
uöt32_t
)0x00FF0000Ë

	)

3446 
	#DMA2D_OCOLR_ALPHA_1
 ((
uöt32_t
)0xFF000000Ë

	)

3449 
	#DMA2D_OCOLR_BLUE_2
 ((
uöt32_t
)0x0000001FË

	)

3450 
	#DMA2D_OCOLR_GREEN_2
 ((
uöt32_t
)0x000007E0Ë

	)

3451 
	#DMA2D_OCOLR_RED_2
 ((
uöt32_t
)0x0000F800Ë

	)

3454 
	#DMA2D_OCOLR_BLUE_3
 ((
uöt32_t
)0x0000001FË

	)

3455 
	#DMA2D_OCOLR_GREEN_3
 ((
uöt32_t
)0x000003E0Ë

	)

3456 
	#DMA2D_OCOLR_RED_3
 ((
uöt32_t
)0x00007C00Ë

	)

3457 
	#DMA2D_OCOLR_ALPHA_3
 ((
uöt32_t
)0x00008000Ë

	)

3460 
	#DMA2D_OCOLR_BLUE_4
 ((
uöt32_t
)0x0000000FË

	)

3461 
	#DMA2D_OCOLR_GREEN_4
 ((
uöt32_t
)0x000000F0Ë

	)

3462 
	#DMA2D_OCOLR_RED_4
 ((
uöt32_t
)0x00000F00Ë

	)

3463 
	#DMA2D_OCOLR_ALPHA_4
 ((
uöt32_t
)0x0000F000Ë

	)

3467 
	#DMA2D_OMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3471 
	#DMA2D_OOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3475 
	#DMA2D_NLR_NL
 ((
uöt32_t
)0x0000FFFFË

	)

3476 
	#DMA2D_NLR_PL
 ((
uöt32_t
)0x3FFF0000Ë

	)

3480 
	#DMA2D_LWR_LW
 ((
uöt32_t
)0x0000FFFFË

	)

3484 
	#DMA2D_AMTCR_EN
 ((
uöt32_t
)0x00000001Ë

	)

3485 
	#DMA2D_AMTCR_DT
 ((
uöt32_t
)0x0000FF00Ë

	)

3500 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3501 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3502 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3503 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3504 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3505 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3506 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3507 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3508 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3509 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3510 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3511 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3512 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3513 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3514 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3515 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3516 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3517 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3518 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3519 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3520 
	#EXTI_IMR_MR20
 ((
uöt32_t
)0x00100000Ë

	)

3521 
	#EXTI_IMR_MR21
 ((
uöt32_t
)0x00200000Ë

	)

3522 
	#EXTI_IMR_MR22
 ((
uöt32_t
)0x00400000Ë

	)

3525 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3526 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3527 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3528 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3529 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3530 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3531 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3532 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3533 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3534 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3535 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3536 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3537 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3538 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3539 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3540 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3541 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3542 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3543 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3544 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3545 
	#EXTI_EMR_MR20
 ((
uöt32_t
)0x00100000Ë

	)

3546 
	#EXTI_EMR_MR21
 ((
uöt32_t
)0x00200000Ë

	)

3547 
	#EXTI_EMR_MR22
 ((
uöt32_t
)0x00400000Ë

	)

3550 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3551 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3552 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3553 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3554 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3555 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3556 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3557 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3558 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3559 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3560 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3561 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3562 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3563 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3564 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3565 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3566 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3567 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3568 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3569 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3570 
	#EXTI_RTSR_TR20
 ((
uöt32_t
)0x00100000Ë

	)

3571 
	#EXTI_RTSR_TR21
 ((
uöt32_t
)0x00200000Ë

	)

3572 
	#EXTI_RTSR_TR22
 ((
uöt32_t
)0x00400000Ë

	)

3575 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3576 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3577 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3578 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3579 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3580 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3581 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3582 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3583 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3584 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3585 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3586 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3587 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3588 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3589 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3590 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3591 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3592 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3593 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3594 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3595 
	#EXTI_FTSR_TR20
 ((
uöt32_t
)0x00100000Ë

	)

3596 
	#EXTI_FTSR_TR21
 ((
uöt32_t
)0x00200000Ë

	)

3597 
	#EXTI_FTSR_TR22
 ((
uöt32_t
)0x00400000Ë

	)

3600 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3601 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3602 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3603 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3604 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3605 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3606 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3607 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3608 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3609 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3610 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3611 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3612 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3613 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3614 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3615 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3616 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3617 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3618 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3619 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3620 
	#EXTI_SWIER_SWIER20
 ((
uöt32_t
)0x00100000Ë

	)

3621 
	#EXTI_SWIER_SWIER21
 ((
uöt32_t
)0x00200000Ë

	)

3622 
	#EXTI_SWIER_SWIER22
 ((
uöt32_t
)0x00400000Ë

	)

3625 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3626 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3627 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3628 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3629 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3630 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3631 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3632 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

3633 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

3634 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

3635 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

3636 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

3637 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

3638 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

3639 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

3640 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

3641 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

3642 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

3643 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

3644 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

3645 
	#EXTI_PR_PR20
 ((
uöt32_t
)0x00100000Ë

	)

3646 
	#EXTI_PR_PR21
 ((
uöt32_t
)0x00200000Ë

	)

3647 
	#EXTI_PR_PR22
 ((
uöt32_t
)0x00400000Ë

	)

3655 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x0000000F)

	)

3656 
	#FLASH_ACR_LATENCY_0WS
 ((
uöt32_t
)0x00000000)

	)

3657 
	#FLASH_ACR_LATENCY_1WS
 ((
uöt32_t
)0x00000001)

	)

3658 
	#FLASH_ACR_LATENCY_2WS
 ((
uöt32_t
)0x00000002)

	)

3659 
	#FLASH_ACR_LATENCY_3WS
 ((
uöt32_t
)0x00000003)

	)

3660 
	#FLASH_ACR_LATENCY_4WS
 ((
uöt32_t
)0x00000004)

	)

3661 
	#FLASH_ACR_LATENCY_5WS
 ((
uöt32_t
)0x00000005)

	)

3662 
	#FLASH_ACR_LATENCY_6WS
 ((
uöt32_t
)0x00000006)

	)

3663 
	#FLASH_ACR_LATENCY_7WS
 ((
uöt32_t
)0x00000007)

	)

3664 
	#FLASH_ACR_LATENCY_8WS
 ((
uöt32_t
)0x00000008)

	)

3665 
	#FLASH_ACR_LATENCY_9WS
 ((
uöt32_t
)0x00000009)

	)

3666 
	#FLASH_ACR_LATENCY_10WS
 ((
uöt32_t
)0x0000000A)

	)

3667 
	#FLASH_ACR_LATENCY_11WS
 ((
uöt32_t
)0x0000000B)

	)

3668 
	#FLASH_ACR_LATENCY_12WS
 ((
uöt32_t
)0x0000000C)

	)

3669 
	#FLASH_ACR_LATENCY_13WS
 ((
uöt32_t
)0x0000000D)

	)

3670 
	#FLASH_ACR_LATENCY_14WS
 ((
uöt32_t
)0x0000000E)

	)

3671 
	#FLASH_ACR_LATENCY_15WS
 ((
uöt32_t
)0x0000000F)

	)

3672 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000100)

	)

3673 
	#FLASH_ACR_ICEN
 ((
uöt32_t
)0x00000200)

	)

3674 
	#FLASH_ACR_DCEN
 ((
uöt32_t
)0x00000400)

	)

3675 
	#FLASH_ACR_ICRST
 ((
uöt32_t
)0x00000800)

	)

3676 
	#FLASH_ACR_DCRST
 ((
uöt32_t
)0x00001000)

	)

3677 
	#FLASH_ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

3678 
	#FLASH_ACR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C03)

	)

3681 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000001)

	)

3682 
	#FLASH_SR_SOP
 ((
uöt32_t
)0x00000002)

	)

3683 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010)

	)

3684 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000020)

	)

3685 
	#FLASH_SR_PGPERR
 ((
uöt32_t
)0x00000040)

	)

3686 
	#FLASH_SR_PGSERR
 ((
uöt32_t
)0x00000080)

	)

3687 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00010000)

	)

3690 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001)

	)

3691 
	#FLASH_CR_SER
 ((
uöt32_t
)0x00000002)

	)

3692 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004)

	)

3693 
	#FLASH_CR_MER1
 
FLASH_CR_MER


	)

3694 
	#FLASH_CR_SNB
 ((
uöt32_t
)0x000000F8)

	)

3695 
	#FLASH_CR_SNB_0
 ((
uöt32_t
)0x00000008)

	)

3696 
	#FLASH_CR_SNB_1
 ((
uöt32_t
)0x00000010)

	)

3697 
	#FLASH_CR_SNB_2
 ((
uöt32_t
)0x00000020)

	)

3698 
	#FLASH_CR_SNB_3
 ((
uöt32_t
)0x00000040)

	)

3699 
	#FLASH_CR_SNB_4
 ((
uöt32_t
)0x00000080)

	)

3700 
	#FLASH_CR_PSIZE
 ((
uöt32_t
)0x00000300)

	)

3701 
	#FLASH_CR_PSIZE_0
 ((
uöt32_t
)0x00000100)

	)

3702 
	#FLASH_CR_PSIZE_1
 ((
uöt32_t
)0x00000200)

	)

3703 
	#FLASH_CR_MER2
 ((
uöt32_t
)0x00008000)

	)

3704 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00010000)

	)

3705 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x01000000)

	)

3706 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x80000000)

	)

3709 
	#FLASH_OPTCR_OPTLOCK
 ((
uöt32_t
)0x00000001)

	)

3710 
	#FLASH_OPTCR_OPTSTRT
 ((
uöt32_t
)0x00000002)

	)

3711 
	#FLASH_OPTCR_BOR_LEV_0
 ((
uöt32_t
)0x00000004)

	)

3712 
	#FLASH_OPTCR_BOR_LEV_1
 ((
uöt32_t
)0x00000008)

	)

3713 
	#FLASH_OPTCR_BOR_LEV
 ((
uöt32_t
)0x0000000C)

	)

3714 
	#FLASH_OPTCR_BFB2
 ((
uöt32_t
)0x00000010)

	)

3715 
	#FLASH_OPTCR_WDG_SW
 ((
uöt32_t
)0x00000020)

	)

3716 
	#FLASH_OPTCR_nRST_STOP
 ((
uöt32_t
)0x00000040)

	)

3717 
	#FLASH_OPTCR_nRST_STDBY
 ((
uöt32_t
)0x00000080)

	)

3718 
	#FLASH_OPTCR_RDP
 ((
uöt32_t
)0x0000FF00)

	)

3719 
	#FLASH_OPTCR_RDP_0
 ((
uöt32_t
)0x00000100)

	)

3720 
	#FLASH_OPTCR_RDP_1
 ((
uöt32_t
)0x00000200)

	)

3721 
	#FLASH_OPTCR_RDP_2
 ((
uöt32_t
)0x00000400)

	)

3722 
	#FLASH_OPTCR_RDP_3
 ((
uöt32_t
)0x00000800)

	)

3723 
	#FLASH_OPTCR_RDP_4
 ((
uöt32_t
)0x00001000)

	)

3724 
	#FLASH_OPTCR_RDP_5
 ((
uöt32_t
)0x00002000)

	)

3725 
	#FLASH_OPTCR_RDP_6
 ((
uöt32_t
)0x00004000)

	)

3726 
	#FLASH_OPTCR_RDP_7
 ((
uöt32_t
)0x00008000)

	)

3727 
	#FLASH_OPTCR_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

3728 
	#FLASH_OPTCR_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

3729 
	#FLASH_OPTCR_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

3730 
	#FLASH_OPTCR_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

3731 
	#FLASH_OPTCR_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

3732 
	#FLASH_OPTCR_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

3733 
	#FLASH_OPTCR_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

3734 
	#FLASH_OPTCR_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

3735 
	#FLASH_OPTCR_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

3736 
	#FLASH_OPTCR_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

3737 
	#FLASH_OPTCR_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

3738 
	#FLASH_OPTCR_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

3739 
	#FLASH_OPTCR_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

3740 
	#FLASH_OPTCR_DB1M
 ((
uöt32_t
)0x40000000)

	)

3741 
	#FLASH_OPTCR_SPRMOD
 ((
uöt32_t
)0x80000000)

	)

3744 
	#FLASH_OPTCR1_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

3745 
	#FLASH_OPTCR1_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

3746 
	#FLASH_OPTCR1_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

3747 
	#FLASH_OPTCR1_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

3748 
	#FLASH_OPTCR1_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

3749 
	#FLASH_OPTCR1_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

3750 
	#FLASH_OPTCR1_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

3751 
	#FLASH_OPTCR1_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

3752 
	#FLASH_OPTCR1_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

3753 
	#FLASH_OPTCR1_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

3754 
	#FLASH_OPTCR1_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

3755 
	#FLASH_OPTCR1_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

3756 
	#FLASH_OPTCR1_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

3764 
	#FMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3765 
	#FMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3767 
	#FMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3768 
	#FMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3769 
	#FMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3771 
	#FMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3772 
	#FMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3773 
	#FMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3775 
	#FMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3776 
	#FMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3777 
	#FMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3778 
	#FMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3779 
	#FMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3780 
	#FMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3781 
	#FMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3782 
	#FMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3783 
	#FMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

3784 
	#FMC_BCR1_CPSIZE
 ((
uöt32_t
)0x00070000Ë

	)

3785 
	#FMC_BCR1_CPSIZE_0
 ((
uöt32_t
)0x00010000Ë

	)

3786 
	#FMC_BCR1_CPSIZE_1
 ((
uöt32_t
)0x00020000Ë

	)

3787 
	#FMC_BCR1_CPSIZE_2
 ((
uöt32_t
)0x00040000Ë

	)

3788 
	#FMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3789 
	#FMC_BCR1_CCLKEN
 ((
uöt32_t
)0x00100000Ë

	)

3792 
	#FMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3793 
	#FMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3795 
	#FMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3796 
	#FMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3797 
	#FMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3799 
	#FMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3800 
	#FMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3801 
	#FMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3803 
	#FMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3804 
	#FMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3805 
	#FMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3806 
	#FMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3807 
	#FMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3808 
	#FMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3809 
	#FMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3810 
	#FMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3811 
	#FMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

3812 
	#FMC_BCR2_CPSIZE
 ((
uöt32_t
)0x00070000Ë

	)

3813 
	#FMC_BCR2_CPSIZE_0
 ((
uöt32_t
)0x00010000Ë

	)

3814 
	#FMC_BCR2_CPSIZE_1
 ((
uöt32_t
)0x00020000Ë

	)

3815 
	#FMC_BCR2_CPSIZE_2
 ((
uöt32_t
)0x00040000Ë

	)

3816 
	#FMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3819 
	#FMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3820 
	#FMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3822 
	#FMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3823 
	#FMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3824 
	#FMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3826 
	#FMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3827 
	#FMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3828 
	#FMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3830 
	#FMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3831 
	#FMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3832 
	#FMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3833 
	#FMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3834 
	#FMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3835 
	#FMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3836 
	#FMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3837 
	#FMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3838 
	#FMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

3839 
	#FMC_BCR3_CPSIZE
 ((
uöt32_t
)0x00070000Ë

	)

3840 
	#FMC_BCR3_CPSIZE_0
 ((
uöt32_t
)0x00010000Ë

	)

3841 
	#FMC_BCR3_CPSIZE_1
 ((
uöt32_t
)0x00020000Ë

	)

3842 
	#FMC_BCR3_CPSIZE_2
 ((
uöt32_t
)0x00040000Ë

	)

3843 
	#FMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3846 
	#FMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3847 
	#FMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3849 
	#FMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3850 
	#FMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3851 
	#FMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3853 
	#FMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3854 
	#FMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3855 
	#FMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3857 
	#FMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3858 
	#FMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3859 
	#FMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3860 
	#FMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3861 
	#FMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3862 
	#FMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3863 
	#FMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3864 
	#FMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3865 
	#FMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

3866 
	#FMC_BCR4_CPSIZE
 ((
uöt32_t
)0x00070000Ë

	)

3867 
	#FMC_BCR4_CPSIZE_0
 ((
uöt32_t
)0x00010000Ë

	)

3868 
	#FMC_BCR4_CPSIZE_1
 ((
uöt32_t
)0x00020000Ë

	)

3869 
	#FMC_BCR4_CPSIZE_2
 ((
uöt32_t
)0x00040000Ë

	)

3870 
	#FMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3873 
	#FMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3874 
	#FMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3875 
	#FMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3876 
	#FMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3877 
	#FMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3879 
	#FMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3880 
	#FMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3881 
	#FMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3882 
	#FMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3883 
	#FMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3885 
	#FMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3886 
	#FMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3887 
	#FMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3888 
	#FMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3889 
	#FMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3890 
	#FMC_BTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

3891 
	#FMC_BTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

3892 
	#FMC_BTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

3893 
	#FMC_BTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

3895 
	#FMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3896 
	#FMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3897 
	#FMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3898 
	#FMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3899 
	#FMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3901 
	#FMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3902 
	#FMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3903 
	#FMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3904 
	#FMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3905 
	#FMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3907 
	#FMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3908 
	#FMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3909 
	#FMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3910 
	#FMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3911 
	#FMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3913 
	#FMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3914 
	#FMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3915 
	#FMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3918 
	#FMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3919 
	#FMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3920 
	#FMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3921 
	#FMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3922 
	#FMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3924 
	#FMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3925 
	#FMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3926 
	#FMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3927 
	#FMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3928 
	#FMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3930 
	#FMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3931 
	#FMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3932 
	#FMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3933 
	#FMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3934 
	#FMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3935 
	#FMC_BTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

3936 
	#FMC_BTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

3937 
	#FMC_BTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

3938 
	#FMC_BTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

3940 
	#FMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3941 
	#FMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3942 
	#FMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3943 
	#FMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3944 
	#FMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3946 
	#FMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3947 
	#FMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3948 
	#FMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3949 
	#FMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3950 
	#FMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3952 
	#FMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3953 
	#FMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3954 
	#FMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3955 
	#FMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3956 
	#FMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3958 
	#FMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3959 
	#FMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3960 
	#FMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3963 
	#FMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3964 
	#FMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3965 
	#FMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3966 
	#FMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3967 
	#FMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3969 
	#FMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3970 
	#FMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3971 
	#FMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3972 
	#FMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3973 
	#FMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3975 
	#FMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3976 
	#FMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3977 
	#FMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3978 
	#FMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3979 
	#FMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3980 
	#FMC_BTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

3981 
	#FMC_BTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

3982 
	#FMC_BTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

3983 
	#FMC_BTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

3985 
	#FMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3986 
	#FMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3987 
	#FMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3988 
	#FMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3989 
	#FMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3991 
	#FMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3992 
	#FMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3993 
	#FMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3994 
	#FMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3995 
	#FMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3997 
	#FMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3998 
	#FMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3999 
	#FMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4000 
	#FMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4001 
	#FMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4003 
	#FMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4004 
	#FMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4005 
	#FMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4008 
	#FMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4009 
	#FMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4010 
	#FMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4011 
	#FMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4012 
	#FMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4014 
	#FMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4015 
	#FMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4016 
	#FMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4017 
	#FMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4018 
	#FMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4020 
	#FMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4021 
	#FMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4022 
	#FMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4023 
	#FMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4024 
	#FMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4025 
	#FMC_BTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

4026 
	#FMC_BTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

4027 
	#FMC_BTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

4028 
	#FMC_BTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

4030 
	#FMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4031 
	#FMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4032 
	#FMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4033 
	#FMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4034 
	#FMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4036 
	#FMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4037 
	#FMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4038 
	#FMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4039 
	#FMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4040 
	#FMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4042 
	#FMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4043 
	#FMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4044 
	#FMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4045 
	#FMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4046 
	#FMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4048 
	#FMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4049 
	#FMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4050 
	#FMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4053 
	#FMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4054 
	#FMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4055 
	#FMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4056 
	#FMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4057 
	#FMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4059 
	#FMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4060 
	#FMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4061 
	#FMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4062 
	#FMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4063 
	#FMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4065 
	#FMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4066 
	#FMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4067 
	#FMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4068 
	#FMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4069 
	#FMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4070 
	#FMC_BWTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

4071 
	#FMC_BWTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

4072 
	#FMC_BWTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

4073 
	#FMC_BWTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

4075 
	#FMC_BWTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4076 
	#FMC_BWTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4077 
	#FMC_BWTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4078 
	#FMC_BWTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4079 
	#FMC_BWTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4081 
	#FMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4082 
	#FMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4083 
	#FMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4086 
	#FMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4087 
	#FMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4088 
	#FMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4089 
	#FMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4090 
	#FMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4092 
	#FMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4093 
	#FMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4094 
	#FMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4095 
	#FMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4096 
	#FMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4098 
	#FMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4099 
	#FMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4100 
	#FMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4101 
	#FMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4102 
	#FMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4103 
	#FMC_BWTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

4104 
	#FMC_BWTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

4105 
	#FMC_BWTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

4106 
	#FMC_BWTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

4108 
	#FMC_BWTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4109 
	#FMC_BWTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4110 
	#FMC_BWTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4111 
	#FMC_BWTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4112 
	#FMC_BWTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4114 
	#FMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4115 
	#FMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4116 
	#FMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4119 
	#FMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4120 
	#FMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4121 
	#FMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4122 
	#FMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4123 
	#FMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4125 
	#FMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4126 
	#FMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4127 
	#FMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4128 
	#FMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4129 
	#FMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4131 
	#FMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4132 
	#FMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4133 
	#FMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4134 
	#FMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4135 
	#FMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4136 
	#FMC_BWTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

4137 
	#FMC_BWTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

4138 
	#FMC_BWTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

4139 
	#FMC_BWTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

4141 
	#FMC_BWTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4142 
	#FMC_BWTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4143 
	#FMC_BWTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4144 
	#FMC_BWTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4145 
	#FMC_BWTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4147 
	#FMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4148 
	#FMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4149 
	#FMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4152 
	#FMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4153 
	#FMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4154 
	#FMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4155 
	#FMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4156 
	#FMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4158 
	#FMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4159 
	#FMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4160 
	#FMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4161 
	#FMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4162 
	#FMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4164 
	#FMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4165 
	#FMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4166 
	#FMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4167 
	#FMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4168 
	#FMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4169 
	#FMC_BWTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

4170 
	#FMC_BWTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

4171 
	#FMC_BWTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

4172 
	#FMC_BWTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

4174 
	#FMC_BWTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4175 
	#FMC_BWTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4176 
	#FMC_BWTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4177 
	#FMC_BWTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4178 
	#FMC_BWTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4180 
	#FMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4181 
	#FMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4182 
	#FMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4185 
	#FMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4186 
	#FMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4187 
	#FMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4189 
	#FMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4190 
	#FMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4191 
	#FMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4193 
	#FMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4195 
	#FMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4196 
	#FMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4197 
	#FMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4198 
	#FMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4199 
	#FMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4201 
	#FMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4202 
	#FMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4203 
	#FMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4204 
	#FMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4205 
	#FMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4207 
	#FMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4208 
	#FMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4209 
	#FMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4210 
	#FMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4213 
	#FMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4214 
	#FMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4215 
	#FMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4217 
	#FMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4218 
	#FMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4219 
	#FMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4221 
	#FMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4223 
	#FMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4224 
	#FMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4225 
	#FMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4226 
	#FMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4227 
	#FMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4229 
	#FMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4230 
	#FMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4231 
	#FMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4232 
	#FMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4233 
	#FMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4235 
	#FMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4236 
	#FMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4237 
	#FMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4238 
	#FMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4241 
	#FMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4242 
	#FMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4243 
	#FMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4245 
	#FMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4246 
	#FMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4247 
	#FMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4249 
	#FMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4251 
	#FMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4252 
	#FMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4253 
	#FMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4254 
	#FMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4255 
	#FMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4257 
	#FMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4258 
	#FMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4259 
	#FMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4260 
	#FMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4261 
	#FMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4263 
	#FMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4264 
	#FMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4265 
	#FMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4266 
	#FMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4269 
	#FMC_SR2_IRS
 ((
uöt32_t
)0x01Ë

	)

4270 
	#FMC_SR2_ILS
 ((
uöt32_t
)0x02Ë

	)

4271 
	#FMC_SR2_IFS
 ((
uöt32_t
)0x04Ë

	)

4272 
	#FMC_SR2_IREN
 ((
uöt32_t
)0x08Ë

	)

4273 
	#FMC_SR2_ILEN
 ((
uöt32_t
)0x10Ë

	)

4274 
	#FMC_SR2_IFEN
 ((
uöt32_t
)0x20Ë

	)

4275 
	#FMC_SR2_FEMPT
 ((
uöt32_t
)0x40Ë

	)

4278 
	#FMC_SR3_IRS
 ((
uöt32_t
)0x01Ë

	)

4279 
	#FMC_SR3_ILS
 ((
uöt32_t
)0x02Ë

	)

4280 
	#FMC_SR3_IFS
 ((
uöt32_t
)0x04Ë

	)

4281 
	#FMC_SR3_IREN
 ((
uöt32_t
)0x08Ë

	)

4282 
	#FMC_SR3_ILEN
 ((
uöt32_t
)0x10Ë

	)

4283 
	#FMC_SR3_IFEN
 ((
uöt32_t
)0x20Ë

	)

4284 
	#FMC_SR3_FEMPT
 ((
uöt32_t
)0x40Ë

	)

4287 
	#FMC_SR4_IRS
 ((
uöt32_t
)0x01Ë

	)

4288 
	#FMC_SR4_ILS
 ((
uöt32_t
)0x02Ë

	)

4289 
	#FMC_SR4_IFS
 ((
uöt32_t
)0x04Ë

	)

4290 
	#FMC_SR4_IREN
 ((
uöt32_t
)0x08Ë

	)

4291 
	#FMC_SR4_ILEN
 ((
uöt32_t
)0x10Ë

	)

4292 
	#FMC_SR4_IFEN
 ((
uöt32_t
)0x20Ë

	)

4293 
	#FMC_SR4_FEMPT
 ((
uöt32_t
)0x40Ë

	)

4296 
	#FMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4297 
	#FMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4298 
	#FMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4299 
	#FMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4300 
	#FMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4301 
	#FMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4302 
	#FMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4303 
	#FMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4304 
	#FMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4306 
	#FMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4307 
	#FMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4308 
	#FMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4309 
	#FMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4310 
	#FMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4311 
	#FMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4312 
	#FMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4313 
	#FMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4314 
	#FMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4316 
	#FMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4317 
	#FMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4318 
	#FMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4319 
	#FMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4320 
	#FMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4321 
	#FMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4322 
	#FMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4323 
	#FMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4324 
	#FMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4326 
	#FMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4327 
	#FMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4328 
	#FMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4329 
	#FMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4330 
	#FMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4331 
	#FMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4332 
	#FMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4333 
	#FMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4334 
	#FMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4337 
	#FMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4338 
	#FMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4339 
	#FMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4340 
	#FMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4341 
	#FMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4342 
	#FMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4343 
	#FMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4344 
	#FMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4345 
	#FMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4347 
	#FMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4348 
	#FMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4349 
	#FMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4350 
	#FMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4351 
	#FMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4352 
	#FMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4353 
	#FMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4354 
	#FMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4355 
	#FMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4357 
	#FMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4358 
	#FMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4359 
	#FMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4360 
	#FMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4361 
	#FMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4362 
	#FMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4363 
	#FMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4364 
	#FMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4365 
	#FMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4367 
	#FMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4368 
	#FMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4369 
	#FMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4370 
	#FMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4371 
	#FMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4372 
	#FMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4373 
	#FMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4374 
	#FMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4375 
	#FMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4378 
	#FMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

4379 
	#FMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4380 
	#FMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4381 
	#FMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4382 
	#FMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4383 
	#FMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4384 
	#FMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4385 
	#FMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4386 
	#FMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4388 
	#FMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4389 
	#FMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4390 
	#FMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4391 
	#FMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4392 
	#FMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4393 
	#FMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4394 
	#FMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4395 
	#FMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4396 
	#FMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4398 
	#FMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4399 
	#FMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4400 
	#FMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4401 
	#FMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4402 
	#FMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4403 
	#FMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4404 
	#FMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4405 
	#FMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4406 
	#FMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4408 
	#FMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4409 
	#FMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4410 
	#FMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4411 
	#FMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4412 
	#FMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4413 
	#FMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4414 
	#FMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4415 
	#FMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4416 
	#FMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4419 
	#FMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

4420 
	#FMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4421 
	#FMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4422 
	#FMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4423 
	#FMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4424 
	#FMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4425 
	#FMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4426 
	#FMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4427 
	#FMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4429 
	#FMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4430 
	#FMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4431 
	#FMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4432 
	#FMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4433 
	#FMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4434 
	#FMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4435 
	#FMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4436 
	#FMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4437 
	#FMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4439 
	#FMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4440 
	#FMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4441 
	#FMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4442 
	#FMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4443 
	#FMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4444 
	#FMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4445 
	#FMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4446 
	#FMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4447 
	#FMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4449 
	#FMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4450 
	#FMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4451 
	#FMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4452 
	#FMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4453 
	#FMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4454 
	#FMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4455 
	#FMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4456 
	#FMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4457 
	#FMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4460 
	#FMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

4461 
	#FMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4462 
	#FMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4463 
	#FMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4464 
	#FMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4465 
	#FMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4466 
	#FMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4467 
	#FMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4468 
	#FMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4470 
	#FMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4471 
	#FMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4472 
	#FMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4473 
	#FMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4474 
	#FMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4475 
	#FMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4476 
	#FMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4477 
	#FMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4478 
	#FMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4480 
	#FMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4481 
	#FMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4482 
	#FMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4483 
	#FMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4484 
	#FMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4485 
	#FMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4486 
	#FMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4487 
	#FMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4488 
	#FMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4490 
	#FMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4491 
	#FMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4492 
	#FMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4493 
	#FMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4494 
	#FMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4495 
	#FMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4496 
	#FMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4497 
	#FMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4498 
	#FMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4501 
	#FMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

4502 
	#FMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4503 
	#FMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4504 
	#FMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4505 
	#FMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4506 
	#FMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4507 
	#FMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4508 
	#FMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4509 
	#FMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4511 
	#FMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4512 
	#FMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4513 
	#FMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4514 
	#FMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4515 
	#FMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4516 
	#FMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4517 
	#FMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4518 
	#FMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4519 
	#FMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4521 
	#FMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4522 
	#FMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4523 
	#FMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4524 
	#FMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4525 
	#FMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4526 
	#FMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4527 
	#FMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4528 
	#FMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4529 
	#FMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4531 
	#FMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4532 
	#FMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4533 
	#FMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4534 
	#FMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4535 
	#FMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4536 
	#FMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4537 
	#FMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4538 
	#FMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4539 
	#FMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4542 
	#FMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

4543 
	#FMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4544 
	#FMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4545 
	#FMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4546 
	#FMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4547 
	#FMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4548 
	#FMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4549 
	#FMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4550 
	#FMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4552 
	#FMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4553 
	#FMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4554 
	#FMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4555 
	#FMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4556 
	#FMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4557 
	#FMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4558 
	#FMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4559 
	#FMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4560 
	#FMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4562 
	#FMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4563 
	#FMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4564 
	#FMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4565 
	#FMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4566 
	#FMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4567 
	#FMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4568 
	#FMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4569 
	#FMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4570 
	#FMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4572 
	#FMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4573 
	#FMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4574 
	#FMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4575 
	#FMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4576 
	#FMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4577 
	#FMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4578 
	#FMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4579 
	#FMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4580 
	#FMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4583 
	#FMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4586 
	#FMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4589 
	#FMC_SDCR1_NC
 ((
uöt32_t
)0x00000003Ë

	)

4590 
	#FMC_SDCR1_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

4591 
	#FMC_SDCR1_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

4593 
	#FMC_SDCR1_NR
 ((
uöt32_t
)0x0000000CË

	)

4594 
	#FMC_SDCR1_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

4595 
	#FMC_SDCR1_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

4597 
	#FMC_SDCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4598 
	#FMC_SDCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4599 
	#FMC_SDCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4601 
	#FMC_SDCR1_NB
 ((
uöt32_t
)0x00000040Ë

	)

4603 
	#FMC_SDCR1_CAS
 ((
uöt32_t
)0x00000180Ë

	)

4604 
	#FMC_SDCR1_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

4605 
	#FMC_SDCR1_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

4607 
	#FMC_SDCR1_WP
 ((
uöt32_t
)0x00000200Ë

	)

4609 
	#FMC_SDCR1_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

4610 
	#FMC_SDCR1_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

4611 
	#FMC_SDCR1_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

4613 
	#FMC_SDCR1_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

4615 
	#FMC_SDCR1_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

4616 
	#FMC_SDCR1_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

4617 
	#FMC_SDCR1_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

4620 
	#FMC_SDCR2_NC
 ((
uöt32_t
)0x00000003Ë

	)

4621 
	#FMC_SDCR2_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

4622 
	#FMC_SDCR2_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

4624 
	#FMC_SDCR2_NR
 ((
uöt32_t
)0x0000000CË

	)

4625 
	#FMC_SDCR2_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

4626 
	#FMC_SDCR2_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

4628 
	#FMC_SDCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4629 
	#FMC_SDCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4630 
	#FMC_SDCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4632 
	#FMC_SDCR2_NB
 ((
uöt32_t
)0x00000040Ë

	)

4634 
	#FMC_SDCR2_CAS
 ((
uöt32_t
)0x00000180Ë

	)

4635 
	#FMC_SDCR2_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

4636 
	#FMC_SDCR2_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

4638 
	#FMC_SDCR2_WP
 ((
uöt32_t
)0x00000200Ë

	)

4640 
	#FMC_SDCR2_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

4641 
	#FMC_SDCR2_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

4642 
	#FMC_SDCR2_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

4644 
	#FMC_SDCR2_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

4646 
	#FMC_SDCR2_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

4647 
	#FMC_SDCR2_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

4648 
	#FMC_SDCR2_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

4651 
	#FMC_SDTR1_TMRD
 ((
uöt32_t
)0x0000000FË

	)

4652 
	#FMC_SDTR1_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

4653 
	#FMC_SDTR1_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

4654 
	#FMC_SDTR1_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

4655 
	#FMC_SDTR1_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

4657 
	#FMC_SDTR1_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

4658 
	#FMC_SDTR1_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

4659 
	#FMC_SDTR1_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

4660 
	#FMC_SDTR1_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

4661 
	#FMC_SDTR1_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

4663 
	#FMC_SDTR1_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

4664 
	#FMC_SDTR1_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

4665 
	#FMC_SDTR1_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

4666 
	#FMC_SDTR1_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

4667 
	#FMC_SDTR1_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

4669 
	#FMC_SDTR1_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

4670 
	#FMC_SDTR1_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

4671 
	#FMC_SDTR1_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

4672 
	#FMC_SDTR1_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

4674 
	#FMC_SDTR1_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

4675 
	#FMC_SDTR1_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

4676 
	#FMC_SDTR1_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

4677 
	#FMC_SDTR1_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

4679 
	#FMC_SDTR1_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

4680 
	#FMC_SDTR1_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

4681 
	#FMC_SDTR1_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

4682 
	#FMC_SDTR1_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

4684 
	#FMC_SDTR1_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

4685 
	#FMC_SDTR1_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

4686 
	#FMC_SDTR1_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

4687 
	#FMC_SDTR1_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

4690 
	#FMC_SDTR2_TMRD
 ((
uöt32_t
)0x0000000FË

	)

4691 
	#FMC_SDTR2_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

4692 
	#FMC_SDTR2_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

4693 
	#FMC_SDTR2_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

4694 
	#FMC_SDTR2_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

4696 
	#FMC_SDTR2_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

4697 
	#FMC_SDTR2_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

4698 
	#FMC_SDTR2_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

4699 
	#FMC_SDTR2_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

4700 
	#FMC_SDTR2_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

4702 
	#FMC_SDTR2_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

4703 
	#FMC_SDTR2_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

4704 
	#FMC_SDTR2_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

4705 
	#FMC_SDTR2_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

4706 
	#FMC_SDTR2_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

4708 
	#FMC_SDTR2_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

4709 
	#FMC_SDTR2_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

4710 
	#FMC_SDTR2_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

4711 
	#FMC_SDTR2_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

4713 
	#FMC_SDTR2_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

4714 
	#FMC_SDTR2_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

4715 
	#FMC_SDTR2_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

4716 
	#FMC_SDTR2_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

4718 
	#FMC_SDTR2_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

4719 
	#FMC_SDTR2_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

4720 
	#FMC_SDTR2_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

4721 
	#FMC_SDTR2_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

4723 
	#FMC_SDTR2_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

4724 
	#FMC_SDTR2_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

4725 
	#FMC_SDTR2_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

4726 
	#FMC_SDTR2_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

4729 
	#FMC_SDCMR_MODE
 ((
uöt32_t
)0x00000007Ë

	)

4730 
	#FMC_SDCMR_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

4731 
	#FMC_SDCMR_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

4732 
	#FMC_SDCMR_MODE_2
 ((
uöt32_t
)0x00000004Ë

	)

4734 
	#FMC_SDCMR_CTB2
 ((
uöt32_t
)0x00000008Ë

	)

4736 
	#FMC_SDCMR_CTB1
 ((
uöt32_t
)0x00000010Ë

	)

4738 
	#FMC_SDCMR_NRFS
 ((
uöt32_t
)0x000001E0Ë

	)

4739 
	#FMC_SDCMR_NRFS_0
 ((
uöt32_t
)0x00000020Ë

	)

4740 
	#FMC_SDCMR_NRFS_1
 ((
uöt32_t
)0x00000040Ë

	)

4741 
	#FMC_SDCMR_NRFS_2
 ((
uöt32_t
)0x00000080Ë

	)

4742 
	#FMC_SDCMR_NRFS_3
 ((
uöt32_t
)0x00000100Ë

	)

4744 
	#FMC_SDCMR_MRD
 ((
uöt32_t
)0x003FFE00Ë

	)

4747 
	#FMC_SDRTR_CRE
 ((
uöt32_t
)0x00000001Ë

	)

4749 
	#FMC_SDRTR_COUNT
 ((
uöt32_t
)0x00003FFEË

	)

4751 
	#FMC_SDRTR_REIE
 ((
uöt32_t
)0x00004000Ë

	)

4754 
	#FMC_SDSR_RE
 ((
uöt32_t
)0x00000001Ë

	)

4756 
	#FMC_SDSR_MODES1
 ((
uöt32_t
)0x00000006Ë

	)

4757 
	#FMC_SDSR_MODES1_0
 ((
uöt32_t
)0x00000002Ë

	)

4758 
	#FMC_SDSR_MODES1_1
 ((
uöt32_t
)0x00000004Ë

	)

4760 
	#FMC_SDSR_MODES2
 ((
uöt32_t
)0x00000018Ë

	)

4761 
	#FMC_SDSR_MODES2_0
 ((
uöt32_t
)0x00000008Ë

	)

4762 
	#FMC_SDSR_MODES2_1
 ((
uöt32_t
)0x00000010Ë

	)

4763 
	#FMC_SDSR_BUSY
 ((
uöt32_t
)0x00000020Ë

	)

4773 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

4774 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

4775 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

4777 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

4778 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

4779 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

4781 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

4782 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

4783 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

4785 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

4786 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

4787 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

4789 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

4790 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

4791 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

4793 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

4794 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

4795 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

4797 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

4798 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

4799 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

4801 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

4802 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

4803 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

4805 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

4806 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

4807 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

4809 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

4810 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

4811 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

4813 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

4814 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

4815 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

4817 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

4818 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

4819 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

4821 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

4822 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

4823 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

4825 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

4826 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

4827 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

4829 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

4830 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

4831 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

4833 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

4834 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

4835 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

4838 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

4839 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

4840 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

4841 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

4842 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

4843 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

4844 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

4845 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

4846 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

4847 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

4848 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

4849 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

4850 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

4851 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

4852 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

4853 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

4856 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

4857 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

4858 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

4860 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

4861 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

4862 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

4864 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

4865 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

4866 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

4868 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

4869 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

4870 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

4872 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

4873 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

4874 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

4876 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

4877 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

4878 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

4880 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

4881 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

4882 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

4884 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

4885 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

4886 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

4888 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

4889 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

4890 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

4892 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

4893 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

4894 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

4896 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

4897 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

4898 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

4900 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

4901 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

4902 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

4904 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

4905 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

4906 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

4908 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

4909 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

4910 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

4912 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

4913 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

4914 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

4916 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

4917 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

4918 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

4921 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

4922 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

4923 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

4925 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

4926 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

4927 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

4929 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

4930 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

4931 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

4933 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

4934 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

4935 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

4937 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

4938 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

4939 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

4941 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

4942 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

4943 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

4945 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

4946 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

4947 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

4949 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

4950 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

4951 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

4953 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

4954 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

4955 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

4957 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

4958 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

4959 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

4961 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

4962 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

4963 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

4965 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

4966 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

4967 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

4969 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

4970 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

4971 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

4973 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

4974 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

4975 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

4977 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

4978 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

4979 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

4981 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

4982 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

4983 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

4986 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

4987 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

4988 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

4989 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

4990 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

4991 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

4992 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

4993 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

4994 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

4995 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

4996 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

4997 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

4998 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

4999 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

5000 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

5001 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

5003 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

5004 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

5005 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

5006 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

5007 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

5008 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

5009 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

5010 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

5011 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

5012 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

5013 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

5014 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

5015 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

5016 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

5017 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

5018 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

5021 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

5022 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

5023 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

5024 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

5025 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

5026 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

5027 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

5028 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

5029 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

5030 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

5031 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

5032 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

5033 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

5034 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

5035 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

5036 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

5038 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

5039 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

5040 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

5041 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

5042 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

5043 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

5044 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

5045 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

5046 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

5047 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

5048 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

5049 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

5050 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

5051 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

5052 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

5053 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

5056 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

5057 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

5058 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

5059 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

5060 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

5061 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

5062 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

5063 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

5064 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

5065 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

5066 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

5067 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

5068 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

5069 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

5070 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

5071 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

5072 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

5073 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

5074 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

5075 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

5076 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

5077 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

5078 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

5079 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

5080 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

5081 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

5082 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

5083 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

5084 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

5085 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

5086 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

5087 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

5090 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001)

	)

5091 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002)

	)

5092 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004)

	)

5093 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008)

	)

5094 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010)

	)

5095 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020)

	)

5096 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040)

	)

5097 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080)

	)

5098 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100)

	)

5099 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200)

	)

5100 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400)

	)

5101 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800)

	)

5102 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000)

	)

5103 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000)

	)

5104 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000)

	)

5105 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000)

	)

5106 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000)

	)

5114 
	#I2C_CR1_PE
 ((
uöt32_t
)0x00000001Ë

	)

5115 
	#I2C_CR1_SMBUS
 ((
uöt32_t
)0x00000002Ë

	)

5116 
	#I2C_CR1_SMBTYPE
 ((
uöt32_t
)0x00000008Ë

	)

5117 
	#I2C_CR1_ENARP
 ((
uöt32_t
)0x00000010Ë

	)

5118 
	#I2C_CR1_ENPEC
 ((
uöt32_t
)0x00000020Ë

	)

5119 
	#I2C_CR1_ENGC
 ((
uöt32_t
)0x00000040Ë

	)

5120 
	#I2C_CR1_NOSTRETCH
 ((
uöt32_t
)0x00000080Ë

	)

5121 
	#I2C_CR1_START
 ((
uöt32_t
)0x00000100Ë

	)

5122 
	#I2C_CR1_STOP
 ((
uöt32_t
)0x00000200Ë

	)

5123 
	#I2C_CR1_ACK
 ((
uöt32_t
)0x00000400Ë

	)

5124 
	#I2C_CR1_POS
 ((
uöt32_t
)0x00000800Ë

	)

5125 
	#I2C_CR1_PEC
 ((
uöt32_t
)0x00001000Ë

	)

5126 
	#I2C_CR1_ALERT
 ((
uöt32_t
)0x00002000Ë

	)

5127 
	#I2C_CR1_SWRST
 ((
uöt32_t
)0x00008000Ë

	)

5130 
	#I2C_CR2_FREQ
 ((
uöt32_t
)0x0000003FË

	)

5131 
	#I2C_CR2_FREQ_0
 ((
uöt32_t
)0x00000001Ë

	)

5132 
	#I2C_CR2_FREQ_1
 ((
uöt32_t
)0x00000002Ë

	)

5133 
	#I2C_CR2_FREQ_2
 ((
uöt32_t
)0x00000004Ë

	)

5134 
	#I2C_CR2_FREQ_3
 ((
uöt32_t
)0x00000008Ë

	)

5135 
	#I2C_CR2_FREQ_4
 ((
uöt32_t
)0x00000010Ë

	)

5136 
	#I2C_CR2_FREQ_5
 ((
uöt32_t
)0x00000020Ë

	)

5138 
	#I2C_CR2_ITERREN
 ((
uöt32_t
)0x00000100Ë

	)

5139 
	#I2C_CR2_ITEVTEN
 ((
uöt32_t
)0x00000200Ë

	)

5140 
	#I2C_CR2_ITBUFEN
 ((
uöt32_t
)0x00000400Ë

	)

5141 
	#I2C_CR2_DMAEN
 ((
uöt32_t
)0x00000800Ë

	)

5142 
	#I2C_CR2_LAST
 ((
uöt32_t
)0x00001000Ë

	)

5145 
	#I2C_OAR1_ADD1_7
 ((
uöt32_t
)0x000000FEË

	)

5146 
	#I2C_OAR1_ADD8_9
 ((
uöt32_t
)0x00000300Ë

	)

5148 
	#I2C_OAR1_ADD0
 ((
uöt32_t
)0x00000001Ë

	)

5149 
	#I2C_OAR1_ADD1
 ((
uöt32_t
)0x00000002Ë

	)

5150 
	#I2C_OAR1_ADD2
 ((
uöt32_t
)0x00000004Ë

	)

5151 
	#I2C_OAR1_ADD3
 ((
uöt32_t
)0x00000008Ë

	)

5152 
	#I2C_OAR1_ADD4
 ((
uöt32_t
)0x00000010Ë

	)

5153 
	#I2C_OAR1_ADD5
 ((
uöt32_t
)0x00000020Ë

	)

5154 
	#I2C_OAR1_ADD6
 ((
uöt32_t
)0x00000040Ë

	)

5155 
	#I2C_OAR1_ADD7
 ((
uöt32_t
)0x00000080Ë

	)

5156 
	#I2C_OAR1_ADD8
 ((
uöt32_t
)0x00000100Ë

	)

5157 
	#I2C_OAR1_ADD9
 ((
uöt32_t
)0x00000200Ë

	)

5159 
	#I2C_OAR1_ADDMODE
 ((
uöt32_t
)0x00008000Ë

	)

5162 
	#I2C_OAR2_ENDUAL
 ((
uöt32_t
)0x00000001Ë

	)

5163 
	#I2C_OAR2_ADD2
 ((
uöt32_t
)0x000000FEË

	)

5166 
	#I2C_DR_DR
 ((
uöt32_t
)0x000000FFË

	)

5169 
	#I2C_SR1_SB
 ((
uöt32_t
)0x00000001Ë

	)

5170 
	#I2C_SR1_ADDR
 ((
uöt32_t
)0x00000002Ë

	)

5171 
	#I2C_SR1_BTF
 ((
uöt32_t
)0x00000004Ë

	)

5172 
	#I2C_SR1_ADD10
 ((
uöt32_t
)0x00000008Ë

	)

5173 
	#I2C_SR1_STOPF
 ((
uöt32_t
)0x00000010Ë

	)

5174 
	#I2C_SR1_RXNE
 ((
uöt32_t
)0x00000040Ë

	)

5175 
	#I2C_SR1_TXE
 ((
uöt32_t
)0x00000080Ë

	)

5176 
	#I2C_SR1_BERR
 ((
uöt32_t
)0x00000100Ë

	)

5177 
	#I2C_SR1_ARLO
 ((
uöt32_t
)0x00000200Ë

	)

5178 
	#I2C_SR1_AF
 ((
uöt32_t
)0x00000400Ë

	)

5179 
	#I2C_SR1_OVR
 ((
uöt32_t
)0x00000800Ë

	)

5180 
	#I2C_SR1_PECERR
 ((
uöt32_t
)0x00001000Ë

	)

5181 
	#I2C_SR1_TIMEOUT
 ((
uöt32_t
)0x00004000Ë

	)

5182 
	#I2C_SR1_SMBALERT
 ((
uöt32_t
)0x00008000Ë

	)

5185 
	#I2C_SR2_MSL
 ((
uöt32_t
)0x00000001Ë

	)

5186 
	#I2C_SR2_BUSY
 ((
uöt32_t
)0x00000002Ë

	)

5187 
	#I2C_SR2_TRA
 ((
uöt32_t
)0x00000004Ë

	)

5188 
	#I2C_SR2_GENCALL
 ((
uöt32_t
)0x00000010Ë

	)

5189 
	#I2C_SR2_SMBDEFAULT
 ((
uöt32_t
)0x00000020Ë

	)

5190 
	#I2C_SR2_SMBHOST
 ((
uöt32_t
)0x00000040Ë

	)

5191 
	#I2C_SR2_DUALF
 ((
uöt32_t
)0x00000080Ë

	)

5192 
	#I2C_SR2_PEC
 ((
uöt32_t
)0x0000FF00Ë

	)

5195 
	#I2C_CCR_CCR
 ((
uöt32_t
)0x00000FFFË

	)

5196 
	#I2C_CCR_DUTY
 ((
uöt32_t
)0x00004000Ë

	)

5197 
	#I2C_CCR_FS
 ((
uöt32_t
)0x00008000Ë

	)

5200 
	#I2C_TRISE_TRISE
 ((
uöt32_t
)0x0000003FË

	)

5203 
	#I2C_FLTR_DNF
 ((
uöt32_t
)0x0000000FË

	)

5204 
	#I2C_FLTR_ANOFF
 ((
uöt32_t
)0x00000010Ë

	)

5212 
	#IWDG_KR_KEY
 ((
uöt32_t
)0xFFFFË

	)

5215 
	#IWDG_PR_PR
 ((
uöt32_t
)0x07Ë

	)

5216 
	#IWDG_PR_PR_0
 ((
uöt32_t
)0x01Ë

	)

5217 
	#IWDG_PR_PR_1
 ((
uöt32_t
)0x02Ë

	)

5218 
	#IWDG_PR_PR_2
 ((
uöt32_t
)0x04Ë

	)

5221 
	#IWDG_RLR_RL
 ((
uöt32_t
)0x0FFFË

	)

5224 
	#IWDG_SR_PVU
 ((
uöt32_t
)0x01Ë

	)

5225 
	#IWDG_SR_RVU
 ((
uöt32_t
)0x02Ë

	)

5236 
	#LTDC_SSCR_VSH
 ((
uöt32_t
)0x000007FFË

	)

5237 
	#LTDC_SSCR_HSW
 ((
uöt32_t
)0x0FFF0000Ë

	)

5241 
	#LTDC_BPCR_AVBP
 ((
uöt32_t
)0x000007FFË

	)

5242 
	#LTDC_BPCR_AHBP
 ((
uöt32_t
)0x0FFF0000Ë

	)

5246 
	#LTDC_AWCR_AAH
 ((
uöt32_t
)0x000007FFË

	)

5247 
	#LTDC_AWCR_AAW
 ((
uöt32_t
)0x0FFF0000Ë

	)

5251 
	#LTDC_TWCR_TOTALH
 ((
uöt32_t
)0x000007FFË

	)

5252 
	#LTDC_TWCR_TOTALW
 ((
uöt32_t
)0x0FFF0000Ë

	)

5256 
	#LTDC_GCR_LTDCEN
 ((
uöt32_t
)0x00000001Ë

	)

5257 
	#LTDC_GCR_DBW
 ((
uöt32_t
)0x00000070Ë

	)

5258 
	#LTDC_GCR_DGW
 ((
uöt32_t
)0x00000700Ë

	)

5259 
	#LTDC_GCR_DRW
 ((
uöt32_t
)0x00007000Ë

	)

5260 
	#LTDC_GCR_DTEN
 ((
uöt32_t
)0x00010000Ë

	)

5261 
	#LTDC_GCR_PCPOL
 ((
uöt32_t
)0x10000000Ë

	)

5262 
	#LTDC_GCR_DEPOL
 ((
uöt32_t
)0x20000000Ë

	)

5263 
	#LTDC_GCR_VSPOL
 ((
uöt32_t
)0x40000000Ë

	)

5264 
	#LTDC_GCR_HSPOL
 ((
uöt32_t
)0x80000000Ë

	)

5268 
	#LTDC_SRCR_IMR
 ((
uöt32_t
)0x00000001Ë

	)

5269 
	#LTDC_SRCR_VBR
 ((
uöt32_t
)0x00000002Ë

	)

5273 
	#LTDC_BCCR_BCBLUE
 ((
uöt32_t
)0x000000FFË

	)

5274 
	#LTDC_BCCR_BCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

5275 
	#LTDC_BCCR_BCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

5279 
	#LTDC_IER_LIE
 ((
uöt32_t
)0x00000001Ë

	)

5280 
	#LTDC_IER_FUIE
 ((
uöt32_t
)0x00000002Ë

	)

5281 
	#LTDC_IER_TERRIE
 ((
uöt32_t
)0x00000004Ë

	)

5282 
	#LTDC_IER_RRIE
 ((
uöt32_t
)0x00000008Ë

	)

5286 
	#LTDC_ISR_LIF
 ((
uöt32_t
)0x00000001Ë

	)

5287 
	#LTDC_ISR_FUIF
 ((
uöt32_t
)0x00000002Ë

	)

5288 
	#LTDC_ISR_TERRIF
 ((
uöt32_t
)0x00000004Ë

	)

5289 
	#LTDC_ISR_RRIF
 ((
uöt32_t
)0x00000008Ë

	)

5293 
	#LTDC_ICR_CLIF
 ((
uöt32_t
)0x00000001Ë

	)

5294 
	#LTDC_ICR_CFUIF
 ((
uöt32_t
)0x00000002Ë

	)

5295 
	#LTDC_ICR_CTERRIF
 ((
uöt32_t
)0x00000004Ë

	)

5296 
	#LTDC_ICR_CRRIF
 ((
uöt32_t
)0x00000008Ë

	)

5300 
	#LTDC_LIPCR_LIPOS
 ((
uöt32_t
)0x000007FFË

	)

5304 
	#LTDC_CPSR_CYPOS
 ((
uöt32_t
)0x0000FFFFË

	)

5305 
	#LTDC_CPSR_CXPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

5309 
	#LTDC_CDSR_VDES
 ((
uöt32_t
)0x00000001Ë

	)

5310 
	#LTDC_CDSR_HDES
 ((
uöt32_t
)0x00000002Ë

	)

5311 
	#LTDC_CDSR_VSYNCS
 ((
uöt32_t
)0x00000004Ë

	)

5312 
	#LTDC_CDSR_HSYNCS
 ((
uöt32_t
)0x00000008Ë

	)

5316 
	#LTDC_LxCR_LEN
 ((
uöt32_t
)0x00000001Ë

	)

5317 
	#LTDC_LxCR_COLKEN
 ((
uöt32_t
)0x00000002Ë

	)

5318 
	#LTDC_LxCR_CLUTEN
 ((
uöt32_t
)0x00000010Ë

	)

5322 
	#LTDC_LxWHPCR_WHSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

5323 
	#LTDC_LxWHPCR_WHSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

5327 
	#LTDC_LxWVPCR_WVSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

5328 
	#LTDC_LxWVPCR_WVSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

5332 
	#LTDC_LxCKCR_CKBLUE
 ((
uöt32_t
)0x000000FFË

	)

5333 
	#LTDC_LxCKCR_CKGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

5334 
	#LTDC_LxCKCR_CKRED
 ((
uöt32_t
)0x00FF0000Ë

	)

5338 
	#LTDC_LxPFCR_PF
 ((
uöt32_t
)0x00000007Ë

	)

5342 
	#LTDC_LxCACR_CONSTA
 ((
uöt32_t
)0x000000FFË

	)

5346 
	#LTDC_LxDCCR_DCBLUE
 ((
uöt32_t
)0x000000FFË

	)

5347 
	#LTDC_LxDCCR_DCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

5348 
	#LTDC_LxDCCR_DCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

5349 
	#LTDC_LxDCCR_DCALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

5353 
	#LTDC_LxBFCR_BF2
 ((
uöt32_t
)0x00000007Ë

	)

5354 
	#LTDC_LxBFCR_BF1
 ((
uöt32_t
)0x00000700Ë

	)

5358 
	#LTDC_LxCFBAR_CFBADD
 ((
uöt32_t
)0xFFFFFFFFË

	)

5362 
	#LTDC_LxCFBLR_CFBLL
 ((
uöt32_t
)0x00001FFFË

	)

5363 
	#LTDC_LxCFBLR_CFBP
 ((
uöt32_t
)0x1FFF0000Ë

	)

5367 
	#LTDC_LxCFBLNR_CFBLNBR
 ((
uöt32_t
)0x000007FFË

	)

5371 
	#LTDC_LxCLUTWR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

5372 
	#LTDC_LxCLUTWR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

5373 
	#LTDC_LxCLUTWR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

5374 
	#LTDC_LxCLUTWR_CLUTADD
 ((
uöt32_t
)0xFF000000Ë

	)

5383 
	#PWR_CR_LPDS
 ((
uöt32_t
)0x00000001Ë

	)

5384 
	#PWR_CR_PDDS
 ((
uöt32_t
)0x00000002Ë

	)

5385 
	#PWR_CR_CWUF
 ((
uöt32_t
)0x00000004Ë

	)

5386 
	#PWR_CR_CSBF
 ((
uöt32_t
)0x00000008Ë

	)

5387 
	#PWR_CR_PVDE
 ((
uöt32_t
)0x00000010Ë

	)

5389 
	#PWR_CR_PLS
 ((
uöt32_t
)0x000000E0Ë

	)

5390 
	#PWR_CR_PLS_0
 ((
uöt32_t
)0x00000020Ë

	)

5391 
	#PWR_CR_PLS_1
 ((
uöt32_t
)0x00000040Ë

	)

5392 
	#PWR_CR_PLS_2
 ((
uöt32_t
)0x00000080Ë

	)

5395 
	#PWR_CR_PLS_LEV0
 ((
uöt32_t
)0x00000000Ë

	)

5396 
	#PWR_CR_PLS_LEV1
 ((
uöt32_t
)0x00000020Ë

	)

5397 
	#PWR_CR_PLS_LEV2
 ((
uöt32_t
)0x00000040Ë

	)

5398 
	#PWR_CR_PLS_LEV3
 ((
uöt32_t
)0x00000060Ë

	)

5399 
	#PWR_CR_PLS_LEV4
 ((
uöt32_t
)0x00000080Ë

	)

5400 
	#PWR_CR_PLS_LEV5
 ((
uöt32_t
)0x000000A0Ë

	)

5401 
	#PWR_CR_PLS_LEV6
 ((
uöt32_t
)0x000000C0Ë

	)

5402 
	#PWR_CR_PLS_LEV7
 ((
uöt32_t
)0x000000E0Ë

	)

5403 
	#PWR_CR_DBP
 ((
uöt32_t
)0x00000100Ë

	)

5404 
	#PWR_CR_FPDS
 ((
uöt32_t
)0x00000200Ë

	)

5405 
	#PWR_CR_LPLVDS
 ((
uöt32_t
)0x00000400Ë

	)

5406 
	#PWR_CR_MRLVDS
 ((
uöt32_t
)0x00000800Ë

	)

5407 
	#PWR_CR_ADCDC1
 ((
uöt32_t
)0x00002000Ë

	)

5408 
	#PWR_CR_VOS
 ((
uöt32_t
)0x0000C000Ë

	)

5409 
	#PWR_CR_VOS_0
 ((
uöt32_t
)0x00004000Ë

	)

5410 
	#PWR_CR_VOS_1
 ((
uöt32_t
)0x00008000Ë

	)

5411 
	#PWR_CR_ODEN
 ((
uöt32_t
)0x00010000Ë

	)

5412 
	#PWR_CR_ODSWEN
 ((
uöt32_t
)0x00020000Ë

	)

5413 
	#PWR_CR_UDEN
 ((
uöt32_t
)0x000C0000Ë

	)

5414 
	#PWR_CR_UDEN_0
 ((
uöt32_t
)0x00040000Ë

	)

5415 
	#PWR_CR_UDEN_1
 ((
uöt32_t
)0x00080000Ë

	)

5418 
	#PWR_CR_PMODE
 
PWR_CR_VOS


	)

5419 
	#PWR_CR_LPUDS
 
PWR_CR_LPLVDS


	)

5420 
	#PWR_CR_MRUDS
 
PWR_CR_MRLVDS


	)

5423 
	#PWR_CSR_WUF
 ((
uöt32_t
)0x00000001Ë

	)

5424 
	#PWR_CSR_SBF
 ((
uöt32_t
)0x00000002Ë

	)

5425 
	#PWR_CSR_PVDO
 ((
uöt32_t
)0x00000004Ë

	)

5426 
	#PWR_CSR_BRR
 ((
uöt32_t
)0x00000008Ë

	)

5427 
	#PWR_CSR_EWUP
 ((
uöt32_t
)0x00000100Ë

	)

5428 
	#PWR_CSR_BRE
 ((
uöt32_t
)0x00000200Ë

	)

5429 
	#PWR_CSR_VOSRDY
 ((
uöt32_t
)0x00004000Ë

	)

5430 
	#PWR_CSR_ODRDY
 ((
uöt32_t
)0x00010000Ë

	)

5431 
	#PWR_CSR_ODSWRDY
 ((
uöt32_t
)0x00020000Ë

	)

5432 
	#PWR_CSR_UDSWRDY
 ((
uöt32_t
)0x000C0000Ë

	)

5435 
	#PWR_CSR_REGRDY
 
PWR_CSR_VOSRDY


	)

5443 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

5444 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

5446 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

5447 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

5448 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

5449 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

5450 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

5451 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

5453 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

5454 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

5455 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

5456 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

5457 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

5458 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

5459 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

5460 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

5461 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

5463 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

5464 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

5465 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

5466 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

5467 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

5468 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

5469 
	#RCC_CR_PLLI2SON
 ((
uöt32_t
)0x04000000)

	)

5470 
	#RCC_CR_PLLI2SRDY
 ((
uöt32_t
)0x08000000)

	)

5471 
	#RCC_CR_PLLSAION
 ((
uöt32_t
)0x10000000)

	)

5472 
	#RCC_CR_PLLSAIRDY
 ((
uöt32_t
)0x20000000)

	)

5475 
	#RCC_PLLCFGR_PLLM
 ((
uöt32_t
)0x0000003F)

	)

5476 
	#RCC_PLLCFGR_PLLM_0
 ((
uöt32_t
)0x00000001)

	)

5477 
	#RCC_PLLCFGR_PLLM_1
 ((
uöt32_t
)0x00000002)

	)

5478 
	#RCC_PLLCFGR_PLLM_2
 ((
uöt32_t
)0x00000004)

	)

5479 
	#RCC_PLLCFGR_PLLM_3
 ((
uöt32_t
)0x00000008)

	)

5480 
	#RCC_PLLCFGR_PLLM_4
 ((
uöt32_t
)0x00000010)

	)

5481 
	#RCC_PLLCFGR_PLLM_5
 ((
uöt32_t
)0x00000020)

	)

5483 
	#RCC_PLLCFGR_PLLN
 ((
uöt32_t
)0x00007FC0)

	)

5484 
	#RCC_PLLCFGR_PLLN_0
 ((
uöt32_t
)0x00000040)

	)

5485 
	#RCC_PLLCFGR_PLLN_1
 ((
uöt32_t
)0x00000080)

	)

5486 
	#RCC_PLLCFGR_PLLN_2
 ((
uöt32_t
)0x00000100)

	)

5487 
	#RCC_PLLCFGR_PLLN_3
 ((
uöt32_t
)0x00000200)

	)

5488 
	#RCC_PLLCFGR_PLLN_4
 ((
uöt32_t
)0x00000400)

	)

5489 
	#RCC_PLLCFGR_PLLN_5
 ((
uöt32_t
)0x00000800)

	)

5490 
	#RCC_PLLCFGR_PLLN_6
 ((
uöt32_t
)0x00001000)

	)

5491 
	#RCC_PLLCFGR_PLLN_7
 ((
uöt32_t
)0x00002000)

	)

5492 
	#RCC_PLLCFGR_PLLN_8
 ((
uöt32_t
)0x00004000)

	)

5494 
	#RCC_PLLCFGR_PLLP
 ((
uöt32_t
)0x00030000)

	)

5495 
	#RCC_PLLCFGR_PLLP_0
 ((
uöt32_t
)0x00010000)

	)

5496 
	#RCC_PLLCFGR_PLLP_1
 ((
uöt32_t
)0x00020000)

	)

5498 
	#RCC_PLLCFGR_PLLSRC
 ((
uöt32_t
)0x00400000)

	)

5499 
	#RCC_PLLCFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00400000)

	)

5500 
	#RCC_PLLCFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000)

	)

5502 
	#RCC_PLLCFGR_PLLQ
 ((
uöt32_t
)0x0F000000)

	)

5503 
	#RCC_PLLCFGR_PLLQ_0
 ((
uöt32_t
)0x01000000)

	)

5504 
	#RCC_PLLCFGR_PLLQ_1
 ((
uöt32_t
)0x02000000)

	)

5505 
	#RCC_PLLCFGR_PLLQ_2
 ((
uöt32_t
)0x04000000)

	)

5506 
	#RCC_PLLCFGR_PLLQ_3
 ((
uöt32_t
)0x08000000)

	)

5510 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

5511 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

5512 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

5514 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

5515 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

5516 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

5519 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

5520 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

5521 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

5523 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

5524 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

5525 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

5528 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

5529 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

5530 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

5531 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

5532 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

5534 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

5535 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

5536 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

5537 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

5538 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

5539 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

5540 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

5541 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

5542 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

5545 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00001C00Ë

	)

5546 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000400Ë

	)

5547 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000800Ë

	)

5548 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00001000Ë

	)

5550 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

5551 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00001000Ë

	)

5552 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00001400Ë

	)

5553 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00001800Ë

	)

5554 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00001C00Ë

	)

5557 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x0000E000Ë

	)

5558 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00002000Ë

	)

5559 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00004000Ë

	)

5560 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00008000Ë

	)

5562 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

5563 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00008000Ë

	)

5564 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x0000A000Ë

	)

5565 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

5566 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x0000E000Ë

	)

5569 
	#RCC_CFGR_RTCPRE
 ((
uöt32_t
)0x001F0000)

	)

5570 
	#RCC_CFGR_RTCPRE_0
 ((
uöt32_t
)0x00010000)

	)

5571 
	#RCC_CFGR_RTCPRE_1
 ((
uöt32_t
)0x00020000)

	)

5572 
	#RCC_CFGR_RTCPRE_2
 ((
uöt32_t
)0x00040000)

	)

5573 
	#RCC_CFGR_RTCPRE_3
 ((
uöt32_t
)0x00080000)

	)

5574 
	#RCC_CFGR_RTCPRE_4
 ((
uöt32_t
)0x00100000)

	)

5577 
	#RCC_CFGR_MCO1
 ((
uöt32_t
)0x00600000)

	)

5578 
	#RCC_CFGR_MCO1_0
 ((
uöt32_t
)0x00200000)

	)

5579 
	#RCC_CFGR_MCO1_1
 ((
uöt32_t
)0x00400000)

	)

5581 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000)

	)

5583 
	#RCC_CFGR_MCO1PRE
 ((
uöt32_t
)0x07000000)

	)

5584 
	#RCC_CFGR_MCO1PRE_0
 ((
uöt32_t
)0x01000000)

	)

5585 
	#RCC_CFGR_MCO1PRE_1
 ((
uöt32_t
)0x02000000)

	)

5586 
	#RCC_CFGR_MCO1PRE_2
 ((
uöt32_t
)0x04000000)

	)

5588 
	#RCC_CFGR_MCO2PRE
 ((
uöt32_t
)0x38000000)

	)

5589 
	#RCC_CFGR_MCO2PRE_0
 ((
uöt32_t
)0x08000000)

	)

5590 
	#RCC_CFGR_MCO2PRE_1
 ((
uöt32_t
)0x10000000)

	)

5591 
	#RCC_CFGR_MCO2PRE_2
 ((
uöt32_t
)0x20000000)

	)

5593 
	#RCC_CFGR_MCO2
 ((
uöt32_t
)0xC0000000)

	)

5594 
	#RCC_CFGR_MCO2_0
 ((
uöt32_t
)0x40000000)

	)

5595 
	#RCC_CFGR_MCO2_1
 ((
uöt32_t
)0x80000000)

	)

5598 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001)

	)

5599 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002)

	)

5600 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004)

	)

5601 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008)

	)

5602 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010)

	)

5603 
	#RCC_CIR_PLLI2SRDYF
 ((
uöt32_t
)0x00000020)

	)

5604 
	#RCC_CIR_PLLSAIRDYF
 ((
uöt32_t
)0x00000040)

	)

5605 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080)

	)

5606 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100)

	)

5607 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200)

	)

5608 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400)

	)

5609 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800)

	)

5610 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000)

	)

5611 
	#RCC_CIR_PLLI2SRDYIE
 ((
uöt32_t
)0x00002000)

	)

5612 
	#RCC_CIR_PLLSAIRDYIE
 ((
uöt32_t
)0x00004000)

	)

5613 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000)

	)

5614 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000)

	)

5615 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000)

	)

5616 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000)

	)

5617 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000)

	)

5618 
	#RCC_CIR_PLLI2SRDYC
 ((
uöt32_t
)0x00200000)

	)

5619 
	#RCC_CIR_PLLSAIRDYC
 ((
uöt32_t
)0x00400000)

	)

5620 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000)

	)

5623 
	#RCC_AHB1RSTR_GPIOARST
 ((
uöt32_t
)0x00000001)

	)

5624 
	#RCC_AHB1RSTR_GPIOBRST
 ((
uöt32_t
)0x00000002)

	)

5625 
	#RCC_AHB1RSTR_GPIOCRST
 ((
uöt32_t
)0x00000004)

	)

5626 
	#RCC_AHB1RSTR_GPIODRST
 ((
uöt32_t
)0x00000008)

	)

5627 
	#RCC_AHB1RSTR_GPIOERST
 ((
uöt32_t
)0x00000010)

	)

5628 
	#RCC_AHB1RSTR_GPIOFRST
 ((
uöt32_t
)0x00000020)

	)

5629 
	#RCC_AHB1RSTR_GPIOGRST
 ((
uöt32_t
)0x00000040)

	)

5630 
	#RCC_AHB1RSTR_GPIOHRST
 ((
uöt32_t
)0x00000080)

	)

5631 
	#RCC_AHB1RSTR_GPIOIRST
 ((
uöt32_t
)0x00000100)

	)

5632 
	#RCC_AHB1RSTR_GPIOJRST
 ((
uöt32_t
)0x00000200)

	)

5633 
	#RCC_AHB1RSTR_GPIOKRST
 ((
uöt32_t
)0x00000400)

	)

5634 
	#RCC_AHB1RSTR_CRCRST
 ((
uöt32_t
)0x00001000)

	)

5635 
	#RCC_AHB1RSTR_DMA1RST
 ((
uöt32_t
)0x00200000)

	)

5636 
	#RCC_AHB1RSTR_DMA2RST
 ((
uöt32_t
)0x00400000)

	)

5637 
	#RCC_AHB1RSTR_DMA2DRST
 ((
uöt32_t
)0x00800000)

	)

5638 
	#RCC_AHB1RSTR_ETHMACRST
 ((
uöt32_t
)0x02000000)

	)

5639 
	#RCC_AHB1RSTR_OTGHRST
 ((
uöt32_t
)0x20000000)

	)

5642 
	#RCC_AHB2RSTR_DCMIRST
 ((
uöt32_t
)0x00000001)

	)

5643 
	#RCC_AHB2RSTR_RNGRST
 ((
uöt32_t
)0x00000040)

	)

5644 
	#RCC_AHB2RSTR_OTGFSRST
 ((
uöt32_t
)0x00000080)

	)

5647 
	#RCC_AHB3RSTR_FMCRST
 ((
uöt32_t
)0x00000001)

	)

5650 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001)

	)

5651 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002)

	)

5652 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004)

	)

5653 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008)

	)

5654 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010)

	)

5655 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020)

	)

5656 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040)

	)

5657 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080)

	)

5658 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100)

	)

5659 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800)

	)

5660 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000)

	)

5661 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000)

	)

5662 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000)

	)

5663 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000)

	)

5664 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000)

	)

5665 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000)

	)

5666 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000)

	)

5667 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000)

	)

5668 
	#RCC_APB1RSTR_I2C3RST
 ((
uöt32_t
)0x00800000)

	)

5669 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000)

	)

5670 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000)

	)

5671 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000)

	)

5672 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000)

	)

5673 
	#RCC_APB1RSTR_UART7RST
 ((
uöt32_t
)0x40000000)

	)

5674 
	#RCC_APB1RSTR_UART8RST
 ((
uöt32_t
)0x80000000)

	)

5677 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000001)

	)

5678 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00000002)

	)

5679 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00000010)

	)

5680 
	#RCC_APB2RSTR_USART6RST
 ((
uöt32_t
)0x00000020)

	)

5681 
	#RCC_APB2RSTR_ADCRST
 ((
uöt32_t
)0x00000100)

	)

5682 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800)

	)

5683 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000)

	)

5684 
	#RCC_APB2RSTR_SPI4RST
 ((
uöt32_t
)0x00002000)

	)

5685 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00004000)

	)

5686 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00010000)

	)

5687 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00020000)

	)

5688 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00040000)

	)

5689 
	#RCC_APB2RSTR_SPI5RST
 ((
uöt32_t
)0x00100000)

	)

5690 
	#RCC_APB2RSTR_SPI6RST
 ((
uöt32_t
)0x00200000)

	)

5691 
	#RCC_APB2RSTR_SAI1RST
 ((
uöt32_t
)0x00400000)

	)

5692 
	#RCC_APB2RSTR_LTDCRST
 ((
uöt32_t
)0x04000000)

	)

5695 
	#RCC_APB2RSTR_SPI1
 
RCC_APB2RSTR_SPI1RST


	)

5698 
	#RCC_AHB1ENR_GPIOAEN
 ((
uöt32_t
)0x00000001)

	)

5699 
	#RCC_AHB1ENR_GPIOBEN
 ((
uöt32_t
)0x00000002)

	)

5700 
	#RCC_AHB1ENR_GPIOCEN
 ((
uöt32_t
)0x00000004)

	)

5701 
	#RCC_AHB1ENR_GPIODEN
 ((
uöt32_t
)0x00000008)

	)

5702 
	#RCC_AHB1ENR_GPIOEEN
 ((
uöt32_t
)0x00000010)

	)

5703 
	#RCC_AHB1ENR_GPIOFEN
 ((
uöt32_t
)0x00000020)

	)

5704 
	#RCC_AHB1ENR_GPIOGEN
 ((
uöt32_t
)0x00000040)

	)

5705 
	#RCC_AHB1ENR_GPIOHEN
 ((
uöt32_t
)0x00000080)

	)

5706 
	#RCC_AHB1ENR_GPIOIEN
 ((
uöt32_t
)0x00000100)

	)

5707 
	#RCC_AHB1ENR_GPIOJEN
 ((
uöt32_t
)0x00000200)

	)

5708 
	#RCC_AHB1ENR_GPIOKEN
 ((
uöt32_t
)0x00000400)

	)

5710 
	#RCC_AHB1ENR_CRCEN
 ((
uöt32_t
)0x00001000)

	)

5711 
	#RCC_AHB1ENR_BKPSRAMEN
 ((
uöt32_t
)0x00040000)

	)

5712 
	#RCC_AHB1ENR_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

5713 
	#RCC_AHB1ENR_DMA1EN
 ((
uöt32_t
)0x00200000)

	)

5714 
	#RCC_AHB1ENR_DMA2EN
 ((
uöt32_t
)0x00400000)

	)

5715 
	#RCC_AHB1ENR_DMA2DEN
 ((
uöt32_t
)0x00800000)

	)

5717 
	#RCC_AHB1ENR_ETHMACEN
 ((
uöt32_t
)0x02000000)

	)

5718 
	#RCC_AHB1ENR_ETHMACTXEN
 ((
uöt32_t
)0x04000000)

	)

5719 
	#RCC_AHB1ENR_ETHMACRXEN
 ((
uöt32_t
)0x08000000)

	)

5720 
	#RCC_AHB1ENR_ETHMACPTPEN
 ((
uöt32_t
)0x10000000)

	)

5721 
	#RCC_AHB1ENR_OTGHSEN
 ((
uöt32_t
)0x20000000)

	)

5722 
	#RCC_AHB1ENR_OTGHSULPIEN
 ((
uöt32_t
)0x40000000)

	)

5725 
	#RCC_AHB2ENR_DCMIEN
 ((
uöt32_t
)0x00000001)

	)

5726 
	#RCC_AHB2ENR_RNGEN
 ((
uöt32_t
)0x00000040)

	)

5727 
	#RCC_AHB2ENR_OTGFSEN
 ((
uöt32_t
)0x00000080)

	)

5730 
	#RCC_AHB3ENR_FMCEN
 ((
uöt32_t
)0x00000001)

	)

5733 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001)

	)

5734 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002)

	)

5735 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004)

	)

5736 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008)

	)

5737 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010)

	)

5738 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020)

	)

5739 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040)

	)

5740 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080)

	)

5741 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100)

	)

5742 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

5743 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000)

	)

5744 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000)

	)

5745 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000)

	)

5746 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000)

	)

5747 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000)

	)

5748 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000)

	)

5749 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000)

	)

5750 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000)

	)

5751 
	#RCC_APB1ENR_I2C3EN
 ((
uöt32_t
)0x00800000)

	)

5752 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000)

	)

5753 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000)

	)

5754 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000)

	)

5755 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000)

	)

5756 
	#RCC_APB1ENR_UART7EN
 ((
uöt32_t
)0x40000000)

	)

5757 
	#RCC_APB1ENR_UART8EN
 ((
uöt32_t
)0x80000000)

	)

5760 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000001)

	)

5761 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00000002)

	)

5762 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00000010)

	)

5763 
	#RCC_APB2ENR_USART6EN
 ((
uöt32_t
)0x00000020)

	)

5764 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000100)

	)

5765 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000200)

	)

5766 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00000400)

	)

5767 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800)

	)

5768 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000)

	)

5769 
	#RCC_APB2ENR_SPI4EN
 ((
uöt32_t
)0x00002000)

	)

5770 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00004000)

	)

5771 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00010000)

	)

5772 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00020000)

	)

5773 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00040000)

	)

5774 
	#RCC_APB2ENR_SPI5EN
 ((
uöt32_t
)0x00100000)

	)

5775 
	#RCC_APB2ENR_SPI6EN
 ((
uöt32_t
)0x00200000)

	)

5776 
	#RCC_APB2ENR_SAI1EN
 ((
uöt32_t
)0x00400000)

	)

5777 
	#RCC_APB2ENR_LTDCEN
 ((
uöt32_t
)0x04000000)

	)

5780 
	#RCC_AHB1LPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001)

	)

5781 
	#RCC_AHB1LPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002)

	)

5782 
	#RCC_AHB1LPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004)

	)

5783 
	#RCC_AHB1LPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008)

	)

5784 
	#RCC_AHB1LPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010)

	)

5785 
	#RCC_AHB1LPENR_GPIOFLPEN
 ((
uöt32_t
)0x00000020)

	)

5786 
	#RCC_AHB1LPENR_GPIOGLPEN
 ((
uöt32_t
)0x00000040)

	)

5787 
	#RCC_AHB1LPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000080)

	)

5788 
	#RCC_AHB1LPENR_GPIOILPEN
 ((
uöt32_t
)0x00000100)

	)

5789 
	#RCC_AHB1LPENR_GPIOJLPEN
 ((
uöt32_t
)0x00000200)

	)

5790 
	#RCC_AHB1LPENR_GPIOKLPEN
 ((
uöt32_t
)0x00000400)

	)

5792 
	#RCC_AHB1LPENR_CRCLPEN
 ((
uöt32_t
)0x00001000)

	)

5793 
	#RCC_AHB1LPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000)

	)

5794 
	#RCC_AHB1LPENR_SRAM1LPEN
 ((
uöt32_t
)0x00010000)

	)

5795 
	#RCC_AHB1LPENR_SRAM2LPEN
 ((
uöt32_t
)0x00020000)

	)

5796 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 ((
uöt32_t
)0x00040000)

	)

5797 
	#RCC_AHB1LPENR_SRAM3LPEN
 ((
uöt32_t
)0x00080000)

	)

5798 
	#RCC_AHB1LPENR_DMA1LPEN
 ((
uöt32_t
)0x00200000)

	)

5799 
	#RCC_AHB1LPENR_DMA2LPEN
 ((
uöt32_t
)0x00400000)

	)

5800 
	#RCC_AHB1LPENR_DMA2DLPEN
 ((
uöt32_t
)0x00800000)

	)

5802 
	#RCC_AHB1LPENR_ETHMACLPEN
 ((
uöt32_t
)0x02000000)

	)

5803 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 ((
uöt32_t
)0x04000000)

	)

5804 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 ((
uöt32_t
)0x08000000)

	)

5805 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 ((
uöt32_t
)0x10000000)

	)

5806 
	#RCC_AHB1LPENR_OTGHSLPEN
 ((
uöt32_t
)0x20000000)

	)

5807 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 ((
uöt32_t
)0x40000000)

	)

5810 
	#RCC_AHB2LPENR_DCMILPEN
 ((
uöt32_t
)0x00000001)

	)

5811 
	#RCC_AHB2LPENR_RNGLPEN
 ((
uöt32_t
)0x00000040)

	)

5812 
	#RCC_AHB2LPENR_OTGFSLPEN
 ((
uöt32_t
)0x00000080)

	)

5815 
	#RCC_AHB3LPENR_FMCLPEN
 ((
uöt32_t
)0x00000001)

	)

5818 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001)

	)

5819 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002)

	)

5820 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004)

	)

5821 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008)

	)

5822 
	#RCC_APB1LPENR_TIM6LPEN
 ((
uöt32_t
)0x00000010)

	)

5823 
	#RCC_APB1LPENR_TIM7LPEN
 ((
uöt32_t
)0x00000020)

	)

5824 
	#RCC_APB1LPENR_TIM12LPEN
 ((
uöt32_t
)0x00000040)

	)

5825 
	#RCC_APB1LPENR_TIM13LPEN
 ((
uöt32_t
)0x00000080)

	)

5826 
	#RCC_APB1LPENR_TIM14LPEN
 ((
uöt32_t
)0x00000100)

	)

5827 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800)

	)

5828 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000)

	)

5829 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000)

	)

5830 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000)

	)

5831 
	#RCC_APB1LPENR_USART3LPEN
 ((
uöt32_t
)0x00040000)

	)

5832 
	#RCC_APB1LPENR_UART4LPEN
 ((
uöt32_t
)0x00080000)

	)

5833 
	#RCC_APB1LPENR_UART5LPEN
 ((
uöt32_t
)0x00100000)

	)

5834 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000)

	)

5835 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000)

	)

5836 
	#RCC_APB1LPENR_I2C3LPEN
 ((
uöt32_t
)0x00800000)

	)

5837 
	#RCC_APB1LPENR_CAN1LPEN
 ((
uöt32_t
)0x02000000)

	)

5838 
	#RCC_APB1LPENR_CAN2LPEN
 ((
uöt32_t
)0x04000000)

	)

5839 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000)

	)

5840 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000)

	)

5841 
	#RCC_APB1LPENR_UART7LPEN
 ((
uöt32_t
)0x40000000)

	)

5842 
	#RCC_APB1LPENR_UART8LPEN
 ((
uöt32_t
)0x80000000)

	)

5845 
	#RCC_APB2LPENR_TIM1LPEN
 ((
uöt32_t
)0x00000001)

	)

5846 
	#RCC_APB2LPENR_TIM8LPEN
 ((
uöt32_t
)0x00000002)

	)

5847 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00000010)

	)

5848 
	#RCC_APB2LPENR_USART6LPEN
 ((
uöt32_t
)0x00000020)

	)

5849 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000100)

	)

5850 
	#RCC_APB2LPENR_ADC2LPEN
 ((
uöt32_t
)0x00000200)

	)

5851 
	#RCC_APB2LPENR_ADC3LPEN
 ((
uöt32_t
)0x00000400)

	)

5852 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800)

	)

5853 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000)

	)

5854 
	#RCC_APB2LPENR_SPI4LPEN
 ((
uöt32_t
)0x00002000)

	)

5855 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00004000)

	)

5856 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00010000)

	)

5857 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00020000)

	)

5858 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00040000)

	)

5859 
	#RCC_APB2LPENR_SPI5LPEN
 ((
uöt32_t
)0x00100000)

	)

5860 
	#RCC_APB2LPENR_SPI6LPEN
 ((
uöt32_t
)0x00200000)

	)

5861 
	#RCC_APB2LPENR_SAI1LPEN
 ((
uöt32_t
)0x00400000)

	)

5862 
	#RCC_APB2LPENR_LTDCLPEN
 ((
uöt32_t
)0x04000000)

	)

5865 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001)

	)

5866 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002)

	)

5867 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004)

	)

5869 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300)

	)

5870 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100)

	)

5871 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200)

	)

5873 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000)

	)

5874 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000)

	)

5877 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001)

	)

5878 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002)

	)

5879 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000)

	)

5880 
	#RCC_CSR_BORRSTF
 ((
uöt32_t
)0x02000000)

	)

5881 
	#RCC_CSR_PADRSTF
 ((
uöt32_t
)0x04000000)

	)

5882 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000)

	)

5883 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000)

	)

5884 
	#RCC_CSR_WDGRSTF
 ((
uöt32_t
)0x20000000)

	)

5885 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000)

	)

5886 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000)

	)

5889 
	#RCC_SSCGR_MODPER
 ((
uöt32_t
)0x00001FFF)

	)

5890 
	#RCC_SSCGR_INCSTEP
 ((
uöt32_t
)0x0FFFE000)

	)

5891 
	#RCC_SSCGR_SPREADSEL
 ((
uöt32_t
)0x40000000)

	)

5892 
	#RCC_SSCGR_SSCGEN
 ((
uöt32_t
)0x80000000)

	)

5895 
	#RCC_PLLI2SCFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

5896 
	#RCC_PLLI2SCFGR_PLLI2SN_0
 ((
uöt32_t
)0x00000040)

	)

5897 
	#RCC_PLLI2SCFGR_PLLI2SN_1
 ((
uöt32_t
)0x00000080)

	)

5898 
	#RCC_PLLI2SCFGR_PLLI2SN_2
 ((
uöt32_t
)0x00000100)

	)

5899 
	#RCC_PLLI2SCFGR_PLLI2SN_3
 ((
uöt32_t
)0x00000200)

	)

5900 
	#RCC_PLLI2SCFGR_PLLI2SN_4
 ((
uöt32_t
)0x00000400)

	)

5901 
	#RCC_PLLI2SCFGR_PLLI2SN_5
 ((
uöt32_t
)0x00000800)

	)

5902 
	#RCC_PLLI2SCFGR_PLLI2SN_6
 ((
uöt32_t
)0x00001000)

	)

5903 
	#RCC_PLLI2SCFGR_PLLI2SN_7
 ((
uöt32_t
)0x00002000)

	)

5904 
	#RCC_PLLI2SCFGR_PLLI2SN_8
 ((
uöt32_t
)0x00004000)

	)

5906 
	#RCC_PLLI2SCFGR_PLLI2SQ
 ((
uöt32_t
)0x0F000000)

	)

5907 
	#RCC_PLLI2SCFGR_PLLI2SQ_0
 ((
uöt32_t
)0x01000000)

	)

5908 
	#RCC_PLLI2SCFGR_PLLI2SQ_1
 ((
uöt32_t
)0x02000000)

	)

5909 
	#RCC_PLLI2SCFGR_PLLI2SQ_2
 ((
uöt32_t
)0x04000000)

	)

5910 
	#RCC_PLLI2SCFGR_PLLI2SQ_3
 ((
uöt32_t
)0x08000000)

	)

5912 
	#RCC_PLLI2SCFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

5913 
	#RCC_PLLI2SCFGR_PLLI2SR_0
 ((
uöt32_t
)0x10000000)

	)

5914 
	#RCC_PLLI2SCFGR_PLLI2SR_1
 ((
uöt32_t
)0x20000000)

	)

5915 
	#RCC_PLLI2SCFGR_PLLI2SR_2
 ((
uöt32_t
)0x40000000)

	)

5919 
	#RCC_PLLSAICFGR_PLLSAIN
 ((
uöt32_t
)0x00007FC0)

	)

5920 
	#RCC_PLLSAICFGR_PLLSAIN_0
 ((
uöt32_t
)0x00000040)

	)

5921 
	#RCC_PLLSAICFGR_PLLSAIN_1
 ((
uöt32_t
)0x00000080)

	)

5922 
	#RCC_PLLSAICFGR_PLLSAIN_2
 ((
uöt32_t
)0x00000100)

	)

5923 
	#RCC_PLLSAICFGR_PLLSAIN_3
 ((
uöt32_t
)0x00000200)

	)

5924 
	#RCC_PLLSAICFGR_PLLSAIN_4
 ((
uöt32_t
)0x00000400)

	)

5925 
	#RCC_PLLSAICFGR_PLLSAIN_5
 ((
uöt32_t
)0x00000800)

	)

5926 
	#RCC_PLLSAICFGR_PLLSAIN_6
 ((
uöt32_t
)0x00001000)

	)

5927 
	#RCC_PLLSAICFGR_PLLSAIN_7
 ((
uöt32_t
)0x00002000)

	)

5928 
	#RCC_PLLSAICFGR_PLLSAIN_8
 ((
uöt32_t
)0x00004000)

	)

5930 
	#RCC_PLLSAICFGR_PLLSAIQ
 ((
uöt32_t
)0x0F000000)

	)

5931 
	#RCC_PLLSAICFGR_PLLSAIQ_0
 ((
uöt32_t
)0x01000000)

	)

5932 
	#RCC_PLLSAICFGR_PLLSAIQ_1
 ((
uöt32_t
)0x02000000)

	)

5933 
	#RCC_PLLSAICFGR_PLLSAIQ_2
 ((
uöt32_t
)0x04000000)

	)

5934 
	#RCC_PLLSAICFGR_PLLSAIQ_3
 ((
uöt32_t
)0x08000000)

	)

5936 
	#RCC_PLLSAICFGR_PLLSAIR
 ((
uöt32_t
)0x70000000)

	)

5937 
	#RCC_PLLSAICFGR_PLLSAIR_0
 ((
uöt32_t
)0x10000000)

	)

5938 
	#RCC_PLLSAICFGR_PLLSAIR_1
 ((
uöt32_t
)0x20000000)

	)

5939 
	#RCC_PLLSAICFGR_PLLSAIR_2
 ((
uöt32_t
)0x40000000)

	)

5942 
	#RCC_DCKCFGR_PLLI2SDIVQ
 ((
uöt32_t
)0x0000001F)

	)

5943 
	#RCC_DCKCFGR_PLLSAIDIVQ
 ((
uöt32_t
)0x00001F00)

	)

5944 
	#RCC_DCKCFGR_PLLSAIDIVR
 ((
uöt32_t
)0x00030000)

	)

5945 
	#RCC_DCKCFGR_SAI1ASRC
 ((
uöt32_t
)0x00300000)

	)

5946 
	#RCC_DCKCFGR_SAI1ASRC_0
 ((
uöt32_t
)0x00100000)

	)

5947 
	#RCC_DCKCFGR_SAI1ASRC_1
 ((
uöt32_t
)0x00200000)

	)

5948 
	#RCC_DCKCFGR_SAI1BSRC
 ((
uöt32_t
)0x00C00000)

	)

5949 
	#RCC_DCKCFGR_SAI1BSRC_0
 ((
uöt32_t
)0x00400000)

	)

5950 
	#RCC_DCKCFGR_SAI1BSRC_1
 ((
uöt32_t
)0x00800000)

	)

5951 
	#RCC_DCKCFGR_TIMPRE
 ((
uöt32_t
)0x01000000)

	)

5960 
	#RNG_CR_RNGEN
 ((
uöt32_t
)0x00000004)

	)

5961 
	#RNG_CR_IE
 ((
uöt32_t
)0x00000008)

	)

5964 
	#RNG_SR_DRDY
 ((
uöt32_t
)0x00000001)

	)

5965 
	#RNG_SR_CECS
 ((
uöt32_t
)0x00000002)

	)

5966 
	#RNG_SR_SECS
 ((
uöt32_t
)0x00000004)

	)

5967 
	#RNG_SR_CEIS
 ((
uöt32_t
)0x00000020)

	)

5968 
	#RNG_SR_SEIS
 ((
uöt32_t
)0x00000040)

	)

5976 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

5977 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

5978 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

5979 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

5980 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

5981 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

5982 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

5983 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

5984 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

5985 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

5986 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

5987 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

5988 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

5989 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

5990 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

5991 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

5992 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

5993 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

5994 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

5995 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

5996 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

5997 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

5998 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

5999 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6000 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6001 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6002 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6005 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

6006 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

6007 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

6008 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

6009 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

6010 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

6011 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

6012 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

6013 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

6014 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

6015 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

6016 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

6017 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

6018 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

6019 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

6020 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

6021 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

6022 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

6023 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

6024 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

6025 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

6026 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

6027 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

6028 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

6029 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

6030 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

6031 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

6032 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

6035 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

6036 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

6037 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

6038 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

6039 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

6040 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

6041 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

6042 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

6043 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

6044 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

6045 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

6046 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

6047 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

6048 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

6049 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

6050 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

6051 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

6052 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

6053 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

6054 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

6055 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

6056 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

6057 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

6058 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

6059 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

6060 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

6063 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

6064 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

6065 
	#RTC_ISR_TAMP2F
 ((
uöt32_t
)0x00004000)

	)

6066 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

6067 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

6068 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

6069 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

6070 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

6071 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

6072 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

6073 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

6074 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

6075 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

6076 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

6077 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

6078 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

6081 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

6082 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00007FFF)

	)

6085 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

6088 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

6089 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

6092 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

6093 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

6094 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

6095 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

6096 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

6097 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

6098 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

6099 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

6100 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

6101 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

6102 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

6103 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

6104 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

6105 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

6106 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

6107 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

6108 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

6109 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

6110 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

6111 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

6112 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

6113 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

6114 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

6115 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

6116 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

6117 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

6118 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

6119 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

6120 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

6121 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

6122 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

6123 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

6124 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

6125 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

6126 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

6127 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

6128 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6129 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6130 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6131 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6134 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

6135 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

6136 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

6137 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

6138 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

6139 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

6140 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

6141 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

6142 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

6143 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

6144 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

6145 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

6146 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

6147 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

6148 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

6149 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

6150 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

6151 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

6152 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

6153 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

6154 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

6155 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

6156 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

6157 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

6158 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

6159 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

6160 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

6161 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

6162 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

6163 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

6164 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

6165 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

6166 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

6167 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

6168 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

6169 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

6170 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6171 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6172 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6173 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6176 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

6179 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

6182 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

6183 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

6186 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

6187 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

6188 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

6189 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

6190 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

6191 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

6192 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

6193 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

6194 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

6195 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

6196 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

6197 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

6198 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

6199 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

6200 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

6201 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

6202 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

6203 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

6204 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

6205 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

6206 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

6207 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

6208 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

6209 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6210 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6211 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6212 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6215 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

6216 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

6217 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

6218 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

6219 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

6220 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

6221 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

6222 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

6223 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

6224 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

6225 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

6226 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

6227 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

6228 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

6229 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

6230 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

6231 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

6232 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

6235 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

6238 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

6239 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

6240 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

6241 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

6242 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

6243 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

6244 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

6245 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

6246 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

6247 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

6248 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

6249 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

6250 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

6253 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

6254 
	#RTC_TAFCR_TSINSEL
 ((
uöt32_t
)0x00020000)

	)

6255 
	#RTC_TAFCR_TAMPINSEL
 ((
uöt32_t
)0x00010000)

	)

6256 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

6257 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

6258 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

6259 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

6260 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

6261 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

6262 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

6263 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

6264 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

6265 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

6266 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

6267 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

6268 
	#RTC_TAFCR_TAMP2TRG
 ((
uöt32_t
)0x00000010)

	)

6269 
	#RTC_TAFCR_TAMP2E
 ((
uöt32_t
)0x00000008)

	)

6270 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

6271 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

6272 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

6275 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

6276 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

6277 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

6278 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

6279 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

6280 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

6283 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

6284 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

6285 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

6286 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

6287 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

6288 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

6291 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6294 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6297 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6300 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6303 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6306 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6309 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6312 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6315 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6318 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6321 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6324 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6327 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6330 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6333 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6336 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6339 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6342 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6345 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6348 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6356 
	#SAI_GCR_SYNCIN
 ((
uöt32_t
)0x00000003Ë

	)

6357 
	#SAI_GCR_SYNCIN_0
 ((
uöt32_t
)0x00000001Ë

	)

6358 
	#SAI_GCR_SYNCIN_1
 ((
uöt32_t
)0x00000002Ë

	)

6360 
	#SAI_GCR_SYNCOUT
 ((
uöt32_t
)0x00000030Ë

	)

6361 
	#SAI_GCR_SYNCOUT_0
 ((
uöt32_t
)0x00000010Ë

	)

6362 
	#SAI_GCR_SYNCOUT_1
 ((
uöt32_t
)0x00000020Ë

	)

6365 
	#SAI_xCR1_MODE
 ((
uöt32_t
)0x00000003Ë

	)

6366 
	#SAI_xCR1_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

6367 
	#SAI_xCR1_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

6369 
	#SAI_xCR1_PRTCFG
 ((
uöt32_t
)0x0000000CË

	)

6370 
	#SAI_xCR1_PRTCFG_0
 ((
uöt32_t
)0x00000004Ë

	)

6371 
	#SAI_xCR1_PRTCFG_1
 ((
uöt32_t
)0x00000008Ë

	)

6373 
	#SAI_xCR1_DS
 ((
uöt32_t
)0x000000E0Ë

	)

6374 
	#SAI_xCR1_DS_0
 ((
uöt32_t
)0x00000020Ë

	)

6375 
	#SAI_xCR1_DS_1
 ((
uöt32_t
)0x00000040Ë

	)

6376 
	#SAI_xCR1_DS_2
 ((
uöt32_t
)0x00000080Ë

	)

6378 
	#SAI_xCR1_LSBFIRST
 ((
uöt32_t
)0x00000100Ë

	)

6379 
	#SAI_xCR1_CKSTR
 ((
uöt32_t
)0x00000200Ë

	)

6381 
	#SAI_xCR1_SYNCEN
 ((
uöt32_t
)0x00000C00Ë

	)

6382 
	#SAI_xCR1_SYNCEN_0
 ((
uöt32_t
)0x00000400Ë

	)

6383 
	#SAI_xCR1_SYNCEN_1
 ((
uöt32_t
)0x00000800Ë

	)

6385 
	#SAI_xCR1_MONO
 ((
uöt32_t
)0x00001000Ë

	)

6386 
	#SAI_xCR1_OUTDRIV
 ((
uöt32_t
)0x00002000Ë

	)

6387 
	#SAI_xCR1_SAIEN
 ((
uöt32_t
)0x00010000Ë

	)

6388 
	#SAI_xCR1_DMAEN
 ((
uöt32_t
)0x00020000Ë

	)

6389 
	#SAI_xCR1_NODIV
 ((
uöt32_t
)0x00080000Ë

	)

6391 
	#SAI_xCR1_MCKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

6392 
	#SAI_xCR1_MCKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

6393 
	#SAI_xCR1_MCKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

6394 
	#SAI_xCR1_MCKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

6395 
	#SAI_xCR1_MCKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

6398 
	#SAI_xCR2_FTH
 ((
uöt32_t
)0x00000007Ë

	)

6399 
	#SAI_xCR2_FTH_0
 ((
uöt32_t
)0x00000001Ë

	)

6400 
	#SAI_xCR2_FTH_1
 ((
uöt32_t
)0x00000002Ë

	)

6401 
	#SAI_xCR2_FTH_2
 ((
uöt32_t
)0x00000004Ë

	)

6403 
	#SAI_xCR2_FFLUSH
 ((
uöt32_t
)0x00000008Ë

	)

6404 
	#SAI_xCR2_TRIS
 ((
uöt32_t
)0x00000010Ë

	)

6405 
	#SAI_xCR2_MUTE
 ((
uöt32_t
)0x00000020Ë

	)

6406 
	#SAI_xCR2_MUTEVAL
 ((
uöt32_t
)0x00000040Ë

	)

6408 
	#SAI_xCR2_MUTECNT
 ((
uöt32_t
)0x00001F80Ë

	)

6409 
	#SAI_xCR2_MUTECNT_0
 ((
uöt32_t
)0x00000080Ë

	)

6410 
	#SAI_xCR2_MUTECNT_1
 ((
uöt32_t
)0x00000100Ë

	)

6411 
	#SAI_xCR2_MUTECNT_2
 ((
uöt32_t
)0x00000200Ë

	)

6412 
	#SAI_xCR2_MUTECNT_3
 ((
uöt32_t
)0x00000400Ë

	)

6413 
	#SAI_xCR2_MUTECNT_4
 ((
uöt32_t
)0x00000800Ë

	)

6414 
	#SAI_xCR2_MUTECNT_5
 ((
uöt32_t
)0x00001000Ë

	)

6416 
	#SAI_xCR2_CPL
 ((
uöt32_t
)0x00080000Ë

	)

6418 
	#SAI_xCR2_COMP
 ((
uöt32_t
)0x0000C000Ë

	)

6419 
	#SAI_xCR2_COMP_0
 ((
uöt32_t
)0x00004000Ë

	)

6420 
	#SAI_xCR2_COMP_1
 ((
uöt32_t
)0x00008000Ë

	)

6423 
	#SAI_xFRCR_FRL
 ((
uöt32_t
)0x000000FFË

	)

6424 
	#SAI_xFRCR_FRL_0
 ((
uöt32_t
)0x00000001Ë

	)

6425 
	#SAI_xFRCR_FRL_1
 ((
uöt32_t
)0x00000002Ë

	)

6426 
	#SAI_xFRCR_FRL_2
 ((
uöt32_t
)0x00000004Ë

	)

6427 
	#SAI_xFRCR_FRL_3
 ((
uöt32_t
)0x00000008Ë

	)

6428 
	#SAI_xFRCR_FRL_4
 ((
uöt32_t
)0x00000010Ë

	)

6429 
	#SAI_xFRCR_FRL_5
 ((
uöt32_t
)0x00000020Ë

	)

6430 
	#SAI_xFRCR_FRL_6
 ((
uöt32_t
)0x00000040Ë

	)

6431 
	#SAI_xFRCR_FRL_7
 ((
uöt32_t
)0x00000080Ë

	)

6433 
	#SAI_xFRCR_FSALL
 ((
uöt32_t
)0x00007F00Ë

	)

6434 
	#SAI_xFRCR_FSALL_0
 ((
uöt32_t
)0x00000100Ë

	)

6435 
	#SAI_xFRCR_FSALL_1
 ((
uöt32_t
)0x00000200Ë

	)

6436 
	#SAI_xFRCR_FSALL_2
 ((
uöt32_t
)0x00000400Ë

	)

6437 
	#SAI_xFRCR_FSALL_3
 ((
uöt32_t
)0x00000800Ë

	)

6438 
	#SAI_xFRCR_FSALL_4
 ((
uöt32_t
)0x00001000Ë

	)

6439 
	#SAI_xFRCR_FSALL_5
 ((
uöt32_t
)0x00002000Ë

	)

6440 
	#SAI_xFRCR_FSALL_6
 ((
uöt32_t
)0x00004000Ë

	)

6442 
	#SAI_xFRCR_FSDEF
 ((
uöt32_t
)0x00010000Ë

	)

6443 
	#SAI_xFRCR_FSPO
 ((
uöt32_t
)0x00020000Ë

	)

6444 
	#SAI_xFRCR_FSOFF
 ((
uöt32_t
)0x00040000Ë

	)

6447 
	#SAI_xSLOTR_FBOFF
 ((
uöt32_t
)0x0000001FË

	)

6448 
	#SAI_xSLOTR_FBOFF_0
 ((
uöt32_t
)0x00000001Ë

	)

6449 
	#SAI_xSLOTR_FBOFF_1
 ((
uöt32_t
)0x00000002Ë

	)

6450 
	#SAI_xSLOTR_FBOFF_2
 ((
uöt32_t
)0x00000004Ë

	)

6451 
	#SAI_xSLOTR_FBOFF_3
 ((
uöt32_t
)0x00000008Ë

	)

6452 
	#SAI_xSLOTR_FBOFF_4
 ((
uöt32_t
)0x00000010Ë

	)

6454 
	#SAI_xSLOTR_SLOTSZ
 ((
uöt32_t
)0x000000C0Ë

	)

6455 
	#SAI_xSLOTR_SLOTSZ_0
 ((
uöt32_t
)0x00000040Ë

	)

6456 
	#SAI_xSLOTR_SLOTSZ_1
 ((
uöt32_t
)0x00000080Ë

	)

6458 
	#SAI_xSLOTR_NBSLOT
 ((
uöt32_t
)0x00000F00Ë

	)

6459 
	#SAI_xSLOTR_NBSLOT_0
 ((
uöt32_t
)0x00000100Ë

	)

6460 
	#SAI_xSLOTR_NBSLOT_1
 ((
uöt32_t
)0x00000200Ë

	)

6461 
	#SAI_xSLOTR_NBSLOT_2
 ((
uöt32_t
)0x00000400Ë

	)

6462 
	#SAI_xSLOTR_NBSLOT_3
 ((
uöt32_t
)0x00000800Ë

	)

6464 
	#SAI_xSLOTR_SLOTEN
 ((
uöt32_t
)0xFFFF0000Ë

	)

6467 
	#SAI_xIMR_OVRUDRIE
 ((
uöt32_t
)0x00000001Ë

	)

6468 
	#SAI_xIMR_MUTEDETIE
 ((
uöt32_t
)0x00000002Ë

	)

6469 
	#SAI_xIMR_WCKCFGIE
 ((
uöt32_t
)0x00000004Ë

	)

6470 
	#SAI_xIMR_FREQIE
 ((
uöt32_t
)0x00000008Ë

	)

6471 
	#SAI_xIMR_CNRDYIE
 ((
uöt32_t
)0x00000010Ë

	)

6472 
	#SAI_xIMR_AFSDETIE
 ((
uöt32_t
)0x00000020Ë

	)

6473 
	#SAI_xIMR_LFSDETIE
 ((
uöt32_t
)0x00000040Ë

	)

6476 
	#SAI_xSR_OVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

6477 
	#SAI_xSR_MUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

6478 
	#SAI_xSR_WCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

6479 
	#SAI_xSR_FREQ
 ((
uöt32_t
)0x00000008Ë

	)

6480 
	#SAI_xSR_CNRDY
 ((
uöt32_t
)0x00000010Ë

	)

6481 
	#SAI_xSR_AFSDET
 ((
uöt32_t
)0x00000020Ë

	)

6482 
	#SAI_xSR_LFSDET
 ((
uöt32_t
)0x00000040Ë

	)

6484 
	#SAI_xSR_FLVL
 ((
uöt32_t
)0x00070000Ë

	)

6485 
	#SAI_xSR_FLVL_0
 ((
uöt32_t
)0x00010000Ë

	)

6486 
	#SAI_xSR_FLVL_1
 ((
uöt32_t
)0x00020000Ë

	)

6487 
	#SAI_xSR_FLVL_2
 ((
uöt32_t
)0x00040000Ë

	)

6490 
	#SAI_xCLRFR_COVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

6491 
	#SAI_xCLRFR_CMUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

6492 
	#SAI_xCLRFR_CWCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

6493 
	#SAI_xCLRFR_CFREQ
 ((
uöt32_t
)0x00000008Ë

	)

6494 
	#SAI_xCLRFR_CCNRDY
 ((
uöt32_t
)0x00000010Ë

	)

6495 
	#SAI_xCLRFR_CAFSDET
 ((
uöt32_t
)0x00000020Ë

	)

6496 
	#SAI_xCLRFR_CLFSDET
 ((
uöt32_t
)0x00000040Ë

	)

6499 
	#SAI_xDR_DATA
 ((
uöt32_t
)0xFFFFFFFF)

	)

6508 
	#SDIO_POWER_PWRCTRL
 ((
uöt32_t
)0x03Ë

	)

6509 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt32_t
)0x01Ë

	)

6510 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt32_t
)0x02Ë

	)

6513 
	#SDIO_CLKCR_CLKDIV
 ((
uöt32_t
)0x00FFË

	)

6514 
	#SDIO_CLKCR_CLKEN
 ((
uöt32_t
)0x0100Ë

	)

6515 
	#SDIO_CLKCR_PWRSAV
 ((
uöt32_t
)0x0200Ë

	)

6516 
	#SDIO_CLKCR_BYPASS
 ((
uöt32_t
)0x0400Ë

	)

6518 
	#SDIO_CLKCR_WIDBUS
 ((
uöt32_t
)0x1800Ë

	)

6519 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt32_t
)0x0800Ë

	)

6520 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt32_t
)0x1000Ë

	)

6522 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt32_t
)0x2000Ë

	)

6523 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt32_t
)0x4000Ë

	)

6526 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

6529 
	#SDIO_CMD_CMDINDEX
 ((
uöt32_t
)0x003FË

	)

6531 
	#SDIO_CMD_WAITRESP
 ((
uöt32_t
)0x00C0Ë

	)

6532 
	#SDIO_CMD_WAITRESP_0
 ((
uöt32_t
)0x0040Ë

	)

6533 
	#SDIO_CMD_WAITRESP_1
 ((
uöt32_t
)0x0080Ë

	)

6535 
	#SDIO_CMD_WAITINT
 ((
uöt32_t
)0x0100Ë

	)

6536 
	#SDIO_CMD_WAITPEND
 ((
uöt32_t
)0x0200Ë

	)

6537 
	#SDIO_CMD_CPSMEN
 ((
uöt32_t
)0x0400Ë

	)

6538 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt32_t
)0x0800Ë

	)

6539 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt32_t
)0x1000Ë

	)

6540 
	#SDIO_CMD_NIEN
 ((
uöt32_t
)0x2000Ë

	)

6541 
	#SDIO_CMD_CEATACMD
 ((
uöt32_t
)0x4000Ë

	)

6544 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt32_t
)0x3FË

	)

6547 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

6550 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

6553 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

6556 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

6559 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

6562 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

6565 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

6568 
	#SDIO_DCTRL_DTEN
 ((
uöt32_t
)0x0001Ë

	)

6569 
	#SDIO_DCTRL_DTDIR
 ((
uöt32_t
)0x0002Ë

	)

6570 
	#SDIO_DCTRL_DTMODE
 ((
uöt32_t
)0x0004Ë

	)

6571 
	#SDIO_DCTRL_DMAEN
 ((
uöt32_t
)0x0008Ë

	)

6573 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt32_t
)0x00F0Ë

	)

6574 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt32_t
)0x0010Ë

	)

6575 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt32_t
)0x0020Ë

	)

6576 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt32_t
)0x0040Ë

	)

6577 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt32_t
)0x0080Ë

	)

6579 
	#SDIO_DCTRL_RWSTART
 ((
uöt32_t
)0x0100Ë

	)

6580 
	#SDIO_DCTRL_RWSTOP
 ((
uöt32_t
)0x0200Ë

	)

6581 
	#SDIO_DCTRL_RWMOD
 ((
uöt32_t
)0x0400Ë

	)

6582 
	#SDIO_DCTRL_SDIOEN
 ((
uöt32_t
)0x0800Ë

	)

6585 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

6588 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

6589 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

6590 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

6591 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

6592 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

6593 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

6594 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

6595 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

6596 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

6597 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

6598 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

6599 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

6600 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

6601 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

6602 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

6603 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

6604 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

6605 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

6606 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

6607 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

6608 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

6609 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

6610 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

6611 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

6614 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

6615 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

6616 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

6617 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

6618 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

6619 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

6620 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

6621 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

6622 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

6623 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

6624 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

6625 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

6626 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

6629 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

6630 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

6631 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

6632 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

6633 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

6634 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

6635 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

6636 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

6637 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

6638 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

6639 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

6640 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

6641 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

6642 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

6643 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

6644 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

6645 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

6646 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

6647 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

6648 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

6649 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

6650 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

6651 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

6652 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

6655 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

6658 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

6666 
	#SPI_CR1_CPHA
 ((
uöt32_t
)0x00000001Ë

	)

6667 
	#SPI_CR1_CPOL
 ((
uöt32_t
)0x00000002Ë

	)

6668 
	#SPI_CR1_MSTR
 ((
uöt32_t
)0x00000004Ë

	)

6670 
	#SPI_CR1_BR
 ((
uöt32_t
)0x00000038Ë

	)

6671 
	#SPI_CR1_BR_0
 ((
uöt32_t
)0x00000008Ë

	)

6672 
	#SPI_CR1_BR_1
 ((
uöt32_t
)0x00000010Ë

	)

6673 
	#SPI_CR1_BR_2
 ((
uöt32_t
)0x00000020Ë

	)

6675 
	#SPI_CR1_SPE
 ((
uöt32_t
)0x00000040Ë

	)

6676 
	#SPI_CR1_LSBFIRST
 ((
uöt32_t
)0x00000080Ë

	)

6677 
	#SPI_CR1_SSI
 ((
uöt32_t
)0x00000100Ë

	)

6678 
	#SPI_CR1_SSM
 ((
uöt32_t
)0x00000200Ë

	)

6679 
	#SPI_CR1_RXONLY
 ((
uöt32_t
)0x00000400Ë

	)

6680 
	#SPI_CR1_DFF
 ((
uöt32_t
)0x00000800Ë

	)

6681 
	#SPI_CR1_CRCNEXT
 ((
uöt32_t
)0x00001000Ë

	)

6682 
	#SPI_CR1_CRCEN
 ((
uöt32_t
)0x00002000Ë

	)

6683 
	#SPI_CR1_BIDIOE
 ((
uöt32_t
)0x00004000Ë

	)

6684 
	#SPI_CR1_BIDIMODE
 ((
uöt32_t
)0x00008000Ë

	)

6687 
	#SPI_CR2_RXDMAEN
 ((
uöt32_t
)0x00000001Ë

	)

6688 
	#SPI_CR2_TXDMAEN
 ((
uöt32_t
)0x00000002Ë

	)

6689 
	#SPI_CR2_SSOE
 ((
uöt32_t
)0x00000004Ë

	)

6690 
	#SPI_CR2_FRF
 ((
uöt32_t
)0x00000010Ë

	)

6691 
	#SPI_CR2_ERRIE
 ((
uöt32_t
)0x00000020Ë

	)

6692 
	#SPI_CR2_RXNEIE
 ((
uöt32_t
)0x00000040Ë

	)

6693 
	#SPI_CR2_TXEIE
 ((
uöt32_t
)0x00000080Ë

	)

6696 
	#SPI_SR_RXNE
 ((
uöt32_t
)0x00000001Ë

	)

6697 
	#SPI_SR_TXE
 ((
uöt32_t
)0x00000002Ë

	)

6698 
	#SPI_SR_CHSIDE
 ((
uöt32_t
)0x00000004Ë

	)

6699 
	#SPI_SR_UDR
 ((
uöt32_t
)0x00000008Ë

	)

6700 
	#SPI_SR_CRCERR
 ((
uöt32_t
)0x00000010Ë

	)

6701 
	#SPI_SR_MODF
 ((
uöt32_t
)0x00000020Ë

	)

6702 
	#SPI_SR_OVR
 ((
uöt32_t
)0x00000040Ë

	)

6703 
	#SPI_SR_BSY
 ((
uöt32_t
)0x00000080Ë

	)

6704 
	#SPI_SR_FRE
 ((
uöt32_t
)0x00000100Ë

	)

6707 
	#SPI_DR_DR
 ((
uöt32_t
)0x0000FFFFË

	)

6710 
	#SPI_CRCPR_CRCPOLY
 ((
uöt32_t
)0x0000FFFFË

	)

6713 
	#SPI_RXCRCR_RXCRC
 ((
uöt32_t
)0x0000FFFFË

	)

6716 
	#SPI_TXCRCR_TXCRC
 ((
uöt32_t
)0x0000FFFFË

	)

6719 
	#SPI_I2SCFGR_CHLEN
 ((
uöt32_t
)0x00000001Ë

	)

6721 
	#SPI_I2SCFGR_DATLEN
 ((
uöt32_t
)0x00000006Ë

	)

6722 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt32_t
)0x00000002Ë

	)

6723 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt32_t
)0x00000004Ë

	)

6725 
	#SPI_I2SCFGR_CKPOL
 ((
uöt32_t
)0x00000008Ë

	)

6727 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt32_t
)0x00000030Ë

	)

6728 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt32_t
)0x00000010Ë

	)

6729 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt32_t
)0x00000020Ë

	)

6731 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt32_t
)0x00000080Ë

	)

6733 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt32_t
)0x00000300Ë

	)

6734 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt32_t
)0x00000100Ë

	)

6735 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt32_t
)0x00000200Ë

	)

6737 
	#SPI_I2SCFGR_I2SE
 ((
uöt32_t
)0x00000400Ë

	)

6738 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt32_t
)0x00000800Ë

	)

6741 
	#SPI_I2SPR_I2SDIV
 ((
uöt32_t
)0x000000FFË

	)

6742 
	#SPI_I2SPR_ODD
 ((
uöt32_t
)0x00000100Ë

	)

6743 
	#SPI_I2SPR_MCKOE
 ((
uöt32_t
)0x00000200Ë

	)

6751 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000007Ë

	)

6752 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001)

	)

6753 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002)

	)

6754 
	#SYSCFG_MEMRMP_MEM_MODE_2
 ((
uöt32_t
)0x00000004)

	)

6756 
	#SYSCFG_MEMRMP_UFB_MODE
 ((
uöt32_t
)0x00000100Ë

	)

6757 
	#SYSCFG_SWP_FMC
 ((
uöt32_t
)0x00000C00Ë

	)

6760 
	#SYSCFG_PMC_ADCxDC2
 ((
uöt32_t
)0x00070000Ë

	)

6761 
	#SYSCFG_PMC_ADC1DC2
 ((
uöt32_t
)0x00010000Ë

	)

6762 
	#SYSCFG_PMC_ADC2DC2
 ((
uöt32_t
)0x00020000Ë

	)

6763 
	#SYSCFG_PMC_ADC3DC2
 ((
uöt32_t
)0x00040000Ë

	)

6765 
	#SYSCFG_PMC_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

6767 
	#SYSCFG_PMC_MII_RMII
 
SYSCFG_PMC_MII_RMII_SEL


	)

6770 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt32_t
)0x000FË

	)

6771 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt32_t
)0x00F0Ë

	)

6772 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt32_t
)0x0F00Ë

	)

6773 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt32_t
)0xF000Ë

	)

6777 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt32_t
)0x0000Ë

	)

6778 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt32_t
)0x0001Ë

	)

6779 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt32_t
)0x0002Ë

	)

6780 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt32_t
)0x0003Ë

	)

6781 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt32_t
)0x0004Ë

	)

6782 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt32_t
)0x0005Ë

	)

6783 
	#SYSCFG_EXTICR1_EXTI0_PG
 ((
uöt32_t
)0x0006Ë

	)

6784 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt32_t
)0x0007Ë

	)

6785 
	#SYSCFG_EXTICR1_EXTI0_PI
 ((
uöt32_t
)0x0008Ë

	)

6786 
	#SYSCFG_EXTICR1_EXTI0_PJ
 ((
uöt32_t
)0x0009Ë

	)

6787 
	#SYSCFG_EXTICR1_EXTI0_PK
 ((
uöt32_t
)0x000AË

	)

6792 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt32_t
)0x0000Ë

	)

6793 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt32_t
)0x0010Ë

	)

6794 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt32_t
)0x0020Ë

	)

6795 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt32_t
)0x0030Ë

	)

6796 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt32_t
)0x0040Ë

	)

6797 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt32_t
)0x0050Ë

	)

6798 
	#SYSCFG_EXTICR1_EXTI1_PG
 ((
uöt32_t
)0x0060Ë

	)

6799 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt32_t
)0x0070Ë

	)

6800 
	#SYSCFG_EXTICR1_EXTI1_PI
 ((
uöt32_t
)0x0080Ë

	)

6801 
	#SYSCFG_EXTICR1_EXTI1_PJ
 ((
uöt32_t
)0x0090Ë

	)

6802 
	#SYSCFG_EXTICR1_EXTI1_PK
 ((
uöt32_t
)0x00A0Ë

	)

6808 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt32_t
)0x0000Ë

	)

6809 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt32_t
)0x0100Ë

	)

6810 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt32_t
)0x0200Ë

	)

6811 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt32_t
)0x0300Ë

	)

6812 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt32_t
)0x0400Ë

	)

6813 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt32_t
)0x0500Ë

	)

6814 
	#SYSCFG_EXTICR1_EXTI2_PG
 ((
uöt32_t
)0x0600Ë

	)

6815 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt32_t
)0x0700Ë

	)

6816 
	#SYSCFG_EXTICR1_EXTI2_PI
 ((
uöt32_t
)0x0800Ë

	)

6817 
	#SYSCFG_EXTICR1_EXTI2_PJ
 ((
uöt32_t
)0x0900Ë

	)

6818 
	#SYSCFG_EXTICR1_EXTI2_PK
 ((
uöt32_t
)0x0A00Ë

	)

6824 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt32_t
)0x0000Ë

	)

6825 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt32_t
)0x1000Ë

	)

6826 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt32_t
)0x2000Ë

	)

6827 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt32_t
)0x3000Ë

	)

6828 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt32_t
)0x4000Ë

	)

6829 
	#SYSCFG_EXTICR1_EXTI3_PF
 ((
uöt32_t
)0x5000Ë

	)

6830 
	#SYSCFG_EXTICR1_EXTI3_PG
 ((
uöt32_t
)0x6000Ë

	)

6831 
	#SYSCFG_EXTICR1_EXTI3_PH
 ((
uöt32_t
)0x7000Ë

	)

6832 
	#SYSCFG_EXTICR1_EXTI3_PI
 ((
uöt32_t
)0x8000Ë

	)

6833 
	#SYSCFG_EXTICR1_EXTI3_PJ
 ((
uöt32_t
)0x9000Ë

	)

6834 
	#SYSCFG_EXTICR1_EXTI3_PK
 ((
uöt32_t
)0xA000Ë

	)

6838 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt32_t
)0x000FË

	)

6839 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt32_t
)0x00F0Ë

	)

6840 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt32_t
)0x0F00Ë

	)

6841 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt32_t
)0xF000Ë

	)

6845 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt32_t
)0x0000Ë

	)

6846 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt32_t
)0x0001Ë

	)

6847 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt32_t
)0x0002Ë

	)

6848 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt32_t
)0x0003Ë

	)

6849 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt32_t
)0x0004Ë

	)

6850 
	#SYSCFG_EXTICR2_EXTI4_PF
 ((
uöt32_t
)0x0005Ë

	)

6851 
	#SYSCFG_EXTICR2_EXTI4_PG
 ((
uöt32_t
)0x0006Ë

	)

6852 
	#SYSCFG_EXTICR2_EXTI4_PH
 ((
uöt32_t
)0x0007Ë

	)

6853 
	#SYSCFG_EXTICR2_EXTI4_PI
 ((
uöt32_t
)0x0008Ë

	)

6854 
	#SYSCFG_EXTICR2_EXTI4_PJ
 ((
uöt32_t
)0x0009Ë

	)

6855 
	#SYSCFG_EXTICR2_EXTI4_PK
 ((
uöt32_t
)0x000AË

	)

6860 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt32_t
)0x0000Ë

	)

6861 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt32_t
)0x0010Ë

	)

6862 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt32_t
)0x0020Ë

	)

6863 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt32_t
)0x0030Ë

	)

6864 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt32_t
)0x0040Ë

	)

6865 
	#SYSCFG_EXTICR2_EXTI5_PF
 ((
uöt32_t
)0x0050Ë

	)

6866 
	#SYSCFG_EXTICR2_EXTI5_PG
 ((
uöt32_t
)0x0060Ë

	)

6867 
	#SYSCFG_EXTICR2_EXTI5_PH
 ((
uöt32_t
)0x0070Ë

	)

6868 
	#SYSCFG_EXTICR2_EXTI5_PI
 ((
uöt32_t
)0x0080Ë

	)

6869 
	#SYSCFG_EXTICR2_EXTI5_PJ
 ((
uöt32_t
)0x0090Ë

	)

6870 
	#SYSCFG_EXTICR2_EXTI5_PK
 ((
uöt32_t
)0x00A0Ë

	)

6875 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt32_t
)0x0000Ë

	)

6876 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt32_t
)0x0100Ë

	)

6877 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt32_t
)0x0200Ë

	)

6878 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt32_t
)0x0300Ë

	)

6879 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt32_t
)0x0400Ë

	)

6880 
	#SYSCFG_EXTICR2_EXTI6_PF
 ((
uöt32_t
)0x0500Ë

	)

6881 
	#SYSCFG_EXTICR2_EXTI6_PG
 ((
uöt32_t
)0x0600Ë

	)

6882 
	#SYSCFG_EXTICR2_EXTI6_PH
 ((
uöt32_t
)0x0700Ë

	)

6883 
	#SYSCFG_EXTICR2_EXTI6_PI
 ((
uöt32_t
)0x0800Ë

	)

6884 
	#SYSCFG_EXTICR2_EXTI6_PJ
 ((
uöt32_t
)0x0900Ë

	)

6885 
	#SYSCFG_EXTICR2_EXTI6_PK
 ((
uöt32_t
)0x0A00Ë

	)

6891 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt32_t
)0x0000Ë

	)

6892 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt32_t
)0x1000Ë

	)

6893 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt32_t
)0x2000Ë

	)

6894 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt32_t
)0x3000Ë

	)

6895 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt32_t
)0x4000Ë

	)

6896 
	#SYSCFG_EXTICR2_EXTI7_PF
 ((
uöt32_t
)0x5000Ë

	)

6897 
	#SYSCFG_EXTICR2_EXTI7_PG
 ((
uöt32_t
)0x6000Ë

	)

6898 
	#SYSCFG_EXTICR2_EXTI7_PH
 ((
uöt32_t
)0x7000Ë

	)

6899 
	#SYSCFG_EXTICR2_EXTI7_PI
 ((
uöt32_t
)0x8000Ë

	)

6900 
	#SYSCFG_EXTICR2_EXTI7_PJ
 ((
uöt32_t
)0x9000Ë

	)

6901 
	#SYSCFG_EXTICR2_EXTI7_PK
 ((
uöt32_t
)0xA000Ë

	)

6904 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt32_t
)0x000FË

	)

6905 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt32_t
)0x00F0Ë

	)

6906 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt32_t
)0x0F00Ë

	)

6907 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt32_t
)0xF000Ë

	)

6912 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt32_t
)0x0000Ë

	)

6913 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt32_t
)0x0001Ë

	)

6914 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt32_t
)0x0002Ë

	)

6915 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt32_t
)0x0003Ë

	)

6916 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt32_t
)0x0004Ë

	)

6917 
	#SYSCFG_EXTICR3_EXTI8_PF
 ((
uöt32_t
)0x0005Ë

	)

6918 
	#SYSCFG_EXTICR3_EXTI8_PG
 ((
uöt32_t
)0x0006Ë

	)

6919 
	#SYSCFG_EXTICR3_EXTI8_PH
 ((
uöt32_t
)0x0007Ë

	)

6920 
	#SYSCFG_EXTICR3_EXTI8_PI
 ((
uöt32_t
)0x0008Ë

	)

6921 
	#SYSCFG_EXTICR3_EXTI8_PJ
 ((
uöt32_t
)0x0009Ë

	)

6926 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt32_t
)0x0000Ë

	)

6927 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt32_t
)0x0010Ë

	)

6928 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt32_t
)0x0020Ë

	)

6929 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt32_t
)0x0030Ë

	)

6930 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt32_t
)0x0040Ë

	)

6931 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt32_t
)0x0050Ë

	)

6932 
	#SYSCFG_EXTICR3_EXTI9_PG
 ((
uöt32_t
)0x0060Ë

	)

6933 
	#SYSCFG_EXTICR3_EXTI9_PH
 ((
uöt32_t
)0x0070Ë

	)

6934 
	#SYSCFG_EXTICR3_EXTI9_PI
 ((
uöt32_t
)0x0080Ë

	)

6935 
	#SYSCFG_EXTICR3_EXTI9_PJ
 ((
uöt32_t
)0x0090Ë

	)

6941 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt32_t
)0x0000Ë

	)

6942 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt32_t
)0x0100Ë

	)

6943 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt32_t
)0x0200Ë

	)

6944 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt32_t
)0x0300Ë

	)

6945 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt32_t
)0x0400Ë

	)

6946 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt32_t
)0x0500Ë

	)

6947 
	#SYSCFG_EXTICR3_EXTI10_PG
 ((
uöt32_t
)0x0600Ë

	)

6948 
	#SYSCFG_EXTICR3_EXTI10_PH
 ((
uöt32_t
)0x0700Ë

	)

6949 
	#SYSCFG_EXTICR3_EXTI10_PI
 ((
uöt32_t
)0x0800Ë

	)

6950 
	#SYSCFG_EXTICR3_EXTI10_PJ
 ((
uöt32_t
)0x0900Ë

	)

6956 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt32_t
)0x0000Ë

	)

6957 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt32_t
)0x1000Ë

	)

6958 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt32_t
)0x2000Ë

	)

6959 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt32_t
)0x3000Ë

	)

6960 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt32_t
)0x4000Ë

	)

6961 
	#SYSCFG_EXTICR3_EXTI11_PF
 ((
uöt32_t
)0x5000Ë

	)

6962 
	#SYSCFG_EXTICR3_EXTI11_PG
 ((
uöt32_t
)0x6000Ë

	)

6963 
	#SYSCFG_EXTICR3_EXTI11_PH
 ((
uöt32_t
)0x7000Ë

	)

6964 
	#SYSCFG_EXTICR3_EXTI11_PI
 ((
uöt32_t
)0x8000Ë

	)

6965 
	#SYSCFG_EXTICR3_EXTI11_PJ
 ((
uöt32_t
)0x9000Ë

	)

6969 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt32_t
)0x000FË

	)

6970 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt32_t
)0x00F0Ë

	)

6971 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt32_t
)0x0F00Ë

	)

6972 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt32_t
)0xF000Ë

	)

6976 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt32_t
)0x0000Ë

	)

6977 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt32_t
)0x0001Ë

	)

6978 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt32_t
)0x0002Ë

	)

6979 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt32_t
)0x0003Ë

	)

6980 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt32_t
)0x0004Ë

	)

6981 
	#SYSCFG_EXTICR4_EXTI12_PF
 ((
uöt32_t
)0x0005Ë

	)

6982 
	#SYSCFG_EXTICR4_EXTI12_PG
 ((
uöt32_t
)0x0006Ë

	)

6983 
	#SYSCFG_EXTICR4_EXTI12_PH
 ((
uöt32_t
)0x0007Ë

	)

6984 
	#SYSCFG_EXTICR4_EXTI12_PI
 ((
uöt32_t
)0x0008Ë

	)

6985 
	#SYSCFG_EXTICR4_EXTI12_PJ
 ((
uöt32_t
)0x0009Ë

	)

6991 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt32_t
)0x0000Ë

	)

6992 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt32_t
)0x0010Ë

	)

6993 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt32_t
)0x0020Ë

	)

6994 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt32_t
)0x0030Ë

	)

6995 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt32_t
)0x0040Ë

	)

6996 
	#SYSCFG_EXTICR4_EXTI13_PF
 ((
uöt32_t
)0x0050Ë

	)

6997 
	#SYSCFG_EXTICR4_EXTI13_PG
 ((
uöt32_t
)0x0060Ë

	)

6998 
	#SYSCFG_EXTICR4_EXTI13_PH
 ((
uöt32_t
)0x0070Ë

	)

6999 
	#SYSCFG_EXTICR4_EXTI13_PI
 ((
uöt32_t
)0x0008Ë

	)

7000 
	#SYSCFG_EXTICR4_EXTI13_PJ
 ((
uöt32_t
)0x0009Ë

	)

7006 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt32_t
)0x0000Ë

	)

7007 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt32_t
)0x0100Ë

	)

7008 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt32_t
)0x0200Ë

	)

7009 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt32_t
)0x0300Ë

	)

7010 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt32_t
)0x0400Ë

	)

7011 
	#SYSCFG_EXTICR4_EXTI14_PF
 ((
uöt32_t
)0x0500Ë

	)

7012 
	#SYSCFG_EXTICR4_EXTI14_PG
 ((
uöt32_t
)0x0600Ë

	)

7013 
	#SYSCFG_EXTICR4_EXTI14_PH
 ((
uöt32_t
)0x0700Ë

	)

7014 
	#SYSCFG_EXTICR4_EXTI14_PI
 ((
uöt32_t
)0x0800Ë

	)

7015 
	#SYSCFG_EXTICR4_EXTI14_PJ
 ((
uöt32_t
)0x0900Ë

	)

7021 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt32_t
)0x0000Ë

	)

7022 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt32_t
)0x1000Ë

	)

7023 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt32_t
)0x2000Ë

	)

7024 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt32_t
)0x3000Ë

	)

7025 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt32_t
)0x4000Ë

	)

7026 
	#SYSCFG_EXTICR4_EXTI15_PF
 ((
uöt32_t
)0x5000Ë

	)

7027 
	#SYSCFG_EXTICR4_EXTI15_PG
 ((
uöt32_t
)0x6000Ë

	)

7028 
	#SYSCFG_EXTICR4_EXTI15_PH
 ((
uöt32_t
)0x7000Ë

	)

7029 
	#SYSCFG_EXTICR4_EXTI15_PI
 ((
uöt32_t
)0x8000Ë

	)

7030 
	#SYSCFG_EXTICR4_EXTI15_PJ
 ((
uöt32_t
)0x9000Ë

	)

7033 
	#SYSCFG_CMPCR_CMP_PD
 ((
uöt32_t
)0x00000001Ë

	)

7034 
	#SYSCFG_CMPCR_READY
 ((
uöt32_t
)0x00000100Ë

	)

7042 
	#TIM_CR1_CEN
 ((
uöt32_t
)0x0001Ë

	)

7043 
	#TIM_CR1_UDIS
 ((
uöt32_t
)0x0002Ë

	)

7044 
	#TIM_CR1_URS
 ((
uöt32_t
)0x0004Ë

	)

7045 
	#TIM_CR1_OPM
 ((
uöt32_t
)0x0008Ë

	)

7046 
	#TIM_CR1_DIR
 ((
uöt32_t
)0x0010Ë

	)

7048 
	#TIM_CR1_CMS
 ((
uöt32_t
)0x0060Ë

	)

7049 
	#TIM_CR1_CMS_0
 ((
uöt32_t
)0x0020Ë

	)

7050 
	#TIM_CR1_CMS_1
 ((
uöt32_t
)0x0040Ë

	)

7052 
	#TIM_CR1_ARPE
 ((
uöt32_t
)0x0080Ë

	)

7054 
	#TIM_CR1_CKD
 ((
uöt32_t
)0x0300Ë

	)

7055 
	#TIM_CR1_CKD_0
 ((
uöt32_t
)0x0100Ë

	)

7056 
	#TIM_CR1_CKD_1
 ((
uöt32_t
)0x0200Ë

	)

7059 
	#TIM_CR2_CCPC
 ((
uöt32_t
)0x0001Ë

	)

7060 
	#TIM_CR2_CCUS
 ((
uöt32_t
)0x0004Ë

	)

7061 
	#TIM_CR2_CCDS
 ((
uöt32_t
)0x0008Ë

	)

7063 
	#TIM_CR2_MMS
 ((
uöt32_t
)0x0070Ë

	)

7064 
	#TIM_CR2_MMS_0
 ((
uöt32_t
)0x0010Ë

	)

7065 
	#TIM_CR2_MMS_1
 ((
uöt32_t
)0x0020Ë

	)

7066 
	#TIM_CR2_MMS_2
 ((
uöt32_t
)0x0040Ë

	)

7068 
	#TIM_CR2_TI1S
 ((
uöt32_t
)0x0080Ë

	)

7069 
	#TIM_CR2_OIS1
 ((
uöt32_t
)0x0100Ë

	)

7070 
	#TIM_CR2_OIS1N
 ((
uöt32_t
)0x0200Ë

	)

7071 
	#TIM_CR2_OIS2
 ((
uöt32_t
)0x0400Ë

	)

7072 
	#TIM_CR2_OIS2N
 ((
uöt32_t
)0x0800Ë

	)

7073 
	#TIM_CR2_OIS3
 ((
uöt32_t
)0x1000Ë

	)

7074 
	#TIM_CR2_OIS3N
 ((
uöt32_t
)0x2000Ë

	)

7075 
	#TIM_CR2_OIS4
 ((
uöt32_t
)0x4000Ë

	)

7078 
	#TIM_SMCR_SMS
 ((
uöt32_t
)0x0007Ë

	)

7079 
	#TIM_SMCR_SMS_0
 ((
uöt32_t
)0x0001Ë

	)

7080 
	#TIM_SMCR_SMS_1
 ((
uöt32_t
)0x0002Ë

	)

7081 
	#TIM_SMCR_SMS_2
 ((
uöt32_t
)0x0004Ë

	)

7083 
	#TIM_SMCR_TS
 ((
uöt32_t
)0x0070Ë

	)

7084 
	#TIM_SMCR_TS_0
 ((
uöt32_t
)0x0010Ë

	)

7085 
	#TIM_SMCR_TS_1
 ((
uöt32_t
)0x0020Ë

	)

7086 
	#TIM_SMCR_TS_2
 ((
uöt32_t
)0x0040Ë

	)

7088 
	#TIM_SMCR_MSM
 ((
uöt32_t
)0x0080Ë

	)

7090 
	#TIM_SMCR_ETF
 ((
uöt32_t
)0x0F00Ë

	)

7091 
	#TIM_SMCR_ETF_0
 ((
uöt32_t
)0x0100Ë

	)

7092 
	#TIM_SMCR_ETF_1
 ((
uöt32_t
)0x0200Ë

	)

7093 
	#TIM_SMCR_ETF_2
 ((
uöt32_t
)0x0400Ë

	)

7094 
	#TIM_SMCR_ETF_3
 ((
uöt32_t
)0x0800Ë

	)

7096 
	#TIM_SMCR_ETPS
 ((
uöt32_t
)0x3000Ë

	)

7097 
	#TIM_SMCR_ETPS_0
 ((
uöt32_t
)0x1000Ë

	)

7098 
	#TIM_SMCR_ETPS_1
 ((
uöt32_t
)0x2000Ë

	)

7100 
	#TIM_SMCR_ECE
 ((
uöt32_t
)0x4000Ë

	)

7101 
	#TIM_SMCR_ETP
 ((
uöt32_t
)0x8000Ë

	)

7104 
	#TIM_DIER_UIE
 ((
uöt32_t
)0x0001Ë

	)

7105 
	#TIM_DIER_CC1IE
 ((
uöt32_t
)0x0002Ë

	)

7106 
	#TIM_DIER_CC2IE
 ((
uöt32_t
)0x0004Ë

	)

7107 
	#TIM_DIER_CC3IE
 ((
uöt32_t
)0x0008Ë

	)

7108 
	#TIM_DIER_CC4IE
 ((
uöt32_t
)0x0010Ë

	)

7109 
	#TIM_DIER_COMIE
 ((
uöt32_t
)0x0020Ë

	)

7110 
	#TIM_DIER_TIE
 ((
uöt32_t
)0x0040Ë

	)

7111 
	#TIM_DIER_BIE
 ((
uöt32_t
)0x0080Ë

	)

7112 
	#TIM_DIER_UDE
 ((
uöt32_t
)0x0100Ë

	)

7113 
	#TIM_DIER_CC1DE
 ((
uöt32_t
)0x0200Ë

	)

7114 
	#TIM_DIER_CC2DE
 ((
uöt32_t
)0x0400Ë

	)

7115 
	#TIM_DIER_CC3DE
 ((
uöt32_t
)0x0800Ë

	)

7116 
	#TIM_DIER_CC4DE
 ((
uöt32_t
)0x1000Ë

	)

7117 
	#TIM_DIER_COMDE
 ((
uöt32_t
)0x2000Ë

	)

7118 
	#TIM_DIER_TDE
 ((
uöt32_t
)0x4000Ë

	)

7121 
	#TIM_SR_UIF
 ((
uöt32_t
)0x0001Ë

	)

7122 
	#TIM_SR_CC1IF
 ((
uöt32_t
)0x0002Ë

	)

7123 
	#TIM_SR_CC2IF
 ((
uöt32_t
)0x0004Ë

	)

7124 
	#TIM_SR_CC3IF
 ((
uöt32_t
)0x0008Ë

	)

7125 
	#TIM_SR_CC4IF
 ((
uöt32_t
)0x0010Ë

	)

7126 
	#TIM_SR_COMIF
 ((
uöt32_t
)0x0020Ë

	)

7127 
	#TIM_SR_TIF
 ((
uöt32_t
)0x0040Ë

	)

7128 
	#TIM_SR_BIF
 ((
uöt32_t
)0x0080Ë

	)

7129 
	#TIM_SR_CC1OF
 ((
uöt32_t
)0x0200Ë

	)

7130 
	#TIM_SR_CC2OF
 ((
uöt32_t
)0x0400Ë

	)

7131 
	#TIM_SR_CC3OF
 ((
uöt32_t
)0x0800Ë

	)

7132 
	#TIM_SR_CC4OF
 ((
uöt32_t
)0x1000Ë

	)

7135 
	#TIM_EGR_UG
 ((
uöt32_t
)0x01Ë

	)

7136 
	#TIM_EGR_CC1G
 ((
uöt32_t
)0x02Ë

	)

7137 
	#TIM_EGR_CC2G
 ((
uöt32_t
)0x04Ë

	)

7138 
	#TIM_EGR_CC3G
 ((
uöt32_t
)0x08Ë

	)

7139 
	#TIM_EGR_CC4G
 ((
uöt32_t
)0x10Ë

	)

7140 
	#TIM_EGR_COMG
 ((
uöt32_t
)0x20Ë

	)

7141 
	#TIM_EGR_TG
 ((
uöt32_t
)0x40Ë

	)

7142 
	#TIM_EGR_BG
 ((
uöt32_t
)0x80Ë

	)

7145 
	#TIM_CCMR1_CC1S
 ((
uöt32_t
)0x0003Ë

	)

7146 
	#TIM_CCMR1_CC1S_0
 ((
uöt32_t
)0x0001Ë

	)

7147 
	#TIM_CCMR1_CC1S_1
 ((
uöt32_t
)0x0002Ë

	)

7149 
	#TIM_CCMR1_OC1FE
 ((
uöt32_t
)0x0004Ë

	)

7150 
	#TIM_CCMR1_OC1PE
 ((
uöt32_t
)0x0008Ë

	)

7152 
	#TIM_CCMR1_OC1M
 ((
uöt32_t
)0x0070Ë

	)

7153 
	#TIM_CCMR1_OC1M_0
 ((
uöt32_t
)0x0010Ë

	)

7154 
	#TIM_CCMR1_OC1M_1
 ((
uöt32_t
)0x0020Ë

	)

7155 
	#TIM_CCMR1_OC1M_2
 ((
uöt32_t
)0x0040Ë

	)

7157 
	#TIM_CCMR1_OC1CE
 ((
uöt32_t
)0x0080Ë

	)

7159 
	#TIM_CCMR1_CC2S
 ((
uöt32_t
)0x0300Ë

	)

7160 
	#TIM_CCMR1_CC2S_0
 ((
uöt32_t
)0x0100Ë

	)

7161 
	#TIM_CCMR1_CC2S_1
 ((
uöt32_t
)0x0200Ë

	)

7163 
	#TIM_CCMR1_OC2FE
 ((
uöt32_t
)0x0400Ë

	)

7164 
	#TIM_CCMR1_OC2PE
 ((
uöt32_t
)0x0800Ë

	)

7166 
	#TIM_CCMR1_OC2M
 ((
uöt32_t
)0x7000Ë

	)

7167 
	#TIM_CCMR1_OC2M_0
 ((
uöt32_t
)0x1000Ë

	)

7168 
	#TIM_CCMR1_OC2M_1
 ((
uöt32_t
)0x2000Ë

	)

7169 
	#TIM_CCMR1_OC2M_2
 ((
uöt32_t
)0x4000Ë

	)

7171 
	#TIM_CCMR1_OC2CE
 ((
uöt32_t
)0x8000Ë

	)

7175 
	#TIM_CCMR1_IC1PSC
 ((
uöt32_t
)0x000CË

	)

7176 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt32_t
)0x0004Ë

	)

7177 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt32_t
)0x0008Ë

	)

7179 
	#TIM_CCMR1_IC1F
 ((
uöt32_t
)0x00F0Ë

	)

7180 
	#TIM_CCMR1_IC1F_0
 ((
uöt32_t
)0x0010Ë

	)

7181 
	#TIM_CCMR1_IC1F_1
 ((
uöt32_t
)0x0020Ë

	)

7182 
	#TIM_CCMR1_IC1F_2
 ((
uöt32_t
)0x0040Ë

	)

7183 
	#TIM_CCMR1_IC1F_3
 ((
uöt32_t
)0x0080Ë

	)

7185 
	#TIM_CCMR1_IC2PSC
 ((
uöt32_t
)0x0C00Ë

	)

7186 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt32_t
)0x0400Ë

	)

7187 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt32_t
)0x0800Ë

	)

7189 
	#TIM_CCMR1_IC2F
 ((
uöt32_t
)0xF000Ë

	)

7190 
	#TIM_CCMR1_IC2F_0
 ((
uöt32_t
)0x1000Ë

	)

7191 
	#TIM_CCMR1_IC2F_1
 ((
uöt32_t
)0x2000Ë

	)

7192 
	#TIM_CCMR1_IC2F_2
 ((
uöt32_t
)0x4000Ë

	)

7193 
	#TIM_CCMR1_IC2F_3
 ((
uöt32_t
)0x8000Ë

	)

7196 
	#TIM_CCMR2_CC3S
 ((
uöt32_t
)0x0003Ë

	)

7197 
	#TIM_CCMR2_CC3S_0
 ((
uöt32_t
)0x0001Ë

	)

7198 
	#TIM_CCMR2_CC3S_1
 ((
uöt32_t
)0x0002Ë

	)

7200 
	#TIM_CCMR2_OC3FE
 ((
uöt32_t
)0x0004Ë

	)

7201 
	#TIM_CCMR2_OC3PE
 ((
uöt32_t
)0x0008Ë

	)

7203 
	#TIM_CCMR2_OC3M
 ((
uöt32_t
)0x0070Ë

	)

7204 
	#TIM_CCMR2_OC3M_0
 ((
uöt32_t
)0x0010Ë

	)

7205 
	#TIM_CCMR2_OC3M_1
 ((
uöt32_t
)0x0020Ë

	)

7206 
	#TIM_CCMR2_OC3M_2
 ((
uöt32_t
)0x0040Ë

	)

7208 
	#TIM_CCMR2_OC3CE
 ((
uöt32_t
)0x0080Ë

	)

7210 
	#TIM_CCMR2_CC4S
 ((
uöt32_t
)0x0300Ë

	)

7211 
	#TIM_CCMR2_CC4S_0
 ((
uöt32_t
)0x0100Ë

	)

7212 
	#TIM_CCMR2_CC4S_1
 ((
uöt32_t
)0x0200Ë

	)

7214 
	#TIM_CCMR2_OC4FE
 ((
uöt32_t
)0x0400Ë

	)

7215 
	#TIM_CCMR2_OC4PE
 ((
uöt32_t
)0x0800Ë

	)

7217 
	#TIM_CCMR2_OC4M
 ((
uöt32_t
)0x7000Ë

	)

7218 
	#TIM_CCMR2_OC4M_0
 ((
uöt32_t
)0x1000Ë

	)

7219 
	#TIM_CCMR2_OC4M_1
 ((
uöt32_t
)0x2000Ë

	)

7220 
	#TIM_CCMR2_OC4M_2
 ((
uöt32_t
)0x4000Ë

	)

7222 
	#TIM_CCMR2_OC4CE
 ((
uöt32_t
)0x8000Ë

	)

7226 
	#TIM_CCMR2_IC3PSC
 ((
uöt32_t
)0x000CË

	)

7227 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt32_t
)0x0004Ë

	)

7228 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt32_t
)0x0008Ë

	)

7230 
	#TIM_CCMR2_IC3F
 ((
uöt32_t
)0x00F0Ë

	)

7231 
	#TIM_CCMR2_IC3F_0
 ((
uöt32_t
)0x0010Ë

	)

7232 
	#TIM_CCMR2_IC3F_1
 ((
uöt32_t
)0x0020Ë

	)

7233 
	#TIM_CCMR2_IC3F_2
 ((
uöt32_t
)0x0040Ë

	)

7234 
	#TIM_CCMR2_IC3F_3
 ((
uöt32_t
)0x0080Ë

	)

7236 
	#TIM_CCMR2_IC4PSC
 ((
uöt32_t
)0x0C00Ë

	)

7237 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt32_t
)0x0400Ë

	)

7238 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt32_t
)0x0800Ë

	)

7240 
	#TIM_CCMR2_IC4F
 ((
uöt32_t
)0xF000Ë

	)

7241 
	#TIM_CCMR2_IC4F_0
 ((
uöt32_t
)0x1000Ë

	)

7242 
	#TIM_CCMR2_IC4F_1
 ((
uöt32_t
)0x2000Ë

	)

7243 
	#TIM_CCMR2_IC4F_2
 ((
uöt32_t
)0x4000Ë

	)

7244 
	#TIM_CCMR2_IC4F_3
 ((
uöt32_t
)0x8000Ë

	)

7247 
	#TIM_CCER_CC1E
 ((
uöt32_t
)0x0001Ë

	)

7248 
	#TIM_CCER_CC1P
 ((
uöt32_t
)0x0002Ë

	)

7249 
	#TIM_CCER_CC1NE
 ((
uöt32_t
)0x0004Ë

	)

7250 
	#TIM_CCER_CC1NP
 ((
uöt32_t
)0x0008Ë

	)

7251 
	#TIM_CCER_CC2E
 ((
uöt32_t
)0x0010Ë

	)

7252 
	#TIM_CCER_CC2P
 ((
uöt32_t
)0x0020Ë

	)

7253 
	#TIM_CCER_CC2NE
 ((
uöt32_t
)0x0040Ë

	)

7254 
	#TIM_CCER_CC2NP
 ((
uöt32_t
)0x0080Ë

	)

7255 
	#TIM_CCER_CC3E
 ((
uöt32_t
)0x0100Ë

	)

7256 
	#TIM_CCER_CC3P
 ((
uöt32_t
)0x0200Ë

	)

7257 
	#TIM_CCER_CC3NE
 ((
uöt32_t
)0x0400Ë

	)

7258 
	#TIM_CCER_CC3NP
 ((
uöt32_t
)0x0800Ë

	)

7259 
	#TIM_CCER_CC4E
 ((
uöt32_t
)0x1000Ë

	)

7260 
	#TIM_CCER_CC4P
 ((
uöt32_t
)0x2000Ë

	)

7261 
	#TIM_CCER_CC4NP
 ((
uöt32_t
)0x8000Ë

	)

7264 
	#TIM_CNT_CNT
 ((
uöt32_t
)0xFFFFË

	)

7267 
	#TIM_PSC_PSC
 ((
uöt32_t
)0xFFFFË

	)

7270 
	#TIM_ARR_ARR
 ((
uöt32_t
)0xFFFFË

	)

7273 
	#TIM_RCR_REP
 ((
uöt32_t
)0xFFË

	)

7276 
	#TIM_CCR1_CCR1
 ((
uöt32_t
)0xFFFFË

	)

7279 
	#TIM_CCR2_CCR2
 ((
uöt32_t
)0xFFFFË

	)

7282 
	#TIM_CCR3_CCR3
 ((
uöt32_t
)0xFFFFË

	)

7285 
	#TIM_CCR4_CCR4
 ((
uöt32_t
)0xFFFFË

	)

7288 
	#TIM_BDTR_DTG
 ((
uöt32_t
)0x00FFË

	)

7289 
	#TIM_BDTR_DTG_0
 ((
uöt32_t
)0x0001Ë

	)

7290 
	#TIM_BDTR_DTG_1
 ((
uöt32_t
)0x0002Ë

	)

7291 
	#TIM_BDTR_DTG_2
 ((
uöt32_t
)0x0004Ë

	)

7292 
	#TIM_BDTR_DTG_3
 ((
uöt32_t
)0x0008Ë

	)

7293 
	#TIM_BDTR_DTG_4
 ((
uöt32_t
)0x0010Ë

	)

7294 
	#TIM_BDTR_DTG_5
 ((
uöt32_t
)0x0020Ë

	)

7295 
	#TIM_BDTR_DTG_6
 ((
uöt32_t
)0x0040Ë

	)

7296 
	#TIM_BDTR_DTG_7
 ((
uöt32_t
)0x0080Ë

	)

7298 
	#TIM_BDTR_LOCK
 ((
uöt32_t
)0x0300Ë

	)

7299 
	#TIM_BDTR_LOCK_0
 ((
uöt32_t
)0x0100Ë

	)

7300 
	#TIM_BDTR_LOCK_1
 ((
uöt32_t
)0x0200Ë

	)

7302 
	#TIM_BDTR_OSSI
 ((
uöt32_t
)0x0400Ë

	)

7303 
	#TIM_BDTR_OSSR
 ((
uöt32_t
)0x0800Ë

	)

7304 
	#TIM_BDTR_BKE
 ((
uöt32_t
)0x1000Ë

	)

7305 
	#TIM_BDTR_BKP
 ((
uöt32_t
)0x2000Ë

	)

7306 
	#TIM_BDTR_AOE
 ((
uöt32_t
)0x4000Ë

	)

7307 
	#TIM_BDTR_MOE
 ((
uöt32_t
)0x8000Ë

	)

7310 
	#TIM_DCR_DBA
 ((
uöt32_t
)0x001FË

	)

7311 
	#TIM_DCR_DBA_0
 ((
uöt32_t
)0x0001Ë

	)

7312 
	#TIM_DCR_DBA_1
 ((
uöt32_t
)0x0002Ë

	)

7313 
	#TIM_DCR_DBA_2
 ((
uöt32_t
)0x0004Ë

	)

7314 
	#TIM_DCR_DBA_3
 ((
uöt32_t
)0x0008Ë

	)

7315 
	#TIM_DCR_DBA_4
 ((
uöt32_t
)0x0010Ë

	)

7317 
	#TIM_DCR_DBL
 ((
uöt32_t
)0x1F00Ë

	)

7318 
	#TIM_DCR_DBL_0
 ((
uöt32_t
)0x0100Ë

	)

7319 
	#TIM_DCR_DBL_1
 ((
uöt32_t
)0x0200Ë

	)

7320 
	#TIM_DCR_DBL_2
 ((
uöt32_t
)0x0400Ë

	)

7321 
	#TIM_DCR_DBL_3
 ((
uöt32_t
)0x0800Ë

	)

7322 
	#TIM_DCR_DBL_4
 ((
uöt32_t
)0x1000Ë

	)

7325 
	#TIM_DMAR_DMAB
 ((
uöt32_t
)0xFFFFË

	)

7328 
	#TIM_OR_TI4_RMP
 ((
uöt32_t
)0x00C0Ë

	)

7329 
	#TIM_OR_TI4_RMP_0
 ((
uöt32_t
)0x0040Ë

	)

7330 
	#TIM_OR_TI4_RMP_1
 ((
uöt32_t
)0x0080Ë

	)

7331 
	#TIM_OR_ITR1_RMP
 ((
uöt32_t
)0x0C00Ë

	)

7332 
	#TIM_OR_ITR1_RMP_0
 ((
uöt32_t
)0x0400Ë

	)

7333 
	#TIM_OR_ITR1_RMP_1
 ((
uöt32_t
)0x0800Ë

	)

7342 
	#USART_SR_PE
 ((
uöt32_t
)0x0001Ë

	)

7343 
	#USART_SR_FE
 ((
uöt32_t
)0x0002Ë

	)

7344 
	#USART_SR_NE
 ((
uöt32_t
)0x0004Ë

	)

7345 
	#USART_SR_ORE
 ((
uöt32_t
)0x0008Ë

	)

7346 
	#USART_SR_IDLE
 ((
uöt32_t
)0x0010Ë

	)

7347 
	#USART_SR_RXNE
 ((
uöt32_t
)0x0020Ë

	)

7348 
	#USART_SR_TC
 ((
uöt32_t
)0x0040Ë

	)

7349 
	#USART_SR_TXE
 ((
uöt32_t
)0x0080Ë

	)

7350 
	#USART_SR_LBD
 ((
uöt32_t
)0x0100Ë

	)

7351 
	#USART_SR_CTS
 ((
uöt32_t
)0x0200Ë

	)

7354 
	#USART_DR_DR
 ((
uöt32_t
)0x01FFË

	)

7357 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt32_t
)0x000FË

	)

7358 
	#USART_BRR_DIV_M™tisß
 ((
uöt32_t
)0xFFF0Ë

	)

7361 
	#USART_CR1_SBK
 ((
uöt32_t
)0x0001Ë

	)

7362 
	#USART_CR1_RWU
 ((
uöt32_t
)0x0002Ë

	)

7363 
	#USART_CR1_RE
 ((
uöt32_t
)0x0004Ë

	)

7364 
	#USART_CR1_TE
 ((
uöt32_t
)0x0008Ë

	)

7365 
	#USART_CR1_IDLEIE
 ((
uöt32_t
)0x0010Ë

	)

7366 
	#USART_CR1_RXNEIE
 ((
uöt32_t
)0x0020Ë

	)

7367 
	#USART_CR1_TCIE
 ((
uöt32_t
)0x0040Ë

	)

7368 
	#USART_CR1_TXEIE
 ((
uöt32_t
)0x0080Ë

	)

7369 
	#USART_CR1_PEIE
 ((
uöt32_t
)0x0100Ë

	)

7370 
	#USART_CR1_PS
 ((
uöt32_t
)0x0200Ë

	)

7371 
	#USART_CR1_PCE
 ((
uöt32_t
)0x0400Ë

	)

7372 
	#USART_CR1_WAKE
 ((
uöt32_t
)0x0800Ë

	)

7373 
	#USART_CR1_M
 ((
uöt32_t
)0x1000Ë

	)

7374 
	#USART_CR1_UE
 ((
uöt32_t
)0x2000Ë

	)

7375 
	#USART_CR1_OVER8
 ((
uöt32_t
)0x8000Ë

	)

7378 
	#USART_CR2_ADD
 ((
uöt32_t
)0x000FË

	)

7379 
	#USART_CR2_LBDL
 ((
uöt32_t
)0x0020Ë

	)

7380 
	#USART_CR2_LBDIE
 ((
uöt32_t
)0x0040Ë

	)

7381 
	#USART_CR2_LBCL
 ((
uöt32_t
)0x0100Ë

	)

7382 
	#USART_CR2_CPHA
 ((
uöt32_t
)0x0200Ë

	)

7383 
	#USART_CR2_CPOL
 ((
uöt32_t
)0x0400Ë

	)

7384 
	#USART_CR2_CLKEN
 ((
uöt32_t
)0x0800Ë

	)

7386 
	#USART_CR2_STOP
 ((
uöt32_t
)0x3000Ë

	)

7387 
	#USART_CR2_STOP_0
 ((
uöt32_t
)0x1000Ë

	)

7388 
	#USART_CR2_STOP_1
 ((
uöt32_t
)0x2000Ë

	)

7390 
	#USART_CR2_LINEN
 ((
uöt32_t
)0x4000Ë

	)

7393 
	#USART_CR3_EIE
 ((
uöt32_t
)0x0001Ë

	)

7394 
	#USART_CR3_IREN
 ((
uöt32_t
)0x0002Ë

	)

7395 
	#USART_CR3_IRLP
 ((
uöt32_t
)0x0004Ë

	)

7396 
	#USART_CR3_HDSEL
 ((
uöt32_t
)0x0008Ë

	)

7397 
	#USART_CR3_NACK
 ((
uöt32_t
)0x0010Ë

	)

7398 
	#USART_CR3_SCEN
 ((
uöt32_t
)0x0020Ë

	)

7399 
	#USART_CR3_DMAR
 ((
uöt32_t
)0x0040Ë

	)

7400 
	#USART_CR3_DMAT
 ((
uöt32_t
)0x0080Ë

	)

7401 
	#USART_CR3_RTSE
 ((
uöt32_t
)0x0100Ë

	)

7402 
	#USART_CR3_CTSE
 ((
uöt32_t
)0x0200Ë

	)

7403 
	#USART_CR3_CTSIE
 ((
uöt32_t
)0x0400Ë

	)

7404 
	#USART_CR3_ONEBIT
 ((
uöt32_t
)0x0800Ë

	)

7407 
	#USART_GTPR_PSC
 ((
uöt32_t
)0x00FFË

	)

7408 
	#USART_GTPR_PSC_0
 ((
uöt32_t
)0x0001Ë

	)

7409 
	#USART_GTPR_PSC_1
 ((
uöt32_t
)0x0002Ë

	)

7410 
	#USART_GTPR_PSC_2
 ((
uöt32_t
)0x0004Ë

	)

7411 
	#USART_GTPR_PSC_3
 ((
uöt32_t
)0x0008Ë

	)

7412 
	#USART_GTPR_PSC_4
 ((
uöt32_t
)0x0010Ë

	)

7413 
	#USART_GTPR_PSC_5
 ((
uöt32_t
)0x0020Ë

	)

7414 
	#USART_GTPR_PSC_6
 ((
uöt32_t
)0x0040Ë

	)

7415 
	#USART_GTPR_PSC_7
 ((
uöt32_t
)0x0080Ë

	)

7417 
	#USART_GTPR_GT
 ((
uöt32_t
)0xFF00Ë

	)

7425 
	#WWDG_CR_T
 ((
uöt32_t
)0x7FË

	)

7426 
	#WWDG_CR_T0
 ((
uöt32_t
)0x01Ë

	)

7427 
	#WWDG_CR_T1
 ((
uöt32_t
)0x02Ë

	)

7428 
	#WWDG_CR_T2
 ((
uöt32_t
)0x04Ë

	)

7429 
	#WWDG_CR_T3
 ((
uöt32_t
)0x08Ë

	)

7430 
	#WWDG_CR_T4
 ((
uöt32_t
)0x10Ë

	)

7431 
	#WWDG_CR_T5
 ((
uöt32_t
)0x20Ë

	)

7432 
	#WWDG_CR_T6
 ((
uöt32_t
)0x40Ë

	)

7434 
	#WWDG_CR_WDGA
 ((
uöt32_t
)0x80Ë

	)

7437 
	#WWDG_CFR_W
 ((
uöt32_t
)0x007FË

	)

7438 
	#WWDG_CFR_W0
 ((
uöt32_t
)0x0001Ë

	)

7439 
	#WWDG_CFR_W1
 ((
uöt32_t
)0x0002Ë

	)

7440 
	#WWDG_CFR_W2
 ((
uöt32_t
)0x0004Ë

	)

7441 
	#WWDG_CFR_W3
 ((
uöt32_t
)0x0008Ë

	)

7442 
	#WWDG_CFR_W4
 ((
uöt32_t
)0x0010Ë

	)

7443 
	#WWDG_CFR_W5
 ((
uöt32_t
)0x0020Ë

	)

7444 
	#WWDG_CFR_W6
 ((
uöt32_t
)0x0040Ë

	)

7446 
	#WWDG_CFR_WDGTB
 ((
uöt32_t
)0x0180Ë

	)

7447 
	#WWDG_CFR_WDGTB0
 ((
uöt32_t
)0x0080Ë

	)

7448 
	#WWDG_CFR_WDGTB1
 ((
uöt32_t
)0x0100Ë

	)

7450 
	#WWDG_CFR_EWI
 ((
uöt32_t
)0x0200Ë

	)

7453 
	#WWDG_SR_EWIF
 ((
uöt32_t
)0x01Ë

	)

7462 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

7463 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

7466 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

7467 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

7468 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

7469 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

7471 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

7472 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

7473 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

7476 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

7477 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

7478 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

7479 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

7480 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

7481 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

7482 
	#DBGMCU_APB1_FZ_DBG_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

7483 
	#DBGMCU_APB1_FZ_DBG_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

7484 
	#DBGMCU_APB1_FZ_DBG_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

7485 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

7486 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

7487 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

7488 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

7489 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

7490 
	#DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

7491 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

7492 
	#DBGMCU_APB1_FZ_DBG_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

7494 
	#DBGMCU_APB1_FZ_DBG_IWDEG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP


	)

7497 
	#DBGMCU_APB2_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

7498 
	#DBGMCU_APB2_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

7499 
	#DBGMCU_APB2_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

7500 
	#DBGMCU_APB2_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

7501 
	#DBGMCU_APB2_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

7509 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

7510 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

7511 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

7512 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

7513 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

7514 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

7515 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

7516 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

7517 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

7518 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

7519 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

7520 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

7521 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

7522 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

7523 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

7524 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

7525 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

7526 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

7527 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

7528 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

7530 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

7531 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

7532 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

7533 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

7534 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

7535 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

7536 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

7539 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

7540 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

7541 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

7542 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

7543 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

7544 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

7545 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

7546 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

7547 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

7548 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

7549 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

7550 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

7551 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

7552 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

7555 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7558 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7561 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

7562 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

7563 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

7564 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

7565 
	#ETH_MACMIIAR_CR_Div62
 ((
uöt32_t
)0x00000004Ë

	)

7566 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

7567 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

7568 
	#ETH_MACMIIAR_CR_Div102
 ((
uöt32_t
)0x00000010Ë

	)

7569 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

7570 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

7573 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

7576 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

7577 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

7578 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

7579 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

7580 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

7581 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

7582 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

7583 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

7584 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

7585 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

7586 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

7589 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

7590 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

7593 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

7607 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

7608 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

7609 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

7610 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

7611 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

7612 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

7613 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

7616 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

7617 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

7618 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

7619 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

7620 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

7623 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

7624 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

7627 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

7630 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7633 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7634 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7635 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7636 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7637 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7638 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7639 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7640 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7641 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7642 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

7645 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7648 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7649 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7650 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7651 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7652 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7653 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7654 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7655 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7656 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7657 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

7660 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7663 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7664 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7665 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7666 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7667 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7668 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7669 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7670 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7671 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7672 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

7675 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7682 
	#ETH_MMCCR_MCFHP
 ((
uöt32_t
)0x00000020Ë

	)

7683 
	#ETH_MMCCR_MCP
 ((
uöt32_t
)0x00000010Ë

	)

7684 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

7685 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

7686 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

7687 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

7690 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

7691 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

7692 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

7695 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

7696 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

7697 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

7700 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

7701 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

7702 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

7705 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

7706 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

7707 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

7710 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7713 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7716 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7719 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7722 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7725 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7732 
	#ETH_PTPTSCR_TSCNT
 ((
uöt32_t
)0x00030000Ë

	)

7733 
	#ETH_PTPTSSR_TSSMRME
 ((
uöt32_t
)0x00008000Ë

	)

7734 
	#ETH_PTPTSSR_TSSEME
 ((
uöt32_t
)0x00004000Ë

	)

7735 
	#ETH_PTPTSSR_TSSIPV4FE
 ((
uöt32_t
)0x00002000Ë

	)

7736 
	#ETH_PTPTSSR_TSSIPV6FE
 ((
uöt32_t
)0x00001000Ë

	)

7737 
	#ETH_PTPTSSR_TSSPTPOEFE
 ((
uöt32_t
)0x00000800Ë

	)

7738 
	#ETH_PTPTSSR_TSPTPPSV2E
 ((
uöt32_t
)0x00000400Ë

	)

7739 
	#ETH_PTPTSSR_TSSSR
 ((
uöt32_t
)0x00000200Ë

	)

7740 
	#ETH_PTPTSSR_TSSARFE
 ((
uöt32_t
)0x00000100Ë

	)

7742 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

7743 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

7744 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

7745 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

7746 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

7747 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

7750 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

7753 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

7756 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

7757 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

7760 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

7763 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

7764 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

7767 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

7770 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7773 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7776 
	#ETH_PTPTSSR_TSTTR
 ((
uöt32_t
)0x00000020Ë

	)

7777 
	#ETH_PTPTSSR_TSSO
 ((
uöt32_t
)0x00000010Ë

	)

7784 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

7785 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

7786 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

7787 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

7788 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

7789 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

7790 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

7791 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

7792 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

7793 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

7794 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

7795 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

7796 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

7797 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

7798 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

7799 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

7800 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

7801 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

7802 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

7803 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

7804 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

7805 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

7806 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

7807 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

7808 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

7809 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

7810 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

7811 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

7812 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

7813 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

7814 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

7815 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

7816 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

7817 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

7818 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

7819 
	#ETH_DMABMR_EDE
 ((
uöt32_t
)0x00000080Ë

	)

7820 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

7821 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

7822 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

7825 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

7828 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

7831 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7834 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7837 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

7838 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

7839 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

7840 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

7842 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

7843 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

7844 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

7845 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

7846 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

7847 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

7848 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

7849 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

7850 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

7851 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

7852 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

7853 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

7854 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

7855 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

7856 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

7857 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

7858 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

7859 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

7860 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

7861 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

7862 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

7863 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

7864 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

7865 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

7866 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

7867 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

7868 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

7869 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

7870 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

7871 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

7872 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

7873 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

7876 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

7877 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

7878 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

7879 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

7880 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

7881 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

7882 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

7883 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

7884 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

7885 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

7886 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

7887 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

7888 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

7889 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

7890 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

7891 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

7892 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

7893 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

7894 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

7895 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

7896 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

7897 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

7898 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

7899 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

7902 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

7903 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

7904 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

7905 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

7906 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

7907 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

7908 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

7909 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

7910 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

7911 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

7912 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

7913 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

7914 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

7915 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

7916 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

7919 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

7920 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

7921 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

7922 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

7925 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7928 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7931 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7934 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7942 
	#USB_OTG_GOTGCTL_SRQSCS
 ((
uöt32_t
)0x00000001Ë

	)

7943 
	#USB_OTG_GOTGCTL_SRQ
 ((
uöt32_t
)0x00000002Ë

	)

7944 
	#USB_OTG_GOTGCTL_HNGSCS
 ((
uöt32_t
)0x00000100Ë

	)

7945 
	#USB_OTG_GOTGCTL_HNPRQ
 ((
uöt32_t
)0x00000200Ë

	)

7946 
	#USB_OTG_GOTGCTL_HSHNPEN
 ((
uöt32_t
)0x00000400Ë

	)

7947 
	#USB_OTG_GOTGCTL_DHNPEN
 ((
uöt32_t
)0x00000800Ë

	)

7948 
	#USB_OTG_GOTGCTL_CIDSTS
 ((
uöt32_t
)0x00010000Ë

	)

7949 
	#USB_OTG_GOTGCTL_DBCT
 ((
uöt32_t
)0x00020000Ë

	)

7950 
	#USB_OTG_GOTGCTL_ASVLD
 ((
uöt32_t
)0x00040000Ë

	)

7951 
	#USB_OTG_GOTGCTL_BSVLD
 ((
uöt32_t
)0x00080000Ë

	)

7955 
	#USB_OTG_HCFG_FSLSPCS
 ((
uöt32_t
)0x00000003Ë

	)

7956 
	#USB_OTG_HCFG_FSLSPCS_0
 ((
uöt32_t
)0x00000001Ë

	)

7957 
	#USB_OTG_HCFG_FSLSPCS_1
 ((
uöt32_t
)0x00000002Ë

	)

7958 
	#USB_OTG_HCFG_FSLSS
 ((
uöt32_t
)0x00000004Ë

	)

7962 
	#USB_OTG_DCFG_DSPD
 ((
uöt32_t
)0x00000003Ë

	)

7963 
	#USB_OTG_DCFG_DSPD_0
 ((
uöt32_t
)0x00000001Ë

	)

7964 
	#USB_OTG_DCFG_DSPD_1
 ((
uöt32_t
)0x00000002Ë

	)

7965 
	#USB_OTG_DCFG_NZLSOHSK
 ((
uöt32_t
)0x00000004Ë

	)

7967 
	#USB_OTG_DCFG_DAD
 ((
uöt32_t
)0x000007F0Ë

	)

7968 
	#USB_OTG_DCFG_DAD_0
 ((
uöt32_t
)0x00000010Ë

	)

7969 
	#USB_OTG_DCFG_DAD_1
 ((
uöt32_t
)0x00000020Ë

	)

7970 
	#USB_OTG_DCFG_DAD_2
 ((
uöt32_t
)0x00000040Ë

	)

7971 
	#USB_OTG_DCFG_DAD_3
 ((
uöt32_t
)0x00000080Ë

	)

7972 
	#USB_OTG_DCFG_DAD_4
 ((
uöt32_t
)0x00000100Ë

	)

7973 
	#USB_OTG_DCFG_DAD_5
 ((
uöt32_t
)0x00000200Ë

	)

7974 
	#USB_OTG_DCFG_DAD_6
 ((
uöt32_t
)0x00000400Ë

	)

7976 
	#USB_OTG_DCFG_PFIVL
 ((
uöt32_t
)0x00001800Ë

	)

7977 
	#USB_OTG_DCFG_PFIVL_0
 ((
uöt32_t
)0x00000800Ë

	)

7978 
	#USB_OTG_DCFG_PFIVL_1
 ((
uöt32_t
)0x00001000Ë

	)

7980 
	#USB_OTG_DCFG_PERSCHIVL
 ((
uöt32_t
)0x03000000Ë

	)

7981 
	#USB_OTG_DCFG_PERSCHIVL_0
 ((
uöt32_t
)0x01000000Ë

	)

7982 
	#USB_OTG_DCFG_PERSCHIVL_1
 ((
uöt32_t
)0x02000000Ë

	)

7985 
	#USB_OTG_PCGCR_STPPCLK
 ((
uöt32_t
)0x00000001Ë

	)

7986 
	#USB_OTG_PCGCR_GATEHCLK
 ((
uöt32_t
)0x00000002Ë

	)

7987 
	#USB_OTG_PCGCR_PHYSUSP
 ((
uöt32_t
)0x00000010Ë

	)

7990 
	#USB_OTG_GOTGINT_SEDET
 ((
uöt32_t
)0x00000004Ë

	)

7991 
	#USB_OTG_GOTGINT_SRSSCHG
 ((
uöt32_t
)0x00000100Ë

	)

7992 
	#USB_OTG_GOTGINT_HNSSCHG
 ((
uöt32_t
)0x00000200Ë

	)

7993 
	#USB_OTG_GOTGINT_HNGDET
 ((
uöt32_t
)0x00020000Ë

	)

7994 
	#USB_OTG_GOTGINT_ADTOCHG
 ((
uöt32_t
)0x00040000Ë

	)

7995 
	#USB_OTG_GOTGINT_DBCDNE
 ((
uöt32_t
)0x00080000Ë

	)

7998 
	#USB_OTG_DCTL_RWUSIG
 ((
uöt32_t
)0x00000001Ë

	)

7999 
	#USB_OTG_DCTL_SDIS
 ((
uöt32_t
)0x00000002Ë

	)

8000 
	#USB_OTG_DCTL_GINSTS
 ((
uöt32_t
)0x00000004Ë

	)

8001 
	#USB_OTG_DCTL_GONSTS
 ((
uöt32_t
)0x00000008Ë

	)

8003 
	#USB_OTG_DCTL_TCTL
 ((
uöt32_t
)0x00000070Ë

	)

8004 
	#USB_OTG_DCTL_TCTL_0
 ((
uöt32_t
)0x00000010Ë

	)

8005 
	#USB_OTG_DCTL_TCTL_1
 ((
uöt32_t
)0x00000020Ë

	)

8006 
	#USB_OTG_DCTL_TCTL_2
 ((
uöt32_t
)0x00000040Ë

	)

8007 
	#USB_OTG_DCTL_SGINAK
 ((
uöt32_t
)0x00000080Ë

	)

8008 
	#USB_OTG_DCTL_CGINAK
 ((
uöt32_t
)0x00000100Ë

	)

8009 
	#USB_OTG_DCTL_SGONAK
 ((
uöt32_t
)0x00000200Ë

	)

8010 
	#USB_OTG_DCTL_CGONAK
 ((
uöt32_t
)0x00000400Ë

	)

8011 
	#USB_OTG_DCTL_POPRGDNE
 ((
uöt32_t
)0x00000800Ë

	)

8014 
	#USB_OTG_HFIR_FRIVL
 ((
uöt32_t
)0x0000FFFFË

	)

8017 
	#USB_OTG_HFNUM_FRNUM
 ((
uöt32_t
)0x0000FFFFË

	)

8018 
	#USB_OTG_HFNUM_FTREM
 ((
uöt32_t
)0xFFFF0000Ë

	)

8021 
	#USB_OTG_DSTS_SUSPSTS
 ((
uöt32_t
)0x00000001Ë

	)

8023 
	#USB_OTG_DSTS_ENUMSPD
 ((
uöt32_t
)0x00000006Ë

	)

8024 
	#USB_OTG_DSTS_ENUMSPD_0
 ((
uöt32_t
)0x00000002Ë

	)

8025 
	#USB_OTG_DSTS_ENUMSPD_1
 ((
uöt32_t
)0x00000004Ë

	)

8026 
	#USB_OTG_DSTS_EERR
 ((
uöt32_t
)0x00000008Ë

	)

8027 
	#USB_OTG_DSTS_FNSOF
 ((
uöt32_t
)0x003FFF00Ë

	)

8030 
	#USB_OTG_GAHBCFG_GINT
 ((
uöt32_t
)0x00000001Ë

	)

8032 
	#USB_OTG_GAHBCFG_HBSTLEN
 ((
uöt32_t
)0x0000001EË

	)

8033 
	#USB_OTG_GAHBCFG_HBSTLEN_0
 ((
uöt32_t
)0x00000002Ë

	)

8034 
	#USB_OTG_GAHBCFG_HBSTLEN_1
 ((
uöt32_t
)0x00000004Ë

	)

8035 
	#USB_OTG_GAHBCFG_HBSTLEN_2
 ((
uöt32_t
)0x00000008Ë

	)

8036 
	#USB_OTG_GAHBCFG_HBSTLEN_3
 ((
uöt32_t
)0x00000010Ë

	)

8037 
	#USB_OTG_GAHBCFG_DMAEN
 ((
uöt32_t
)0x00000020Ë

	)

8038 
	#USB_OTG_GAHBCFG_TXFELVL
 ((
uöt32_t
)0x00000080Ë

	)

8039 
	#USB_OTG_GAHBCFG_PTXFELVL
 ((
uöt32_t
)0x00000100Ë

	)

8043 
	#USB_OTG_GUSBCFG_TOCAL
 ((
uöt32_t
)0x00000007Ë

	)

8044 
	#USB_OTG_GUSBCFG_TOCAL_0
 ((
uöt32_t
)0x00000001Ë

	)

8045 
	#USB_OTG_GUSBCFG_TOCAL_1
 ((
uöt32_t
)0x00000002Ë

	)

8046 
	#USB_OTG_GUSBCFG_TOCAL_2
 ((
uöt32_t
)0x00000004Ë

	)

8047 
	#USB_OTG_GUSBCFG_PHYSEL
 ((
uöt32_t
)0x00000040Ë

	)

8048 
	#USB_OTG_GUSBCFG_SRPCAP
 ((
uöt32_t
)0x00000100Ë

	)

8049 
	#USB_OTG_GUSBCFG_HNPCAP
 ((
uöt32_t
)0x00000200Ë

	)

8051 
	#USB_OTG_GUSBCFG_TRDT
 ((
uöt32_t
)0x00003C00Ë

	)

8052 
	#USB_OTG_GUSBCFG_TRDT_0
 ((
uöt32_t
)0x00000400Ë

	)

8053 
	#USB_OTG_GUSBCFG_TRDT_1
 ((
uöt32_t
)0x00000800Ë

	)

8054 
	#USB_OTG_GUSBCFG_TRDT_2
 ((
uöt32_t
)0x00001000Ë

	)

8055 
	#USB_OTG_GUSBCFG_TRDT_3
 ((
uöt32_t
)0x00002000Ë

	)

8056 
	#USB_OTG_GUSBCFG_PHYLPCS
 ((
uöt32_t
)0x00008000Ë

	)

8057 
	#USB_OTG_GUSBCFG_ULPIFSLS
 ((
uöt32_t
)0x00020000Ë

	)

8058 
	#USB_OTG_GUSBCFG_ULPIAR
 ((
uöt32_t
)0x00040000Ë

	)

8059 
	#USB_OTG_GUSBCFG_ULPICSM
 ((
uöt32_t
)0x00080000Ë

	)

8060 
	#USB_OTG_GUSBCFG_ULPIEVBUSD
 ((
uöt32_t
)0x00100000Ë

	)

8061 
	#USB_OTG_GUSBCFG_ULPIEVBUSI
 ((
uöt32_t
)0x00200000Ë

	)

8062 
	#USB_OTG_GUSBCFG_TSDPS
 ((
uöt32_t
)0x00400000Ë

	)

8063 
	#USB_OTG_GUSBCFG_PCCI
 ((
uöt32_t
)0x00800000Ë

	)

8064 
	#USB_OTG_GUSBCFG_PTCI
 ((
uöt32_t
)0x01000000Ë

	)

8065 
	#USB_OTG_GUSBCFG_ULPIIPD
 ((
uöt32_t
)0x02000000Ë

	)

8066 
	#USB_OTG_GUSBCFG_FHMOD
 ((
uöt32_t
)0x20000000Ë

	)

8067 
	#USB_OTG_GUSBCFG_FDMOD
 ((
uöt32_t
)0x40000000Ë

	)

8068 
	#USB_OTG_GUSBCFG_CTXPKT
 ((
uöt32_t
)0x80000000Ë

	)

8071 
	#USB_OTG_GRSTCTL_CSRST
 ((
uöt32_t
)0x00000001Ë

	)

8072 
	#USB_OTG_GRSTCTL_HSRST
 ((
uöt32_t
)0x00000002Ë

	)

8073 
	#USB_OTG_GRSTCTL_FCRST
 ((
uöt32_t
)0x00000004Ë

	)

8074 
	#USB_OTG_GRSTCTL_RXFFLSH
 ((
uöt32_t
)0x00000010Ë

	)

8075 
	#USB_OTG_GRSTCTL_TXFFLSH
 ((
uöt32_t
)0x00000020Ë

	)

8077 
	#USB_OTG_GRSTCTL_TXFNUM
 ((
uöt32_t
)0x000007C0Ë

	)

8078 
	#USB_OTG_GRSTCTL_TXFNUM_0
 ((
uöt32_t
)0x00000040Ë

	)

8079 
	#USB_OTG_GRSTCTL_TXFNUM_1
 ((
uöt32_t
)0x00000080Ë

	)

8080 
	#USB_OTG_GRSTCTL_TXFNUM_2
 ((
uöt32_t
)0x00000100Ë

	)

8081 
	#USB_OTG_GRSTCTL_TXFNUM_3
 ((
uöt32_t
)0x00000200Ë

	)

8082 
	#USB_OTG_GRSTCTL_TXFNUM_4
 ((
uöt32_t
)0x00000400Ë

	)

8083 
	#USB_OTG_GRSTCTL_DMAREQ
 ((
uöt32_t
)0x40000000Ë

	)

8084 
	#USB_OTG_GRSTCTL_AHBIDL
 ((
uöt32_t
)0x80000000Ë

	)

8087 
	#USB_OTG_DIEPMSK_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

8088 
	#USB_OTG_DIEPMSK_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

8089 
	#USB_OTG_DIEPMSK_TOM
 ((
uöt32_t
)0x00000008Ë

	)

8090 
	#USB_OTG_DIEPMSK_ITTXFEMSK
 ((
uöt32_t
)0x00000010Ë

	)

8091 
	#USB_OTG_DIEPMSK_INEPNMM
 ((
uöt32_t
)0x00000020Ë

	)

8092 
	#USB_OTG_DIEPMSK_INEPNEM
 ((
uöt32_t
)0x00000040Ë

	)

8093 
	#USB_OTG_DIEPMSK_TXFURM
 ((
uöt32_t
)0x00000100Ë

	)

8094 
	#USB_OTG_DIEPMSK_BIM
 ((
uöt32_t
)0x00000200Ë

	)

8097 
	#USB_OTG_HPTXSTS_PTXFSAVL
 ((
uöt32_t
)0x0000FFFFË

	)

8099 
	#USB_OTG_HPTXSTS_PTXQSAV
 ((
uöt32_t
)0x00FF0000Ë

	)

8100 
	#USB_OTG_HPTXSTS_PTXQSAV_0
 ((
uöt32_t
)0x00010000Ë

	)

8101 
	#USB_OTG_HPTXSTS_PTXQSAV_1
 ((
uöt32_t
)0x00020000Ë

	)

8102 
	#USB_OTG_HPTXSTS_PTXQSAV_2
 ((
uöt32_t
)0x00040000Ë

	)

8103 
	#USB_OTG_HPTXSTS_PTXQSAV_3
 ((
uöt32_t
)0x00080000Ë

	)

8104 
	#USB_OTG_HPTXSTS_PTXQSAV_4
 ((
uöt32_t
)0x00100000Ë

	)

8105 
	#USB_OTG_HPTXSTS_PTXQSAV_5
 ((
uöt32_t
)0x00200000Ë

	)

8106 
	#USB_OTG_HPTXSTS_PTXQSAV_6
 ((
uöt32_t
)0x00400000Ë

	)

8107 
	#USB_OTG_HPTXSTS_PTXQSAV_7
 ((
uöt32_t
)0x00800000Ë

	)

8109 
	#USB_OTG_HPTXSTS_PTXQTOP
 ((
uöt32_t
)0xFF000000Ë

	)

8110 
	#USB_OTG_HPTXSTS_PTXQTOP_0
 ((
uöt32_t
)0x01000000Ë

	)

8111 
	#USB_OTG_HPTXSTS_PTXQTOP_1
 ((
uöt32_t
)0x02000000Ë

	)

8112 
	#USB_OTG_HPTXSTS_PTXQTOP_2
 ((
uöt32_t
)0x04000000Ë

	)

8113 
	#USB_OTG_HPTXSTS_PTXQTOP_3
 ((
uöt32_t
)0x08000000Ë

	)

8114 
	#USB_OTG_HPTXSTS_PTXQTOP_4
 ((
uöt32_t
)0x10000000Ë

	)

8115 
	#USB_OTG_HPTXSTS_PTXQTOP_5
 ((
uöt32_t
)0x20000000Ë

	)

8116 
	#USB_OTG_HPTXSTS_PTXQTOP_6
 ((
uöt32_t
)0x40000000Ë

	)

8117 
	#USB_OTG_HPTXSTS_PTXQTOP_7
 ((
uöt32_t
)0x80000000Ë

	)

8120 
	#USB_OTG_HAINT_HAINT
 ((
uöt32_t
)0x0000FFFFË

	)

8123 
	#USB_OTG_DOEPMSK_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

8124 
	#USB_OTG_DOEPMSK_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

8125 
	#USB_OTG_DOEPMSK_STUPM
 ((
uöt32_t
)0x00000008Ë

	)

8126 
	#USB_OTG_DOEPMSK_OTEPDM
 ((
uöt32_t
)0x00000010Ë

	)

8127 
	#USB_OTG_DOEPMSK_B2BSTUP
 ((
uöt32_t
)0x00000040Ë

	)

8128 
	#USB_OTG_DOEPMSK_OPEM
 ((
uöt32_t
)0x00000100Ë

	)

8129 
	#USB_OTG_DOEPMSK_BOIM
 ((
uöt32_t
)0x00000200Ë

	)

8132 
	#USB_OTG_GINTSTS_CMOD
 ((
uöt32_t
)0x00000001Ë

	)

8133 
	#USB_OTG_GINTSTS_MMIS
 ((
uöt32_t
)0x00000002Ë

	)

8134 
	#USB_OTG_GINTSTS_OTGINT
 ((
uöt32_t
)0x00000004Ë

	)

8135 
	#USB_OTG_GINTSTS_SOF
 ((
uöt32_t
)0x00000008Ë

	)

8136 
	#USB_OTG_GINTSTS_RXFLVL
 ((
uöt32_t
)0x00000010Ë

	)

8137 
	#USB_OTG_GINTSTS_NPTXFE
 ((
uöt32_t
)0x00000020Ë

	)

8138 
	#USB_OTG_GINTSTS_GINAKEFF
 ((
uöt32_t
)0x00000040Ë

	)

8139 
	#USB_OTG_GINTSTS_BOUTNAKEFF
 ((
uöt32_t
)0x00000080Ë

	)

8140 
	#USB_OTG_GINTSTS_ESUSP
 ((
uöt32_t
)0x00000400Ë

	)

8141 
	#USB_OTG_GINTSTS_USBSUSP
 ((
uöt32_t
)0x00000800Ë

	)

8142 
	#USB_OTG_GINTSTS_USBRST
 ((
uöt32_t
)0x00001000Ë

	)

8143 
	#USB_OTG_GINTSTS_ENUMDNE
 ((
uöt32_t
)0x00002000Ë

	)

8144 
	#USB_OTG_GINTSTS_ISOODRP
 ((
uöt32_t
)0x00004000Ë

	)

8145 
	#USB_OTG_GINTSTS_EOPF
 ((
uöt32_t
)0x00008000Ë

	)

8146 
	#USB_OTG_GINTSTS_IEPINT
 ((
uöt32_t
)0x00040000Ë

	)

8147 
	#USB_OTG_GINTSTS_OEPINT
 ((
uöt32_t
)0x00080000Ë

	)

8148 
	#USB_OTG_GINTSTS_IISOIXFR
 ((
uöt32_t
)0x00100000Ë

	)

8149 
	#USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
 ((
uöt32_t
)0x00200000Ë

	)

8150 
	#USB_OTG_GINTSTS_DATAFSUSP
 ((
uöt32_t
)0x00400000Ë

	)

8151 
	#USB_OTG_GINTSTS_HPRTINT
 ((
uöt32_t
)0x01000000Ë

	)

8152 
	#USB_OTG_GINTSTS_HCINT
 ((
uöt32_t
)0x02000000Ë

	)

8153 
	#USB_OTG_GINTSTS_PTXFE
 ((
uöt32_t
)0x04000000Ë

	)

8154 
	#USB_OTG_GINTSTS_CIDSCHG
 ((
uöt32_t
)0x10000000Ë

	)

8155 
	#USB_OTG_GINTSTS_DISCINT
 ((
uöt32_t
)0x20000000Ë

	)

8156 
	#USB_OTG_GINTSTS_SRQINT
 ((
uöt32_t
)0x40000000Ë

	)

8157 
	#USB_OTG_GINTSTS_WKUINT
 ((
uöt32_t
)0x80000000Ë

	)

8160 
	#USB_OTG_GINTMSK_MMISM
 ((
uöt32_t
)0x00000002Ë

	)

8161 
	#USB_OTG_GINTMSK_OTGINT
 ((
uöt32_t
)0x00000004Ë

	)

8162 
	#USB_OTG_GINTMSK_SOFM
 ((
uöt32_t
)0x00000008Ë

	)

8163 
	#USB_OTG_GINTMSK_RXFLVLM
 ((
uöt32_t
)0x00000010Ë

	)

8164 
	#USB_OTG_GINTMSK_NPTXFEM
 ((
uöt32_t
)0x00000020Ë

	)

8165 
	#USB_OTG_GINTMSK_GINAKEFFM
 ((
uöt32_t
)0x00000040Ë

	)

8166 
	#USB_OTG_GINTMSK_GONAKEFFM
 ((
uöt32_t
)0x00000080Ë

	)

8167 
	#USB_OTG_GINTMSK_ESUSPM
 ((
uöt32_t
)0x00000400Ë

	)

8168 
	#USB_OTG_GINTMSK_USBSUSPM
 ((
uöt32_t
)0x00000800Ë

	)

8169 
	#USB_OTG_GINTMSK_USBRST
 ((
uöt32_t
)0x00001000Ë

	)

8170 
	#USB_OTG_GINTMSK_ENUMDNEM
 ((
uöt32_t
)0x00002000Ë

	)

8171 
	#USB_OTG_GINTMSK_ISOODRPM
 ((
uöt32_t
)0x00004000Ë

	)

8172 
	#USB_OTG_GINTMSK_EOPFM
 ((
uöt32_t
)0x00008000Ë

	)

8173 
	#USB_OTG_GINTMSK_EPMISM
 ((
uöt32_t
)0x00020000Ë

	)

8174 
	#USB_OTG_GINTMSK_IEPINT
 ((
uöt32_t
)0x00040000Ë

	)

8175 
	#USB_OTG_GINTMSK_OEPINT
 ((
uöt32_t
)0x00080000Ë

	)

8176 
	#USB_OTG_GINTMSK_IISOIXFRM
 ((
uöt32_t
)0x00100000Ë

	)

8177 
	#USB_OTG_GINTMSK_PXFRM_IISOOXFRM
 ((
uöt32_t
)0x00200000Ë

	)

8178 
	#USB_OTG_GINTMSK_FSUSPM
 ((
uöt32_t
)0x00400000Ë

	)

8179 
	#USB_OTG_GINTMSK_PRTIM
 ((
uöt32_t
)0x01000000Ë

	)

8180 
	#USB_OTG_GINTMSK_HCIM
 ((
uöt32_t
)0x02000000Ë

	)

8181 
	#USB_OTG_GINTMSK_PTXFEM
 ((
uöt32_t
)0x04000000Ë

	)

8182 
	#USB_OTG_GINTMSK_CIDSCHGM
 ((
uöt32_t
)0x10000000Ë

	)

8183 
	#USB_OTG_GINTMSK_DISCINT
 ((
uöt32_t
)0x20000000Ë

	)

8184 
	#USB_OTG_GINTMSK_SRQIM
 ((
uöt32_t
)0x40000000Ë

	)

8185 
	#USB_OTG_GINTMSK_WUIM
 ((
uöt32_t
)0x80000000Ë

	)

8188 
	#USB_OTG_DAINT_IEPINT
 ((
uöt32_t
)0x0000FFFFË

	)

8189 
	#USB_OTG_DAINT_OEPINT
 ((
uöt32_t
)0xFFFF0000Ë

	)

8192 
	#USB_OTG_HAINTMSK_HAINTM
 ((
uöt32_t
)0x0000FFFFË

	)

8195 
	#USB_OTG_GRXSTSP_EPNUM
 ((
uöt32_t
)0x0000000FË

	)

8196 
	#USB_OTG_GRXSTSP_BCNT
 ((
uöt32_t
)0x00007FF0Ë

	)

8197 
	#USB_OTG_GRXSTSP_DPID
 ((
uöt32_t
)0x00018000Ë

	)

8198 
	#USB_OTG_GRXSTSP_PKTSTS
 ((
uöt32_t
)0x001E0000Ë

	)

8201 
	#USB_OTG_DAINTMSK_IEPM
 ((
uöt32_t
)0x0000FFFFË

	)

8202 
	#USB_OTG_DAINTMSK_OEPM
 ((
uöt32_t
)0xFFFF0000Ë

	)

8206 
	#USB_OTG_CHNUM
 ((
uöt32_t
)0x0000000FË

	)

8207 
	#USB_OTG_CHNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

8208 
	#USB_OTG_CHNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

8209 
	#USB_OTG_CHNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

8210 
	#USB_OTG_CHNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

8211 
	#USB_OTG_BCNT
 ((
uöt32_t
)0x00007FF0Ë

	)

8213 
	#USB_OTG_DPID
 ((
uöt32_t
)0x00018000Ë

	)

8214 
	#USB_OTG_DPID_0
 ((
uöt32_t
)0x00008000Ë

	)

8215 
	#USB_OTG_DPID_1
 ((
uöt32_t
)0x00010000Ë

	)

8217 
	#USB_OTG_PKTSTS
 ((
uöt32_t
)0x001E0000Ë

	)

8218 
	#USB_OTG_PKTSTS_0
 ((
uöt32_t
)0x00020000Ë

	)

8219 
	#USB_OTG_PKTSTS_1
 ((
uöt32_t
)0x00040000Ë

	)

8220 
	#USB_OTG_PKTSTS_2
 ((
uöt32_t
)0x00080000Ë

	)

8221 
	#USB_OTG_PKTSTS_3
 ((
uöt32_t
)0x00100000Ë

	)

8223 
	#USB_OTG_EPNUM
 ((
uöt32_t
)0x0000000FË

	)

8224 
	#USB_OTG_EPNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

8225 
	#USB_OTG_EPNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

8226 
	#USB_OTG_EPNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

8227 
	#USB_OTG_EPNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

8229 
	#USB_OTG_FRMNUM
 ((
uöt32_t
)0x01E00000Ë

	)

8230 
	#USB_OTG_FRMNUM_0
 ((
uöt32_t
)0x00200000Ë

	)

8231 
	#USB_OTG_FRMNUM_1
 ((
uöt32_t
)0x00400000Ë

	)

8232 
	#USB_OTG_FRMNUM_2
 ((
uöt32_t
)0x00800000Ë

	)

8233 
	#USB_OTG_FRMNUM_3
 ((
uöt32_t
)0x01000000Ë

	)

8237 
	#USB_OTG_CHNUM
 ((
uöt32_t
)0x0000000FË

	)

8238 
	#USB_OTG_CHNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

8239 
	#USB_OTG_CHNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

8240 
	#USB_OTG_CHNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

8241 
	#USB_OTG_CHNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

8242 
	#USB_OTG_BCNT
 ((
uöt32_t
)0x00007FF0Ë

	)

8244 
	#USB_OTG_DPID
 ((
uöt32_t
)0x00018000Ë

	)

8245 
	#USB_OTG_DPID_0
 ((
uöt32_t
)0x00008000Ë

	)

8246 
	#USB_OTG_DPID_1
 ((
uöt32_t
)0x00010000Ë

	)

8248 
	#USB_OTG_PKTSTS
 ((
uöt32_t
)0x001E0000Ë

	)

8249 
	#USB_OTG_PKTSTS_0
 ((
uöt32_t
)0x00020000Ë

	)

8250 
	#USB_OTG_PKTSTS_1
 ((
uöt32_t
)0x00040000Ë

	)

8251 
	#USB_OTG_PKTSTS_2
 ((
uöt32_t
)0x00080000Ë

	)

8252 
	#USB_OTG_PKTSTS_3
 ((
uöt32_t
)0x00100000Ë

	)

8254 
	#USB_OTG_EPNUM
 ((
uöt32_t
)0x0000000FË

	)

8255 
	#USB_OTG_EPNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

8256 
	#USB_OTG_EPNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

8257 
	#USB_OTG_EPNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

8258 
	#USB_OTG_EPNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

8260 
	#USB_OTG_FRMNUM
 ((
uöt32_t
)0x01E00000Ë

	)

8261 
	#USB_OTG_FRMNUM_0
 ((
uöt32_t
)0x00200000Ë

	)

8262 
	#USB_OTG_FRMNUM_1
 ((
uöt32_t
)0x00400000Ë

	)

8263 
	#USB_OTG_FRMNUM_2
 ((
uöt32_t
)0x00800000Ë

	)

8264 
	#USB_OTG_FRMNUM_3
 ((
uöt32_t
)0x01000000Ë

	)

8267 
	#USB_OTG_GRXFSIZ_RXFD
 ((
uöt32_t
)0x0000FFFFË

	)

8270 
	#USB_OTG_DVBUSDIS_VBUSDT
 ((
uöt32_t
)0x0000FFFFË

	)

8273 
	#USB_OTG_NPTXFSA
 ((
uöt32_t
)0x0000FFFFË

	)

8274 
	#USB_OTG_NPTXFD
 ((
uöt32_t
)0xFFFF0000Ë

	)

8275 
	#USB_OTG_TX0FSA
 ((
uöt32_t
)0x0000FFFFË

	)

8276 
	#USB_OTG_TX0FD
 ((
uöt32_t
)0xFFFF0000Ë

	)

8279 
	#USB_OTG_DVBUSPULSE_DVBUSP
 ((
uöt32_t
)0x00000FFFË

	)

8282 
	#USB_OTG_GNPTXSTS_NPTXFSAV
 ((
uöt32_t
)0x0000FFFFË

	)

8284 
	#USB_OTG_GNPTXSTS_NPTQXSAV
 ((
uöt32_t
)0x00FF0000Ë

	)

8285 
	#USB_OTG_GNPTXSTS_NPTQXSAV_0
 ((
uöt32_t
)0x00010000Ë

	)

8286 
	#USB_OTG_GNPTXSTS_NPTQXSAV_1
 ((
uöt32_t
)0x00020000Ë

	)

8287 
	#USB_OTG_GNPTXSTS_NPTQXSAV_2
 ((
uöt32_t
)0x00040000Ë

	)

8288 
	#USB_OTG_GNPTXSTS_NPTQXSAV_3
 ((
uöt32_t
)0x00080000Ë

	)

8289 
	#USB_OTG_GNPTXSTS_NPTQXSAV_4
 ((
uöt32_t
)0x00100000Ë

	)

8290 
	#USB_OTG_GNPTXSTS_NPTQXSAV_5
 ((
uöt32_t
)0x00200000Ë

	)

8291 
	#USB_OTG_GNPTXSTS_NPTQXSAV_6
 ((
uöt32_t
)0x00400000Ë

	)

8292 
	#USB_OTG_GNPTXSTS_NPTQXSAV_7
 ((
uöt32_t
)0x00800000Ë

	)

8294 
	#USB_OTG_GNPTXSTS_NPTXQTOP
 ((
uöt32_t
)0x7F000000Ë

	)

8295 
	#USB_OTG_GNPTXSTS_NPTXQTOP_0
 ((
uöt32_t
)0x01000000Ë

	)

8296 
	#USB_OTG_GNPTXSTS_NPTXQTOP_1
 ((
uöt32_t
)0x02000000Ë

	)

8297 
	#USB_OTG_GNPTXSTS_NPTXQTOP_2
 ((
uöt32_t
)0x04000000Ë

	)

8298 
	#USB_OTG_GNPTXSTS_NPTXQTOP_3
 ((
uöt32_t
)0x08000000Ë

	)

8299 
	#USB_OTG_GNPTXSTS_NPTXQTOP_4
 ((
uöt32_t
)0x10000000Ë

	)

8300 
	#USB_OTG_GNPTXSTS_NPTXQTOP_5
 ((
uöt32_t
)0x20000000Ë

	)

8301 
	#USB_OTG_GNPTXSTS_NPTXQTOP_6
 ((
uöt32_t
)0x40000000Ë

	)

8304 
	#USB_OTG_DTHRCTL_NONISOTHREN
 ((
uöt32_t
)0x00000001Ë

	)

8305 
	#USB_OTG_DTHRCTL_ISOTHREN
 ((
uöt32_t
)0x00000002Ë

	)

8307 
	#USB_OTG_DTHRCTL_TXTHRLEN
 ((
uöt32_t
)0x000007FCË

	)

8308 
	#USB_OTG_DTHRCTL_TXTHRLEN_0
 ((
uöt32_t
)0x00000004Ë

	)

8309 
	#USB_OTG_DTHRCTL_TXTHRLEN_1
 ((
uöt32_t
)0x00000008Ë

	)

8310 
	#USB_OTG_DTHRCTL_TXTHRLEN_2
 ((
uöt32_t
)0x00000010Ë

	)

8311 
	#USB_OTG_DTHRCTL_TXTHRLEN_3
 ((
uöt32_t
)0x00000020Ë

	)

8312 
	#USB_OTG_DTHRCTL_TXTHRLEN_4
 ((
uöt32_t
)0x00000040Ë

	)

8313 
	#USB_OTG_DTHRCTL_TXTHRLEN_5
 ((
uöt32_t
)0x00000080Ë

	)

8314 
	#USB_OTG_DTHRCTL_TXTHRLEN_6
 ((
uöt32_t
)0x00000100Ë

	)

8315 
	#USB_OTG_DTHRCTL_TXTHRLEN_7
 ((
uöt32_t
)0x00000200Ë

	)

8316 
	#USB_OTG_DTHRCTL_TXTHRLEN_8
 ((
uöt32_t
)0x00000400Ë

	)

8317 
	#USB_OTG_DTHRCTL_RXTHREN
 ((
uöt32_t
)0x00010000Ë

	)

8319 
	#USB_OTG_DTHRCTL_RXTHRLEN
 ((
uöt32_t
)0x03FE0000Ë

	)

8320 
	#USB_OTG_DTHRCTL_RXTHRLEN_0
 ((
uöt32_t
)0x00020000Ë

	)

8321 
	#USB_OTG_DTHRCTL_RXTHRLEN_1
 ((
uöt32_t
)0x00040000Ë

	)

8322 
	#USB_OTG_DTHRCTL_RXTHRLEN_2
 ((
uöt32_t
)0x00080000Ë

	)

8323 
	#USB_OTG_DTHRCTL_RXTHRLEN_3
 ((
uöt32_t
)0x00100000Ë

	)

8324 
	#USB_OTG_DTHRCTL_RXTHRLEN_4
 ((
uöt32_t
)0x00200000Ë

	)

8325 
	#USB_OTG_DTHRCTL_RXTHRLEN_5
 ((
uöt32_t
)0x00400000Ë

	)

8326 
	#USB_OTG_DTHRCTL_RXTHRLEN_6
 ((
uöt32_t
)0x00800000Ë

	)

8327 
	#USB_OTG_DTHRCTL_RXTHRLEN_7
 ((
uöt32_t
)0x01000000Ë

	)

8328 
	#USB_OTG_DTHRCTL_RXTHRLEN_8
 ((
uöt32_t
)0x02000000Ë

	)

8329 
	#USB_OTG_DTHRCTL_ARPEN
 ((
uöt32_t
)0x08000000Ë

	)

8332 
	#USB_OTG_DIEPEMPMSK_INEPTXFEM
 ((
uöt32_t
)0x0000FFFFË

	)

8335 
	#USB_OTG_DEACHINT_IEP1INT
 ((
uöt32_t
)0x00000002Ë

	)

8336 
	#USB_OTG_DEACHINT_OEP1INT
 ((
uöt32_t
)0x00020000Ë

	)

8339 
	#USB_OTG_GCCFG_PWRDWN
 ((
uöt32_t
)0x00010000Ë

	)

8340 
	#USB_OTG_GCCFG_I2CPADEN
 ((
uöt32_t
)0x00020000Ë

	)

8341 
	#USB_OTG_GCCFG_VBUSASEN
 ((
uöt32_t
)0x00040000Ë

	)

8342 
	#USB_OTG_GCCFG_VBUSBSEN
 ((
uöt32_t
)0x00080000Ë

	)

8343 
	#USB_OTG_GCCFG_SOFOUTEN
 ((
uöt32_t
)0x00100000Ë

	)

8344 
	#USB_OTG_GCCFG_NOVBUSSENS
 ((
uöt32_t
)0x00200000Ë

	)

8347 
	#USB_OTG_DEACHINTMSK_IEP1INTM
 ((
uöt32_t
)0x00000002Ë

	)

8348 
	#USB_OTG_DEACHINTMSK_OEP1INTM
 ((
uöt32_t
)0x00020000Ë

	)

8351 
	#USB_OTG_CID_PRODUCT_ID
 ((
uöt32_t
)0xFFFFFFFFË

	)

8354 
	#USB_OTG_DIEPEACHMSK1_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

8355 
	#USB_OTG_DIEPEACHMSK1_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

8356 
	#USB_OTG_DIEPEACHMSK1_TOM
 ((
uöt32_t
)0x00000008Ë

	)

8357 
	#USB_OTG_DIEPEACHMSK1_ITTXFEMSK
 ((
uöt32_t
)0x00000010Ë

	)

8358 
	#USB_OTG_DIEPEACHMSK1_INEPNMM
 ((
uöt32_t
)0x00000020Ë

	)

8359 
	#USB_OTG_DIEPEACHMSK1_INEPNEM
 ((
uöt32_t
)0x00000040Ë

	)

8360 
	#USB_OTG_DIEPEACHMSK1_TXFURM
 ((
uöt32_t
)0x00000100Ë

	)

8361 
	#USB_OTG_DIEPEACHMSK1_BIM
 ((
uöt32_t
)0x00000200Ë

	)

8362 
	#USB_OTG_DIEPEACHMSK1_NAKM
 ((
uöt32_t
)0x00002000Ë

	)

8365 
	#USB_OTG_HPRT_PCSTS
 ((
uöt32_t
)0x00000001Ë

	)

8366 
	#USB_OTG_HPRT_PCDET
 ((
uöt32_t
)0x00000002Ë

	)

8367 
	#USB_OTG_HPRT_PENA
 ((
uöt32_t
)0x00000004Ë

	)

8368 
	#USB_OTG_HPRT_PENCHNG
 ((
uöt32_t
)0x00000008Ë

	)

8369 
	#USB_OTG_HPRT_POCA
 ((
uöt32_t
)0x00000010Ë

	)

8370 
	#USB_OTG_HPRT_POCCHNG
 ((
uöt32_t
)0x00000020Ë

	)

8371 
	#USB_OTG_HPRT_PRES
 ((
uöt32_t
)0x00000040Ë

	)

8372 
	#USB_OTG_HPRT_PSUSP
 ((
uöt32_t
)0x00000080Ë

	)

8373 
	#USB_OTG_HPRT_PRST
 ((
uöt32_t
)0x00000100Ë

	)

8375 
	#USB_OTG_HPRT_PLSTS
 ((
uöt32_t
)0x00000C00Ë

	)

8376 
	#USB_OTG_HPRT_PLSTS_0
 ((
uöt32_t
)0x00000400Ë

	)

8377 
	#USB_OTG_HPRT_PLSTS_1
 ((
uöt32_t
)0x00000800Ë

	)

8378 
	#USB_OTG_HPRT_PPWR
 ((
uöt32_t
)0x00001000Ë

	)

8380 
	#USB_OTG_HPRT_PTCTL
 ((
uöt32_t
)0x0001E000Ë

	)

8381 
	#USB_OTG_HPRT_PTCTL_0
 ((
uöt32_t
)0x00002000Ë

	)

8382 
	#USB_OTG_HPRT_PTCTL_1
 ((
uöt32_t
)0x00004000Ë

	)

8383 
	#USB_OTG_HPRT_PTCTL_2
 ((
uöt32_t
)0x00008000Ë

	)

8384 
	#USB_OTG_HPRT_PTCTL_3
 ((
uöt32_t
)0x00010000Ë

	)

8386 
	#USB_OTG_HPRT_PSPD
 ((
uöt32_t
)0x00060000Ë

	)

8387 
	#USB_OTG_HPRT_PSPD_0
 ((
uöt32_t
)0x00020000Ë

	)

8388 
	#USB_OTG_HPRT_PSPD_1
 ((
uöt32_t
)0x00040000Ë

	)

8391 
	#USB_OTG_DOEPEACHMSK1_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

8392 
	#USB_OTG_DOEPEACHMSK1_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

8393 
	#USB_OTG_DOEPEACHMSK1_TOM
 ((
uöt32_t
)0x00000008Ë

	)

8394 
	#USB_OTG_DOEPEACHMSK1_ITTXFEMSK
 ((
uöt32_t
)0x00000010Ë

	)

8395 
	#USB_OTG_DOEPEACHMSK1_INEPNMM
 ((
uöt32_t
)0x00000020Ë

	)

8396 
	#USB_OTG_DOEPEACHMSK1_INEPNEM
 ((
uöt32_t
)0x00000040Ë

	)

8397 
	#USB_OTG_DOEPEACHMSK1_TXFURM
 ((
uöt32_t
)0x00000100Ë

	)

8398 
	#USB_OTG_DOEPEACHMSK1_BIM
 ((
uöt32_t
)0x00000200Ë

	)

8399 
	#USB_OTG_DOEPEACHMSK1_BERRM
 ((
uöt32_t
)0x00001000Ë

	)

8400 
	#USB_OTG_DOEPEACHMSK1_NAKM
 ((
uöt32_t
)0x00002000Ë

	)

8401 
	#USB_OTG_DOEPEACHMSK1_NYETM
 ((
uöt32_t
)0x00004000Ë

	)

8404 
	#USB_OTG_HPTXFSIZ_PTXSA
 ((
uöt32_t
)0x0000FFFFË

	)

8405 
	#USB_OTG_HPTXFSIZ_PTXFD
 ((
uöt32_t
)0xFFFF0000Ë

	)

8408 
	#USB_OTG_DIEPCTL_MPSIZ
 ((
uöt32_t
)0x000007FFË

	)

8409 
	#USB_OTG_DIEPCTL_USBAEP
 ((
uöt32_t
)0x00008000Ë

	)

8410 
	#USB_OTG_DIEPCTL_EONUM_DPID
 ((
uöt32_t
)0x00010000Ë

	)

8411 
	#USB_OTG_DIEPCTL_NAKSTS
 ((
uöt32_t
)0x00020000Ë

	)

8413 
	#USB_OTG_DIEPCTL_EPTYP
 ((
uöt32_t
)0x000C0000Ë

	)

8414 
	#USB_OTG_DIEPCTL_EPTYP_0
 ((
uöt32_t
)0x00040000Ë

	)

8415 
	#USB_OTG_DIEPCTL_EPTYP_1
 ((
uöt32_t
)0x00080000Ë

	)

8416 
	#USB_OTG_DIEPCTL_STALL
 ((
uöt32_t
)0x00200000Ë

	)

8418 
	#USB_OTG_DIEPCTL_TXFNUM
 ((
uöt32_t
)0x03C00000Ë

	)

8419 
	#USB_OTG_DIEPCTL_TXFNUM_0
 ((
uöt32_t
)0x00400000Ë

	)

8420 
	#USB_OTG_DIEPCTL_TXFNUM_1
 ((
uöt32_t
)0x00800000Ë

	)

8421 
	#USB_OTG_DIEPCTL_TXFNUM_2
 ((
uöt32_t
)0x01000000Ë

	)

8422 
	#USB_OTG_DIEPCTL_TXFNUM_3
 ((
uöt32_t
)0x02000000Ë

	)

8423 
	#USB_OTG_DIEPCTL_CNAK
 ((
uöt32_t
)0x04000000Ë

	)

8424 
	#USB_OTG_DIEPCTL_SNAK
 ((
uöt32_t
)0x08000000Ë

	)

8425 
	#USB_OTG_DIEPCTL_SD0PID_SEVNFRM
 ((
uöt32_t
)0x10000000Ë

	)

8426 
	#USB_OTG_DIEPCTL_SODDFRM
 ((
uöt32_t
)0x20000000Ë

	)

8427 
	#USB_OTG_DIEPCTL_EPDIS
 ((
uöt32_t
)0x40000000Ë

	)

8428 
	#USB_OTG_DIEPCTL_EPENA
 ((
uöt32_t
)0x80000000Ë

	)

8431 
	#USB_OTG_HCCHAR_MPSIZ
 ((
uöt32_t
)0x000007FFË

	)

8433 
	#USB_OTG_HCCHAR_EPNUM
 ((
uöt32_t
)0x00007800Ë

	)

8434 
	#USB_OTG_HCCHAR_EPNUM_0
 ((
uöt32_t
)0x00000800Ë

	)

8435 
	#USB_OTG_HCCHAR_EPNUM_1
 ((
uöt32_t
)0x00001000Ë

	)

8436 
	#USB_OTG_HCCHAR_EPNUM_2
 ((
uöt32_t
)0x00002000Ë

	)

8437 
	#USB_OTG_HCCHAR_EPNUM_3
 ((
uöt32_t
)0x00004000Ë

	)

8438 
	#USB_OTG_HCCHAR_EPDIR
 ((
uöt32_t
)0x00008000Ë

	)

8439 
	#USB_OTG_HCCHAR_LSDEV
 ((
uöt32_t
)0x00020000Ë

	)

8441 
	#USB_OTG_HCCHAR_EPTYP
 ((
uöt32_t
)0x000C0000Ë

	)

8442 
	#USB_OTG_HCCHAR_EPTYP_0
 ((
uöt32_t
)0x00040000Ë

	)

8443 
	#USB_OTG_HCCHAR_EPTYP_1
 ((
uöt32_t
)0x00080000Ë

	)

8445 
	#USB_OTG_HCCHAR_MC
 ((
uöt32_t
)0x00300000Ë

	)

8446 
	#USB_OTG_HCCHAR_MC_0
 ((
uöt32_t
)0x00100000Ë

	)

8447 
	#USB_OTG_HCCHAR_MC_1
 ((
uöt32_t
)0x00200000Ë

	)

8449 
	#USB_OTG_HCCHAR_DAD
 ((
uöt32_t
)0x1FC00000Ë

	)

8450 
	#USB_OTG_HCCHAR_DAD_0
 ((
uöt32_t
)0x00400000Ë

	)

8451 
	#USB_OTG_HCCHAR_DAD_1
 ((
uöt32_t
)0x00800000Ë

	)

8452 
	#USB_OTG_HCCHAR_DAD_2
 ((
uöt32_t
)0x01000000Ë

	)

8453 
	#USB_OTG_HCCHAR_DAD_3
 ((
uöt32_t
)0x02000000Ë

	)

8454 
	#USB_OTG_HCCHAR_DAD_4
 ((
uöt32_t
)0x04000000Ë

	)

8455 
	#USB_OTG_HCCHAR_DAD_5
 ((
uöt32_t
)0x08000000Ë

	)

8456 
	#USB_OTG_HCCHAR_DAD_6
 ((
uöt32_t
)0x10000000Ë

	)

8457 
	#USB_OTG_HCCHAR_ODDFRM
 ((
uöt32_t
)0x20000000Ë

	)

8458 
	#USB_OTG_HCCHAR_CHDIS
 ((
uöt32_t
)0x40000000Ë

	)

8459 
	#USB_OTG_HCCHAR_CHENA
 ((
uöt32_t
)0x80000000Ë

	)

8463 
	#USB_OTG_HCSPLT_PRTADDR
 ((
uöt32_t
)0x0000007FË

	)

8464 
	#USB_OTG_HCSPLT_PRTADDR_0
 ((
uöt32_t
)0x00000001Ë

	)

8465 
	#USB_OTG_HCSPLT_PRTADDR_1
 ((
uöt32_t
)0x00000002Ë

	)

8466 
	#USB_OTG_HCSPLT_PRTADDR_2
 ((
uöt32_t
)0x00000004Ë

	)

8467 
	#USB_OTG_HCSPLT_PRTADDR_3
 ((
uöt32_t
)0x00000008Ë

	)

8468 
	#USB_OTG_HCSPLT_PRTADDR_4
 ((
uöt32_t
)0x00000010Ë

	)

8469 
	#USB_OTG_HCSPLT_PRTADDR_5
 ((
uöt32_t
)0x00000020Ë

	)

8470 
	#USB_OTG_HCSPLT_PRTADDR_6
 ((
uöt32_t
)0x00000040Ë

	)

8472 
	#USB_OTG_HCSPLT_HUBADDR
 ((
uöt32_t
)0x00003F80Ë

	)

8473 
	#USB_OTG_HCSPLT_HUBADDR_0
 ((
uöt32_t
)0x00000080Ë

	)

8474 
	#USB_OTG_HCSPLT_HUBADDR_1
 ((
uöt32_t
)0x00000100Ë

	)

8475 
	#USB_OTG_HCSPLT_HUBADDR_2
 ((
uöt32_t
)0x00000200Ë

	)

8476 
	#USB_OTG_HCSPLT_HUBADDR_3
 ((
uöt32_t
)0x00000400Ë

	)

8477 
	#USB_OTG_HCSPLT_HUBADDR_4
 ((
uöt32_t
)0x00000800Ë

	)

8478 
	#USB_OTG_HCSPLT_HUBADDR_5
 ((
uöt32_t
)0x00001000Ë

	)

8479 
	#USB_OTG_HCSPLT_HUBADDR_6
 ((
uöt32_t
)0x00002000Ë

	)

8481 
	#USB_OTG_HCSPLT_XACTPOS
 ((
uöt32_t
)0x0000C000Ë

	)

8482 
	#USB_OTG_HCSPLT_XACTPOS_0
 ((
uöt32_t
)0x00004000Ë

	)

8483 
	#USB_OTG_HCSPLT_XACTPOS_1
 ((
uöt32_t
)0x00008000Ë

	)

8484 
	#USB_OTG_HCSPLT_COMPLSPLT
 ((
uöt32_t
)0x00010000Ë

	)

8485 
	#USB_OTG_HCSPLT_SPLITEN
 ((
uöt32_t
)0x80000000Ë

	)

8488 
	#USB_OTG_HCINT_XFRC
 ((
uöt32_t
)0x00000001Ë

	)

8489 
	#USB_OTG_HCINT_CHH
 ((
uöt32_t
)0x00000002Ë

	)

8490 
	#USB_OTG_HCINT_AHBERR
 ((
uöt32_t
)0x00000004Ë

	)

8491 
	#USB_OTG_HCINT_STALL
 ((
uöt32_t
)0x00000008Ë

	)

8492 
	#USB_OTG_HCINT_NAK
 ((
uöt32_t
)0x00000010Ë

	)

8493 
	#USB_OTG_HCINT_ACK
 ((
uöt32_t
)0x00000020Ë

	)

8494 
	#USB_OTG_HCINT_NYET
 ((
uöt32_t
)0x00000040Ë

	)

8495 
	#USB_OTG_HCINT_TXERR
 ((
uöt32_t
)0x00000080Ë

	)

8496 
	#USB_OTG_HCINT_BBERR
 ((
uöt32_t
)0x00000100Ë

	)

8497 
	#USB_OTG_HCINT_FRMOR
 ((
uöt32_t
)0x00000200Ë

	)

8498 
	#USB_OTG_HCINT_DTERR
 ((
uöt32_t
)0x00000400Ë

	)

8501 
	#USB_OTG_DIEPINT_XFRC
 ((
uöt32_t
)0x00000001Ë

	)

8502 
	#USB_OTG_DIEPINT_EPDISD
 ((
uöt32_t
)0x00000002Ë

	)

8503 
	#USB_OTG_DIEPINT_TOC
 ((
uöt32_t
)0x00000008Ë

	)

8504 
	#USB_OTG_DIEPINT_ITTXFE
 ((
uöt32_t
)0x00000010Ë

	)

8505 
	#USB_OTG_DIEPINT_INEPNE
 ((
uöt32_t
)0x00000040Ë

	)

8506 
	#USB_OTG_DIEPINT_TXFE
 ((
uöt32_t
)0x00000080Ë

	)

8507 
	#USB_OTG_DIEPINT_TXFIFOUDRN
 ((
uöt32_t
)0x00000100Ë

	)

8508 
	#USB_OTG_DIEPINT_BNA
 ((
uöt32_t
)0x00000200Ë

	)

8509 
	#USB_OTG_DIEPINT_PKTDRPSTS
 ((
uöt32_t
)0x00000800Ë

	)

8510 
	#USB_OTG_DIEPINT_BERR
 ((
uöt32_t
)0x00001000Ë

	)

8511 
	#USB_OTG_DIEPINT_NAK
 ((
uöt32_t
)0x00002000Ë

	)

8514 
	#USB_OTG_HCINTMSK_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

8515 
	#USB_OTG_HCINTMSK_CHHM
 ((
uöt32_t
)0x00000002Ë

	)

8516 
	#USB_OTG_HCINTMSK_AHBERR
 ((
uöt32_t
)0x00000004Ë

	)

8517 
	#USB_OTG_HCINTMSK_STALLM
 ((
uöt32_t
)0x00000008Ë

	)

8518 
	#USB_OTG_HCINTMSK_NAKM
 ((
uöt32_t
)0x00000010Ë

	)

8519 
	#USB_OTG_HCINTMSK_ACKM
 ((
uöt32_t
)0x00000020Ë

	)

8520 
	#USB_OTG_HCINTMSK_NYET
 ((
uöt32_t
)0x00000040Ë

	)

8521 
	#USB_OTG_HCINTMSK_TXERRM
 ((
uöt32_t
)0x00000080Ë

	)

8522 
	#USB_OTG_HCINTMSK_BBERRM
 ((
uöt32_t
)0x00000100Ë

	)

8523 
	#USB_OTG_HCINTMSK_FRMORM
 ((
uöt32_t
)0x00000200Ë

	)

8524 
	#USB_OTG_HCINTMSK_DTERRM
 ((
uöt32_t
)0x00000400Ë

	)

8528 
	#USB_OTG_DIEPTSIZ_XFRSIZ
 ((
uöt32_t
)0x0007FFFFË

	)

8529 
	#USB_OTG_DIEPTSIZ_PKTCNT
 ((
uöt32_t
)0x1FF80000Ë

	)

8530 
	#USB_OTG_DIEPTSIZ_MULCNT
 ((
uöt32_t
)0x60000000Ë

	)

8532 
	#USB_OTG_HCTSIZ_XFRSIZ
 ((
uöt32_t
)0x0007FFFFË

	)

8533 
	#USB_OTG_HCTSIZ_PKTCNT
 ((
uöt32_t
)0x1FF80000Ë

	)

8534 
	#USB_OTG_HCTSIZ_DOPING
 ((
uöt32_t
)0x80000000Ë

	)

8535 
	#USB_OTG_HCTSIZ_DPID
 ((
uöt32_t
)0x60000000Ë

	)

8536 
	#USB_OTG_HCTSIZ_DPID_0
 ((
uöt32_t
)0x20000000Ë

	)

8537 
	#USB_OTG_HCTSIZ_DPID_1
 ((
uöt32_t
)0x40000000Ë

	)

8540 
	#USB_OTG_DIEPDMA_DMAADDR
 ((
uöt32_t
)0xFFFFFFFFË

	)

8543 
	#USB_OTG_HCDMA_DMAADDR
 ((
uöt32_t
)0xFFFFFFFFË

	)

8546 
	#USB_OTG_DTXFSTS_INEPTFSAV
 ((
uöt32_t
)0x0000FFFFË

	)

8549 
	#USB_OTG_DIEPTXF_INEPTXSA
 ((
uöt32_t
)0x0000FFFFË

	)

8550 
	#USB_OTG_DIEPTXF_INEPTXFD
 ((
uöt32_t
)0xFFFF0000Ë

	)

8554 
	#USB_OTG_DOEPCTL_MPSIZ
 ((
uöt32_t
)0x000007FFË

	)

8555 
	#USB_OTG_DOEPCTL_USBAEP
 ((
uöt32_t
)0x00008000Ë

	)

8556 
	#USB_OTG_DOEPCTL_NAKSTS
 ((
uöt32_t
)0x00020000Ë

	)

8557 
	#USB_OTG_DOEPCTL_SD0PID_SEVNFRM
 ((
uöt32_t
)0x10000000Ë

	)

8558 
	#USB_OTG_DOEPCTL_SODDFRM
 ((
uöt32_t
)0x20000000Ë

	)

8559 
	#USB_OTG_DOEPCTL_EPTYP
 ((
uöt32_t
)0x000C0000Ë

	)

8560 
	#USB_OTG_DOEPCTL_EPTYP_0
 ((
uöt32_t
)0x00040000Ë

	)

8561 
	#USB_OTG_DOEPCTL_EPTYP_1
 ((
uöt32_t
)0x00080000Ë

	)

8562 
	#USB_OTG_DOEPCTL_SNPM
 ((
uöt32_t
)0x00100000Ë

	)

8563 
	#USB_OTG_DOEPCTL_STALL
 ((
uöt32_t
)0x00200000Ë

	)

8564 
	#USB_OTG_DOEPCTL_CNAK
 ((
uöt32_t
)0x04000000Ë

	)

8565 
	#USB_OTG_DOEPCTL_SNAK
 ((
uöt32_t
)0x08000000Ë

	)

8566 
	#USB_OTG_DOEPCTL_EPDIS
 ((
uöt32_t
)0x40000000Ë

	)

8567 
	#USB_OTG_DOEPCTL_EPENA
 ((
uöt32_t
)0x80000000Ë

	)

8570 
	#USB_OTG_DOEPINT_XFRC
 ((
uöt32_t
)0x00000001Ë

	)

8571 
	#USB_OTG_DOEPINT_EPDISD
 ((
uöt32_t
)0x00000002Ë

	)

8572 
	#USB_OTG_DOEPINT_STUP
 ((
uöt32_t
)0x00000008Ë

	)

8573 
	#USB_OTG_DOEPINT_OTEPDIS
 ((
uöt32_t
)0x00000010Ë

	)

8574 
	#USB_OTG_DOEPINT_B2BSTUP
 ((
uöt32_t
)0x00000040Ë

	)

8575 
	#USB_OTG_DOEPINT_NYET
 ((
uöt32_t
)0x00004000Ë

	)

8579 
	#USB_OTG_DOEPTSIZ_XFRSIZ
 ((
uöt32_t
)0x0007FFFFË

	)

8580 
	#USB_OTG_DOEPTSIZ_PKTCNT
 ((
uöt32_t
)0x1FF80000Ë

	)

8582 
	#USB_OTG_DOEPTSIZ_STUPCNT
 ((
uöt32_t
)0x60000000Ë

	)

8583 
	#USB_OTG_DOEPTSIZ_STUPCNT_0
 ((
uöt32_t
)0x20000000Ë

	)

8584 
	#USB_OTG_DOEPTSIZ_STUPCNT_1
 ((
uöt32_t
)0x40000000Ë

	)

8587 
	#USB_OTG_PCGCCTL_STOPCLK
 ((
uöt32_t
)0x00000001Ë

	)

8588 
	#USB_OTG_PCGCCTL_GATECLK
 ((
uöt32_t
)0x00000002Ë

	)

8589 
	#USB_OTG_PCGCCTL_PHYSUSP
 ((
uöt32_t
)0x00000010Ë

	)

8605 
	#IS_ADC_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
ADC1
) || \

8606 ((
INSTANCE
Ë=
ADC2
) || \

8607 ((
INSTANCE
Ë=
ADC3
))

	)

8610 
	#IS_CAN_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
CAN1
) || \

8611 ((
INSTANCE
Ë=
CAN2
))

	)

8614 
	#IS_CRC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
CRC
)

	)

8617 
	#IS_DAC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
DAC
)

	)

8620 
	#IS_DCMI_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
DCMI
)

	)

8623 
	#IS_DMA2D_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
DMA2D
)

	)

8626 
	#IS_DMA_STREAM_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
DMA1_Såóm0
) || \

8627 ((
INSTANCE
Ë=
DMA1_Såóm1
) || \

8628 ((
INSTANCE
Ë=
DMA1_Såóm2
) || \

8629 ((
INSTANCE
Ë=
DMA1_Såóm3
) || \

8630 ((
INSTANCE
Ë=
DMA1_Såóm4
) || \

8631 ((
INSTANCE
Ë=
DMA1_Såóm5
) || \

8632 ((
INSTANCE
Ë=
DMA1_Såóm6
) || \

8633 ((
INSTANCE
Ë=
DMA1_Såóm7
) || \

8634 ((
INSTANCE
Ë=
DMA2_Såóm0
) || \

8635 ((
INSTANCE
Ë=
DMA2_Såóm1
) || \

8636 ((
INSTANCE
Ë=
DMA2_Såóm2
) || \

8637 ((
INSTANCE
Ë=
DMA2_Såóm3
) || \

8638 ((
INSTANCE
Ë=
DMA2_Såóm4
) || \

8639 ((
INSTANCE
Ë=
DMA2_Såóm5
) || \

8640 ((
INSTANCE
Ë=
DMA2_Såóm6
) || \

8641 ((
INSTANCE
Ë=
DMA2_Såóm7
))

	)

8644 
	#IS_GPIO_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
GPIOA
) || \

8645 ((
INSTANCE
Ë=
GPIOB
) || \

8646 ((
INSTANCE
Ë=
GPIOC
) || \

8647 ((
INSTANCE
Ë=
GPIOD
) || \

8648 ((
INSTANCE
Ë=
GPIOE
) || \

8649 ((
INSTANCE
Ë=
GPIOF
) || \

8650 ((
INSTANCE
Ë=
GPIOG
) || \

8651 ((
INSTANCE
Ë=
GPIOH
) || \

8652 ((
INSTANCE
Ë=
GPIOI
) || \

8653 ((
INSTANCE
Ë=
GPIOJ
) || \

8654 ((
INSTANCE
Ë=
GPIOK
))

	)

8657 
	#IS_I2C_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
I2C1
) || \

8658 ((
INSTANCE
Ë=
I2C2
) || \

8659 ((
INSTANCE
Ë=
I2C3
))

	)

8662 
	#IS_I2S_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
SPI2
) || \

8663 ((
INSTANCE
Ë=
SPI3
))

	)

8666 
	#IS_I2S_ALL_INSTANCE_EXT
(
PERIPH
Ë(((
INSTANCE
Ë=
SPI2
) || \

8667 ((
INSTANCE
Ë=
SPI3
) || \

8668 ((
INSTANCE
Ë=
I2S2ext
) || \

8669 ((
INSTANCE
Ë=
I2S3ext
))

	)

8672 
	#IS_LTDC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
LTDC
)

	)

8675 
	#IS_RNG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
RNG
)

	)

8678 
	#IS_RTC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
RTC
)

	)

8681 
	#IS_SAI_BLOCK_PERIPH
(
PERIPH
Ë(((PERIPHË=
SAI1_Block_A
) || \

8682 ((
PERIPH
Ë=
SAI1_Block_B
))

	)

8685 
	#IS_SPI_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
SPI1
) || \

8686 ((
INSTANCE
Ë=
SPI2
) || \

8687 ((
INSTANCE
Ë=
SPI3
) || \

8688 ((
INSTANCE
Ë=
SPI4
) || \

8689 ((
INSTANCE
Ë=
SPI5
) || \

8690 ((
INSTANCE
Ë=
SPI6
))

	)

8693 
	#IS_SPI_ALL_INSTANCE_EXT
(
INSTANCE
Ë(((INSTANCEË=
SPI1
) || \

8694 ((
INSTANCE
Ë=
SPI2
) || \

8695 ((
INSTANCE
Ë=
SPI3
) || \

8696 ((
INSTANCE
Ë=
SPI4
) || \

8697 ((
INSTANCE
Ë=
SPI5
) || \

8698 ((
INSTANCE
Ë=
SPI6
) || \

8699 ((
INSTANCE
Ë=
I2S2ext
) || \

8700 ((
INSTANCE
Ë=
I2S3ext
))

	)

8703 
	#IS_TIM_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8704 ((
INSTANCE
Ë=
TIM2
) || \

8705 ((
INSTANCE
Ë=
TIM3
) || \

8706 ((
INSTANCE
Ë=
TIM4
) || \

8707 ((
INSTANCE
Ë=
TIM5
) || \

8708 ((
INSTANCE
Ë=
TIM6
) || \

8709 ((
INSTANCE
Ë=
TIM7
) || \

8710 ((
INSTANCE
Ë=
TIM8
) || \

8711 ((
INSTANCE
Ë=
TIM9
) || \

8712 ((
INSTANCE
Ë=
TIM10
) || \

8713 ((
INSTANCE
Ë=
TIM11
) || \

8714 ((
INSTANCE
Ë=
TIM12
) || \

8715 ((
INSTANCE
Ë=
TIM13
) || \

8716 ((
INSTANCE
Ë=
TIM14
))

	)

8719 
	#IS_TIM_CC1_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8720 ((
INSTANCE
Ë=
TIM2
) || \

8721 ((
INSTANCE
Ë=
TIM3
) || \

8722 ((
INSTANCE
Ë=
TIM4
) || \

8723 ((
INSTANCE
Ë=
TIM5
) || \

8724 ((
INSTANCE
Ë=
TIM8
) || \

8725 ((
INSTANCE
Ë=
TIM9
) || \

8726 ((
INSTANCE
Ë=
TIM10
) || \

8727 ((
INSTANCE
Ë=
TIM11
) || \

8728 ((
INSTANCE
Ë=
TIM12
) || \

8729 ((
INSTANCE
Ë=
TIM13
) || \

8730 ((
INSTANCE
Ë=
TIM14
))

	)

8733 
	#IS_TIM_CC2_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8734 ((
INSTANCE
Ë=
TIM2
) || \

8735 ((
INSTANCE
Ë=
TIM3
) || \

8736 ((
INSTANCE
Ë=
TIM4
) || \

8737 ((
INSTANCE
Ë=
TIM5
) || \

8738 ((
INSTANCE
Ë=
TIM8
) || \

8739 ((
INSTANCE
Ë=
TIM9
) || \

8740 ((
INSTANCE
Ë=
TIM12
))

	)

8743 
	#IS_TIM_CC3_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8744 ((
INSTANCE
Ë=
TIM2
) || \

8745 ((
INSTANCE
Ë=
TIM3
) || \

8746 ((
INSTANCE
Ë=
TIM4
) || \

8747 ((
INSTANCE
Ë=
TIM5
) || \

8748 ((
INSTANCE
Ë=
TIM8
))

	)

8751 
	#IS_TIM_CC4_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8752 ((
INSTANCE
Ë=
TIM2
) || \

8753 ((
INSTANCE
Ë=
TIM3
) || \

8754 ((
INSTANCE
Ë=
TIM4
) || \

8755 ((
INSTANCE
Ë=
TIM5
) || \

8756 ((
INSTANCE
Ë=
TIM8
))

	)

8759 
	#IS_TIM_ADVANCED_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8760 ((
INSTANCE
Ë=
TIM8
))

	)

8763 
	#IS_TIM_XOR_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8764 ((
INSTANCE
Ë=
TIM2
) || \

8765 ((
INSTANCE
Ë=
TIM3
) || \

8766 ((
INSTANCE
Ë=
TIM4
) || \

8767 ((
INSTANCE
Ë=
TIM5
) || \

8768 ((
INSTANCE
Ë=
TIM8
))

	)

8771 
	#IS_TIM_DMA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8772 ((
INSTANCE
Ë=
TIM2
) || \

8773 ((
INSTANCE
Ë=
TIM3
) || \

8774 ((
INSTANCE
Ë=
TIM4
) || \

8775 ((
INSTANCE
Ë=
TIM5
) || \

8776 ((
INSTANCE
Ë=
TIM6
) || \

8777 ((
INSTANCE
Ë=
TIM7
) || \

8778 ((
INSTANCE
Ë=
TIM8
))

	)

8781 
	#IS_TIM_DMA_CC_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8782 ((
INSTANCE
Ë=
TIM2
) || \

8783 ((
INSTANCE
Ë=
TIM3
) || \

8784 ((
INSTANCE
Ë=
TIM4
) || \

8785 ((
INSTANCE
Ë=
TIM5
) || \

8786 ((
INSTANCE
Ë=
TIM8
))

	)

8789 
	#IS_TIM_CCDMA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8790 ((
INSTANCE
Ë=
TIM2
) || \

8791 ((
INSTANCE
Ë=
TIM3
) || \

8792 ((
INSTANCE
Ë=
TIM4
) || \

8793 ((
INSTANCE
Ë=
TIM5
) || \

8794 ((
INSTANCE
Ë=
TIM8
))

	)

8797 
	#IS_TIM_DMABURST_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8798 ((
INSTANCE
Ë=
TIM2
) || \

8799 ((
INSTANCE
Ë=
TIM3
) || \

8800 ((
INSTANCE
Ë=
TIM4
) || \

8801 ((
INSTANCE
Ë=
TIM5
) || \

8802 ((
INSTANCE
Ë=
TIM8
))

	)

8805 
	#IS_TIM_MASTER_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8806 ((
INSTANCE
Ë=
TIM2
) || \

8807 ((
INSTANCE
Ë=
TIM3
) || \

8808 ((
INSTANCE
Ë=
TIM4
) || \

8809 ((
INSTANCE
Ë=
TIM5
) || \

8810 ((
INSTANCE
Ë=
TIM6
) || \

8811 ((
INSTANCE
Ë=
TIM7
) || \

8812 ((
INSTANCE
Ë=
TIM8
) || \

8813 ((
INSTANCE
Ë=
TIM9
) || \

8814 ((
INSTANCE
Ë=
TIM12
))

	)

8817 
	#IS_TIM_SLAVE_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8818 ((
INSTANCE
Ë=
TIM2
) || \

8819 ((
INSTANCE
Ë=
TIM3
) || \

8820 ((
INSTANCE
Ë=
TIM4
) || \

8821 ((
INSTANCE
Ë=
TIM5
) || \

8822 ((
INSTANCE
Ë=
TIM8
) || \

8823 ((
INSTANCE
Ë=
TIM9
) || \

8824 ((
INSTANCE
Ë=
TIM12
))

	)

8827 
	#IS_TIM_32B_COUNTER_INSTANCE
(
INSTANCE
)(((INSTANCEË=
TIM2
) || \

8828 ((
INSTANCE
Ë=
TIM5
))

	)

8831 
	#IS_TIM_ETR_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

8832 ((
INSTANCE
Ë=
TIM2
) || \

8833 ((
INSTANCE
Ë=
TIM3
) || \

8834 ((
INSTANCE
Ë=
TIM4
) || \

8835 ((
INSTANCE
Ë=
TIM5
) || \

8836 ((
INSTANCE
Ë=
TIM8
))

	)

8839 
	#IS_TIM_REMAP_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
) || \

8840 ((
INSTANCE
Ë=
TIM5
) || \

8841 ((
INSTANCE
Ë=
TIM11
))

	)

8844 
	#IS_TIM_CCX_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

8845 ((((
INSTANCE
Ë=
TIM1
) && \

8846 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

8847 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

8848 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

8849 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

8851 (((
INSTANCE
Ë=
TIM2
) && \

8852 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

8853 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

8854 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

8855 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

8857 (((
INSTANCE
Ë=
TIM3
) && \

8858 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

8859 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

8860 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

8861 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

8863 (((
INSTANCE
Ë=
TIM4
) && \

8864 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

8865 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

8866 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

8867 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

8869 (((
INSTANCE
Ë=
TIM5
) && \

8870 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

8871 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

8872 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

8873 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

8875 (((
INSTANCE
Ë=
TIM8
) && \

8876 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

8877 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

8878 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

8879 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

8881 (((
INSTANCE
Ë=
TIM9
) && \

8882 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

8883 ((
CHANNEL
Ë=
TIM_CHANNEL_2
))) \

8885 (((
INSTANCE
Ë=
TIM10
) && \

8886 (((
CHANNEL
Ë=
TIM_CHANNEL_1
))) \

8888 (((
INSTANCE
Ë=
TIM11
) && \

8889 (((
CHANNEL
Ë=
TIM_CHANNEL_1
))) \

8891 (((
INSTANCE
Ë=
TIM12
) && \

8892 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

8893 ((
CHANNEL
Ë=
TIM_CHANNEL_2
))) \

8895 (((
INSTANCE
Ë=
TIM13
) && \

8896 (((
CHANNEL
Ë=
TIM_CHANNEL_1
))) \

8898 (((
INSTANCE
Ë=
TIM14
) && \

8899 (((
CHANNEL
Ë=
TIM_CHANNEL_1
))))

	)

8902 
	#IS_TIM_CCXN_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

8903 ((((
INSTANCE
Ë=
TIM1
) && \

8904 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

8905 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

8906 ((
CHANNEL
Ë=
TIM_CHANNEL_3
))) \

8908 (((
INSTANCE
Ë=
TIM8
) && \

8909 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

8910 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

8911 ((
CHANNEL
Ë=
TIM_CHANNEL_3
))))

	)

8914 
	#IS_USART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

8915 ((
INSTANCE
Ë=
USART2
) || \

8916 ((
INSTANCE
Ë=
USART3
) || \

8917 ((
INSTANCE
Ë=
USART6
))

	)

8920 
	#IS_UART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

8921 ((
INSTANCE
Ë=
USART2
) || \

8922 ((
INSTANCE
Ë=
USART3
) || \

8923 ((
INSTANCE
Ë=
UART4
) || \

8924 ((
INSTANCE
Ë=
UART5
) || \

8925 ((
INSTANCE
Ë=
USART6
) || \

8926 ((
INSTANCE
Ë=
UART7
) || \

8927 ((
INSTANCE
Ë=
UART8
))

	)

8930 
	#IS_UART_HWFLOW_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

8931 ((
INSTANCE
Ë=
USART2
) || \

8932 ((
INSTANCE
Ë=
USART3
) || \

8933 ((
INSTANCE
Ë=
USART6
))

	)

8936 
	#IS_SMARTCARD_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

8937 ((
INSTANCE
Ë=
USART2
) || \

8938 ((
INSTANCE
Ë=
USART3
) || \

8939 ((
INSTANCE
Ë=
USART6
))

	)

8942 
	#IS_IRDA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

8943 ((
INSTANCE
Ë=
USART2
) || \

8944 ((
INSTANCE
Ë=
USART3
) || \

8945 ((
INSTANCE
Ë=
UART4
) || \

8946 ((
INSTANCE
Ë=
UART5
) || \

8947 ((
INSTANCE
Ë=
USART6
) || \

8948 ((
INSTANCE
Ë=
UART7
) || \

8949 ((
INSTANCE
Ë=
UART8
))

	)

8952 
	#IS_PCD_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USB_OTG_FS
) || \

8953 ((
INSTANCE
Ë=
USB_OTG_HS
))

	)

8956 
	#IS_HCD_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USB_OTG_FS
) || \

8957 ((
INSTANCE
Ë=
USB_OTG_HS
))

	)

8961 
	#IS_IWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
IWDG
)

	)

8964 
	#IS_WWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
WWDG
)

	)

8967 
	#IS_SDIO_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
SDIO
)

	)

8970 
	#USB_OTG_FS_HOST_MAX_CHANNEL_NBR
 8

	)

8971 
	#USB_OTG_FS_MAX_IN_ENDPOINTS
 4

	)

8972 
	#USB_OTG_FS_MAX_OUT_ENDPOINTS
 4

	)

8973 
	#USB_OTG_FS_TOTAL_FIFO_SIZE
 1280

	)

8975 
	#USB_OTG_HS_HOST_MAX_CHANNEL_NBR
 12

	)

8976 
	#USB_OTG_HS_MAX_IN_ENDPOINTS
 6

	)

8977 
	#USB_OTG_HS_MAX_IN_ENDPOINTS
 6

	)

8978 
	#USB_OTG_HS_TOTAL_FIFO_SIZE
 4096

	)

8989 
	#FSMC_IRQn
 
FMC_IRQn


	)

8992 
	#FSMC_IRQH™dÀr
 
FMC_IRQH™dÀr


	)

9006 #ifde‡
__˝lu•lus


	@cmsis/stm32f4xx.h

53 #i‚de‡
__STM32F4xx_H


54 
	#__STM32F4xx_H


	)

56 #ifde‡
__˝lu•lus


68 #i‡!
deföed
 (
STM32F40_41xxx
Ë&& !deföed (
STM32F427_437xx
Ë&& !deföed (
STM32F429_439xx
Ë&& !deföed (
STM32F401xx
Ë&& !deföed (
STM32F411xE
)

88 #ifde‡
STM32F40XX


89 
	#STM32F40_41xxx


	)

93 #ifde‡
STM32F427X


94 
	#STM32F427_437xx


	)

101 #i‡!
deföed
 (
STM32F40_41xxx
Ë&& !deföed (
STM32F427_437xx
Ë&& !deföed (
STM32F429_439xx
Ë&& !deföed (
STM32F401xx
Ë&& !deföed (
STM32F411xE
)

105 #i‡!
deföed
 (
USE_STDPERIPH_DRIVER
)

122 #i‡!
deföed
 (
HSE_VALUE
)

123 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

131 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

132 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x05000Ë

	)

135 #i‡!
deföed
 (
HSI_VALUE
)

136 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

142 
	#__STM32F4XX_STDPERIPH_VERSION_MAIN
 (0x01Ë

	)

143 
	#__STM32F4XX_STDPERIPH_VERSION_SUB1
 (0x04Ë

	)

144 
	#__STM32F4XX_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

145 
	#__STM32F4XX_STDPERIPH_VERSION_RC
 (0x00Ë

	)

146 
	#__STM32F4XX_STDPERIPH_VERSION
 ((
__STM32F4XX_STDPERIPH_VERSION_MAIN
 << 24)\

147 |(
__STM32F4XX_STDPERIPH_VERSION_SUB1
 << 16)\

148 |(
__STM32F4XX_STDPERIPH_VERSION_SUB2
 << 8)\

149 |(
__STM32F4XX_STDPERIPH_VERSION_RC
))

	)

162 
	#__CM4_REV
 0x0001

	)

163 
	#__MPU_PRESENT
 1

	)

164 
	#__NVIC_PRIO_BITS
 4

	)

165 
	#__Víd‹_SysTickC⁄fig
 0

	)

166 
	#__FPU_PRESENT
 1

	)

172 
	eIRQn


175 
N⁄MaskabÀI¡_IRQn
 = -14,

176 
Mem‹yM™agemít_IRQn
 = -12,

177 
BusFau…_IRQn
 = -11,

178 
UßgeFau…_IRQn
 = -10,

179 
SVCÆl_IRQn
 = -5,

180 
DebugM⁄ô‹_IRQn
 = -4,

181 
PídSV_IRQn
 = -2,

182 
SysTick_IRQn
 = -1,

184 
WWDG_IRQn
 = 0,

185 
PVD_IRQn
 = 1,

186 
TAMP_STAMP_IRQn
 = 2,

187 
RTC_WKUP_IRQn
 = 3,

188 
FLASH_IRQn
 = 4,

189 
RCC_IRQn
 = 5,

190 
EXTI0_IRQn
 = 6,

191 
EXTI1_IRQn
 = 7,

192 
EXTI2_IRQn
 = 8,

193 
EXTI3_IRQn
 = 9,

194 
EXTI4_IRQn
 = 10,

195 
DMA1_Såóm0_IRQn
 = 11,

196 
DMA1_Såóm1_IRQn
 = 12,

197 
DMA1_Såóm2_IRQn
 = 13,

198 
DMA1_Såóm3_IRQn
 = 14,

199 
DMA1_Såóm4_IRQn
 = 15,

200 
DMA1_Såóm5_IRQn
 = 16,

201 
DMA1_Såóm6_IRQn
 = 17,

202 
ADC_IRQn
 = 18,

204 #i‡
deföed
 (
STM32F40_41xxx
)

205 
CAN1_TX_IRQn
 = 19,

206 
CAN1_RX0_IRQn
 = 20,

207 
CAN1_RX1_IRQn
 = 21,

208 
CAN1_SCE_IRQn
 = 22,

209 
EXTI9_5_IRQn
 = 23,

210 
TIM1_BRK_TIM9_IRQn
 = 24,

211 
TIM1_UP_TIM10_IRQn
 = 25,

212 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

213 
TIM1_CC_IRQn
 = 27,

214 
TIM2_IRQn
 = 28,

215 
TIM3_IRQn
 = 29,

216 
TIM4_IRQn
 = 30,

217 
I2C1_EV_IRQn
 = 31,

218 
I2C1_ER_IRQn
 = 32,

219 
I2C2_EV_IRQn
 = 33,

220 
I2C2_ER_IRQn
 = 34,

221 
SPI1_IRQn
 = 35,

222 
SPI2_IRQn
 = 36,

223 
USART1_IRQn
 = 37,

224 
USART2_IRQn
 = 38,

225 
USART3_IRQn
 = 39,

226 
EXTI15_10_IRQn
 = 40,

227 
RTC_Aœrm_IRQn
 = 41,

228 
OTG_FS_WKUP_IRQn
 = 42,

229 
TIM8_BRK_TIM12_IRQn
 = 43,

230 
TIM8_UP_TIM13_IRQn
 = 44,

231 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

232 
TIM8_CC_IRQn
 = 46,

233 
DMA1_Såóm7_IRQn
 = 47,

234 
FSMC_IRQn
 = 48,

235 
SDIO_IRQn
 = 49,

236 
TIM5_IRQn
 = 50,

237 
SPI3_IRQn
 = 51,

238 
UART4_IRQn
 = 52,

239 
UART5_IRQn
 = 53,

240 
TIM6_DAC_IRQn
 = 54,

241 
TIM7_IRQn
 = 55,

242 
DMA2_Såóm0_IRQn
 = 56,

243 
DMA2_Såóm1_IRQn
 = 57,

244 
DMA2_Såóm2_IRQn
 = 58,

245 
DMA2_Såóm3_IRQn
 = 59,

246 
DMA2_Såóm4_IRQn
 = 60,

247 
ETH_IRQn
 = 61,

248 
ETH_WKUP_IRQn
 = 62,

249 
CAN2_TX_IRQn
 = 63,

250 
CAN2_RX0_IRQn
 = 64,

251 
CAN2_RX1_IRQn
 = 65,

252 
CAN2_SCE_IRQn
 = 66,

253 
OTG_FS_IRQn
 = 67,

254 
DMA2_Såóm5_IRQn
 = 68,

255 
DMA2_Såóm6_IRQn
 = 69,

256 
DMA2_Såóm7_IRQn
 = 70,

257 
USART6_IRQn
 = 71,

258 
I2C3_EV_IRQn
 = 72,

259 
I2C3_ER_IRQn
 = 73,

260 
OTG_HS_EP1_OUT_IRQn
 = 74,

261 
OTG_HS_EP1_IN_IRQn
 = 75,

262 
OTG_HS_WKUP_IRQn
 = 76,

263 
OTG_HS_IRQn
 = 77,

264 
DCMI_IRQn
 = 78,

265 
CRYP_IRQn
 = 79,

266 
HASH_RNG_IRQn
 = 80,

267 
FPU_IRQn
 = 81

270 #i‡
deföed
 (
STM32F427_437xx
)

271 
CAN1_TX_IRQn
 = 19,

272 
CAN1_RX0_IRQn
 = 20,

273 
CAN1_RX1_IRQn
 = 21,

274 
CAN1_SCE_IRQn
 = 22,

275 
EXTI9_5_IRQn
 = 23,

276 
TIM1_BRK_TIM9_IRQn
 = 24,

277 
TIM1_UP_TIM10_IRQn
 = 25,

278 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

279 
TIM1_CC_IRQn
 = 27,

280 
TIM2_IRQn
 = 28,

281 
TIM3_IRQn
 = 29,

282 
TIM4_IRQn
 = 30,

283 
I2C1_EV_IRQn
 = 31,

284 
I2C1_ER_IRQn
 = 32,

285 
I2C2_EV_IRQn
 = 33,

286 
I2C2_ER_IRQn
 = 34,

287 
SPI1_IRQn
 = 35,

288 
SPI2_IRQn
 = 36,

289 
USART1_IRQn
 = 37,

290 
USART2_IRQn
 = 38,

291 
USART3_IRQn
 = 39,

292 
EXTI15_10_IRQn
 = 40,

293 
RTC_Aœrm_IRQn
 = 41,

294 
OTG_FS_WKUP_IRQn
 = 42,

295 
TIM8_BRK_TIM12_IRQn
 = 43,

296 
TIM8_UP_TIM13_IRQn
 = 44,

297 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

298 
TIM8_CC_IRQn
 = 46,

299 
DMA1_Såóm7_IRQn
 = 47,

300 
FMC_IRQn
 = 48,

301 
SDIO_IRQn
 = 49,

302 
TIM5_IRQn
 = 50,

303 
SPI3_IRQn
 = 51,

304 
UART4_IRQn
 = 52,

305 
UART5_IRQn
 = 53,

306 
TIM6_DAC_IRQn
 = 54,

307 
TIM7_IRQn
 = 55,

308 
DMA2_Såóm0_IRQn
 = 56,

309 
DMA2_Såóm1_IRQn
 = 57,

310 
DMA2_Såóm2_IRQn
 = 58,

311 
DMA2_Såóm3_IRQn
 = 59,

312 
DMA2_Såóm4_IRQn
 = 60,

313 
ETH_IRQn
 = 61,

314 
ETH_WKUP_IRQn
 = 62,

315 
CAN2_TX_IRQn
 = 63,

316 
CAN2_RX0_IRQn
 = 64,

317 
CAN2_RX1_IRQn
 = 65,

318 
CAN2_SCE_IRQn
 = 66,

319 
OTG_FS_IRQn
 = 67,

320 
DMA2_Såóm5_IRQn
 = 68,

321 
DMA2_Såóm6_IRQn
 = 69,

322 
DMA2_Såóm7_IRQn
 = 70,

323 
USART6_IRQn
 = 71,

324 
I2C3_EV_IRQn
 = 72,

325 
I2C3_ER_IRQn
 = 73,

326 
OTG_HS_EP1_OUT_IRQn
 = 74,

327 
OTG_HS_EP1_IN_IRQn
 = 75,

328 
OTG_HS_WKUP_IRQn
 = 76,

329 
OTG_HS_IRQn
 = 77,

330 
DCMI_IRQn
 = 78,

331 
CRYP_IRQn
 = 79,

332 
HASH_RNG_IRQn
 = 80,

333 
FPU_IRQn
 = 81,

334 
UART7_IRQn
 = 82,

335 
UART8_IRQn
 = 83,

336 
SPI4_IRQn
 = 84,

337 
SPI5_IRQn
 = 85,

338 
SPI6_IRQn
 = 86,

339 
SAI1_IRQn
 = 87,

340 
DMA2D_IRQn
 = 90

343 #i‡
deföed
 (
STM32F429_439xx
)

344 
CAN1_TX_IRQn
 = 19,

345 
CAN1_RX0_IRQn
 = 20,

346 
CAN1_RX1_IRQn
 = 21,

347 
CAN1_SCE_IRQn
 = 22,

348 
EXTI9_5_IRQn
 = 23,

349 
TIM1_BRK_TIM9_IRQn
 = 24,

350 
TIM1_UP_TIM10_IRQn
 = 25,

351 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

352 
TIM1_CC_IRQn
 = 27,

353 
TIM2_IRQn
 = 28,

354 
TIM3_IRQn
 = 29,

355 
TIM4_IRQn
 = 30,

356 
I2C1_EV_IRQn
 = 31,

357 
I2C1_ER_IRQn
 = 32,

358 
I2C2_EV_IRQn
 = 33,

359 
I2C2_ER_IRQn
 = 34,

360 
SPI1_IRQn
 = 35,

361 
SPI2_IRQn
 = 36,

362 
USART1_IRQn
 = 37,

363 
USART2_IRQn
 = 38,

364 
USART3_IRQn
 = 39,

365 
EXTI15_10_IRQn
 = 40,

366 
RTC_Aœrm_IRQn
 = 41,

367 
OTG_FS_WKUP_IRQn
 = 42,

368 
TIM8_BRK_TIM12_IRQn
 = 43,

369 
TIM8_UP_TIM13_IRQn
 = 44,

370 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

371 
TIM8_CC_IRQn
 = 46,

372 
DMA1_Såóm7_IRQn
 = 47,

373 
FMC_IRQn
 = 48,

374 
SDIO_IRQn
 = 49,

375 
TIM5_IRQn
 = 50,

376 
SPI3_IRQn
 = 51,

377 
UART4_IRQn
 = 52,

378 
UART5_IRQn
 = 53,

379 
TIM6_DAC_IRQn
 = 54,

380 
TIM7_IRQn
 = 55,

381 
DMA2_Såóm0_IRQn
 = 56,

382 
DMA2_Såóm1_IRQn
 = 57,

383 
DMA2_Såóm2_IRQn
 = 58,

384 
DMA2_Såóm3_IRQn
 = 59,

385 
DMA2_Såóm4_IRQn
 = 60,

386 
ETH_IRQn
 = 61,

387 
ETH_WKUP_IRQn
 = 62,

388 
CAN2_TX_IRQn
 = 63,

389 
CAN2_RX0_IRQn
 = 64,

390 
CAN2_RX1_IRQn
 = 65,

391 
CAN2_SCE_IRQn
 = 66,

392 
OTG_FS_IRQn
 = 67,

393 
DMA2_Såóm5_IRQn
 = 68,

394 
DMA2_Såóm6_IRQn
 = 69,

395 
DMA2_Såóm7_IRQn
 = 70,

396 
USART6_IRQn
 = 71,

397 
I2C3_EV_IRQn
 = 72,

398 
I2C3_ER_IRQn
 = 73,

399 
OTG_HS_EP1_OUT_IRQn
 = 74,

400 
OTG_HS_EP1_IN_IRQn
 = 75,

401 
OTG_HS_WKUP_IRQn
 = 76,

402 
OTG_HS_IRQn
 = 77,

403 
DCMI_IRQn
 = 78,

404 
CRYP_IRQn
 = 79,

405 
HASH_RNG_IRQn
 = 80,

406 
FPU_IRQn
 = 81,

407 
UART7_IRQn
 = 82,

408 
UART8_IRQn
 = 83,

409 
SPI4_IRQn
 = 84,

410 
SPI5_IRQn
 = 85,

411 
SPI6_IRQn
 = 86,

412 
SAI1_IRQn
 = 87,

413 
LTDC_IRQn
 = 88,

414 
LTDC_ER_IRQn
 = 89,

415 
DMA2D_IRQn
 = 90

418 #i‡
deföed
 (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

419 
EXTI9_5_IRQn
 = 23,

420 
TIM1_BRK_TIM9_IRQn
 = 24,

421 
TIM1_UP_TIM10_IRQn
 = 25,

422 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

423 
TIM1_CC_IRQn
 = 27,

424 
TIM2_IRQn
 = 28,

425 
TIM3_IRQn
 = 29,

426 
TIM4_IRQn
 = 30,

427 
I2C1_EV_IRQn
 = 31,

428 
I2C1_ER_IRQn
 = 32,

429 
I2C2_EV_IRQn
 = 33,

430 
I2C2_ER_IRQn
 = 34,

431 
SPI1_IRQn
 = 35,

432 
SPI2_IRQn
 = 36,

433 
USART1_IRQn
 = 37,

434 
USART2_IRQn
 = 38,

435 
EXTI15_10_IRQn
 = 40,

436 
RTC_Aœrm_IRQn
 = 41,

437 
OTG_FS_WKUP_IRQn
 = 42,

438 
DMA1_Såóm7_IRQn
 = 47,

439 
SDIO_IRQn
 = 49,

440 
TIM5_IRQn
 = 50,

441 
SPI3_IRQn
 = 51,

442 
DMA2_Såóm0_IRQn
 = 56,

443 
DMA2_Såóm1_IRQn
 = 57,

444 
DMA2_Såóm2_IRQn
 = 58,

445 
DMA2_Såóm3_IRQn
 = 59,

446 
DMA2_Såóm4_IRQn
 = 60,

447 
OTG_FS_IRQn
 = 67,

448 
DMA2_Såóm5_IRQn
 = 68,

449 
DMA2_Såóm6_IRQn
 = 69,

450 
DMA2_Såóm7_IRQn
 = 70,

451 
USART6_IRQn
 = 71,

452 
I2C3_EV_IRQn
 = 72,

453 
I2C3_ER_IRQn
 = 73,

454 
FPU_IRQn
 = 81,

455 #i‡
deföed
 (
STM32F401xx
)

456 
SPI4_IRQn
 = 84

458 #i‡
deföed
 (
STM32F411xE
)

459 
SPI4_IRQn
 = 84,

460 
SPI5_IRQn
 = 85

464 } 
	tIRQn_Ty≥
;

470 
	~"c‹e_cm4.h
"

471 
	~"sy°em_°m32f4xx.h
"

472 
	~<°döt.h
>

478 
öt32_t
 
	ts32
;

479 
öt16_t
 
	ts16
;

480 
öt8_t
 
	ts8
;

482 c⁄° 
	töt32_t
 
	tsc32
;

483 c⁄° 
	töt16_t
 
	tsc16
;

484 c⁄° 
	töt8_t
 
	tsc8
;

486 
__IO
 
	töt32_t
 
	tvs32
;

487 
__IO
 
	töt16_t
 
	tvs16
;

488 
__IO
 
	töt8_t
 
	tvs8
;

490 
__I
 
	töt32_t
 
	tvsc32
;

491 
__I
 
	töt16_t
 
	tvsc16
;

492 
__I
 
	töt8_t
 
	tvsc8
;

494 
uöt32_t
 
	tu32
;

495 
uöt16_t
 
	tu16
;

496 
uöt8_t
 
	tu8
;

498 c⁄° 
	tuöt32_t
 
	tuc32
;

499 c⁄° 
	tuöt16_t
 
	tuc16
;

500 c⁄° 
	tuöt8_t
 
	tuc8
;

502 
__IO
 
	tuöt32_t
 
	tvu32
;

503 
__IO
 
	tuöt16_t
 
	tvu16
;

504 
__IO
 
	tuöt8_t
 
	tvu8
;

506 
__I
 
	tuöt32_t
 
	tvuc32
;

507 
__I
 
	tuöt16_t
 
	tvuc16
;

508 
__I
 
	tuöt8_t
 
	tvuc8
;

510 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

512 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

513 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

515 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

531 
__IO
 
uöt32_t
 
SR
;

532 
__IO
 
uöt32_t
 
CR1
;

533 
__IO
 
uöt32_t
 
CR2
;

534 
__IO
 
uöt32_t
 
SMPR1
;

535 
__IO
 
uöt32_t
 
SMPR2
;

536 
__IO
 
uöt32_t
 
JOFR1
;

537 
__IO
 
uöt32_t
 
JOFR2
;

538 
__IO
 
uöt32_t
 
JOFR3
;

539 
__IO
 
uöt32_t
 
JOFR4
;

540 
__IO
 
uöt32_t
 
HTR
;

541 
__IO
 
uöt32_t
 
LTR
;

542 
__IO
 
uöt32_t
 
SQR1
;

543 
__IO
 
uöt32_t
 
SQR2
;

544 
__IO
 
uöt32_t
 
SQR3
;

545 
__IO
 
uöt32_t
 
JSQR
;

546 
__IO
 
uöt32_t
 
JDR1
;

547 
__IO
 
uöt32_t
 
JDR2
;

548 
__IO
 
uöt32_t
 
JDR3
;

549 
__IO
 
uöt32_t
 
JDR4
;

550 
__IO
 
uöt32_t
 
DR
;

551 } 
	tADC_Ty≥Def
;

555 
__IO
 
uöt32_t
 
CSR
;

556 
__IO
 
uöt32_t
 
CCR
;

557 
__IO
 
uöt32_t
 
CDR
;

559 } 
	tADC_Comm⁄_Ty≥Def
;

568 
__IO
 
uöt32_t
 
TIR
;

569 
__IO
 
uöt32_t
 
TDTR
;

570 
__IO
 
uöt32_t
 
TDLR
;

571 
__IO
 
uöt32_t
 
TDHR
;

572 } 
	tCAN_TxMaûBox_Ty≥Def
;

580 
__IO
 
uöt32_t
 
RIR
;

581 
__IO
 
uöt32_t
 
RDTR
;

582 
__IO
 
uöt32_t
 
RDLR
;

583 
__IO
 
uöt32_t
 
RDHR
;

584 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

592 
__IO
 
uöt32_t
 
FR1
;

593 
__IO
 
uöt32_t
 
FR2
;

594 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

602 
__IO
 
uöt32_t
 
MCR
;

603 
__IO
 
uöt32_t
 
MSR
;

604 
__IO
 
uöt32_t
 
TSR
;

605 
__IO
 
uöt32_t
 
RF0R
;

606 
__IO
 
uöt32_t
 
RF1R
;

607 
__IO
 
uöt32_t
 
IER
;

608 
__IO
 
uöt32_t
 
ESR
;

609 
__IO
 
uöt32_t
 
BTR
;

610 
uöt32_t
 
RESERVED0
[88];

611 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

612 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

613 
uöt32_t
 
RESERVED1
[12];

614 
__IO
 
uöt32_t
 
FMR
;

615 
__IO
 
uöt32_t
 
FM1R
;

616 
uöt32_t
 
RESERVED2
;

617 
__IO
 
uöt32_t
 
FS1R
;

618 
uöt32_t
 
RESERVED3
;

619 
__IO
 
uöt32_t
 
FFA1R
;

620 
uöt32_t
 
RESERVED4
;

621 
__IO
 
uöt32_t
 
FA1R
;

622 
uöt32_t
 
RESERVED5
[8];

623 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

624 } 
	tCAN_Ty≥Def
;

632 
__IO
 
uöt32_t
 
DR
;

633 
__IO
 
uöt8_t
 
IDR
;

634 
uöt8_t
 
RESERVED0
;

635 
uöt16_t
 
RESERVED1
;

636 
__IO
 
uöt32_t
 
CR
;

637 } 
	tCRC_Ty≥Def
;

645 
__IO
 
uöt32_t
 
CR
;

646 
__IO
 
uöt32_t
 
SWTRIGR
;

647 
__IO
 
uöt32_t
 
DHR12R1
;

648 
__IO
 
uöt32_t
 
DHR12L1
;

649 
__IO
 
uöt32_t
 
DHR8R1
;

650 
__IO
 
uöt32_t
 
DHR12R2
;

651 
__IO
 
uöt32_t
 
DHR12L2
;

652 
__IO
 
uöt32_t
 
DHR8R2
;

653 
__IO
 
uöt32_t
 
DHR12RD
;

654 
__IO
 
uöt32_t
 
DHR12LD
;

655 
__IO
 
uöt32_t
 
DHR8RD
;

656 
__IO
 
uöt32_t
 
DOR1
;

657 
__IO
 
uöt32_t
 
DOR2
;

658 
__IO
 
uöt32_t
 
SR
;

659 } 
	tDAC_Ty≥Def
;

667 
__IO
 
uöt32_t
 
IDCODE
;

668 
__IO
 
uöt32_t
 
CR
;

669 
__IO
 
uöt32_t
 
APB1FZ
;

670 
__IO
 
uöt32_t
 
APB2FZ
;

671 }
	tDBGMCU_Ty≥Def
;

679 
__IO
 
uöt32_t
 
CR
;

680 
__IO
 
uöt32_t
 
SR
;

681 
__IO
 
uöt32_t
 
RISR
;

682 
__IO
 
uöt32_t
 
IER
;

683 
__IO
 
uöt32_t
 
MISR
;

684 
__IO
 
uöt32_t
 
ICR
;

685 
__IO
 
uöt32_t
 
ESCR
;

686 
__IO
 
uöt32_t
 
ESUR
;

687 
__IO
 
uöt32_t
 
CWSTRTR
;

688 
__IO
 
uöt32_t
 
CWSIZER
;

689 
__IO
 
uöt32_t
 
DR
;

690 } 
	tDCMI_Ty≥Def
;

698 
__IO
 
uöt32_t
 
CR
;

699 
__IO
 
uöt32_t
 
NDTR
;

700 
__IO
 
uöt32_t
 
PAR
;

701 
__IO
 
uöt32_t
 
M0AR
;

702 
__IO
 
uöt32_t
 
M1AR
;

703 
__IO
 
uöt32_t
 
FCR
;

704 } 
	tDMA_Såóm_Ty≥Def
;

708 
__IO
 
uöt32_t
 
LISR
;

709 
__IO
 
uöt32_t
 
HISR
;

710 
__IO
 
uöt32_t
 
LIFCR
;

711 
__IO
 
uöt32_t
 
HIFCR
;

712 } 
	tDMA_Ty≥Def
;

720 
__IO
 
uöt32_t
 
CR
;

721 
__IO
 
uöt32_t
 
ISR
;

722 
__IO
 
uöt32_t
 
IFCR
;

723 
__IO
 
uöt32_t
 
FGMAR
;

724 
__IO
 
uöt32_t
 
FGOR
;

725 
__IO
 
uöt32_t
 
BGMAR
;

726 
__IO
 
uöt32_t
 
BGOR
;

727 
__IO
 
uöt32_t
 
FGPFCCR
;

728 
__IO
 
uöt32_t
 
FGCOLR
;

729 
__IO
 
uöt32_t
 
BGPFCCR
;

730 
__IO
 
uöt32_t
 
BGCOLR
;

731 
__IO
 
uöt32_t
 
FGCMAR
;

732 
__IO
 
uöt32_t
 
BGCMAR
;

733 
__IO
 
uöt32_t
 
OPFCCR
;

734 
__IO
 
uöt32_t
 
OCOLR
;

735 
__IO
 
uöt32_t
 
OMAR
;

736 
__IO
 
uöt32_t
 
OOR
;

737 
__IO
 
uöt32_t
 
NLR
;

738 
__IO
 
uöt32_t
 
LWR
;

739 
__IO
 
uöt32_t
 
AMTCR
;

740 
uöt32_t
 
RESERVED
[236];

741 
__IO
 
uöt32_t
 
FGCLUT
[256];

742 
__IO
 
uöt32_t
 
BGCLUT
[256];

743 } 
	tDMA2D_Ty≥Def
;

751 
__IO
 
uöt32_t
 
MACCR
;

752 
__IO
 
uöt32_t
 
MACFFR
;

753 
__IO
 
uöt32_t
 
MACHTHR
;

754 
__IO
 
uöt32_t
 
MACHTLR
;

755 
__IO
 
uöt32_t
 
MACMIIAR
;

756 
__IO
 
uöt32_t
 
MACMIIDR
;

757 
__IO
 
uöt32_t
 
MACFCR
;

758 
__IO
 
uöt32_t
 
MACVLANTR
;

759 
uöt32_t
 
RESERVED0
[2];

760 
__IO
 
uöt32_t
 
MACRWUFFR
;

761 
__IO
 
uöt32_t
 
MACPMTCSR
;

762 
uöt32_t
 
RESERVED1
[2];

763 
__IO
 
uöt32_t
 
MACSR
;

764 
__IO
 
uöt32_t
 
MACIMR
;

765 
__IO
 
uöt32_t
 
MACA0HR
;

766 
__IO
 
uöt32_t
 
MACA0LR
;

767 
__IO
 
uöt32_t
 
MACA1HR
;

768 
__IO
 
uöt32_t
 
MACA1LR
;

769 
__IO
 
uöt32_t
 
MACA2HR
;

770 
__IO
 
uöt32_t
 
MACA2LR
;

771 
__IO
 
uöt32_t
 
MACA3HR
;

772 
__IO
 
uöt32_t
 
MACA3LR
;

773 
uöt32_t
 
RESERVED2
[40];

774 
__IO
 
uöt32_t
 
MMCCR
;

775 
__IO
 
uöt32_t
 
MMCRIR
;

776 
__IO
 
uöt32_t
 
MMCTIR
;

777 
__IO
 
uöt32_t
 
MMCRIMR
;

778 
__IO
 
uöt32_t
 
MMCTIMR
;

779 
uöt32_t
 
RESERVED3
[14];

780 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

781 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

782 
uöt32_t
 
RESERVED4
[5];

783 
__IO
 
uöt32_t
 
MMCTGFCR
;

784 
uöt32_t
 
RESERVED5
[10];

785 
__IO
 
uöt32_t
 
MMCRFCECR
;

786 
__IO
 
uöt32_t
 
MMCRFAECR
;

787 
uöt32_t
 
RESERVED6
[10];

788 
__IO
 
uöt32_t
 
MMCRGUFCR
;

789 
uöt32_t
 
RESERVED7
[334];

790 
__IO
 
uöt32_t
 
PTPTSCR
;

791 
__IO
 
uöt32_t
 
PTPSSIR
;

792 
__IO
 
uöt32_t
 
PTPTSHR
;

793 
__IO
 
uöt32_t
 
PTPTSLR
;

794 
__IO
 
uöt32_t
 
PTPTSHUR
;

795 
__IO
 
uöt32_t
 
PTPTSLUR
;

796 
__IO
 
uöt32_t
 
PTPTSAR
;

797 
__IO
 
uöt32_t
 
PTPTTHR
;

798 
__IO
 
uöt32_t
 
PTPTTLR
;

799 
__IO
 
uöt32_t
 
RESERVED8
;

800 
__IO
 
uöt32_t
 
PTPTSSR
;

801 
uöt32_t
 
RESERVED9
[565];

802 
__IO
 
uöt32_t
 
DMABMR
;

803 
__IO
 
uöt32_t
 
DMATPDR
;

804 
__IO
 
uöt32_t
 
DMARPDR
;

805 
__IO
 
uöt32_t
 
DMARDLAR
;

806 
__IO
 
uöt32_t
 
DMATDLAR
;

807 
__IO
 
uöt32_t
 
DMASR
;

808 
__IO
 
uöt32_t
 
DMAOMR
;

809 
__IO
 
uöt32_t
 
DMAIER
;

810 
__IO
 
uöt32_t
 
DMAMFBOCR
;

811 
__IO
 
uöt32_t
 
DMARSWTR
;

812 
uöt32_t
 
RESERVED10
[8];

813 
__IO
 
uöt32_t
 
DMACHTDR
;

814 
__IO
 
uöt32_t
 
DMACHRDR
;

815 
__IO
 
uöt32_t
 
DMACHTBAR
;

816 
__IO
 
uöt32_t
 
DMACHRBAR
;

817 } 
	tETH_Ty≥Def
;

825 
__IO
 
uöt32_t
 
IMR
;

826 
__IO
 
uöt32_t
 
EMR
;

827 
__IO
 
uöt32_t
 
RTSR
;

828 
__IO
 
uöt32_t
 
FTSR
;

829 
__IO
 
uöt32_t
 
SWIER
;

830 
__IO
 
uöt32_t
 
PR
;

831 } 
	tEXTI_Ty≥Def
;

839 
__IO
 
uöt32_t
 
ACR
;

840 
__IO
 
uöt32_t
 
KEYR
;

841 
__IO
 
uöt32_t
 
OPTKEYR
;

842 
__IO
 
uöt32_t
 
SR
;

843 
__IO
 
uöt32_t
 
CR
;

844 
__IO
 
uöt32_t
 
OPTCR
;

845 
__IO
 
uöt32_t
 
OPTCR1
;

846 } 
	tFLASH_Ty≥Def
;

848 #i‡
deföed
 (
STM32F40_41xxx
)

855 
__IO
 
uöt32_t
 
BTCR
[8];

856 } 
	tFSMC_B™k1_Ty≥Def
;

864 
__IO
 
uöt32_t
 
BWTR
[7];

865 } 
	tFSMC_B™k1E_Ty≥Def
;

873 
__IO
 
uöt32_t
 
PCR2
;

874 
__IO
 
uöt32_t
 
SR2
;

875 
__IO
 
uöt32_t
 
PMEM2
;

876 
__IO
 
uöt32_t
 
PATT2
;

877 
uöt32_t
 
RESERVED0
;

878 
__IO
 
uöt32_t
 
ECCR2
;

879 } 
	tFSMC_B™k2_Ty≥Def
;

887 
__IO
 
uöt32_t
 
PCR3
;

888 
__IO
 
uöt32_t
 
SR3
;

889 
__IO
 
uöt32_t
 
PMEM3
;

890 
__IO
 
uöt32_t
 
PATT3
;

891 
uöt32_t
 
RESERVED0
;

892 
__IO
 
uöt32_t
 
ECCR3
;

893 } 
	tFSMC_B™k3_Ty≥Def
;

901 
__IO
 
uöt32_t
 
PCR4
;

902 
__IO
 
uöt32_t
 
SR4
;

903 
__IO
 
uöt32_t
 
PMEM4
;

904 
__IO
 
uöt32_t
 
PATT4
;

905 
__IO
 
uöt32_t
 
PIO4
;

906 } 
	tFSMC_B™k4_Ty≥Def
;

909 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

916 
__IO
 
uöt32_t
 
BTCR
[8];

917 } 
	tFMC_B™k1_Ty≥Def
;

925 
__IO
 
uöt32_t
 
BWTR
[7];

926 } 
	tFMC_B™k1E_Ty≥Def
;

934 
__IO
 
uöt32_t
 
PCR2
;

935 
__IO
 
uöt32_t
 
SR2
;

936 
__IO
 
uöt32_t
 
PMEM2
;

937 
__IO
 
uöt32_t
 
PATT2
;

938 
uöt32_t
 
RESERVED0
;

939 
__IO
 
uöt32_t
 
ECCR2
;

940 } 
	tFMC_B™k2_Ty≥Def
;

948 
__IO
 
uöt32_t
 
PCR3
;

949 
__IO
 
uöt32_t
 
SR3
;

950 
__IO
 
uöt32_t
 
PMEM3
;

951 
__IO
 
uöt32_t
 
PATT3
;

952 
uöt32_t
 
RESERVED0
;

953 
__IO
 
uöt32_t
 
ECCR3
;

954 } 
	tFMC_B™k3_Ty≥Def
;

962 
__IO
 
uöt32_t
 
PCR4
;

963 
__IO
 
uöt32_t
 
SR4
;

964 
__IO
 
uöt32_t
 
PMEM4
;

965 
__IO
 
uöt32_t
 
PATT4
;

966 
__IO
 
uöt32_t
 
PIO4
;

967 } 
	tFMC_B™k4_Ty≥Def
;

975 
__IO
 
uöt32_t
 
SDCR
[2];

976 
__IO
 
uöt32_t
 
SDTR
[2];

977 
__IO
 
uöt32_t
 
SDCMR
;

978 
__IO
 
uöt32_t
 
SDRTR
;

979 
__IO
 
uöt32_t
 
SDSR
;

980 } 
	tFMC_B™k5_6_Ty≥Def
;

989 
__IO
 
uöt32_t
 
MODER
;

990 
__IO
 
uöt32_t
 
OTYPER
;

991 
__IO
 
uöt32_t
 
OSPEEDR
;

992 
__IO
 
uöt32_t
 
PUPDR
;

993 
__IO
 
uöt32_t
 
IDR
;

994 
__IO
 
uöt32_t
 
ODR
;

995 
__IO
 
uöt16_t
 
BSRRL
;

996 
__IO
 
uöt16_t
 
BSRRH
;

997 
__IO
 
uöt32_t
 
LCKR
;

998 
__IO
 
uöt32_t
 
AFR
[2];

999 } 
	tGPIO_Ty≥Def
;

1007 
__IO
 
uöt32_t
 
MEMRMP
;

1008 
__IO
 
uöt32_t
 
PMC
;

1009 
__IO
 
uöt32_t
 
EXTICR
[4];

1010 
uöt32_t
 
RESERVED
[2];

1011 
__IO
 
uöt32_t
 
CMPCR
;

1012 } 
	tSYSCFG_Ty≥Def
;

1020 
__IO
 
uöt16_t
 
CR1
;

1021 
uöt16_t
 
RESERVED0
;

1022 
__IO
 
uöt16_t
 
CR2
;

1023 
uöt16_t
 
RESERVED1
;

1024 
__IO
 
uöt16_t
 
OAR1
;

1025 
uöt16_t
 
RESERVED2
;

1026 
__IO
 
uöt16_t
 
OAR2
;

1027 
uöt16_t
 
RESERVED3
;

1028 
__IO
 
uöt16_t
 
DR
;

1029 
uöt16_t
 
RESERVED4
;

1030 
__IO
 
uöt16_t
 
SR1
;

1031 
uöt16_t
 
RESERVED5
;

1032 
__IO
 
uöt16_t
 
SR2
;

1033 
uöt16_t
 
RESERVED6
;

1034 
__IO
 
uöt16_t
 
CCR
;

1035 
uöt16_t
 
RESERVED7
;

1036 
__IO
 
uöt16_t
 
TRISE
;

1037 
uöt16_t
 
RESERVED8
;

1038 
__IO
 
uöt16_t
 
FLTR
;

1039 
uöt16_t
 
RESERVED9
;

1040 } 
	tI2C_Ty≥Def
;

1048 
__IO
 
uöt32_t
 
KR
;

1049 
__IO
 
uöt32_t
 
PR
;

1050 
__IO
 
uöt32_t
 
RLR
;

1051 
__IO
 
uöt32_t
 
SR
;

1052 } 
	tIWDG_Ty≥Def
;

1060 
uöt32_t
 
RESERVED0
[2];

1061 
__IO
 
uöt32_t
 
SSCR
;

1062 
__IO
 
uöt32_t
 
BPCR
;

1063 
__IO
 
uöt32_t
 
AWCR
;

1064 
__IO
 
uöt32_t
 
TWCR
;

1065 
__IO
 
uöt32_t
 
GCR
;

1066 
uöt32_t
 
RESERVED1
[2];

1067 
__IO
 
uöt32_t
 
SRCR
;

1068 
uöt32_t
 
RESERVED2
[1];

1069 
__IO
 
uöt32_t
 
BCCR
;

1070 
uöt32_t
 
RESERVED3
[1];

1071 
__IO
 
uöt32_t
 
IER
;

1072 
__IO
 
uöt32_t
 
ISR
;

1073 
__IO
 
uöt32_t
 
ICR
;

1074 
__IO
 
uöt32_t
 
LIPCR
;

1075 
__IO
 
uöt32_t
 
CPSR
;

1076 
__IO
 
uöt32_t
 
CDSR
;

1077 } 
	tLTDC_Ty≥Def
;

1085 
__IO
 
uöt32_t
 
CR
;

1086 
__IO
 
uöt32_t
 
WHPCR
;

1087 
__IO
 
uöt32_t
 
WVPCR
;

1088 
__IO
 
uöt32_t
 
CKCR
;

1089 
__IO
 
uöt32_t
 
PFCR
;

1090 
__IO
 
uöt32_t
 
CACR
;

1091 
__IO
 
uöt32_t
 
DCCR
;

1092 
__IO
 
uöt32_t
 
BFCR
;

1093 
uöt32_t
 
RESERVED0
[2];

1094 
__IO
 
uöt32_t
 
CFBAR
;

1095 
__IO
 
uöt32_t
 
CFBLR
;

1096 
__IO
 
uöt32_t
 
CFBLNR
;

1097 
uöt32_t
 
RESERVED1
[3];

1098 
__IO
 
uöt32_t
 
CLUTWR
;

1100 } 
	tLTDC_Layî_Ty≥Def
;

1108 
__IO
 
uöt32_t
 
CR
;

1109 
__IO
 
uöt32_t
 
CSR
;

1110 } 
	tPWR_Ty≥Def
;

1118 
__IO
 
uöt32_t
 
CR
;

1119 
__IO
 
uöt32_t
 
PLLCFGR
;

1120 
__IO
 
uöt32_t
 
CFGR
;

1121 
__IO
 
uöt32_t
 
CIR
;

1122 
__IO
 
uöt32_t
 
AHB1RSTR
;

1123 
__IO
 
uöt32_t
 
AHB2RSTR
;

1124 
__IO
 
uöt32_t
 
AHB3RSTR
;

1125 
uöt32_t
 
RESERVED0
;

1126 
__IO
 
uöt32_t
 
APB1RSTR
;

1127 
__IO
 
uöt32_t
 
APB2RSTR
;

1128 
uöt32_t
 
RESERVED1
[2];

1129 
__IO
 
uöt32_t
 
AHB1ENR
;

1130 
__IO
 
uöt32_t
 
AHB2ENR
;

1131 
__IO
 
uöt32_t
 
AHB3ENR
;

1132 
uöt32_t
 
RESERVED2
;

1133 
__IO
 
uöt32_t
 
APB1ENR
;

1134 
__IO
 
uöt32_t
 
APB2ENR
;

1135 
uöt32_t
 
RESERVED3
[2];

1136 
__IO
 
uöt32_t
 
AHB1LPENR
;

1137 
__IO
 
uöt32_t
 
AHB2LPENR
;

1138 
__IO
 
uöt32_t
 
AHB3LPENR
;

1139 
uöt32_t
 
RESERVED4
;

1140 
__IO
 
uöt32_t
 
APB1LPENR
;

1141 
__IO
 
uöt32_t
 
APB2LPENR
;

1142 
uöt32_t
 
RESERVED5
[2];

1143 
__IO
 
uöt32_t
 
BDCR
;

1144 
__IO
 
uöt32_t
 
CSR
;

1145 
uöt32_t
 
RESERVED6
[2];

1146 
__IO
 
uöt32_t
 
SSCGR
;

1147 
__IO
 
uöt32_t
 
PLLI2SCFGR
;

1148 
__IO
 
uöt32_t
 
PLLSAICFGR
;

1149 
__IO
 
uöt32_t
 
DCKCFGR
;

1151 } 
	tRCC_Ty≥Def
;

1159 
__IO
 
uöt32_t
 
TR
;

1160 
__IO
 
uöt32_t
 
DR
;

1161 
__IO
 
uöt32_t
 
CR
;

1162 
__IO
 
uöt32_t
 
ISR
;

1163 
__IO
 
uöt32_t
 
PRER
;

1164 
__IO
 
uöt32_t
 
WUTR
;

1165 
__IO
 
uöt32_t
 
CALIBR
;

1166 
__IO
 
uöt32_t
 
ALRMAR
;

1167 
__IO
 
uöt32_t
 
ALRMBR
;

1168 
__IO
 
uöt32_t
 
WPR
;

1169 
__IO
 
uöt32_t
 
SSR
;

1170 
__IO
 
uöt32_t
 
SHIFTR
;

1171 
__IO
 
uöt32_t
 
TSTR
;

1172 
__IO
 
uöt32_t
 
TSDR
;

1173 
__IO
 
uöt32_t
 
TSSSR
;

1174 
__IO
 
uöt32_t
 
CALR
;

1175 
__IO
 
uöt32_t
 
TAFCR
;

1176 
__IO
 
uöt32_t
 
ALRMASSR
;

1177 
__IO
 
uöt32_t
 
ALRMBSSR
;

1178 
uöt32_t
 
RESERVED7
;

1179 
__IO
 
uöt32_t
 
BKP0R
;

1180 
__IO
 
uöt32_t
 
BKP1R
;

1181 
__IO
 
uöt32_t
 
BKP2R
;

1182 
__IO
 
uöt32_t
 
BKP3R
;

1183 
__IO
 
uöt32_t
 
BKP4R
;

1184 
__IO
 
uöt32_t
 
BKP5R
;

1185 
__IO
 
uöt32_t
 
BKP6R
;

1186 
__IO
 
uöt32_t
 
BKP7R
;

1187 
__IO
 
uöt32_t
 
BKP8R
;

1188 
__IO
 
uöt32_t
 
BKP9R
;

1189 
__IO
 
uöt32_t
 
BKP10R
;

1190 
__IO
 
uöt32_t
 
BKP11R
;

1191 
__IO
 
uöt32_t
 
BKP12R
;

1192 
__IO
 
uöt32_t
 
BKP13R
;

1193 
__IO
 
uöt32_t
 
BKP14R
;

1194 
__IO
 
uöt32_t
 
BKP15R
;

1195 
__IO
 
uöt32_t
 
BKP16R
;

1196 
__IO
 
uöt32_t
 
BKP17R
;

1197 
__IO
 
uöt32_t
 
BKP18R
;

1198 
__IO
 
uöt32_t
 
BKP19R
;

1199 } 
	tRTC_Ty≥Def
;

1208 
__IO
 
uöt32_t
 
GCR
;

1209 } 
	tSAI_Ty≥Def
;

1213 
__IO
 
uöt32_t
 
CR1
;

1214 
__IO
 
uöt32_t
 
CR2
;

1215 
__IO
 
uöt32_t
 
FRCR
;

1216 
__IO
 
uöt32_t
 
SLOTR
;

1217 
__IO
 
uöt32_t
 
IMR
;

1218 
__IO
 
uöt32_t
 
SR
;

1219 
__IO
 
uöt32_t
 
CLRFR
;

1220 
__IO
 
uöt32_t
 
DR
;

1221 } 
	tSAI_Block_Ty≥Def
;

1229 
__IO
 
uöt32_t
 
POWER
;

1230 
__IO
 
uöt32_t
 
CLKCR
;

1231 
__IO
 
uöt32_t
 
ARG
;

1232 
__IO
 
uöt32_t
 
CMD
;

1233 
__I
 
uöt32_t
 
RESPCMD
;

1234 
__I
 
uöt32_t
 
RESP1
;

1235 
__I
 
uöt32_t
 
RESP2
;

1236 
__I
 
uöt32_t
 
RESP3
;

1237 
__I
 
uöt32_t
 
RESP4
;

1238 
__IO
 
uöt32_t
 
DTIMER
;

1239 
__IO
 
uöt32_t
 
DLEN
;

1240 
__IO
 
uöt32_t
 
DCTRL
;

1241 
__I
 
uöt32_t
 
DCOUNT
;

1242 
__I
 
uöt32_t
 
STA
;

1243 
__IO
 
uöt32_t
 
ICR
;

1244 
__IO
 
uöt32_t
 
MASK
;

1245 
uöt32_t
 
RESERVED0
[2];

1246 
__I
 
uöt32_t
 
FIFOCNT
;

1247 
uöt32_t
 
RESERVED1
[13];

1248 
__IO
 
uöt32_t
 
FIFO
;

1249 } 
	tSDIO_Ty≥Def
;

1257 
__IO
 
uöt16_t
 
CR1
;

1258 
uöt16_t
 
RESERVED0
;

1259 
__IO
 
uöt16_t
 
CR2
;

1260 
uöt16_t
 
RESERVED1
;

1261 
__IO
 
uöt16_t
 
SR
;

1262 
uöt16_t
 
RESERVED2
;

1263 
__IO
 
uöt16_t
 
DR
;

1264 
uöt16_t
 
RESERVED3
;

1265 
__IO
 
uöt16_t
 
CRCPR
;

1266 
uöt16_t
 
RESERVED4
;

1267 
__IO
 
uöt16_t
 
RXCRCR
;

1268 
uöt16_t
 
RESERVED5
;

1269 
__IO
 
uöt16_t
 
TXCRCR
;

1270 
uöt16_t
 
RESERVED6
;

1271 
__IO
 
uöt16_t
 
I2SCFGR
;

1272 
uöt16_t
 
RESERVED7
;

1273 
__IO
 
uöt16_t
 
I2SPR
;

1274 
uöt16_t
 
RESERVED8
;

1275 } 
	tSPI_Ty≥Def
;

1283 
__IO
 
uöt16_t
 
CR1
;

1284 
uöt16_t
 
RESERVED0
;

1285 
__IO
 
uöt16_t
 
CR2
;

1286 
uöt16_t
 
RESERVED1
;

1287 
__IO
 
uöt16_t
 
SMCR
;

1288 
uöt16_t
 
RESERVED2
;

1289 
__IO
 
uöt16_t
 
DIER
;

1290 
uöt16_t
 
RESERVED3
;

1291 
__IO
 
uöt16_t
 
SR
;

1292 
uöt16_t
 
RESERVED4
;

1293 
__IO
 
uöt16_t
 
EGR
;

1294 
uöt16_t
 
RESERVED5
;

1295 
__IO
 
uöt16_t
 
CCMR1
;

1296 
uöt16_t
 
RESERVED6
;

1297 
__IO
 
uöt16_t
 
CCMR2
;

1298 
uöt16_t
 
RESERVED7
;

1299 
__IO
 
uöt16_t
 
CCER
;

1300 
uöt16_t
 
RESERVED8
;

1301 
__IO
 
uöt32_t
 
CNT
;

1302 
__IO
 
uöt16_t
 
PSC
;

1303 
uöt16_t
 
RESERVED9
;

1304 
__IO
 
uöt32_t
 
ARR
;

1305 
__IO
 
uöt16_t
 
RCR
;

1306 
uöt16_t
 
RESERVED10
;

1307 
__IO
 
uöt32_t
 
CCR1
;

1308 
__IO
 
uöt32_t
 
CCR2
;

1309 
__IO
 
uöt32_t
 
CCR3
;

1310 
__IO
 
uöt32_t
 
CCR4
;

1311 
__IO
 
uöt16_t
 
BDTR
;

1312 
uöt16_t
 
RESERVED11
;

1313 
__IO
 
uöt16_t
 
DCR
;

1314 
uöt16_t
 
RESERVED12
;

1315 
__IO
 
uöt16_t
 
DMAR
;

1316 
uöt16_t
 
RESERVED13
;

1317 
__IO
 
uöt16_t
 
OR
;

1318 
uöt16_t
 
RESERVED14
;

1319 } 
	tTIM_Ty≥Def
;

1327 
__IO
 
uöt16_t
 
SR
;

1328 
uöt16_t
 
RESERVED0
;

1329 
__IO
 
uöt16_t
 
DR
;

1330 
uöt16_t
 
RESERVED1
;

1331 
__IO
 
uöt16_t
 
BRR
;

1332 
uöt16_t
 
RESERVED2
;

1333 
__IO
 
uöt16_t
 
CR1
;

1334 
uöt16_t
 
RESERVED3
;

1335 
__IO
 
uöt16_t
 
CR2
;

1336 
uöt16_t
 
RESERVED4
;

1337 
__IO
 
uöt16_t
 
CR3
;

1338 
uöt16_t
 
RESERVED5
;

1339 
__IO
 
uöt16_t
 
GTPR
;

1340 
uöt16_t
 
RESERVED6
;

1341 } 
	tUSART_Ty≥Def
;

1349 
__IO
 
uöt32_t
 
CR
;

1350 
__IO
 
uöt32_t
 
CFR
;

1351 
__IO
 
uöt32_t
 
SR
;

1352 } 
	tWWDG_Ty≥Def
;

1360 
__IO
 
uöt32_t
 
CR
;

1361 
__IO
 
uöt32_t
 
SR
;

1362 
__IO
 
uöt32_t
 
DR
;

1363 
__IO
 
uöt32_t
 
DOUT
;

1364 
__IO
 
uöt32_t
 
DMACR
;

1365 
__IO
 
uöt32_t
 
IMSCR
;

1366 
__IO
 
uöt32_t
 
RISR
;

1367 
__IO
 
uöt32_t
 
MISR
;

1368 
__IO
 
uöt32_t
 
K0LR
;

1369 
__IO
 
uöt32_t
 
K0RR
;

1370 
__IO
 
uöt32_t
 
K1LR
;

1371 
__IO
 
uöt32_t
 
K1RR
;

1372 
__IO
 
uöt32_t
 
K2LR
;

1373 
__IO
 
uöt32_t
 
K2RR
;

1374 
__IO
 
uöt32_t
 
K3LR
;

1375 
__IO
 
uöt32_t
 
K3RR
;

1376 
__IO
 
uöt32_t
 
IV0LR
;

1377 
__IO
 
uöt32_t
 
IV0RR
;

1378 
__IO
 
uöt32_t
 
IV1LR
;

1379 
__IO
 
uöt32_t
 
IV1RR
;

1380 
__IO
 
uöt32_t
 
CSGCMCCM0R
;

1381 
__IO
 
uöt32_t
 
CSGCMCCM1R
;

1382 
__IO
 
uöt32_t
 
CSGCMCCM2R
;

1383 
__IO
 
uöt32_t
 
CSGCMCCM3R
;

1384 
__IO
 
uöt32_t
 
CSGCMCCM4R
;

1385 
__IO
 
uöt32_t
 
CSGCMCCM5R
;

1386 
__IO
 
uöt32_t
 
CSGCMCCM6R
;

1387 
__IO
 
uöt32_t
 
CSGCMCCM7R
;

1388 
__IO
 
uöt32_t
 
CSGCM0R
;

1389 
__IO
 
uöt32_t
 
CSGCM1R
;

1390 
__IO
 
uöt32_t
 
CSGCM2R
;

1391 
__IO
 
uöt32_t
 
CSGCM3R
;

1392 
__IO
 
uöt32_t
 
CSGCM4R
;

1393 
__IO
 
uöt32_t
 
CSGCM5R
;

1394 
__IO
 
uöt32_t
 
CSGCM6R
;

1395 
__IO
 
uöt32_t
 
CSGCM7R
;

1396 } 
	tCRYP_Ty≥Def
;

1404 
__IO
 
uöt32_t
 
CR
;

1405 
__IO
 
uöt32_t
 
DIN
;

1406 
__IO
 
uöt32_t
 
STR
;

1407 
__IO
 
uöt32_t
 
HR
[5];

1408 
__IO
 
uöt32_t
 
IMR
;

1409 
__IO
 
uöt32_t
 
SR
;

1410 
uöt32_t
 
RESERVED
[52];

1411 
__IO
 
uöt32_t
 
CSR
[54];

1412 } 
	tHASH_Ty≥Def
;

1420 
__IO
 
uöt32_t
 
HR
[8];

1421 } 
	tHASH_DIGEST_Ty≥Def
;

1429 
__IO
 
uöt32_t
 
CR
;

1430 
__IO
 
uöt32_t
 
SR
;

1431 
__IO
 
uöt32_t
 
DR
;

1432 } 
	tRNG_Ty≥Def
;

1441 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1442 
	#CCMDATARAM_BASE
 ((
uöt32_t
)0x10000000Ë

	)

1443 
	#SRAM1_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1444 
	#SRAM2_BASE
 ((
uöt32_t
)0x2001C000Ë

	)

1445 
	#SRAM3_BASE
 ((
uöt32_t
)0x20020000Ë

	)

1446 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1447 
	#BKPSRAM_BASE
 ((
uöt32_t
)0x40024000Ë

	)

1449 #i‡
deföed
 (
STM32F40_41xxx
)

1450 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1453 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1454 
	#FMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1457 
	#CCMDATARAM_BB_BASE
 ((
uöt32_t
)0x12000000Ë

	)

1458 
	#SRAM1_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1459 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x2201C000Ë

	)

1460 
	#SRAM3_BB_BASE
 ((
uöt32_t
)0x22400000Ë

	)

1461 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1462 
	#BKPSRAM_BB_BASE
 ((
uöt32_t
)0x42024000Ë

	)

1465 
	#SRAM_BASE
 
SRAM1_BASE


	)

1466 
	#SRAM_BB_BASE
 
SRAM1_BB_BASE


	)

1470 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1471 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

1472 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

1473 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

1476 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1477 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1478 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1479 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1480 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1481 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1482 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1483 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1484 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1485 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1486 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1487 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1488 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x3400)

	)

1489 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1490 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1491 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

1492 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1493 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1494 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1495 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1496 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1497 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1498 
	#I2C3_BASE
 (
APB1PERIPH_BASE
 + 0x5C00)

	)

1499 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1500 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1501 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1502 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1503 
	#UART7_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1504 
	#UART8_BASE
 (
APB1PERIPH_BASE
 + 0x7C00)

	)

1507 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1508 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1509 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1510 
	#USART6_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1511 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1512 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2100)

	)

1513 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x2200)

	)

1514 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2300)

	)

1515 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1516 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1517 
	#SPI4_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1518 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1519 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1520 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1521 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1522 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1523 
	#SPI5_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1524 
	#SPI6_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1525 
	#SAI1_BASE
 (
APB2PERIPH_BASE
 + 0x5800)

	)

1526 
	#SAI1_Block_A_BASE
 (
SAI1_BASE
 + 0x004)

	)

1527 
	#SAI1_Block_B_BASE
 (
SAI1_BASE
 + 0x024)

	)

1528 
	#LTDC_BASE
 (
APB2PERIPH_BASE
 + 0x6800)

	)

1529 
	#LTDC_Layî1_BASE
 (
LTDC_BASE
 + 0x84)

	)

1530 
	#LTDC_Layî2_BASE
 (
LTDC_BASE
 + 0x104)

	)

1533 
	#GPIOA_BASE
 (
AHB1PERIPH_BASE
 + 0x0000)

	)

1534 
	#GPIOB_BASE
 (
AHB1PERIPH_BASE
 + 0x0400)

	)

1535 
	#GPIOC_BASE
 (
AHB1PERIPH_BASE
 + 0x0800)

	)

1536 
	#GPIOD_BASE
 (
AHB1PERIPH_BASE
 + 0x0C00)

	)

1537 
	#GPIOE_BASE
 (
AHB1PERIPH_BASE
 + 0x1000)

	)

1538 
	#GPIOF_BASE
 (
AHB1PERIPH_BASE
 + 0x1400)

	)

1539 
	#GPIOG_BASE
 (
AHB1PERIPH_BASE
 + 0x1800)

	)

1540 
	#GPIOH_BASE
 (
AHB1PERIPH_BASE
 + 0x1C00)

	)

1541 
	#GPIOI_BASE
 (
AHB1PERIPH_BASE
 + 0x2000)

	)

1542 
	#GPIOJ_BASE
 (
AHB1PERIPH_BASE
 + 0x2400)

	)

1543 
	#GPIOK_BASE
 (
AHB1PERIPH_BASE
 + 0x2800)

	)

1544 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x3000)

	)

1545 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x3800)

	)

1546 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x3C00)

	)

1547 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x6000)

	)

1548 
	#DMA1_Såóm0_BASE
 (
DMA1_BASE
 + 0x010)

	)

1549 
	#DMA1_Såóm1_BASE
 (
DMA1_BASE
 + 0x028)

	)

1550 
	#DMA1_Såóm2_BASE
 (
DMA1_BASE
 + 0x040)

	)

1551 
	#DMA1_Såóm3_BASE
 (
DMA1_BASE
 + 0x058)

	)

1552 
	#DMA1_Såóm4_BASE
 (
DMA1_BASE
 + 0x070)

	)

1553 
	#DMA1_Såóm5_BASE
 (
DMA1_BASE
 + 0x088)

	)

1554 
	#DMA1_Såóm6_BASE
 (
DMA1_BASE
 + 0x0A0)

	)

1555 
	#DMA1_Såóm7_BASE
 (
DMA1_BASE
 + 0x0B8)

	)

1556 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x6400)

	)

1557 
	#DMA2_Såóm0_BASE
 (
DMA2_BASE
 + 0x010)

	)

1558 
	#DMA2_Såóm1_BASE
 (
DMA2_BASE
 + 0x028)

	)

1559 
	#DMA2_Såóm2_BASE
 (
DMA2_BASE
 + 0x040)

	)

1560 
	#DMA2_Såóm3_BASE
 (
DMA2_BASE
 + 0x058)

	)

1561 
	#DMA2_Såóm4_BASE
 (
DMA2_BASE
 + 0x070)

	)

1562 
	#DMA2_Såóm5_BASE
 (
DMA2_BASE
 + 0x088)

	)

1563 
	#DMA2_Såóm6_BASE
 (
DMA2_BASE
 + 0x0A0)

	)

1564 
	#DMA2_Såóm7_BASE
 (
DMA2_BASE
 + 0x0B8)

	)

1565 
	#ETH_BASE
 (
AHB1PERIPH_BASE
 + 0x8000)

	)

1566 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1567 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1568 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1569 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1570 
	#DMA2D_BASE
 (
AHB1PERIPH_BASE
 + 0xB000)

	)

1573 
	#DCMI_BASE
 (
AHB2PERIPH_BASE
 + 0x50000)

	)

1574 
	#CRYP_BASE
 (
AHB2PERIPH_BASE
 + 0x60000)

	)

1575 
	#HASH_BASE
 (
AHB2PERIPH_BASE
 + 0x60400)

	)

1576 
	#HASH_DIGEST_BASE
 (
AHB2PERIPH_BASE
 + 0x60710)

	)

1577 
	#RNG_BASE
 (
AHB2PERIPH_BASE
 + 0x60800)

	)

1579 #i‡
deföed
 (
STM32F40_41xxx
)

1581 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000)

	)

1582 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104)

	)

1583 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060)

	)

1584 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080)

	)

1585 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0)

	)

1588 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1590 
	#FMC_B™k1_R_BASE
 (
FMC_R_BASE
 + 0x0000)

	)

1591 
	#FMC_B™k1E_R_BASE
 (
FMC_R_BASE
 + 0x0104)

	)

1592 
	#FMC_B™k2_R_BASE
 (
FMC_R_BASE
 + 0x0060)

	)

1593 
	#FMC_B™k3_R_BASE
 (
FMC_R_BASE
 + 0x0080)

	)

1594 
	#FMC_B™k4_R_BASE
 (
FMC_R_BASE
 + 0x00A0)

	)

1595 
	#FMC_B™k5_6_R_BASE
 (
FMC_R_BASE
 + 0x0140)

	)

1599 
	#DBGMCU_BASE
 ((
uöt32_t
 )0xE0042000)

	)

1608 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1609 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1610 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1611 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1612 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1613 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1614 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1615 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1616 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1617 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1618 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1619 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1620 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

1621 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1622 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1623 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

1624 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1625 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1626 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1627 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1628 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1629 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1630 
	#I2C3
 ((
I2C_Ty≥Def
 *Ë
I2C3_BASE
)

	)

1631 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1632 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1633 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1634 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1635 
	#UART7
 ((
USART_Ty≥Def
 *Ë
UART7_BASE
)

	)

1636 
	#UART8
 ((
USART_Ty≥Def
 *Ë
UART8_BASE
)

	)

1637 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1638 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1639 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1640 
	#USART6
 ((
USART_Ty≥Def
 *Ë
USART6_BASE
)

	)

1641 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

1642 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1643 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1644 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1645 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1646 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1647 
	#SPI4
 ((
SPI_Ty≥Def
 *Ë
SPI4_BASE
)

	)

1648 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

1649 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1650 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1651 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1652 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1653 
	#SPI5
 ((
SPI_Ty≥Def
 *Ë
SPI5_BASE
)

	)

1654 
	#SPI6
 ((
SPI_Ty≥Def
 *Ë
SPI6_BASE
)

	)

1655 
	#SAI1
 ((
SAI_Ty≥Def
 *Ë
SAI1_BASE
)

	)

1656 
	#SAI1_Block_A
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_A_BASE
)

	)

1657 
	#SAI1_Block_B
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_B_BASE
)

	)

1658 
	#LTDC
 ((
LTDC_Ty≥Def
 *)
LTDC_BASE
)

	)

1659 
	#LTDC_Layî1
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî1_BASE
)

	)

1660 
	#LTDC_Layî2
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî2_BASE
)

	)

1661 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1662 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1663 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1664 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1665 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1666 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1667 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1668 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

1669 
	#GPIOI
 ((
GPIO_Ty≥Def
 *Ë
GPIOI_BASE
)

	)

1670 
	#GPIOJ
 ((
GPIO_Ty≥Def
 *Ë
GPIOJ_BASE
)

	)

1671 
	#GPIOK
 ((
GPIO_Ty≥Def
 *Ë
GPIOK_BASE
)

	)

1672 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1673 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1674 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1675 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1676 
	#DMA1_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm0_BASE
)

	)

1677 
	#DMA1_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm1_BASE
)

	)

1678 
	#DMA1_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm2_BASE
)

	)

1679 
	#DMA1_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm3_BASE
)

	)

1680 
	#DMA1_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm4_BASE
)

	)

1681 
	#DMA1_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm5_BASE
)

	)

1682 
	#DMA1_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm6_BASE
)

	)

1683 
	#DMA1_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm7_BASE
)

	)

1684 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1685 
	#DMA2_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm0_BASE
)

	)

1686 
	#DMA2_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm1_BASE
)

	)

1687 
	#DMA2_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm2_BASE
)

	)

1688 
	#DMA2_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm3_BASE
)

	)

1689 
	#DMA2_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm4_BASE
)

	)

1690 
	#DMA2_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm5_BASE
)

	)

1691 
	#DMA2_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm6_BASE
)

	)

1692 
	#DMA2_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm7_BASE
)

	)

1693 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1694 
	#DMA2D
 ((
DMA2D_Ty≥Def
 *)
DMA2D_BASE
)

	)

1695 
	#DCMI
 ((
DCMI_Ty≥Def
 *Ë
DCMI_BASE
)

	)

1696 
	#CRYP
 ((
CRYP_Ty≥Def
 *Ë
CRYP_BASE
)

	)

1697 
	#HASH
 ((
HASH_Ty≥Def
 *Ë
HASH_BASE
)

	)

1698 
	#HASH_DIGEST
 ((
HASH_DIGEST_Ty≥Def
 *Ë
HASH_DIGEST_BASE
)

	)

1699 
	#RNG
 ((
RNG_Ty≥Def
 *Ë
RNG_BASE
)

	)

1701 #i‡
deföed
 (
STM32F40_41xxx
)

1702 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1703 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1704 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1705 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1706 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1709 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1710 
	#FMC_B™k1
 ((
FMC_B™k1_Ty≥Def
 *Ë
FMC_B™k1_R_BASE
)

	)

1711 
	#FMC_B™k1E
 ((
FMC_B™k1E_Ty≥Def
 *Ë
FMC_B™k1E_R_BASE
)

	)

1712 
	#FMC_B™k2
 ((
FMC_B™k2_Ty≥Def
 *Ë
FMC_B™k2_R_BASE
)

	)

1713 
	#FMC_B™k3
 ((
FMC_B™k3_Ty≥Def
 *Ë
FMC_B™k3_R_BASE
)

	)

1714 
	#FMC_B™k4
 ((
FMC_B™k4_Ty≥Def
 *Ë
FMC_B™k4_R_BASE
)

	)

1715 
	#FMC_B™k5_6
 ((
FMC_B™k5_6_Ty≥Def
 *Ë
FMC_B™k5_6_R_BASE
)

	)

1718 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1742 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

1743 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

1744 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

1745 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

1746 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

1747 
	#ADC_SR_OVR
 ((
uöt8_t
)0x20Ë

	)

1750 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

1751 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

1752 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

1753 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

1754 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

1755 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

1756 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

1757 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

1758 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

1759 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

1760 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

1761 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

1762 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

1763 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

1764 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

1765 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

1766 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

1767 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

1768 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

1769 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

1770 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

1771 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

1772 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

1773 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

1776 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

1777 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

1778 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

1779 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

1780 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

1781 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

1782 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

1783 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

1784 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

1785 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

1786 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

1787 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

1788 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

1789 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

1790 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

1791 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

1792 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

1793 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

1794 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

1795 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

1796 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

1797 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

1798 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

1799 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

1802 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

1803 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

1804 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

1805 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

1806 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

1807 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

1808 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

1809 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

1810 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

1811 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

1812 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

1813 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

1814 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

1815 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

1816 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

1817 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

1818 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

1819 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

1820 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

1821 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

1822 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

1823 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

1824 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

1825 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

1826 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

1827 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

1828 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

1829 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

1830 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

1831 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

1832 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

1833 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

1834 
	#ADC_SMPR1_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

1835 
	#ADC_SMPR1_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

1836 
	#ADC_SMPR1_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

1837 
	#ADC_SMPR1_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

1840 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

1841 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

1842 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

1843 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

1844 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

1845 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

1846 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

1847 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

1848 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

1849 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

1850 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

1851 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

1852 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

1853 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

1854 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

1855 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

1856 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

1857 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

1858 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

1859 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

1860 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

1861 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

1862 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

1863 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

1864 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

1865 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

1866 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

1867 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

1868 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

1869 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

1870 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

1871 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

1872 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

1873 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

1874 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

1875 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

1876 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

1877 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

1878 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

1879 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

1882 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

1885 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

1888 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

1891 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

1894 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

1897 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

1900 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

1901 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

1902 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

1903 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

1904 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

1905 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

1906 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

1907 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

1908 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

1909 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

1910 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

1911 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

1912 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

1913 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

1914 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

1915 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

1916 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

1917 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

1918 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

1919 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

1920 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

1921 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

1922 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

1923 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

1924 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

1925 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

1926 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

1927 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

1928 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

1931 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

1932 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

1933 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

1934 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

1935 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

1936 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

1937 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

1938 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

1939 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

1940 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

1941 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

1942 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

1943 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

1944 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

1945 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

1946 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

1947 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

1948 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

1949 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

1950 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

1951 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

1952 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

1953 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

1954 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

1955 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

1956 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

1957 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

1958 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

1959 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

1960 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

1961 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

1962 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

1963 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

1964 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

1965 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

1966 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

1969 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

1970 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1971 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1972 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1973 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1974 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1975 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1976 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1977 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1978 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1979 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1980 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1981 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1982 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1983 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1984 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1985 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1986 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1987 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1988 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1989 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1990 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1991 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1992 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1993 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

1994 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

1995 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

1996 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

1997 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

1998 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

1999 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

2000 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

2001 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

2002 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

2003 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

2004 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

2007 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

2008 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2009 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2010 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2011 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2012 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2013 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2014 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2015 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2016 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2017 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2018 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2019 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2020 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2021 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2022 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2023 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2024 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2025 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2026 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2027 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2028 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2029 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2030 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2031 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

2032 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

2033 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

2036 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2039 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2042 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2045 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2048 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

2049 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

2052 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

2053 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

2054 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

2055 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

2056 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

2057 
	#ADC_CSR_DOVR1
 ((
uöt32_t
)0x00000020Ë

	)

2058 
	#ADC_CSR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

2059 
	#ADC_CSR_EOC2
 ((
uöt32_t
)0x00000200Ë

	)

2060 
	#ADC_CSR_JEOC2
 ((
uöt32_t
)0x00000400Ë

	)

2061 
	#ADC_CSR_JSTRT2
 ((
uöt32_t
)0x00000800Ë

	)

2062 
	#ADC_CSR_STRT2
 ((
uöt32_t
)0x00001000Ë

	)

2063 
	#ADC_CSR_DOVR2
 ((
uöt32_t
)0x00002000Ë

	)

2064 
	#ADC_CSR_AWD3
 ((
uöt32_t
)0x00010000Ë

	)

2065 
	#ADC_CSR_EOC3
 ((
uöt32_t
)0x00020000Ë

	)

2066 
	#ADC_CSR_JEOC3
 ((
uöt32_t
)0x00040000Ë

	)

2067 
	#ADC_CSR_JSTRT3
 ((
uöt32_t
)0x00080000Ë

	)

2068 
	#ADC_CSR_STRT3
 ((
uöt32_t
)0x00100000Ë

	)

2069 
	#ADC_CSR_DOVR3
 ((
uöt32_t
)0x00200000Ë

	)

2072 
	#ADC_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

2073 
	#ADC_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

2074 
	#ADC_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

2075 
	#ADC_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

2076 
	#ADC_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

2077 
	#ADC_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

2078 
	#ADC_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

2079 
	#ADC_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

2080 
	#ADC_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

2081 
	#ADC_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

2082 
	#ADC_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

2083 
	#ADC_CCR_DDS
 ((
uöt32_t
)0x00002000Ë

	)

2084 
	#ADC_CCR_DMA
 ((
uöt32_t
)0x0000C000Ë

	)

2085 
	#ADC_CCR_DMA_0
 ((
uöt32_t
)0x00004000Ë

	)

2086 
	#ADC_CCR_DMA_1
 ((
uöt32_t
)0x00008000Ë

	)

2087 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

2088 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

2089 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

2090 
	#ADC_CCR_VBATE
 ((
uöt32_t
)0x00400000Ë

	)

2091 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

2094 
	#ADC_CDR_DATA1
 ((
uöt32_t
)0x0000FFFFË

	)

2095 
	#ADC_CDR_DATA2
 ((
uöt32_t
)0xFFFF0000Ë

	)

2104 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

2105 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

2106 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

2107 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

2108 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

2109 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

2110 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

2111 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

2112 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

2115 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

2116 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

2117 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

2118 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

2119 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

2120 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

2121 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

2122 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

2123 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

2126 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

2127 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

2128 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

2129 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

2130 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

2131 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

2132 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

2133 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

2134 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

2135 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

2136 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

2137 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

2138 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

2139 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

2140 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

2141 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

2143 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

2144 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

2145 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

2146 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

2148 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

2149 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

2150 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

2151 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

2154 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

2155 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

2156 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

2157 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

2160 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

2161 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

2162 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

2163 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

2166 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

2167 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

2168 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

2169 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

2170 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

2171 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

2172 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

2173 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

2174 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

2175 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

2176 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

2177 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

2178 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

2179 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

2182 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

2183 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

2184 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

2186 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

2187 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

2188 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

2189 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

2191 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

2192 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

2195 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

2196 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

2197 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

2198 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

2199 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

2200 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

2204 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2205 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2206 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2207 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2208 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2211 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2212 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2213 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2216 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2217 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2218 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2219 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2222 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2223 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2224 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2225 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2228 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2229 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2230 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2231 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2232 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2235 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2236 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2237 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2240 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2241 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2242 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2243 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2246 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2247 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2248 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2249 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2252 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2253 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2254 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2255 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2256 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2259 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2260 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2261 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2264 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2265 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2266 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2267 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2270 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2271 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2272 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2273 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2276 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2277 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2278 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2279 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2282 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2283 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2284 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2287 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2288 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2289 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2290 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2293 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2294 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2295 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2296 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2299 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2300 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2301 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2302 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2305 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2306 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2307 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2310 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2311 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2312 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2313 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2316 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2317 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2318 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2319 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2323 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

2326 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

2327 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

2328 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

2329 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

2330 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

2331 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

2332 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

2333 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

2334 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

2335 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

2336 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

2337 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

2338 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

2339 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

2340 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

2343 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

2344 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

2345 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

2346 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

2347 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

2348 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

2349 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

2350 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

2351 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

2352 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

2353 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

2354 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

2355 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

2356 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

2357 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

2360 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

2361 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

2362 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

2363 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

2364 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

2365 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

2366 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

2367 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

2368 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

2369 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

2370 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

2371 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

2372 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

2373 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

2374 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

2377 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

2378 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

2379 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

2380 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

2381 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

2382 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

2383 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

2384 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

2385 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

2386 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

2387 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

2388 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

2389 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

2390 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

2391 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

2394 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2395 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2396 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2397 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2398 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2399 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2400 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2401 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2402 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2403 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2404 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2405 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2406 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2407 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2408 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2409 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2410 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2411 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2412 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2413 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2414 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2415 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2416 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2417 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2418 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2419 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2420 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2421 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2422 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2423 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2424 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2425 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2428 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2429 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2430 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2431 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2432 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2433 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2434 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2435 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2436 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2437 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2438 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2439 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2440 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2441 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2442 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2443 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2444 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2445 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2446 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2447 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2448 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2449 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2450 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2451 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2452 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2453 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2454 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2455 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2456 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2457 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2458 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2459 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2462 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2463 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2464 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2465 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2466 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2467 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2468 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2469 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2470 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2471 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2472 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2473 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2474 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2475 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2476 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2477 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2478 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2479 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2480 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2481 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2482 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2483 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2484 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2485 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2486 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2487 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2488 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2489 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2490 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2491 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2492 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2493 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2496 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2497 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2498 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2499 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2500 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2501 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2502 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2503 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2504 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2505 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2506 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2507 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2508 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2509 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2510 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2511 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2512 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2513 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2514 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2515 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2516 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2517 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2518 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2519 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2520 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2521 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2522 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2523 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2524 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2525 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2526 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2527 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2530 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2531 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2532 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2533 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2534 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2535 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2536 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2537 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2538 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2539 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2540 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2541 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2542 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2543 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2544 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2545 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2546 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2547 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2548 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2549 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2550 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2551 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2552 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2553 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2554 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2555 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2556 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2557 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2558 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2559 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2560 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2561 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2564 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2565 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2566 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2567 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2568 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2569 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2570 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2571 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2572 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2573 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2574 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2575 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2576 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2577 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2578 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2579 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2580 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2581 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2582 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2583 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2584 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2585 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2586 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2587 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2588 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2589 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2590 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2591 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2592 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2593 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2594 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2595 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2598 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2599 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2600 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2601 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2602 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2603 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2604 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2605 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2606 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2607 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2608 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2609 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2610 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2611 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2612 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2613 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2614 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2615 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2616 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2617 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2618 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2619 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2620 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2621 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2622 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2623 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2624 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2625 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2626 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2627 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2628 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2629 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2632 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2633 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2634 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2635 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2636 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2637 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2638 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2639 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2640 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2641 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2642 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2643 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2644 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2645 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2646 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2647 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2648 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2649 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2650 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2651 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2652 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2653 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2654 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2655 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2656 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2657 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2658 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2659 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2660 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2661 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2662 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2663 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2666 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2667 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2668 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2669 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2670 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2671 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2672 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2673 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2674 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2675 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2676 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2677 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2678 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2679 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2680 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2681 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2682 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2683 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2684 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2685 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2686 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2687 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2688 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2689 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2690 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2691 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2692 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2693 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2694 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2695 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2696 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2697 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2700 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2701 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2702 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2703 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2704 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2705 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2706 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2707 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2708 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2709 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2710 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2711 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2712 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2713 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2714 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2715 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2716 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2717 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2718 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2719 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2720 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2721 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2722 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2723 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2724 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2725 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2726 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2727 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2728 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2729 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2730 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2731 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2734 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2735 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2736 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2737 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2738 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2739 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2740 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2741 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2742 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2743 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2744 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2745 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2746 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2747 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2748 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2749 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2750 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2751 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2752 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2753 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2754 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2755 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2756 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2757 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2758 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2759 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2760 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2761 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2762 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2763 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2764 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2765 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2768 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2769 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2770 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2771 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2772 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2773 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2774 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2775 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2776 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2777 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2778 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2779 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2780 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2781 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2782 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2783 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2784 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2785 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2786 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2787 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2788 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2789 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2790 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2791 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2792 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2793 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2794 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2795 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2796 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2797 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2798 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2799 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2802 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2803 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2804 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2805 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2806 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2807 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2808 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2809 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2810 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2811 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2812 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2813 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2814 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2815 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2816 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2817 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2818 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2819 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2820 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2821 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2822 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2823 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2824 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2825 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2826 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2827 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2828 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2829 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2830 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2831 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2832 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2833 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2836 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2837 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2838 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2839 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2840 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2841 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2842 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2843 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2844 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2845 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2846 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2847 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2848 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2849 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2850 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2851 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2852 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2853 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2854 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2855 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2856 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2857 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2858 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2859 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2860 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2861 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2862 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2863 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2864 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2865 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2866 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2867 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2870 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2871 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2872 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2873 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2874 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2875 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2876 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2877 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2878 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2879 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2880 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2881 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2882 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2883 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2884 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2885 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2886 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2887 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2888 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2889 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2890 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2891 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2892 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2893 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2894 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2895 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2896 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2897 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2898 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2899 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2900 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2901 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2904 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2905 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2906 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2907 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2908 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2909 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2910 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2911 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2912 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2913 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2914 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2915 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2916 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2917 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2918 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2919 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2920 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2921 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2922 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2923 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2924 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2925 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2926 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2927 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2928 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2929 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2930 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2931 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2932 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2933 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2934 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2935 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2938 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2939 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2940 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2941 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2942 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2943 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2944 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2945 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2946 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2947 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2948 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2949 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2950 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2951 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2952 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2953 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2954 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2955 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2956 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2957 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2958 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2959 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2960 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2961 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2962 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2963 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2964 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2965 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2966 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2967 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2968 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2969 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2972 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2973 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2974 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2975 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2976 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2977 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2978 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2979 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2980 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2981 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2982 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2983 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2984 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2985 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2986 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2987 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2988 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2989 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2990 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2991 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2992 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2993 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2994 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2995 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2996 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2997 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2998 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2999 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3000 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3001 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3002 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3003 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3006 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3007 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3008 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3009 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3010 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3011 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3012 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3013 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3014 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3015 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3016 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3017 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3018 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3019 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3020 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3021 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3022 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3023 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3024 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3025 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3026 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3027 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3028 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3029 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3030 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3031 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3032 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3033 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3034 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3035 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3036 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3037 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3040 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3041 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3042 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3043 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3044 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3045 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3046 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3047 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3048 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3049 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3050 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3051 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3052 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3053 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3054 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3055 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3056 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3057 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3058 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3059 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3060 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3061 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3062 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3063 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3064 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3065 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3066 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3067 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3068 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3069 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3070 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3071 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3074 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3075 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3076 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3077 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3078 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3079 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3080 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3081 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3082 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3083 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3084 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3085 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3086 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3087 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3088 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3089 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3090 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3091 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3092 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3093 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3094 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3095 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3096 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3097 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3098 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3099 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3100 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3101 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3102 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3103 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3104 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3105 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3108 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3109 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3110 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3111 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3112 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3113 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3114 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3115 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3116 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3117 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3118 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3119 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3120 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3121 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3122 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3123 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3124 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3125 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3126 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3127 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3128 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3129 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3130 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3131 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3132 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3133 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3134 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3135 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3136 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3137 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3138 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3139 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3142 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3143 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3144 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3145 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3146 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3147 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3148 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3149 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3150 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3151 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3152 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3153 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3154 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3155 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3156 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3157 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3158 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3159 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3160 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3161 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3162 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3163 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3164 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3165 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3166 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3167 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3168 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3169 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3170 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3171 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3172 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3173 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3176 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3177 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3178 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3179 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3180 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3181 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3182 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3183 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3184 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3185 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3186 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3187 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3188 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3189 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3190 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3191 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3192 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3193 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3194 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3195 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3196 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3197 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3198 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3199 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3200 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3201 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3202 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3203 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3204 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3205 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3206 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3207 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3210 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3211 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3212 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3213 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3214 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3215 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3216 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3217 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3218 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3219 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3220 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3221 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3222 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3223 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3224 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3225 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3226 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3227 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3228 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3229 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3230 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3231 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3232 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3233 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3234 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3235 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3236 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3237 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3238 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3239 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3240 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3241 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3244 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3245 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3246 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3247 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3248 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3249 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3250 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3251 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3252 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3253 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3254 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3255 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3256 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3257 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3258 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3259 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3260 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3261 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3262 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3263 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3264 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3265 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3266 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3267 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3268 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3269 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3270 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3271 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3272 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3273 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3274 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3275 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3278 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3279 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3280 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3281 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3282 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3283 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3284 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3285 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3286 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3287 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3288 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3289 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3290 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3291 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3292 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3293 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3294 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3295 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3296 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3297 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3298 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3299 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3300 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3301 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3302 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3303 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3304 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3305 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3306 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3307 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3308 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3309 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3312 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3313 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3314 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3315 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3316 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3317 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3318 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3319 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3320 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3321 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3322 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3323 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3324 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3325 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3326 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3327 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3328 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3329 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3330 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3331 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3332 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3333 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3334 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3335 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3336 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3337 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3338 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3339 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3340 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3341 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3342 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3343 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3351 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3355 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

3359 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

3367 
	#CRYP_CR_ALGODIR
 ((
uöt32_t
)0x00000004)

	)

3369 
	#CRYP_CR_ALGOMODE
 ((
uöt32_t
)0x00080038)

	)

3370 
	#CRYP_CR_ALGOMODE_0
 ((
uöt32_t
)0x00000008)

	)

3371 
	#CRYP_CR_ALGOMODE_1
 ((
uöt32_t
)0x00000010)

	)

3372 
	#CRYP_CR_ALGOMODE_2
 ((
uöt32_t
)0x00000020)

	)

3373 
	#CRYP_CR_ALGOMODE_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

3374 
	#CRYP_CR_ALGOMODE_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

3375 
	#CRYP_CR_ALGOMODE_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

3376 
	#CRYP_CR_ALGOMODE_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

3377 
	#CRYP_CR_ALGOMODE_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

3378 
	#CRYP_CR_ALGOMODE_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

3379 
	#CRYP_CR_ALGOMODE_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

3380 
	#CRYP_CR_ALGOMODE_AES_KEY
 ((
uöt32_t
)0x00000038)

	)

3382 
	#CRYP_CR_DATATYPE
 ((
uöt32_t
)0x000000C0)

	)

3383 
	#CRYP_CR_DATATYPE_0
 ((
uöt32_t
)0x00000040)

	)

3384 
	#CRYP_CR_DATATYPE_1
 ((
uöt32_t
)0x00000080)

	)

3385 
	#CRYP_CR_KEYSIZE
 ((
uöt32_t
)0x00000300)

	)

3386 
	#CRYP_CR_KEYSIZE_0
 ((
uöt32_t
)0x00000100)

	)

3387 
	#CRYP_CR_KEYSIZE_1
 ((
uöt32_t
)0x00000200)

	)

3388 
	#CRYP_CR_FFLUSH
 ((
uöt32_t
)0x00004000)

	)

3389 
	#CRYP_CR_CRYPEN
 ((
uöt32_t
)0x00008000)

	)

3391 
	#CRYP_CR_GCM_CCMPH
 ((
uöt32_t
)0x00030000)

	)

3392 
	#CRYP_CR_GCM_CCMPH_0
 ((
uöt32_t
)0x00010000)

	)

3393 
	#CRYP_CR_GCM_CCMPH_1
 ((
uöt32_t
)0x00020000)

	)

3394 
	#CRYP_CR_ALGOMODE_3
 ((
uöt32_t
)0x00080000)

	)

3397 
	#CRYP_SR_IFEM
 ((
uöt32_t
)0x00000001)

	)

3398 
	#CRYP_SR_IFNF
 ((
uöt32_t
)0x00000002)

	)

3399 
	#CRYP_SR_OFNE
 ((
uöt32_t
)0x00000004)

	)

3400 
	#CRYP_SR_OFFU
 ((
uöt32_t
)0x00000008)

	)

3401 
	#CRYP_SR_BUSY
 ((
uöt32_t
)0x00000010)

	)

3403 
	#CRYP_DMACR_DIEN
 ((
uöt32_t
)0x00000001)

	)

3404 
	#CRYP_DMACR_DOEN
 ((
uöt32_t
)0x00000002)

	)

3406 
	#CRYP_IMSCR_INIM
 ((
uöt32_t
)0x00000001)

	)

3407 
	#CRYP_IMSCR_OUTIM
 ((
uöt32_t
)0x00000002)

	)

3409 
	#CRYP_RISR_OUTRIS
 ((
uöt32_t
)0x00000001)

	)

3410 
	#CRYP_RISR_INRIS
 ((
uöt32_t
)0x00000002)

	)

3412 
	#CRYP_MISR_INMIS
 ((
uöt32_t
)0x00000001)

	)

3413 
	#CRYP_MISR_OUTMIS
 ((
uöt32_t
)0x00000002)

	)

3421 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3422 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3423 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3425 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3426 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3427 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3428 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3430 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3431 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3432 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3434 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3435 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3436 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3437 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3438 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3440 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3441 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3442 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3443 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3445 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3446 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3447 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3448 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3450 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3451 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3452 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3454 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3455 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3456 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3457 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3458 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3460 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3463 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3464 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3467 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3470 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3473 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

3476 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

3479 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3482 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

3485 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3486 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3489 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3490 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3493 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3494 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3497 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3500 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3503 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

3504 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

3518 
	#DCMI_CR_CAPTURE
 ((
uöt32_t
)0x00000001)

	)

3519 
	#DCMI_CR_CM
 ((
uöt32_t
)0x00000002)

	)

3520 
	#DCMI_CR_CROP
 ((
uöt32_t
)0x00000004)

	)

3521 
	#DCMI_CR_JPEG
 ((
uöt32_t
)0x00000008)

	)

3522 
	#DCMI_CR_ESS
 ((
uöt32_t
)0x00000010)

	)

3523 
	#DCMI_CR_PCKPOL
 ((
uöt32_t
)0x00000020)

	)

3524 
	#DCMI_CR_HSPOL
 ((
uöt32_t
)0x00000040)

	)

3525 
	#DCMI_CR_VSPOL
 ((
uöt32_t
)0x00000080)

	)

3526 
	#DCMI_CR_FCRC_0
 ((
uöt32_t
)0x00000100)

	)

3527 
	#DCMI_CR_FCRC_1
 ((
uöt32_t
)0x00000200)

	)

3528 
	#DCMI_CR_EDM_0
 ((
uöt32_t
)0x00000400)

	)

3529 
	#DCMI_CR_EDM_1
 ((
uöt32_t
)0x00000800)

	)

3530 
	#DCMI_CR_CRE
 ((
uöt32_t
)0x00001000)

	)

3531 
	#DCMI_CR_ENABLE
 ((
uöt32_t
)0x00004000)

	)

3534 
	#DCMI_SR_HSYNC
 ((
uöt32_t
)0x00000001)

	)

3535 
	#DCMI_SR_VSYNC
 ((
uöt32_t
)0x00000002)

	)

3536 
	#DCMI_SR_FNE
 ((
uöt32_t
)0x00000004)

	)

3539 
	#DCMI_RISR_FRAME_RIS
 ((
uöt32_t
)0x00000001)

	)

3540 
	#DCMI_RISR_OVF_RIS
 ((
uöt32_t
)0x00000002)

	)

3541 
	#DCMI_RISR_ERR_RIS
 ((
uöt32_t
)0x00000004)

	)

3542 
	#DCMI_RISR_VSYNC_RIS
 ((
uöt32_t
)0x00000008)

	)

3543 
	#DCMI_RISR_LINE_RIS
 ((
uöt32_t
)0x00000010)

	)

3546 
	#DCMI_IER_FRAME_IE
 ((
uöt32_t
)0x00000001)

	)

3547 
	#DCMI_IER_OVF_IE
 ((
uöt32_t
)0x00000002)

	)

3548 
	#DCMI_IER_ERR_IE
 ((
uöt32_t
)0x00000004)

	)

3549 
	#DCMI_IER_VSYNC_IE
 ((
uöt32_t
)0x00000008)

	)

3550 
	#DCMI_IER_LINE_IE
 ((
uöt32_t
)0x00000010)

	)

3553 
	#DCMI_MISR_FRAME_MIS
 ((
uöt32_t
)0x00000001)

	)

3554 
	#DCMI_MISR_OVF_MIS
 ((
uöt32_t
)0x00000002)

	)

3555 
	#DCMI_MISR_ERR_MIS
 ((
uöt32_t
)0x00000004)

	)

3556 
	#DCMI_MISR_VSYNC_MIS
 ((
uöt32_t
)0x00000008)

	)

3557 
	#DCMI_MISR_LINE_MIS
 ((
uöt32_t
)0x00000010)

	)

3560 
	#DCMI_ICR_FRAME_ISC
 ((
uöt32_t
)0x00000001)

	)

3561 
	#DCMI_ICR_OVF_ISC
 ((
uöt32_t
)0x00000002)

	)

3562 
	#DCMI_ICR_ERR_ISC
 ((
uöt32_t
)0x00000004)

	)

3563 
	#DCMI_ICR_VSYNC_ISC
 ((
uöt32_t
)0x00000008)

	)

3564 
	#DCMI_ICR_LINE_ISC
 ((
uöt32_t
)0x00000010)

	)

3572 
	#DMA_SxCR_CHSEL
 ((
uöt32_t
)0x0E000000)

	)

3573 
	#DMA_SxCR_CHSEL_0
 ((
uöt32_t
)0x02000000)

	)

3574 
	#DMA_SxCR_CHSEL_1
 ((
uöt32_t
)0x04000000)

	)

3575 
	#DMA_SxCR_CHSEL_2
 ((
uöt32_t
)0x08000000)

	)

3576 
	#DMA_SxCR_MBURST
 ((
uöt32_t
)0x01800000)

	)

3577 
	#DMA_SxCR_MBURST_0
 ((
uöt32_t
)0x00800000)

	)

3578 
	#DMA_SxCR_MBURST_1
 ((
uöt32_t
)0x01000000)

	)

3579 
	#DMA_SxCR_PBURST
 ((
uöt32_t
)0x00600000)

	)

3580 
	#DMA_SxCR_PBURST_0
 ((
uöt32_t
)0x00200000)

	)

3581 
	#DMA_SxCR_PBURST_1
 ((
uöt32_t
)0x00400000)

	)

3582 
	#DMA_SxCR_ACK
 ((
uöt32_t
)0x00100000)

	)

3583 
	#DMA_SxCR_CT
 ((
uöt32_t
)0x00080000)

	)

3584 
	#DMA_SxCR_DBM
 ((
uöt32_t
)0x00040000)

	)

3585 
	#DMA_SxCR_PL
 ((
uöt32_t
)0x00030000)

	)

3586 
	#DMA_SxCR_PL_0
 ((
uöt32_t
)0x00010000)

	)

3587 
	#DMA_SxCR_PL_1
 ((
uöt32_t
)0x00020000)

	)

3588 
	#DMA_SxCR_PINCOS
 ((
uöt32_t
)0x00008000)

	)

3589 
	#DMA_SxCR_MSIZE
 ((
uöt32_t
)0x00006000)

	)

3590 
	#DMA_SxCR_MSIZE_0
 ((
uöt32_t
)0x00002000)

	)

3591 
	#DMA_SxCR_MSIZE_1
 ((
uöt32_t
)0x00004000)

	)

3592 
	#DMA_SxCR_PSIZE
 ((
uöt32_t
)0x00001800)

	)

3593 
	#DMA_SxCR_PSIZE_0
 ((
uöt32_t
)0x00000800)

	)

3594 
	#DMA_SxCR_PSIZE_1
 ((
uöt32_t
)0x00001000)

	)

3595 
	#DMA_SxCR_MINC
 ((
uöt32_t
)0x00000400)

	)

3596 
	#DMA_SxCR_PINC
 ((
uöt32_t
)0x00000200)

	)

3597 
	#DMA_SxCR_CIRC
 ((
uöt32_t
)0x00000100)

	)

3598 
	#DMA_SxCR_DIR
 ((
uöt32_t
)0x000000C0)

	)

3599 
	#DMA_SxCR_DIR_0
 ((
uöt32_t
)0x00000040)

	)

3600 
	#DMA_SxCR_DIR_1
 ((
uöt32_t
)0x00000080)

	)

3601 
	#DMA_SxCR_PFCTRL
 ((
uöt32_t
)0x00000020)

	)

3602 
	#DMA_SxCR_TCIE
 ((
uöt32_t
)0x00000010)

	)

3603 
	#DMA_SxCR_HTIE
 ((
uöt32_t
)0x00000008)

	)

3604 
	#DMA_SxCR_TEIE
 ((
uöt32_t
)0x00000004)

	)

3605 
	#DMA_SxCR_DMEIE
 ((
uöt32_t
)0x00000002)

	)

3606 
	#DMA_SxCR_EN
 ((
uöt32_t
)0x00000001)

	)

3609 
	#DMA_SxNDT
 ((
uöt32_t
)0x0000FFFF)

	)

3610 
	#DMA_SxNDT_0
 ((
uöt32_t
)0x00000001)

	)

3611 
	#DMA_SxNDT_1
 ((
uöt32_t
)0x00000002)

	)

3612 
	#DMA_SxNDT_2
 ((
uöt32_t
)0x00000004)

	)

3613 
	#DMA_SxNDT_3
 ((
uöt32_t
)0x00000008)

	)

3614 
	#DMA_SxNDT_4
 ((
uöt32_t
)0x00000010)

	)

3615 
	#DMA_SxNDT_5
 ((
uöt32_t
)0x00000020)

	)

3616 
	#DMA_SxNDT_6
 ((
uöt32_t
)0x00000040)

	)

3617 
	#DMA_SxNDT_7
 ((
uöt32_t
)0x00000080)

	)

3618 
	#DMA_SxNDT_8
 ((
uöt32_t
)0x00000100)

	)

3619 
	#DMA_SxNDT_9
 ((
uöt32_t
)0x00000200)

	)

3620 
	#DMA_SxNDT_10
 ((
uöt32_t
)0x00000400)

	)

3621 
	#DMA_SxNDT_11
 ((
uöt32_t
)0x00000800)

	)

3622 
	#DMA_SxNDT_12
 ((
uöt32_t
)0x00001000)

	)

3623 
	#DMA_SxNDT_13
 ((
uöt32_t
)0x00002000)

	)

3624 
	#DMA_SxNDT_14
 ((
uöt32_t
)0x00004000)

	)

3625 
	#DMA_SxNDT_15
 ((
uöt32_t
)0x00008000)

	)

3628 
	#DMA_SxFCR_FEIE
 ((
uöt32_t
)0x00000080)

	)

3629 
	#DMA_SxFCR_FS
 ((
uöt32_t
)0x00000038)

	)

3630 
	#DMA_SxFCR_FS_0
 ((
uöt32_t
)0x00000008)

	)

3631 
	#DMA_SxFCR_FS_1
 ((
uöt32_t
)0x00000010)

	)

3632 
	#DMA_SxFCR_FS_2
 ((
uöt32_t
)0x00000020)

	)

3633 
	#DMA_SxFCR_DMDIS
 ((
uöt32_t
)0x00000004)

	)

3634 
	#DMA_SxFCR_FTH
 ((
uöt32_t
)0x00000003)

	)

3635 
	#DMA_SxFCR_FTH_0
 ((
uöt32_t
)0x00000001)

	)

3636 
	#DMA_SxFCR_FTH_1
 ((
uöt32_t
)0x00000002)

	)

3639 
	#DMA_LISR_TCIF3
 ((
uöt32_t
)0x08000000)

	)

3640 
	#DMA_LISR_HTIF3
 ((
uöt32_t
)0x04000000)

	)

3641 
	#DMA_LISR_TEIF3
 ((
uöt32_t
)0x02000000)

	)

3642 
	#DMA_LISR_DMEIF3
 ((
uöt32_t
)0x01000000)

	)

3643 
	#DMA_LISR_FEIF3
 ((
uöt32_t
)0x00400000)

	)

3644 
	#DMA_LISR_TCIF2
 ((
uöt32_t
)0x00200000)

	)

3645 
	#DMA_LISR_HTIF2
 ((
uöt32_t
)0x00100000)

	)

3646 
	#DMA_LISR_TEIF2
 ((
uöt32_t
)0x00080000)

	)

3647 
	#DMA_LISR_DMEIF2
 ((
uöt32_t
)0x00040000)

	)

3648 
	#DMA_LISR_FEIF2
 ((
uöt32_t
)0x00010000)

	)

3649 
	#DMA_LISR_TCIF1
 ((
uöt32_t
)0x00000800)

	)

3650 
	#DMA_LISR_HTIF1
 ((
uöt32_t
)0x00000400)

	)

3651 
	#DMA_LISR_TEIF1
 ((
uöt32_t
)0x00000200)

	)

3652 
	#DMA_LISR_DMEIF1
 ((
uöt32_t
)0x00000100)

	)

3653 
	#DMA_LISR_FEIF1
 ((
uöt32_t
)0x00000040)

	)

3654 
	#DMA_LISR_TCIF0
 ((
uöt32_t
)0x00000020)

	)

3655 
	#DMA_LISR_HTIF0
 ((
uöt32_t
)0x00000010)

	)

3656 
	#DMA_LISR_TEIF0
 ((
uöt32_t
)0x00000008)

	)

3657 
	#DMA_LISR_DMEIF0
 ((
uöt32_t
)0x00000004)

	)

3658 
	#DMA_LISR_FEIF0
 ((
uöt32_t
)0x00000001)

	)

3661 
	#DMA_HISR_TCIF7
 ((
uöt32_t
)0x08000000)

	)

3662 
	#DMA_HISR_HTIF7
 ((
uöt32_t
)0x04000000)

	)

3663 
	#DMA_HISR_TEIF7
 ((
uöt32_t
)0x02000000)

	)

3664 
	#DMA_HISR_DMEIF7
 ((
uöt32_t
)0x01000000)

	)

3665 
	#DMA_HISR_FEIF7
 ((
uöt32_t
)0x00400000)

	)

3666 
	#DMA_HISR_TCIF6
 ((
uöt32_t
)0x00200000)

	)

3667 
	#DMA_HISR_HTIF6
 ((
uöt32_t
)0x00100000)

	)

3668 
	#DMA_HISR_TEIF6
 ((
uöt32_t
)0x00080000)

	)

3669 
	#DMA_HISR_DMEIF6
 ((
uöt32_t
)0x00040000)

	)

3670 
	#DMA_HISR_FEIF6
 ((
uöt32_t
)0x00010000)

	)

3671 
	#DMA_HISR_TCIF5
 ((
uöt32_t
)0x00000800)

	)

3672 
	#DMA_HISR_HTIF5
 ((
uöt32_t
)0x00000400)

	)

3673 
	#DMA_HISR_TEIF5
 ((
uöt32_t
)0x00000200)

	)

3674 
	#DMA_HISR_DMEIF5
 ((
uöt32_t
)0x00000100)

	)

3675 
	#DMA_HISR_FEIF5
 ((
uöt32_t
)0x00000040)

	)

3676 
	#DMA_HISR_TCIF4
 ((
uöt32_t
)0x00000020)

	)

3677 
	#DMA_HISR_HTIF4
 ((
uöt32_t
)0x00000010)

	)

3678 
	#DMA_HISR_TEIF4
 ((
uöt32_t
)0x00000008)

	)

3679 
	#DMA_HISR_DMEIF4
 ((
uöt32_t
)0x00000004)

	)

3680 
	#DMA_HISR_FEIF4
 ((
uöt32_t
)0x00000001)

	)

3683 
	#DMA_LIFCR_CTCIF3
 ((
uöt32_t
)0x08000000)

	)

3684 
	#DMA_LIFCR_CHTIF3
 ((
uöt32_t
)0x04000000)

	)

3685 
	#DMA_LIFCR_CTEIF3
 ((
uöt32_t
)0x02000000)

	)

3686 
	#DMA_LIFCR_CDMEIF3
 ((
uöt32_t
)0x01000000)

	)

3687 
	#DMA_LIFCR_CFEIF3
 ((
uöt32_t
)0x00400000)

	)

3688 
	#DMA_LIFCR_CTCIF2
 ((
uöt32_t
)0x00200000)

	)

3689 
	#DMA_LIFCR_CHTIF2
 ((
uöt32_t
)0x00100000)

	)

3690 
	#DMA_LIFCR_CTEIF2
 ((
uöt32_t
)0x00080000)

	)

3691 
	#DMA_LIFCR_CDMEIF2
 ((
uöt32_t
)0x00040000)

	)

3692 
	#DMA_LIFCR_CFEIF2
 ((
uöt32_t
)0x00010000)

	)

3693 
	#DMA_LIFCR_CTCIF1
 ((
uöt32_t
)0x00000800)

	)

3694 
	#DMA_LIFCR_CHTIF1
 ((
uöt32_t
)0x00000400)

	)

3695 
	#DMA_LIFCR_CTEIF1
 ((
uöt32_t
)0x00000200)

	)

3696 
	#DMA_LIFCR_CDMEIF1
 ((
uöt32_t
)0x00000100)

	)

3697 
	#DMA_LIFCR_CFEIF1
 ((
uöt32_t
)0x00000040)

	)

3698 
	#DMA_LIFCR_CTCIF0
 ((
uöt32_t
)0x00000020)

	)

3699 
	#DMA_LIFCR_CHTIF0
 ((
uöt32_t
)0x00000010)

	)

3700 
	#DMA_LIFCR_CTEIF0
 ((
uöt32_t
)0x00000008)

	)

3701 
	#DMA_LIFCR_CDMEIF0
 ((
uöt32_t
)0x00000004)

	)

3702 
	#DMA_LIFCR_CFEIF0
 ((
uöt32_t
)0x00000001)

	)

3705 
	#DMA_HIFCR_CTCIF7
 ((
uöt32_t
)0x08000000)

	)

3706 
	#DMA_HIFCR_CHTIF7
 ((
uöt32_t
)0x04000000)

	)

3707 
	#DMA_HIFCR_CTEIF7
 ((
uöt32_t
)0x02000000)

	)

3708 
	#DMA_HIFCR_CDMEIF7
 ((
uöt32_t
)0x01000000)

	)

3709 
	#DMA_HIFCR_CFEIF7
 ((
uöt32_t
)0x00400000)

	)

3710 
	#DMA_HIFCR_CTCIF6
 ((
uöt32_t
)0x00200000)

	)

3711 
	#DMA_HIFCR_CHTIF6
 ((
uöt32_t
)0x00100000)

	)

3712 
	#DMA_HIFCR_CTEIF6
 ((
uöt32_t
)0x00080000)

	)

3713 
	#DMA_HIFCR_CDMEIF6
 ((
uöt32_t
)0x00040000)

	)

3714 
	#DMA_HIFCR_CFEIF6
 ((
uöt32_t
)0x00010000)

	)

3715 
	#DMA_HIFCR_CTCIF5
 ((
uöt32_t
)0x00000800)

	)

3716 
	#DMA_HIFCR_CHTIF5
 ((
uöt32_t
)0x00000400)

	)

3717 
	#DMA_HIFCR_CTEIF5
 ((
uöt32_t
)0x00000200)

	)

3718 
	#DMA_HIFCR_CDMEIF5
 ((
uöt32_t
)0x00000100)

	)

3719 
	#DMA_HIFCR_CFEIF5
 ((
uöt32_t
)0x00000040)

	)

3720 
	#DMA_HIFCR_CTCIF4
 ((
uöt32_t
)0x00000020)

	)

3721 
	#DMA_HIFCR_CHTIF4
 ((
uöt32_t
)0x00000010)

	)

3722 
	#DMA_HIFCR_CTEIF4
 ((
uöt32_t
)0x00000008)

	)

3723 
	#DMA_HIFCR_CDMEIF4
 ((
uöt32_t
)0x00000004)

	)

3724 
	#DMA_HIFCR_CFEIF4
 ((
uöt32_t
)0x00000001)

	)

3734 
	#DMA2D_CR_START
 ((
uöt32_t
)0x00000001Ë

	)

3735 
	#DMA2D_CR_SUSP
 ((
uöt32_t
)0x00000002Ë

	)

3736 
	#DMA2D_CR_ABORT
 ((
uöt32_t
)0x00000004Ë

	)

3737 
	#DMA2D_CR_TEIE
 ((
uöt32_t
)0x00000100Ë

	)

3738 
	#DMA2D_CR_TCIE
 ((
uöt32_t
)0x00000200Ë

	)

3739 
	#DMA2D_CR_TWIE
 ((
uöt32_t
)0x00000400Ë

	)

3740 
	#DMA2D_CR_CAEIE
 ((
uöt32_t
)0x00000800Ë

	)

3741 
	#DMA2D_CR_CTCIE
 ((
uöt32_t
)0x00001000Ë

	)

3742 
	#DMA2D_CR_CEIE
 ((
uöt32_t
)0x00002000Ë

	)

3743 
	#DMA2D_CR_MODE
 ((
uöt32_t
)0x00030000Ë

	)

3747 
	#DMA2D_ISR_TEIF
 ((
uöt32_t
)0x00000001Ë

	)

3748 
	#DMA2D_ISR_TCIF
 ((
uöt32_t
)0x00000002Ë

	)

3749 
	#DMA2D_ISR_TWIF
 ((
uöt32_t
)0x00000004Ë

	)

3750 
	#DMA2D_ISR_CAEIF
 ((
uöt32_t
)0x00000008Ë

	)

3751 
	#DMA2D_ISR_CTCIF
 ((
uöt32_t
)0x00000010Ë

	)

3752 
	#DMA2D_ISR_CEIF
 ((
uöt32_t
)0x00000020Ë

	)

3756 
	#DMA2D_IFSR_CTEIF
 ((
uöt32_t
)0x00000001Ë

	)

3757 
	#DMA2D_IFSR_CTCIF
 ((
uöt32_t
)0x00000002Ë

	)

3758 
	#DMA2D_IFSR_CTWIF
 ((
uöt32_t
)0x00000004Ë

	)

3759 
	#DMA2D_IFSR_CCAEIF
 ((
uöt32_t
)0x00000008Ë

	)

3760 
	#DMA2D_IFSR_CCTCIF
 ((
uöt32_t
)0x00000010Ë

	)

3761 
	#DMA2D_IFSR_CCEIF
 ((
uöt32_t
)0x00000020Ë

	)

3765 
	#DMA2D_FGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3769 
	#DMA2D_FGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3773 
	#DMA2D_BGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3777 
	#DMA2D_BGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3781 
	#DMA2D_FGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

3782 
	#DMA2D_FGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

3783 
	#DMA2D_FGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

3784 
	#DMA2D_FGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

3785 
	#DMA2D_FGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

3786 
	#DMA2D_FGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

3790 
	#DMA2D_FGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

3791 
	#DMA2D_FGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

3792 
	#DMA2D_FGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

3796 
	#DMA2D_BGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

3797 
	#DMA2D_BGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

3798 
	#DMA2D_BGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

3799 
	#DMA2D_BGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

3800 
	#DMA2D_BGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

3801 
	#DMA2D_BGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

3805 
	#DMA2D_BGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

3806 
	#DMA2D_BGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

3807 
	#DMA2D_BGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

3811 
	#DMA2D_FGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3815 
	#DMA2D_BGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3819 
	#DMA2D_OPFCCR_CM
 ((
uöt32_t
)0x00000007Ë

	)

3825 
	#DMA2D_OCOLR_BLUE_1
 ((
uöt32_t
)0x000000FFË

	)

3826 
	#DMA2D_OCOLR_GREEN_1
 ((
uöt32_t
)0x0000FF00Ë

	)

3827 
	#DMA2D_OCOLR_RED_1
 ((
uöt32_t
)0x00FF0000Ë

	)

3828 
	#DMA2D_OCOLR_ALPHA_1
 ((
uöt32_t
)0xFF000000Ë

	)

3831 
	#DMA2D_OCOLR_BLUE_2
 ((
uöt32_t
)0x0000001FË

	)

3832 
	#DMA2D_OCOLR_GREEN_2
 ((
uöt32_t
)0x000007E0Ë

	)

3833 
	#DMA2D_OCOLR_RED_2
 ((
uöt32_t
)0x0000F800Ë

	)

3836 
	#DMA2D_OCOLR_BLUE_3
 ((
uöt32_t
)0x0000001FË

	)

3837 
	#DMA2D_OCOLR_GREEN_3
 ((
uöt32_t
)0x000003E0Ë

	)

3838 
	#DMA2D_OCOLR_RED_3
 ((
uöt32_t
)0x00007C00Ë

	)

3839 
	#DMA2D_OCOLR_ALPHA_3
 ((
uöt32_t
)0x00008000Ë

	)

3842 
	#DMA2D_OCOLR_BLUE_4
 ((
uöt32_t
)0x0000000FË

	)

3843 
	#DMA2D_OCOLR_GREEN_4
 ((
uöt32_t
)0x000000F0Ë

	)

3844 
	#DMA2D_OCOLR_RED_4
 ((
uöt32_t
)0x00000F00Ë

	)

3845 
	#DMA2D_OCOLR_ALPHA_4
 ((
uöt32_t
)0x0000F000Ë

	)

3849 
	#DMA2D_OMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3853 
	#DMA2D_OOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3857 
	#DMA2D_NLR_NL
 ((
uöt32_t
)0x0000FFFFË

	)

3858 
	#DMA2D_NLR_PL
 ((
uöt32_t
)0x3FFF0000Ë

	)

3862 
	#DMA2D_LWR_LW
 ((
uöt32_t
)0x0000FFFFË

	)

3866 
	#DMA2D_AMTCR_EN
 ((
uöt32_t
)0x00000001Ë

	)

3867 
	#DMA2D_AMTCR_DT
 ((
uöt32_t
)0x0000FF00Ë

	)

3882 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3883 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3884 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3885 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3886 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3887 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3888 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3889 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3890 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3891 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3892 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3893 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3894 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3895 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3896 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3897 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3898 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3899 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3900 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3901 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3904 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3905 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3906 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3907 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3908 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3909 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3910 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3911 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3912 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3913 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3914 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3915 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3916 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3917 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3918 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3919 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3920 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3921 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3922 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3923 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3926 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3927 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3928 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3929 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3930 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3931 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3932 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3933 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3934 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3935 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3936 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3937 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3938 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3939 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3940 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3941 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3942 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3943 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3944 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3945 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3948 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3949 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3950 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3951 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3952 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3953 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3954 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3955 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3956 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3957 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3958 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3959 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3960 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3961 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3962 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3963 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3964 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3965 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3966 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3967 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3970 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3971 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3972 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3973 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3974 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3975 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3976 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3977 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3978 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3979 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3980 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3981 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3982 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3983 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3984 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3985 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3986 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3987 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3988 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3989 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3992 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3993 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3994 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3995 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3996 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3997 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3998 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3999 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

4000 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

4001 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

4002 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

4003 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

4004 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

4005 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

4006 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

4007 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

4008 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

4009 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

4010 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

4011 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

4019 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x0000000F)

	)

4020 
	#FLASH_ACR_LATENCY_0WS
 ((
uöt32_t
)0x00000000)

	)

4021 
	#FLASH_ACR_LATENCY_1WS
 ((
uöt32_t
)0x00000001)

	)

4022 
	#FLASH_ACR_LATENCY_2WS
 ((
uöt32_t
)0x00000002)

	)

4023 
	#FLASH_ACR_LATENCY_3WS
 ((
uöt32_t
)0x00000003)

	)

4024 
	#FLASH_ACR_LATENCY_4WS
 ((
uöt32_t
)0x00000004)

	)

4025 
	#FLASH_ACR_LATENCY_5WS
 ((
uöt32_t
)0x00000005)

	)

4026 
	#FLASH_ACR_LATENCY_6WS
 ((
uöt32_t
)0x00000006)

	)

4027 
	#FLASH_ACR_LATENCY_7WS
 ((
uöt32_t
)0x00000007)

	)

4028 
	#FLASH_ACR_LATENCY_8WS
 ((
uöt32_t
)0x00000008)

	)

4029 
	#FLASH_ACR_LATENCY_9WS
 ((
uöt32_t
)0x00000009)

	)

4030 
	#FLASH_ACR_LATENCY_10WS
 ((
uöt32_t
)0x0000000A)

	)

4031 
	#FLASH_ACR_LATENCY_11WS
 ((
uöt32_t
)0x0000000B)

	)

4032 
	#FLASH_ACR_LATENCY_12WS
 ((
uöt32_t
)0x0000000C)

	)

4033 
	#FLASH_ACR_LATENCY_13WS
 ((
uöt32_t
)0x0000000D)

	)

4034 
	#FLASH_ACR_LATENCY_14WS
 ((
uöt32_t
)0x0000000E)

	)

4035 
	#FLASH_ACR_LATENCY_15WS
 ((
uöt32_t
)0x0000000F)

	)

4037 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000100)

	)

4038 
	#FLASH_ACR_ICEN
 ((
uöt32_t
)0x00000200)

	)

4039 
	#FLASH_ACR_DCEN
 ((
uöt32_t
)0x00000400)

	)

4040 
	#FLASH_ACR_ICRST
 ((
uöt32_t
)0x00000800)

	)

4041 
	#FLASH_ACR_DCRST
 ((
uöt32_t
)0x00001000)

	)

4042 
	#FLASH_ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

4043 
	#FLASH_ACR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C03)

	)

4046 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000001)

	)

4047 
	#FLASH_SR_SOP
 ((
uöt32_t
)0x00000002)

	)

4048 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010)

	)

4049 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000020)

	)

4050 
	#FLASH_SR_PGPERR
 ((
uöt32_t
)0x00000040)

	)

4051 
	#FLASH_SR_PGSERR
 ((
uöt32_t
)0x00000080)

	)

4052 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00010000)

	)

4055 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001)

	)

4056 
	#FLASH_CR_SER
 ((
uöt32_t
)0x00000002)

	)

4057 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004)

	)

4058 
	#FLASH_CR_MER1
 
FLASH_CR_MER


	)

4059 
	#FLASH_CR_SNB
 ((
uöt32_t
)0x000000F8)

	)

4060 
	#FLASH_CR_SNB_0
 ((
uöt32_t
)0x00000008)

	)

4061 
	#FLASH_CR_SNB_1
 ((
uöt32_t
)0x00000010)

	)

4062 
	#FLASH_CR_SNB_2
 ((
uöt32_t
)0x00000020)

	)

4063 
	#FLASH_CR_SNB_3
 ((
uöt32_t
)0x00000040)

	)

4064 
	#FLASH_CR_SNB_4
 ((
uöt32_t
)0x00000040)

	)

4065 
	#FLASH_CR_PSIZE
 ((
uöt32_t
)0x00000300)

	)

4066 
	#FLASH_CR_PSIZE_0
 ((
uöt32_t
)0x00000100)

	)

4067 
	#FLASH_CR_PSIZE_1
 ((
uöt32_t
)0x00000200)

	)

4068 
	#FLASH_CR_MER2
 ((
uöt32_t
)0x00008000)

	)

4069 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00010000)

	)

4070 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x01000000)

	)

4071 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x80000000)

	)

4074 
	#FLASH_OPTCR_OPTLOCK
 ((
uöt32_t
)0x00000001)

	)

4075 
	#FLASH_OPTCR_OPTSTRT
 ((
uöt32_t
)0x00000002)

	)

4076 
	#FLASH_OPTCR_BOR_LEV_0
 ((
uöt32_t
)0x00000004)

	)

4077 
	#FLASH_OPTCR_BOR_LEV_1
 ((
uöt32_t
)0x00000008)

	)

4078 
	#FLASH_OPTCR_BOR_LEV
 ((
uöt32_t
)0x0000000C)

	)

4079 
	#FLASH_OPTCR_BFB2
 ((
uöt32_t
)0x00000010)

	)

4081 
	#FLASH_OPTCR_WDG_SW
 ((
uöt32_t
)0x00000020)

	)

4082 
	#FLASH_OPTCR_nRST_STOP
 ((
uöt32_t
)0x00000040)

	)

4083 
	#FLASH_OPTCR_nRST_STDBY
 ((
uöt32_t
)0x00000080)

	)

4084 
	#FLASH_OPTCR_RDP
 ((
uöt32_t
)0x0000FF00)

	)

4085 
	#FLASH_OPTCR_RDP_0
 ((
uöt32_t
)0x00000100)

	)

4086 
	#FLASH_OPTCR_RDP_1
 ((
uöt32_t
)0x00000200)

	)

4087 
	#FLASH_OPTCR_RDP_2
 ((
uöt32_t
)0x00000400)

	)

4088 
	#FLASH_OPTCR_RDP_3
 ((
uöt32_t
)0x00000800)

	)

4089 
	#FLASH_OPTCR_RDP_4
 ((
uöt32_t
)0x00001000)

	)

4090 
	#FLASH_OPTCR_RDP_5
 ((
uöt32_t
)0x00002000)

	)

4091 
	#FLASH_OPTCR_RDP_6
 ((
uöt32_t
)0x00004000)

	)

4092 
	#FLASH_OPTCR_RDP_7
 ((
uöt32_t
)0x00008000)

	)

4093 
	#FLASH_OPTCR_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

4094 
	#FLASH_OPTCR_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4095 
	#FLASH_OPTCR_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4096 
	#FLASH_OPTCR_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4097 
	#FLASH_OPTCR_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4098 
	#FLASH_OPTCR_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4099 
	#FLASH_OPTCR_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4100 
	#FLASH_OPTCR_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4101 
	#FLASH_OPTCR_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4102 
	#FLASH_OPTCR_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4103 
	#FLASH_OPTCR_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4104 
	#FLASH_OPTCR_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4105 
	#FLASH_OPTCR_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4107 
	#FLASH_OPTCR_DB1M
 ((
uöt32_t
)0x40000000)

	)

4108 
	#FLASH_OPTCR_SPRMOD
 ((
uöt32_t
)0x80000000)

	)

4111 
	#FLASH_OPTCR1_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

4112 
	#FLASH_OPTCR1_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4113 
	#FLASH_OPTCR1_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4114 
	#FLASH_OPTCR1_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4115 
	#FLASH_OPTCR1_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4116 
	#FLASH_OPTCR1_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4117 
	#FLASH_OPTCR1_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4118 
	#FLASH_OPTCR1_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4119 
	#FLASH_OPTCR1_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4120 
	#FLASH_OPTCR1_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4121 
	#FLASH_OPTCR1_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4122 
	#FLASH_OPTCR1_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4123 
	#FLASH_OPTCR1_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4125 #i‡
deföed
 (
STM32F40_41xxx
)

4132 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4133 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4135 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4136 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4137 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4139 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4140 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4141 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4143 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4144 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4145 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4146 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4147 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4148 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4149 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4150 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4151 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4152 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4155 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4156 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4158 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4159 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4160 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4162 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4163 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4164 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4166 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4167 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4168 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4169 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4170 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4171 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4172 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4173 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4174 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4175 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4178 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4179 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4181 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4182 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4183 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4185 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4186 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4187 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4189 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4190 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4191 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4192 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4193 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4194 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4195 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4196 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4197 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4198 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4201 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4202 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4204 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4205 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4206 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4208 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4209 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4210 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4212 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4213 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4214 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4215 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4216 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4217 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4218 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4219 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4220 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4221 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4224 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4225 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4226 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4227 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4228 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4230 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4231 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4232 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4233 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4234 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4236 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4237 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4238 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4239 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4240 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4242 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4243 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4244 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4245 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4246 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4248 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4249 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4250 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4251 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4252 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4254 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4255 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4256 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4257 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4258 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4260 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4261 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4262 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4265 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4266 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4267 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4268 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4269 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4271 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4272 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4273 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4274 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4275 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4277 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4278 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4279 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4280 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4281 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4283 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4284 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4285 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4286 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4287 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4289 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4290 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4291 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4292 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4293 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4295 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4296 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4297 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4298 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4299 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4301 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4302 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4303 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4306 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4307 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4308 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4309 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4310 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4312 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4313 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4314 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4315 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4316 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4318 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4319 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4320 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4321 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4322 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4324 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4325 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4326 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4327 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4328 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4330 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4331 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4332 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4333 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4334 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4336 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4337 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4338 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4339 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4340 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4342 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4343 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4344 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4347 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4348 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4349 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4350 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4351 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4353 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4354 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4355 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4356 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4357 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4359 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4360 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4361 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4362 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4363 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4365 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4366 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4367 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4368 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4369 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4371 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4372 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4373 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4374 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4375 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4377 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4378 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4379 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4380 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4381 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4383 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4384 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4385 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4388 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4389 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4390 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4391 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4392 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4394 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4395 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4396 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4397 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4398 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4400 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4401 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4402 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4403 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4404 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4406 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4407 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4408 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4409 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4410 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4412 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4413 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4414 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4415 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4416 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4418 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4419 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4420 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4423 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4424 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4425 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4426 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4427 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4429 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4430 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4431 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4432 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4433 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4435 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4436 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4437 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4438 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4439 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4441 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4442 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4443 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4444 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4445 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4447 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4448 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4449 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4450 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4451 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4453 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4454 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4455 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4458 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4459 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4460 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4461 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4462 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4464 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4465 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4466 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4467 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4468 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4470 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4471 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4472 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4473 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4474 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4476 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4477 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4478 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4479 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4480 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4482 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4483 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4484 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4485 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4486 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4488 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4489 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4490 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4493 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4494 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4495 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4496 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4497 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4499 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4500 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4501 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4502 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4503 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4505 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4506 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4507 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4508 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4509 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4511 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4512 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4513 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4514 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4515 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4517 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4518 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4519 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4520 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4521 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4523 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4524 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4525 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4528 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4529 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4530 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4532 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4533 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4534 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4536 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4538 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4539 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4540 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4541 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4542 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4544 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4545 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4546 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4547 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4548 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4550 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4551 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4552 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4553 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4556 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4557 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4558 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4560 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4561 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4562 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4564 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4566 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4567 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4568 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4569 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4570 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4572 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4573 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4574 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4575 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4576 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4578 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4579 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4580 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4581 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4584 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4585 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4586 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4588 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4589 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4590 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4592 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4594 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4595 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4596 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4597 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4598 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4600 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4601 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4602 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4603 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4604 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4606 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4607 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4608 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4609 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4612 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4613 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4614 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4615 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4616 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4617 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4618 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4621 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4622 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4623 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4624 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4625 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4626 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4627 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4630 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4631 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4632 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4633 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4634 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4635 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4636 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4639 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4640 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4641 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4642 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4643 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4644 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4645 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4646 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4647 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4649 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4650 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4651 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4652 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4653 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4654 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4655 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4656 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4657 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4659 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4660 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4661 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4662 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4663 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4664 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4665 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4666 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4667 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4669 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4670 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4671 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4672 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4673 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4674 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4675 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4676 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4677 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4680 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4681 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4682 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4683 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4684 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4685 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4686 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4687 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4688 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4690 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4691 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4692 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4693 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4694 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4695 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4696 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4697 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4698 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4700 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4701 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4702 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4703 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4704 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4705 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4706 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4707 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4708 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4710 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4711 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4712 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4713 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4714 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4715 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4716 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4717 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4718 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4721 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

4722 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4723 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4724 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4725 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4726 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4727 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4728 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4729 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4731 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4732 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4733 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4734 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4735 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4736 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4737 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4738 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4739 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4741 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4742 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4743 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4744 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4745 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4746 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4747 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4748 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4749 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4751 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4752 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4753 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4754 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4755 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4756 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4757 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4758 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4759 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4762 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

4763 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4764 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4765 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4766 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4767 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4768 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4769 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4770 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4772 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4773 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4774 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4775 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4776 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4777 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4778 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4779 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4780 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4782 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4783 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4784 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4785 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4786 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4787 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4788 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4789 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4790 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4792 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4793 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4794 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4795 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4796 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4797 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4798 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4799 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4800 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4803 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

4804 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4805 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4806 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4807 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4808 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4809 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4810 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4811 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4813 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4814 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4815 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4816 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4817 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4818 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4819 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4820 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4821 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4823 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4824 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4825 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4826 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4827 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4828 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4829 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4830 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4831 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4833 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4834 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4835 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4836 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4837 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4838 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4839 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4840 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4841 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4844 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

4845 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4846 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4847 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4848 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4849 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4850 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4851 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4852 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4854 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4855 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4856 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4857 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4858 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4859 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4860 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4861 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4862 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4864 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4865 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4866 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4867 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4868 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4869 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4870 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4871 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4872 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4874 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4875 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4876 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4877 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4878 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4879 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4880 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4881 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4882 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4885 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

4886 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4887 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4888 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4889 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4890 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4891 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4892 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4893 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4895 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4896 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4897 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4898 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4899 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4900 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4901 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4902 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4903 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4905 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4906 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4907 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4908 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4909 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4910 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4911 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4912 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4913 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4915 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4916 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4917 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4918 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4919 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4920 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4921 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4922 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4923 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4926 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4929 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4932 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

4939 
	#FMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4940 
	#FMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4942 
	#FMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4943 
	#FMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4944 
	#FMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4946 
	#FMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4947 
	#FMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4948 
	#FMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4950 
	#FMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4951 
	#FMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4952 
	#FMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4953 
	#FMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4954 
	#FMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4955 
	#FMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4956 
	#FMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4957 
	#FMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4958 
	#FMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4959 
	#FMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4960 
	#FMC_BCR1_CCLKEN
 ((
uöt32_t
)0x00100000Ë

	)

4963 
	#FMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4964 
	#FMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4966 
	#FMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4967 
	#FMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4968 
	#FMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4970 
	#FMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4971 
	#FMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4972 
	#FMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4974 
	#FMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4975 
	#FMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4976 
	#FMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4977 
	#FMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4978 
	#FMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4979 
	#FMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4980 
	#FMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4981 
	#FMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4982 
	#FMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4983 
	#FMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4986 
	#FMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4987 
	#FMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4989 
	#FMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4990 
	#FMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4991 
	#FMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4993 
	#FMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4994 
	#FMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4995 
	#FMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4997 
	#FMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4998 
	#FMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4999 
	#FMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5000 
	#FMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5001 
	#FMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5002 
	#FMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5003 
	#FMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5004 
	#FMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5005 
	#FMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5006 
	#FMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5009 
	#FMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5010 
	#FMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5012 
	#FMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5013 
	#FMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5014 
	#FMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5016 
	#FMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5017 
	#FMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5018 
	#FMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5020 
	#FMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5021 
	#FMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5022 
	#FMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5023 
	#FMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5024 
	#FMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5025 
	#FMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5026 
	#FMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5027 
	#FMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5028 
	#FMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5029 
	#FMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5032 
	#FMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5033 
	#FMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5034 
	#FMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5035 
	#FMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5036 
	#FMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5038 
	#FMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5039 
	#FMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5040 
	#FMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5041 
	#FMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5042 
	#FMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5044 
	#FMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5045 
	#FMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5046 
	#FMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5047 
	#FMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5048 
	#FMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5049 
	#FMC_BTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5050 
	#FMC_BTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5051 
	#FMC_BTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5052 
	#FMC_BTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5054 
	#FMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5055 
	#FMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5056 
	#FMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5057 
	#FMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5058 
	#FMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5060 
	#FMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5061 
	#FMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5062 
	#FMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5063 
	#FMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5064 
	#FMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5066 
	#FMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5067 
	#FMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5068 
	#FMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5069 
	#FMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5070 
	#FMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5072 
	#FMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5073 
	#FMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5074 
	#FMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5077 
	#FMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5078 
	#FMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5079 
	#FMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5080 
	#FMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5081 
	#FMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5083 
	#FMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5084 
	#FMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5085 
	#FMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5086 
	#FMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5087 
	#FMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5089 
	#FMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5090 
	#FMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5091 
	#FMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5092 
	#FMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5093 
	#FMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5094 
	#FMC_BTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5095 
	#FMC_BTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5096 
	#FMC_BTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5097 
	#FMC_BTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5099 
	#FMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5100 
	#FMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5101 
	#FMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5102 
	#FMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5103 
	#FMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5105 
	#FMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5106 
	#FMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5107 
	#FMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5108 
	#FMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5109 
	#FMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5111 
	#FMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5112 
	#FMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5113 
	#FMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5114 
	#FMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5115 
	#FMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5117 
	#FMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5118 
	#FMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5119 
	#FMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5122 
	#FMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5123 
	#FMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5124 
	#FMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5125 
	#FMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5126 
	#FMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5128 
	#FMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5129 
	#FMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5130 
	#FMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5131 
	#FMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5132 
	#FMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5134 
	#FMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5135 
	#FMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5136 
	#FMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5137 
	#FMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5138 
	#FMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5139 
	#FMC_BTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5140 
	#FMC_BTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5141 
	#FMC_BTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5142 
	#FMC_BTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5144 
	#FMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5145 
	#FMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5146 
	#FMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5147 
	#FMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5148 
	#FMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5150 
	#FMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5151 
	#FMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5152 
	#FMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5153 
	#FMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5154 
	#FMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5156 
	#FMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5157 
	#FMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5158 
	#FMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5159 
	#FMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5160 
	#FMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5162 
	#FMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5163 
	#FMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5164 
	#FMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5167 
	#FMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5168 
	#FMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5169 
	#FMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5170 
	#FMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5171 
	#FMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5173 
	#FMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5174 
	#FMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5175 
	#FMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5176 
	#FMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5177 
	#FMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5179 
	#FMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5180 
	#FMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5181 
	#FMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5182 
	#FMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5183 
	#FMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5184 
	#FMC_BTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5185 
	#FMC_BTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5186 
	#FMC_BTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5187 
	#FMC_BTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5189 
	#FMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5190 
	#FMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5191 
	#FMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5192 
	#FMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5193 
	#FMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5195 
	#FMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5196 
	#FMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5197 
	#FMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5198 
	#FMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5199 
	#FMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5201 
	#FMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5202 
	#FMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5203 
	#FMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5204 
	#FMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5205 
	#FMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5207 
	#FMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5208 
	#FMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5209 
	#FMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5212 
	#FMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5213 
	#FMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5214 
	#FMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5215 
	#FMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5216 
	#FMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5218 
	#FMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5219 
	#FMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5220 
	#FMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5221 
	#FMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5222 
	#FMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5224 
	#FMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5225 
	#FMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5226 
	#FMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5227 
	#FMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5228 
	#FMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5229 
	#FMC_BWTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5230 
	#FMC_BWTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5231 
	#FMC_BWTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5232 
	#FMC_BWTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5234 
	#FMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5235 
	#FMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5236 
	#FMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5237 
	#FMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5238 
	#FMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5240 
	#FMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5241 
	#FMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5242 
	#FMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5243 
	#FMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5244 
	#FMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5246 
	#FMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5247 
	#FMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5248 
	#FMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5251 
	#FMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5252 
	#FMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5253 
	#FMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5254 
	#FMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5255 
	#FMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5257 
	#FMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5258 
	#FMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5259 
	#FMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5260 
	#FMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5261 
	#FMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5263 
	#FMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5264 
	#FMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5265 
	#FMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5266 
	#FMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5267 
	#FMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5268 
	#FMC_BWTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5269 
	#FMC_BWTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5270 
	#FMC_BWTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5271 
	#FMC_BWTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5273 
	#FMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5274 
	#FMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5275 
	#FMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5276 
	#FMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5277 
	#FMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5279 
	#FMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5280 
	#FMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5281 
	#FMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5282 
	#FMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5283 
	#FMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5285 
	#FMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5286 
	#FMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5287 
	#FMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5290 
	#FMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5291 
	#FMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5292 
	#FMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5293 
	#FMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5294 
	#FMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5296 
	#FMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5297 
	#FMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5298 
	#FMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5299 
	#FMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5300 
	#FMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5302 
	#FMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5303 
	#FMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5304 
	#FMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5305 
	#FMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5306 
	#FMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5307 
	#FMC_BWTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5308 
	#FMC_BWTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5309 
	#FMC_BWTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5310 
	#FMC_BWTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5312 
	#FMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5313 
	#FMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5314 
	#FMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5315 
	#FMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5316 
	#FMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5318 
	#FMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5319 
	#FMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5320 
	#FMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5321 
	#FMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5322 
	#FMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5324 
	#FMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5325 
	#FMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5326 
	#FMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5329 
	#FMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5330 
	#FMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5331 
	#FMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5332 
	#FMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5333 
	#FMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5335 
	#FMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5336 
	#FMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5337 
	#FMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5338 
	#FMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5339 
	#FMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5341 
	#FMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5342 
	#FMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5343 
	#FMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5344 
	#FMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5345 
	#FMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5346 
	#FMC_BWTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5347 
	#FMC_BWTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5348 
	#FMC_BWTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5349 
	#FMC_BWTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5351 
	#FMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5352 
	#FMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5353 
	#FMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5354 
	#FMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5355 
	#FMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5357 
	#FMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5358 
	#FMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5359 
	#FMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5360 
	#FMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5361 
	#FMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5363 
	#FMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5364 
	#FMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5365 
	#FMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5368 
	#FMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5369 
	#FMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5370 
	#FMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5372 
	#FMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5373 
	#FMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5374 
	#FMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5376 
	#FMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5378 
	#FMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5379 
	#FMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5380 
	#FMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5381 
	#FMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5382 
	#FMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5384 
	#FMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5385 
	#FMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5386 
	#FMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5387 
	#FMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5388 
	#FMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5390 
	#FMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5391 
	#FMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5392 
	#FMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5393 
	#FMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5396 
	#FMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5397 
	#FMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5398 
	#FMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5400 
	#FMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5401 
	#FMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5402 
	#FMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5404 
	#FMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5406 
	#FMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5407 
	#FMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5408 
	#FMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5409 
	#FMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5410 
	#FMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5412 
	#FMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5413 
	#FMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5414 
	#FMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5415 
	#FMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5416 
	#FMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5418 
	#FMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5419 
	#FMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5420 
	#FMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5421 
	#FMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5424 
	#FMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5425 
	#FMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5426 
	#FMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5428 
	#FMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5429 
	#FMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5430 
	#FMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5432 
	#FMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5434 
	#FMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5435 
	#FMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5436 
	#FMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5437 
	#FMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5438 
	#FMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5440 
	#FMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5441 
	#FMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5442 
	#FMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5443 
	#FMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5444 
	#FMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5446 
	#FMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5447 
	#FMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5448 
	#FMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5449 
	#FMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5452 
	#FMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

5453 
	#FMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

5454 
	#FMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

5455 
	#FMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

5456 
	#FMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

5457 
	#FMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

5458 
	#FMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5461 
	#FMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

5462 
	#FMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

5463 
	#FMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

5464 
	#FMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

5465 
	#FMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

5466 
	#FMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

5467 
	#FMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5470 
	#FMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

5471 
	#FMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

5472 
	#FMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

5473 
	#FMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

5474 
	#FMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

5475 
	#FMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

5476 
	#FMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5479 
	#FMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

5480 
	#FMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5481 
	#FMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5482 
	#FMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5483 
	#FMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5484 
	#FMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5485 
	#FMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5486 
	#FMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5487 
	#FMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5489 
	#FMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5490 
	#FMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5491 
	#FMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5492 
	#FMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5493 
	#FMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5494 
	#FMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5495 
	#FMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5496 
	#FMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5497 
	#FMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5499 
	#FMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5500 
	#FMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5501 
	#FMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5502 
	#FMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5503 
	#FMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5504 
	#FMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5505 
	#FMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5506 
	#FMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5507 
	#FMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5509 
	#FMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5510 
	#FMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5511 
	#FMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5512 
	#FMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5513 
	#FMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5514 
	#FMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5515 
	#FMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5516 
	#FMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5517 
	#FMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5520 
	#FMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5521 
	#FMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5522 
	#FMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5523 
	#FMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5524 
	#FMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5525 
	#FMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5526 
	#FMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5527 
	#FMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5528 
	#FMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5530 
	#FMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5531 
	#FMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5532 
	#FMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5533 
	#FMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5534 
	#FMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5535 
	#FMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5536 
	#FMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5537 
	#FMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5538 
	#FMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5540 
	#FMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5541 
	#FMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5542 
	#FMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5543 
	#FMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5544 
	#FMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5545 
	#FMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5546 
	#FMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5547 
	#FMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5548 
	#FMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5550 
	#FMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5551 
	#FMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5552 
	#FMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5553 
	#FMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5554 
	#FMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5555 
	#FMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5556 
	#FMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5557 
	#FMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5558 
	#FMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5561 
	#FMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5562 
	#FMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5563 
	#FMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5564 
	#FMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5565 
	#FMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5566 
	#FMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5567 
	#FMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5568 
	#FMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5569 
	#FMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5571 
	#FMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5572 
	#FMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5573 
	#FMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5574 
	#FMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5575 
	#FMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5576 
	#FMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5577 
	#FMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5578 
	#FMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5579 
	#FMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5581 
	#FMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5582 
	#FMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5583 
	#FMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5584 
	#FMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5585 
	#FMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5586 
	#FMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5587 
	#FMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5588 
	#FMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5589 
	#FMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5591 
	#FMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5592 
	#FMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5593 
	#FMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5594 
	#FMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5595 
	#FMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5596 
	#FMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5597 
	#FMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5598 
	#FMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5599 
	#FMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5602 
	#FMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5603 
	#FMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5604 
	#FMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5605 
	#FMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5606 
	#FMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5607 
	#FMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5608 
	#FMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5609 
	#FMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5610 
	#FMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5612 
	#FMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5613 
	#FMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5614 
	#FMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5615 
	#FMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5616 
	#FMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5617 
	#FMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5618 
	#FMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5619 
	#FMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5620 
	#FMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5622 
	#FMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5623 
	#FMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5624 
	#FMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5625 
	#FMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5626 
	#FMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5627 
	#FMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5628 
	#FMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5629 
	#FMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5630 
	#FMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5632 
	#FMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5633 
	#FMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5634 
	#FMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5635 
	#FMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5636 
	#FMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5637 
	#FMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5638 
	#FMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5639 
	#FMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5640 
	#FMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5643 
	#FMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5644 
	#FMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5645 
	#FMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5646 
	#FMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5647 
	#FMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5648 
	#FMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5649 
	#FMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5650 
	#FMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5651 
	#FMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5653 
	#FMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5654 
	#FMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5655 
	#FMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5656 
	#FMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5657 
	#FMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5658 
	#FMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5659 
	#FMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5660 
	#FMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5661 
	#FMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5663 
	#FMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5664 
	#FMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5665 
	#FMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5666 
	#FMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5667 
	#FMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5668 
	#FMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5669 
	#FMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5670 
	#FMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5671 
	#FMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5673 
	#FMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5674 
	#FMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5675 
	#FMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5676 
	#FMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5677 
	#FMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5678 
	#FMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5679 
	#FMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5680 
	#FMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5681 
	#FMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5684 
	#FMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5685 
	#FMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5686 
	#FMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5687 
	#FMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5688 
	#FMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5689 
	#FMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5690 
	#FMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5691 
	#FMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5692 
	#FMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5694 
	#FMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5695 
	#FMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5696 
	#FMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5697 
	#FMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5698 
	#FMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5699 
	#FMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5700 
	#FMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5701 
	#FMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5702 
	#FMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5704 
	#FMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5705 
	#FMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5706 
	#FMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5707 
	#FMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5708 
	#FMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5709 
	#FMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5710 
	#FMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5711 
	#FMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5712 
	#FMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5714 
	#FMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5715 
	#FMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5716 
	#FMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5717 
	#FMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5718 
	#FMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5719 
	#FMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5720 
	#FMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5721 
	#FMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5722 
	#FMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5725 
	#FMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5726 
	#FMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5727 
	#FMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5728 
	#FMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5729 
	#FMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5730 
	#FMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5731 
	#FMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5732 
	#FMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5733 
	#FMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5735 
	#FMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5736 
	#FMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5737 
	#FMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5738 
	#FMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5739 
	#FMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5740 
	#FMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5741 
	#FMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5742 
	#FMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5743 
	#FMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5745 
	#FMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5746 
	#FMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5747 
	#FMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5748 
	#FMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5749 
	#FMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5750 
	#FMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5751 
	#FMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5752 
	#FMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5753 
	#FMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5755 
	#FMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5756 
	#FMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5757 
	#FMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5758 
	#FMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5759 
	#FMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5760 
	#FMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5761 
	#FMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5762 
	#FMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5763 
	#FMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5766 
	#FMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5769 
	#FMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5772 
	#FMC_SDCR1_NC
 ((
uöt32_t
)0x00000003Ë

	)

5773 
	#FMC_SDCR1_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

5774 
	#FMC_SDCR1_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

5776 
	#FMC_SDCR1_NR
 ((
uöt32_t
)0x0000000CË

	)

5777 
	#FMC_SDCR1_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

5778 
	#FMC_SDCR1_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

5780 
	#FMC_SDCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5781 
	#FMC_SDCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5782 
	#FMC_SDCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5784 
	#FMC_SDCR1_NB
 ((
uöt32_t
)0x00000040Ë

	)

5786 
	#FMC_SDCR1_CAS
 ((
uöt32_t
)0x00000180Ë

	)

5787 
	#FMC_SDCR1_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

5788 
	#FMC_SDCR1_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

5790 
	#FMC_SDCR1_WP
 ((
uöt32_t
)0x00000200Ë

	)

5792 
	#FMC_SDCR1_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

5793 
	#FMC_SDCR1_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

5794 
	#FMC_SDCR1_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

5796 
	#FMC_SDCR1_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

5798 
	#FMC_SDCR1_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

5799 
	#FMC_SDCR1_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

5800 
	#FMC_SDCR1_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

5803 
	#FMC_SDCR2_NC
 ((
uöt32_t
)0x00000003Ë

	)

5804 
	#FMC_SDCR2_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

5805 
	#FMC_SDCR2_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

5807 
	#FMC_SDCR2_NR
 ((
uöt32_t
)0x0000000CË

	)

5808 
	#FMC_SDCR2_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

5809 
	#FMC_SDCR2_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

5811 
	#FMC_SDCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5812 
	#FMC_SDCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5813 
	#FMC_SDCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5815 
	#FMC_SDCR2_NB
 ((
uöt32_t
)0x00000040Ë

	)

5817 
	#FMC_SDCR2_CAS
 ((
uöt32_t
)0x00000180Ë

	)

5818 
	#FMC_SDCR2_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

5819 
	#FMC_SDCR2_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

5821 
	#FMC_SDCR2_WP
 ((
uöt32_t
)0x00000200Ë

	)

5823 
	#FMC_SDCR2_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

5824 
	#FMC_SDCR2_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

5825 
	#FMC_SDCR2_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

5827 
	#FMC_SDCR2_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

5829 
	#FMC_SDCR2_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

5830 
	#FMC_SDCR2_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

5831 
	#FMC_SDCR2_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

5834 
	#FMC_SDTR1_TMRD
 ((
uöt32_t
)0x0000000FË

	)

5835 
	#FMC_SDTR1_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

5836 
	#FMC_SDTR1_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

5837 
	#FMC_SDTR1_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

5838 
	#FMC_SDTR1_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

5840 
	#FMC_SDTR1_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

5841 
	#FMC_SDTR1_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

5842 
	#FMC_SDTR1_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

5843 
	#FMC_SDTR1_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

5844 
	#FMC_SDTR1_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

5846 
	#FMC_SDTR1_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

5847 
	#FMC_SDTR1_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

5848 
	#FMC_SDTR1_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

5849 
	#FMC_SDTR1_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

5850 
	#FMC_SDTR1_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

5852 
	#FMC_SDTR1_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

5853 
	#FMC_SDTR1_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

5854 
	#FMC_SDTR1_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

5855 
	#FMC_SDTR1_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

5857 
	#FMC_SDTR1_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

5858 
	#FMC_SDTR1_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

5859 
	#FMC_SDTR1_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

5860 
	#FMC_SDTR1_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

5862 
	#FMC_SDTR1_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

5863 
	#FMC_SDTR1_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

5864 
	#FMC_SDTR1_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

5865 
	#FMC_SDTR1_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

5867 
	#FMC_SDTR1_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

5868 
	#FMC_SDTR1_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

5869 
	#FMC_SDTR1_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

5870 
	#FMC_SDTR1_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

5873 
	#FMC_SDTR2_TMRD
 ((
uöt32_t
)0x0000000FË

	)

5874 
	#FMC_SDTR2_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

5875 
	#FMC_SDTR2_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

5876 
	#FMC_SDTR2_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

5877 
	#FMC_SDTR2_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

5879 
	#FMC_SDTR2_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

5880 
	#FMC_SDTR2_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

5881 
	#FMC_SDTR2_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

5882 
	#FMC_SDTR2_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

5883 
	#FMC_SDTR2_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

5885 
	#FMC_SDTR2_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

5886 
	#FMC_SDTR2_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

5887 
	#FMC_SDTR2_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

5888 
	#FMC_SDTR2_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

5889 
	#FMC_SDTR2_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

5891 
	#FMC_SDTR2_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

5892 
	#FMC_SDTR2_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

5893 
	#FMC_SDTR2_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

5894 
	#FMC_SDTR2_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

5896 
	#FMC_SDTR2_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

5897 
	#FMC_SDTR2_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

5898 
	#FMC_SDTR2_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

5899 
	#FMC_SDTR2_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

5901 
	#FMC_SDTR2_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

5902 
	#FMC_SDTR2_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

5903 
	#FMC_SDTR2_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

5904 
	#FMC_SDTR2_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

5906 
	#FMC_SDTR2_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

5907 
	#FMC_SDTR2_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

5908 
	#FMC_SDTR2_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

5909 
	#FMC_SDTR2_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

5912 
	#FMC_SDCMR_MODE
 ((
uöt32_t
)0x00000007Ë

	)

5913 
	#FMC_SDCMR_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

5914 
	#FMC_SDCMR_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

5915 
	#FMC_SDCMR_MODE_2
 ((
uöt32_t
)0x00000003Ë

	)

5917 
	#FMC_SDCMR_CTB2
 ((
uöt32_t
)0x00000008Ë

	)

5919 
	#FMC_SDCMR_CTB1
 ((
uöt32_t
)0x00000010Ë

	)

5921 
	#FMC_SDCMR_NRFS
 ((
uöt32_t
)0x000001E0Ë

	)

5922 
	#FMC_SDCMR_NRFS_0
 ((
uöt32_t
)0x00000020Ë

	)

5923 
	#FMC_SDCMR_NRFS_1
 ((
uöt32_t
)0x00000040Ë

	)

5924 
	#FMC_SDCMR_NRFS_2
 ((
uöt32_t
)0x00000080Ë

	)

5925 
	#FMC_SDCMR_NRFS_3
 ((
uöt32_t
)0x00000100Ë

	)

5927 
	#FMC_SDCMR_MRD
 ((
uöt32_t
)0x003FFE00Ë

	)

5930 
	#FMC_SDRTR_CRE
 ((
uöt32_t
)0x00000001Ë

	)

5932 
	#FMC_SDRTR_COUNT
 ((
uöt32_t
)0x00003FFEË

	)

5934 
	#FMC_SDRTR_REIE
 ((
uöt32_t
)0x00004000Ë

	)

5937 
	#FMC_SDSR_RE
 ((
uöt32_t
)0x00000001Ë

	)

5939 
	#FMC_SDSR_MODES1
 ((
uöt32_t
)0x00000006Ë

	)

5940 
	#FMC_SDSR_MODES1_0
 ((
uöt32_t
)0x00000002Ë

	)

5941 
	#FMC_SDSR_MODES1_1
 ((
uöt32_t
)0x00000004Ë

	)

5943 
	#FMC_SDSR_MODES2
 ((
uöt32_t
)0x00000018Ë

	)

5944 
	#FMC_SDSR_MODES2_0
 ((
uöt32_t
)0x00000008Ë

	)

5945 
	#FMC_SDSR_MODES2_1
 ((
uöt32_t
)0x00000010Ë

	)

5947 
	#FMC_SDSR_BUSY
 ((
uöt32_t
)0x00000020Ë

	)

5957 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

5958 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

5959 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

5961 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

5962 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

5963 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

5965 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

5966 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

5967 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

5969 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

5970 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

5971 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

5973 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

5974 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

5975 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

5977 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

5978 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

5979 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

5981 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

5982 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

5983 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

5985 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

5986 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

5987 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

5989 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

5990 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

5991 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

5993 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

5994 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

5995 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

5997 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

5998 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

5999 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

6001 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

6002 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

6003 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

6005 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

6006 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

6007 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

6009 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

6010 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

6011 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

6013 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

6014 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

6015 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

6017 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

6018 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

6019 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

6022 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

6023 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

6024 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

6025 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

6026 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

6027 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

6028 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

6029 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

6030 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

6031 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

6032 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

6033 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

6034 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

6035 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

6036 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

6037 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

6040 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

6041 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

6042 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

6044 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

6045 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

6046 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

6048 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

6049 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

6050 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

6052 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

6053 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

6054 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

6056 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

6057 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

6058 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

6060 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

6061 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

6062 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

6064 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

6065 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

6066 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

6068 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

6069 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

6070 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

6072 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

6073 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

6074 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

6076 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

6077 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

6078 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

6080 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

6081 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

6082 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

6084 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

6085 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

6086 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

6088 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

6089 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

6090 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

6092 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

6093 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

6094 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

6096 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

6097 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

6098 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

6100 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

6101 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

6102 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

6105 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

6106 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

6107 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

6109 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

6110 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

6111 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

6113 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

6114 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

6115 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

6117 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

6118 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

6119 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

6121 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

6122 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

6123 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

6125 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

6126 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

6127 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

6129 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

6130 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

6131 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

6133 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

6134 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

6135 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

6137 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

6138 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

6139 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

6141 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

6142 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

6143 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

6145 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

6146 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

6147 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

6149 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

6150 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

6151 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

6153 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

6154 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

6155 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

6157 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

6158 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

6159 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

6161 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

6162 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

6163 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

6165 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

6166 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

6167 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

6170 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

6171 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

6172 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

6173 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

6174 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

6175 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

6176 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

6177 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

6178 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

6179 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

6180 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

6181 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

6182 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

6183 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

6184 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

6185 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

6187 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

6188 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

6189 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

6190 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

6191 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

6192 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

6193 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

6194 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

6195 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

6196 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

6197 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

6198 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

6199 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

6200 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

6201 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

6202 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

6205 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

6206 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

6207 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

6208 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

6209 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

6210 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

6211 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

6212 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

6213 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

6214 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

6215 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

6216 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

6217 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

6218 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

6219 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

6220 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

6222 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

6223 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

6224 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

6225 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

6226 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

6227 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

6228 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

6229 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

6230 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

6231 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

6232 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

6233 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

6234 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

6235 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

6236 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

6237 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

6240 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

6241 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

6242 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

6243 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

6244 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

6245 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

6246 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

6247 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

6248 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

6249 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

6250 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

6251 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

6252 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

6253 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

6254 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

6255 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

6256 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

6257 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

6258 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

6259 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

6260 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

6261 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

6262 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

6263 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

6264 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

6265 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

6266 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

6267 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

6268 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

6269 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

6270 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

6271 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

6279 
	#HASH_CR_INIT
 ((
uöt32_t
)0x00000004)

	)

6280 
	#HASH_CR_DMAE
 ((
uöt32_t
)0x00000008)

	)

6281 
	#HASH_CR_DATATYPE
 ((
uöt32_t
)0x00000030)

	)

6282 
	#HASH_CR_DATATYPE_0
 ((
uöt32_t
)0x00000010)

	)

6283 
	#HASH_CR_DATATYPE_1
 ((
uöt32_t
)0x00000020)

	)

6284 
	#HASH_CR_MODE
 ((
uöt32_t
)0x00000040)

	)

6285 
	#HASH_CR_ALGO
 ((
uöt32_t
)0x00040080)

	)

6286 
	#HASH_CR_ALGO_0
 ((
uöt32_t
)0x00000080)

	)

6287 
	#HASH_CR_ALGO_1
 ((
uöt32_t
)0x00040000)

	)

6288 
	#HASH_CR_NBW
 ((
uöt32_t
)0x00000F00)

	)

6289 
	#HASH_CR_NBW_0
 ((
uöt32_t
)0x00000100)

	)

6290 
	#HASH_CR_NBW_1
 ((
uöt32_t
)0x00000200)

	)

6291 
	#HASH_CR_NBW_2
 ((
uöt32_t
)0x00000400)

	)

6292 
	#HASH_CR_NBW_3
 ((
uöt32_t
)0x00000800)

	)

6293 
	#HASH_CR_DINNE
 ((
uöt32_t
)0x00001000)

	)

6294 
	#HASH_CR_MDMAT
 ((
uöt32_t
)0x00002000)

	)

6295 
	#HASH_CR_LKEY
 ((
uöt32_t
)0x00010000)

	)

6298 
	#HASH_STR_NBW
 ((
uöt32_t
)0x0000001F)

	)

6299 
	#HASH_STR_NBW_0
 ((
uöt32_t
)0x00000001)

	)

6300 
	#HASH_STR_NBW_1
 ((
uöt32_t
)0x00000002)

	)

6301 
	#HASH_STR_NBW_2
 ((
uöt32_t
)0x00000004)

	)

6302 
	#HASH_STR_NBW_3
 ((
uöt32_t
)0x00000008)

	)

6303 
	#HASH_STR_NBW_4
 ((
uöt32_t
)0x00000010)

	)

6304 
	#HASH_STR_DCAL
 ((
uöt32_t
)0x00000100)

	)

6307 
	#HASH_IMR_DINIM
 ((
uöt32_t
)0x00000001)

	)

6308 
	#HASH_IMR_DCIM
 ((
uöt32_t
)0x00000002)

	)

6311 
	#HASH_SR_DINIS
 ((
uöt32_t
)0x00000001)

	)

6312 
	#HASH_SR_DCIS
 ((
uöt32_t
)0x00000002)

	)

6313 
	#HASH_SR_DMAS
 ((
uöt32_t
)0x00000004)

	)

6314 
	#HASH_SR_BUSY
 ((
uöt32_t
)0x00000008)

	)

6322 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

6323 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

6324 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

6325 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

6326 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

6327 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

6328 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

6329 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

6330 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

6331 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

6332 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

6333 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

6334 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

6335 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

6338 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

6339 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

6340 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

6341 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

6342 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

6343 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

6344 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

6346 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

6347 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

6348 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

6349 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

6350 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

6353 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

6354 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

6356 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

6357 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

6358 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

6359 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

6360 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

6361 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

6362 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

6363 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

6364 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

6365 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

6367 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

6370 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

6371 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

6374 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

6377 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

6378 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

6379 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

6380 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

6381 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

6382 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

6383 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

6384 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

6385 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

6386 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

6387 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

6388 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

6389 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

6390 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

6393 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

6394 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

6395 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

6396 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

6397 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

6398 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

6399 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

6400 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

6403 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

6404 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

6405 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

6408 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

6411 
	#I2C_FLTR_DNF
 ((
uöt8_t
)0x0FË

	)

6412 
	#I2C_FLTR_ANOFF
 ((
uöt8_t
)0x10Ë

	)

6420 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

6423 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

6424 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

6425 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

6426 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

6429 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

6432 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

6433 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

6443 
	#LTDC_SSCR_VSH
 ((
uöt32_t
)0x000007FFË

	)

6444 
	#LTDC_SSCR_HSW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6448 
	#LTDC_BPCR_AVBP
 ((
uöt32_t
)0x000007FFË

	)

6449 
	#LTDC_BPCR_AHBP
 ((
uöt32_t
)0x0FFF0000Ë

	)

6453 
	#LTDC_AWCR_AAH
 ((
uöt32_t
)0x000007FFË

	)

6454 
	#LTDC_AWCR_AAW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6458 
	#LTDC_TWCR_TOTALH
 ((
uöt32_t
)0x000007FFË

	)

6459 
	#LTDC_TWCR_TOTALW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6463 
	#LTDC_GCR_LTDCEN
 ((
uöt32_t
)0x00000001Ë

	)

6464 
	#LTDC_GCR_DBW
 ((
uöt32_t
)0x00000070Ë

	)

6465 
	#LTDC_GCR_DGW
 ((
uöt32_t
)0x00000700Ë

	)

6466 
	#LTDC_GCR_DRW
 ((
uöt32_t
)0x00007000Ë

	)

6467 
	#LTDC_GCR_DTEN
 ((
uöt32_t
)0x00010000Ë

	)

6468 
	#LTDC_GCR_PCPOL
 ((
uöt32_t
)0x10000000Ë

	)

6469 
	#LTDC_GCR_DEPOL
 ((
uöt32_t
)0x20000000Ë

	)

6470 
	#LTDC_GCR_VSPOL
 ((
uöt32_t
)0x40000000Ë

	)

6471 
	#LTDC_GCR_HSPOL
 ((
uöt32_t
)0x80000000Ë

	)

6475 
	#LTDC_SRCR_IMR
 ((
uöt32_t
)0x00000001Ë

	)

6476 
	#LTDC_SRCR_VBR
 ((
uöt32_t
)0x00000002Ë

	)

6480 
	#LTDC_BCCR_BCBLUE
 ((
uöt32_t
)0x000000FFË

	)

6481 
	#LTDC_BCCR_BCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6482 
	#LTDC_BCCR_BCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6486 
	#LTDC_IER_LIE
 ((
uöt32_t
)0x00000001Ë

	)

6487 
	#LTDC_IER_FUIE
 ((
uöt32_t
)0x00000002Ë

	)

6488 
	#LTDC_IER_TERRIE
 ((
uöt32_t
)0x00000004Ë

	)

6489 
	#LTDC_IER_RRIE
 ((
uöt32_t
)0x00000008Ë

	)

6493 
	#LTDC_ISR_LIF
 ((
uöt32_t
)0x00000001Ë

	)

6494 
	#LTDC_ISR_FUIF
 ((
uöt32_t
)0x00000002Ë

	)

6495 
	#LTDC_ISR_TERRIF
 ((
uöt32_t
)0x00000004Ë

	)

6496 
	#LTDC_ISR_RRIF
 ((
uöt32_t
)0x00000008Ë

	)

6500 
	#LTDC_ICR_CLIF
 ((
uöt32_t
)0x00000001Ë

	)

6501 
	#LTDC_ICR_CFUIF
 ((
uöt32_t
)0x00000002Ë

	)

6502 
	#LTDC_ICR_CTERRIF
 ((
uöt32_t
)0x00000004Ë

	)

6503 
	#LTDC_ICR_CRRIF
 ((
uöt32_t
)0x00000008Ë

	)

6507 
	#LTDC_LIPCR_LIPOS
 ((
uöt32_t
)0x000007FFË

	)

6511 
	#LTDC_CPSR_CYPOS
 ((
uöt32_t
)0x0000FFFFË

	)

6512 
	#LTDC_CPSR_CXPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6516 
	#LTDC_CDSR_VDES
 ((
uöt32_t
)0x00000001Ë

	)

6517 
	#LTDC_CDSR_HDES
 ((
uöt32_t
)0x00000002Ë

	)

6518 
	#LTDC_CDSR_VSYNCS
 ((
uöt32_t
)0x00000004Ë

	)

6519 
	#LTDC_CDSR_HSYNCS
 ((
uöt32_t
)0x00000008Ë

	)

6523 
	#LTDC_LxCR_LEN
 ((
uöt32_t
)0x00000001Ë

	)

6524 
	#LTDC_LxCR_COLKEN
 ((
uöt32_t
)0x00000002Ë

	)

6525 
	#LTDC_LxCR_CLUTEN
 ((
uöt32_t
)0x00000010Ë

	)

6529 
	#LTDC_LxWHPCR_WHSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

6530 
	#LTDC_LxWHPCR_WHSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6534 
	#LTDC_LxWVPCR_WVSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

6535 
	#LTDC_LxWVPCR_WVSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6539 
	#LTDC_LxCKCR_CKBLUE
 ((
uöt32_t
)0x000000FFË

	)

6540 
	#LTDC_LxCKCR_CKGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6541 
	#LTDC_LxCKCR_CKRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6545 
	#LTDC_LxPFCR_PF
 ((
uöt32_t
)0x00000007Ë

	)

6549 
	#LTDC_LxCACR_CONSTA
 ((
uöt32_t
)0x000000FFË

	)

6553 
	#LTDC_LxDCCR_DCBLUE
 ((
uöt32_t
)0x000000FFË

	)

6554 
	#LTDC_LxDCCR_DCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6555 
	#LTDC_LxDCCR_DCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6556 
	#LTDC_LxDCCR_DCALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

6560 
	#LTDC_LxBFCR_BF2
 ((
uöt32_t
)0x00000007Ë

	)

6561 
	#LTDC_LxBFCR_BF1
 ((
uöt32_t
)0x00000700Ë

	)

6565 
	#LTDC_LxCFBAR_CFBADD
 ((
uöt32_t
)0xFFFFFFFFË

	)

6569 
	#LTDC_LxCFBLR_CFBLL
 ((
uöt32_t
)0x00001FFFË

	)

6570 
	#LTDC_LxCFBLR_CFBP
 ((
uöt32_t
)0x1FFF0000Ë

	)

6574 
	#LTDC_LxCFBLNR_CFBLNBR
 ((
uöt32_t
)0x000007FFË

	)

6578 
	#LTDC_LxCLUTWR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

6579 
	#LTDC_LxCLUTWR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6580 
	#LTDC_LxCLUTWR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

6581 
	#LTDC_LxCLUTWR_CLUTADD
 ((
uöt32_t
)0xFF000000Ë

	)

6589 
	#PWR_CR_LPDS
 ((
uöt32_t
)0x00000001Ë

	)

6590 
	#PWR_CR_PDDS
 ((
uöt32_t
)0x00000002Ë

	)

6591 
	#PWR_CR_CWUF
 ((
uöt32_t
)0x00000004Ë

	)

6592 
	#PWR_CR_CSBF
 ((
uöt32_t
)0x00000008Ë

	)

6593 
	#PWR_CR_PVDE
 ((
uöt32_t
)0x00000010Ë

	)

6595 
	#PWR_CR_PLS
 ((
uöt32_t
)0x000000E0Ë

	)

6596 
	#PWR_CR_PLS_0
 ((
uöt32_t
)0x00000020Ë

	)

6597 
	#PWR_CR_PLS_1
 ((
uöt32_t
)0x00000040Ë

	)

6598 
	#PWR_CR_PLS_2
 ((
uöt32_t
)0x00000080Ë

	)

6601 
	#PWR_CR_PLS_LEV0
 ((
uöt32_t
)0x00000000Ë

	)

6602 
	#PWR_CR_PLS_LEV1
 ((
uöt32_t
)0x00000020Ë

	)

6603 
	#PWR_CR_PLS_LEV2
 ((
uöt32_t
)0x00000040Ë

	)

6604 
	#PWR_CR_PLS_LEV3
 ((
uöt32_t
)0x00000060Ë

	)

6605 
	#PWR_CR_PLS_LEV4
 ((
uöt32_t
)0x00000080Ë

	)

6606 
	#PWR_CR_PLS_LEV5
 ((
uöt32_t
)0x000000A0Ë

	)

6607 
	#PWR_CR_PLS_LEV6
 ((
uöt32_t
)0x000000C0Ë

	)

6608 
	#PWR_CR_PLS_LEV7
 ((
uöt32_t
)0x000000E0Ë

	)

6610 
	#PWR_CR_DBP
 ((
uöt32_t
)0x00000100Ë

	)

6611 
	#PWR_CR_FPDS
 ((
uöt32_t
)0x00000200Ë

	)

6612 
	#PWR_CR_LPUDS
 ((
uöt32_t
)0x00000400Ë

	)

6613 
	#PWR_CR_MRUDS
 ((
uöt32_t
)0x00000800Ë

	)

6614 
	#PWR_CR_LPLVDS
 ((
uöt32_t
)0x00000400Ë

	)

6615 
	#PWR_CR_MRLVDS
 ((
uöt32_t
)0x00000800Ë

	)

6617 
	#PWR_CR_ADCDC1
 ((
uöt32_t
)0x00002000Ë

	)

6619 
	#PWR_CR_VOS
 ((
uöt32_t
)0x0000C000Ë

	)

6620 
	#PWR_CR_VOS_0
 ((
uöt32_t
)0x00004000Ë

	)

6621 
	#PWR_CR_VOS_1
 ((
uöt32_t
)0x00008000Ë

	)

6623 
	#PWR_CR_ODEN
 ((
uöt32_t
)0x00010000Ë

	)

6624 
	#PWR_CR_ODSWEN
 ((
uöt32_t
)0x00020000Ë

	)

6625 
	#PWR_CR_UDEN
 ((
uöt32_t
)0x000C0000Ë

	)

6626 
	#PWR_CR_UDEN_0
 ((
uöt32_t
)0x00040000Ë

	)

6627 
	#PWR_CR_UDEN_1
 ((
uöt32_t
)0x00080000Ë

	)

6629 
	#PWR_CR_FMSSR
 ((
uöt32_t
)0x00100000Ë

	)

6630 
	#PWR_CR_FISSR
 ((
uöt32_t
)0x00200000Ë

	)

6633 
	#PWR_CR_PMODE
 
PWR_CR_VOS


	)

6636 
	#PWR_CSR_WUF
 ((
uöt32_t
)0x00000001Ë

	)

6637 
	#PWR_CSR_SBF
 ((
uöt32_t
)0x00000002Ë

	)

6638 
	#PWR_CSR_PVDO
 ((
uöt32_t
)0x00000004Ë

	)

6639 
	#PWR_CSR_BRR
 ((
uöt32_t
)0x00000008Ë

	)

6640 
	#PWR_CSR_EWUP
 ((
uöt32_t
)0x00000100Ë

	)

6641 
	#PWR_CSR_BRE
 ((
uöt32_t
)0x00000200Ë

	)

6642 
	#PWR_CSR_VOSRDY
 ((
uöt32_t
)0x00004000Ë

	)

6643 
	#PWR_CSR_ODRDY
 ((
uöt32_t
)0x00010000Ë

	)

6644 
	#PWR_CSR_ODSWRDY
 ((
uöt32_t
)0x00020000Ë

	)

6645 
	#PWR_CSR_UDSWRDY
 ((
uöt32_t
)0x000C0000Ë

	)

6648 
	#PWR_CSR_REGRDY
 
PWR_CSR_VOSRDY


	)

6656 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

6657 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

6659 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

6660 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

6661 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

6662 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

6663 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

6664 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

6666 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

6667 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

6668 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

6669 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

6670 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

6671 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

6672 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

6673 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

6674 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

6676 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

6677 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

6678 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

6679 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

6680 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

6681 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

6682 
	#RCC_CR_PLLI2SON
 ((
uöt32_t
)0x04000000)

	)

6683 
	#RCC_CR_PLLI2SRDY
 ((
uöt32_t
)0x08000000)

	)

6684 
	#RCC_CR_PLLSAION
 ((
uöt32_t
)0x10000000)

	)

6685 
	#RCC_CR_PLLSAIRDY
 ((
uöt32_t
)0x20000000)

	)

6688 
	#RCC_PLLCFGR_PLLM
 ((
uöt32_t
)0x0000003F)

	)

6689 
	#RCC_PLLCFGR_PLLM_0
 ((
uöt32_t
)0x00000001)

	)

6690 
	#RCC_PLLCFGR_PLLM_1
 ((
uöt32_t
)0x00000002)

	)

6691 
	#RCC_PLLCFGR_PLLM_2
 ((
uöt32_t
)0x00000004)

	)

6692 
	#RCC_PLLCFGR_PLLM_3
 ((
uöt32_t
)0x00000008)

	)

6693 
	#RCC_PLLCFGR_PLLM_4
 ((
uöt32_t
)0x00000010)

	)

6694 
	#RCC_PLLCFGR_PLLM_5
 ((
uöt32_t
)0x00000020)

	)

6696 
	#RCC_PLLCFGR_PLLN
 ((
uöt32_t
)0x00007FC0)

	)

6697 
	#RCC_PLLCFGR_PLLN_0
 ((
uöt32_t
)0x00000040)

	)

6698 
	#RCC_PLLCFGR_PLLN_1
 ((
uöt32_t
)0x00000080)

	)

6699 
	#RCC_PLLCFGR_PLLN_2
 ((
uöt32_t
)0x00000100)

	)

6700 
	#RCC_PLLCFGR_PLLN_3
 ((
uöt32_t
)0x00000200)

	)

6701 
	#RCC_PLLCFGR_PLLN_4
 ((
uöt32_t
)0x00000400)

	)

6702 
	#RCC_PLLCFGR_PLLN_5
 ((
uöt32_t
)0x00000800)

	)

6703 
	#RCC_PLLCFGR_PLLN_6
 ((
uöt32_t
)0x00001000)

	)

6704 
	#RCC_PLLCFGR_PLLN_7
 ((
uöt32_t
)0x00002000)

	)

6705 
	#RCC_PLLCFGR_PLLN_8
 ((
uöt32_t
)0x00004000)

	)

6707 
	#RCC_PLLCFGR_PLLP
 ((
uöt32_t
)0x00030000)

	)

6708 
	#RCC_PLLCFGR_PLLP_0
 ((
uöt32_t
)0x00010000)

	)

6709 
	#RCC_PLLCFGR_PLLP_1
 ((
uöt32_t
)0x00020000)

	)

6711 
	#RCC_PLLCFGR_PLLSRC
 ((
uöt32_t
)0x00400000)

	)

6712 
	#RCC_PLLCFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00400000)

	)

6713 
	#RCC_PLLCFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000)

	)

6715 
	#RCC_PLLCFGR_PLLQ
 ((
uöt32_t
)0x0F000000)

	)

6716 
	#RCC_PLLCFGR_PLLQ_0
 ((
uöt32_t
)0x01000000)

	)

6717 
	#RCC_PLLCFGR_PLLQ_1
 ((
uöt32_t
)0x02000000)

	)

6718 
	#RCC_PLLCFGR_PLLQ_2
 ((
uöt32_t
)0x04000000)

	)

6719 
	#RCC_PLLCFGR_PLLQ_3
 ((
uöt32_t
)0x08000000)

	)

6723 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

6724 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

6725 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

6727 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

6728 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

6729 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

6732 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

6733 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

6734 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

6736 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

6737 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

6738 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

6741 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

6742 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

6743 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

6744 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

6745 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

6747 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6748 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

6749 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

6750 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

6751 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

6752 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

6753 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

6754 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

6755 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

6758 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00001C00Ë

	)

6759 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000400Ë

	)

6760 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000800Ë

	)

6761 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00001000Ë

	)

6763 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6764 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00001000Ë

	)

6765 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00001400Ë

	)

6766 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00001800Ë

	)

6767 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00001C00Ë

	)

6770 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x0000E000Ë

	)

6771 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00002000Ë

	)

6772 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00004000Ë

	)

6773 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00008000Ë

	)

6775 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6776 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00008000Ë

	)

6777 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x0000A000Ë

	)

6778 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

6779 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x0000E000Ë

	)

6782 
	#RCC_CFGR_RTCPRE
 ((
uöt32_t
)0x001F0000)

	)

6783 
	#RCC_CFGR_RTCPRE_0
 ((
uöt32_t
)0x00010000)

	)

6784 
	#RCC_CFGR_RTCPRE_1
 ((
uöt32_t
)0x00020000)

	)

6785 
	#RCC_CFGR_RTCPRE_2
 ((
uöt32_t
)0x00040000)

	)

6786 
	#RCC_CFGR_RTCPRE_3
 ((
uöt32_t
)0x00080000)

	)

6787 
	#RCC_CFGR_RTCPRE_4
 ((
uöt32_t
)0x00100000)

	)

6790 
	#RCC_CFGR_MCO1
 ((
uöt32_t
)0x00600000)

	)

6791 
	#RCC_CFGR_MCO1_0
 ((
uöt32_t
)0x00200000)

	)

6792 
	#RCC_CFGR_MCO1_1
 ((
uöt32_t
)0x00400000)

	)

6794 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000)

	)

6796 
	#RCC_CFGR_MCO1PRE
 ((
uöt32_t
)0x07000000)

	)

6797 
	#RCC_CFGR_MCO1PRE_0
 ((
uöt32_t
)0x01000000)

	)

6798 
	#RCC_CFGR_MCO1PRE_1
 ((
uöt32_t
)0x02000000)

	)

6799 
	#RCC_CFGR_MCO1PRE_2
 ((
uöt32_t
)0x04000000)

	)

6801 
	#RCC_CFGR_MCO2PRE
 ((
uöt32_t
)0x38000000)

	)

6802 
	#RCC_CFGR_MCO2PRE_0
 ((
uöt32_t
)0x08000000)

	)

6803 
	#RCC_CFGR_MCO2PRE_1
 ((
uöt32_t
)0x10000000)

	)

6804 
	#RCC_CFGR_MCO2PRE_2
 ((
uöt32_t
)0x20000000)

	)

6806 
	#RCC_CFGR_MCO2
 ((
uöt32_t
)0xC0000000)

	)

6807 
	#RCC_CFGR_MCO2_0
 ((
uöt32_t
)0x40000000)

	)

6808 
	#RCC_CFGR_MCO2_1
 ((
uöt32_t
)0x80000000)

	)

6811 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001)

	)

6812 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002)

	)

6813 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004)

	)

6814 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008)

	)

6815 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010)

	)

6816 
	#RCC_CIR_PLLI2SRDYF
 ((
uöt32_t
)0x00000020)

	)

6817 
	#RCC_CIR_PLLSAIRDYF
 ((
uöt32_t
)0x00000040)

	)

6818 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080)

	)

6819 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100)

	)

6820 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200)

	)

6821 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400)

	)

6822 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800)

	)

6823 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000)

	)

6824 
	#RCC_CIR_PLLI2SRDYIE
 ((
uöt32_t
)0x00002000)

	)

6825 
	#RCC_CIR_PLLSAIRDYIE
 ((
uöt32_t
)0x00004000)

	)

6826 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000)

	)

6827 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000)

	)

6828 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000)

	)

6829 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000)

	)

6830 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000)

	)

6831 
	#RCC_CIR_PLLI2SRDYC
 ((
uöt32_t
)0x00200000)

	)

6832 
	#RCC_CIR_PLLSAIRDYC
 ((
uöt32_t
)0x00400000)

	)

6833 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000)

	)

6836 
	#RCC_AHB1RSTR_GPIOARST
 ((
uöt32_t
)0x00000001)

	)

6837 
	#RCC_AHB1RSTR_GPIOBRST
 ((
uöt32_t
)0x00000002)

	)

6838 
	#RCC_AHB1RSTR_GPIOCRST
 ((
uöt32_t
)0x00000004)

	)

6839 
	#RCC_AHB1RSTR_GPIODRST
 ((
uöt32_t
)0x00000008)

	)

6840 
	#RCC_AHB1RSTR_GPIOERST
 ((
uöt32_t
)0x00000010)

	)

6841 
	#RCC_AHB1RSTR_GPIOFRST
 ((
uöt32_t
)0x00000020)

	)

6842 
	#RCC_AHB1RSTR_GPIOGRST
 ((
uöt32_t
)0x00000040)

	)

6843 
	#RCC_AHB1RSTR_GPIOHRST
 ((
uöt32_t
)0x00000080)

	)

6844 
	#RCC_AHB1RSTR_GPIOIRST
 ((
uöt32_t
)0x00000100)

	)

6845 
	#RCC_AHB1RSTR_GPIOJRST
 ((
uöt32_t
)0x00000200)

	)

6846 
	#RCC_AHB1RSTR_GPIOKRST
 ((
uöt32_t
)0x00000400)

	)

6847 
	#RCC_AHB1RSTR_CRCRST
 ((
uöt32_t
)0x00001000)

	)

6848 
	#RCC_AHB1RSTR_DMA1RST
 ((
uöt32_t
)0x00200000)

	)

6849 
	#RCC_AHB1RSTR_DMA2RST
 ((
uöt32_t
)0x00400000)

	)

6850 
	#RCC_AHB1RSTR_DMA2DRST
 ((
uöt32_t
)0x00800000)

	)

6851 
	#RCC_AHB1RSTR_ETHMACRST
 ((
uöt32_t
)0x02000000)

	)

6852 
	#RCC_AHB1RSTR_OTGHRST
 ((
uöt32_t
)0x10000000)

	)

6855 
	#RCC_AHB2RSTR_DCMIRST
 ((
uöt32_t
)0x00000001)

	)

6856 
	#RCC_AHB2RSTR_CRYPRST
 ((
uöt32_t
)0x00000010)

	)

6857 
	#RCC_AHB2RSTR_HASHRST
 ((
uöt32_t
)0x00000020)

	)

6859 
	#RCC_AHB2RSTR_HSAHRST
 
RCC_AHB2RSTR_HASHRST


	)

6860 
	#RCC_AHB2RSTR_RNGRST
 ((
uöt32_t
)0x00000040)

	)

6861 
	#RCC_AHB2RSTR_OTGFSRST
 ((
uöt32_t
)0x00000080)

	)

6864 #i‡
deföed
(
STM32F40_41xxx
)

6865 
	#RCC_AHB3RSTR_FSMCRST
 ((
uöt32_t
)0x00000001)

	)

6868 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

6869 
	#RCC_AHB3RSTR_FMCRST
 ((
uöt32_t
)0x00000001)

	)

6872 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001)

	)

6873 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002)

	)

6874 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004)

	)

6875 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008)

	)

6876 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010)

	)

6877 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020)

	)

6878 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040)

	)

6879 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080)

	)

6880 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100)

	)

6881 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800)

	)

6882 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000)

	)

6883 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000)

	)

6884 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000)

	)

6885 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000)

	)

6886 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000)

	)

6887 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000)

	)

6888 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000)

	)

6889 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000)

	)

6890 
	#RCC_APB1RSTR_I2C3RST
 ((
uöt32_t
)0x00800000)

	)

6891 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000)

	)

6892 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000)

	)

6893 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000)

	)

6894 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000)

	)

6895 
	#RCC_APB1RSTR_UART7RST
 ((
uöt32_t
)0x40000000)

	)

6896 
	#RCC_APB1RSTR_UART8RST
 ((
uöt32_t
)0x80000000)

	)

6899 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000001)

	)

6900 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00000002)

	)

6901 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00000010)

	)

6902 
	#RCC_APB2RSTR_USART6RST
 ((
uöt32_t
)0x00000020)

	)

6903 
	#RCC_APB2RSTR_ADCRST
 ((
uöt32_t
)0x00000100)

	)

6904 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800)

	)

6905 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000)

	)

6906 
	#RCC_APB2RSTR_SPI4RST
 ((
uöt32_t
)0x00002000)

	)

6907 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00004000)

	)

6908 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00010000)

	)

6909 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00020000)

	)

6910 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00040000)

	)

6911 
	#RCC_APB2RSTR_SPI5RST
 ((
uöt32_t
)0x00100000)

	)

6912 
	#RCC_APB2RSTR_SPI6RST
 ((
uöt32_t
)0x00200000)

	)

6913 
	#RCC_APB2RSTR_SAI1RST
 ((
uöt32_t
)0x00400000)

	)

6914 
	#RCC_APB2RSTR_LTDCRST
 ((
uöt32_t
)0x04000000)

	)

6917 
	#RCC_APB2RSTR_SPI1
 
RCC_APB2RSTR_SPI1RST


	)

6920 
	#RCC_AHB1ENR_GPIOAEN
 ((
uöt32_t
)0x00000001)

	)

6921 
	#RCC_AHB1ENR_GPIOBEN
 ((
uöt32_t
)0x00000002)

	)

6922 
	#RCC_AHB1ENR_GPIOCEN
 ((
uöt32_t
)0x00000004)

	)

6923 
	#RCC_AHB1ENR_GPIODEN
 ((
uöt32_t
)0x00000008)

	)

6924 
	#RCC_AHB1ENR_GPIOEEN
 ((
uöt32_t
)0x00000010)

	)

6925 
	#RCC_AHB1ENR_GPIOFEN
 ((
uöt32_t
)0x00000020)

	)

6926 
	#RCC_AHB1ENR_GPIOGEN
 ((
uöt32_t
)0x00000040)

	)

6927 
	#RCC_AHB1ENR_GPIOHEN
 ((
uöt32_t
)0x00000080)

	)

6928 
	#RCC_AHB1ENR_GPIOIEN
 ((
uöt32_t
)0x00000100)

	)

6929 
	#RCC_AHB1ENR_GPIOJEN
 ((
uöt32_t
)0x00000200)

	)

6930 
	#RCC_AHB1ENR_GPIOKEN
 ((
uöt32_t
)0x00000400)

	)

6931 
	#RCC_AHB1ENR_CRCEN
 ((
uöt32_t
)0x00001000)

	)

6932 
	#RCC_AHB1ENR_BKPSRAMEN
 ((
uöt32_t
)0x00040000)

	)

6933 
	#RCC_AHB1ENR_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

6934 
	#RCC_AHB1ENR_DMA1EN
 ((
uöt32_t
)0x00200000)

	)

6935 
	#RCC_AHB1ENR_DMA2EN
 ((
uöt32_t
)0x00400000)

	)

6936 
	#RCC_AHB1ENR_DMA2DEN
 ((
uöt32_t
)0x00800000)

	)

6937 
	#RCC_AHB1ENR_ETHMACEN
 ((
uöt32_t
)0x02000000)

	)

6938 
	#RCC_AHB1ENR_ETHMACTXEN
 ((
uöt32_t
)0x04000000)

	)

6939 
	#RCC_AHB1ENR_ETHMACRXEN
 ((
uöt32_t
)0x08000000)

	)

6940 
	#RCC_AHB1ENR_ETHMACPTPEN
 ((
uöt32_t
)0x10000000)

	)

6941 
	#RCC_AHB1ENR_OTGHSEN
 ((
uöt32_t
)0x20000000)

	)

6942 
	#RCC_AHB1ENR_OTGHSULPIEN
 ((
uöt32_t
)0x40000000)

	)

6945 
	#RCC_AHB2ENR_DCMIEN
 ((
uöt32_t
)0x00000001)

	)

6946 
	#RCC_AHB2ENR_CRYPEN
 ((
uöt32_t
)0x00000010)

	)

6947 
	#RCC_AHB2ENR_HASHEN
 ((
uöt32_t
)0x00000020)

	)

6948 
	#RCC_AHB2ENR_RNGEN
 ((
uöt32_t
)0x00000040)

	)

6949 
	#RCC_AHB2ENR_OTGFSEN
 ((
uöt32_t
)0x00000080)

	)

6953 #i‡
deföed
(
STM32F40_41xxx
)

6954 
	#RCC_AHB3ENR_FSMCEN
 ((
uöt32_t
)0x00000001)

	)

6957 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

6958 
	#RCC_AHB3ENR_FMCEN
 ((
uöt32_t
)0x00000001)

	)

6962 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001)

	)

6963 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002)

	)

6964 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004)

	)

6965 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008)

	)

6966 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010)

	)

6967 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020)

	)

6968 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040)

	)

6969 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080)

	)

6970 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100)

	)

6971 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

6972 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000)

	)

6973 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000)

	)

6974 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000)

	)

6975 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000)

	)

6976 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000)

	)

6977 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000)

	)

6978 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000)

	)

6979 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000)

	)

6980 
	#RCC_APB1ENR_I2C3EN
 ((
uöt32_t
)0x00800000)

	)

6981 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000)

	)

6982 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000)

	)

6983 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000)

	)

6984 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000)

	)

6985 
	#RCC_APB1ENR_UART7EN
 ((
uöt32_t
)0x40000000)

	)

6986 
	#RCC_APB1ENR_UART8EN
 ((
uöt32_t
)0x80000000)

	)

6989 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000001)

	)

6990 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00000002)

	)

6991 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00000010)

	)

6992 
	#RCC_APB2ENR_USART6EN
 ((
uöt32_t
)0x00000020)

	)

6993 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000100)

	)

6994 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000200)

	)

6995 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00000400)

	)

6996 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800)

	)

6997 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000)

	)

6998 
	#RCC_APB2ENR_SPI4EN
 ((
uöt32_t
)0x00002000)

	)

6999 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00004000)

	)

7000 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00010000)

	)

7001 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00020000)

	)

7002 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00040000)

	)

7003 
	#RCC_APB2ENR_SPI5EN
 ((
uöt32_t
)0x00100000)

	)

7004 
	#RCC_APB2ENR_SPI6EN
 ((
uöt32_t
)0x00200000)

	)

7005 
	#RCC_APB2ENR_SAI1EN
 ((
uöt32_t
)0x00400000)

	)

7006 
	#RCC_APB2ENR_LTDCEN
 ((
uöt32_t
)0x04000000)

	)

7009 
	#RCC_AHB1LPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001)

	)

7010 
	#RCC_AHB1LPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002)

	)

7011 
	#RCC_AHB1LPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004)

	)

7012 
	#RCC_AHB1LPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008)

	)

7013 
	#RCC_AHB1LPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010)

	)

7014 
	#RCC_AHB1LPENR_GPIOFLPEN
 ((
uöt32_t
)0x00000020)

	)

7015 
	#RCC_AHB1LPENR_GPIOGLPEN
 ((
uöt32_t
)0x00000040)

	)

7016 
	#RCC_AHB1LPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000080)

	)

7017 
	#RCC_AHB1LPENR_GPIOILPEN
 ((
uöt32_t
)0x00000100)

	)

7018 
	#RCC_AHB1LPENR_GPIOJLPEN
 ((
uöt32_t
)0x00000200)

	)

7019 
	#RCC_AHB1LPENR_GPIOKLPEN
 ((
uöt32_t
)0x00000400)

	)

7020 
	#RCC_AHB1LPENR_CRCLPEN
 ((
uöt32_t
)0x00001000)

	)

7021 
	#RCC_AHB1LPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000)

	)

7022 
	#RCC_AHB1LPENR_SRAM1LPEN
 ((
uöt32_t
)0x00010000)

	)

7023 
	#RCC_AHB1LPENR_SRAM2LPEN
 ((
uöt32_t
)0x00020000)

	)

7024 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 ((
uöt32_t
)0x00040000)

	)

7025 
	#RCC_AHB1LPENR_SRAM3LPEN
 ((
uöt32_t
)0x00080000)

	)

7026 
	#RCC_AHB1LPENR_DMA1LPEN
 ((
uöt32_t
)0x00200000)

	)

7027 
	#RCC_AHB1LPENR_DMA2LPEN
 ((
uöt32_t
)0x00400000)

	)

7028 
	#RCC_AHB1LPENR_DMA2DLPEN
 ((
uöt32_t
)0x00800000)

	)

7029 
	#RCC_AHB1LPENR_ETHMACLPEN
 ((
uöt32_t
)0x02000000)

	)

7030 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 ((
uöt32_t
)0x04000000)

	)

7031 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 ((
uöt32_t
)0x08000000)

	)

7032 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 ((
uöt32_t
)0x10000000)

	)

7033 
	#RCC_AHB1LPENR_OTGHSLPEN
 ((
uöt32_t
)0x20000000)

	)

7034 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 ((
uöt32_t
)0x40000000)

	)

7037 
	#RCC_AHB2LPENR_DCMILPEN
 ((
uöt32_t
)0x00000001)

	)

7038 
	#RCC_AHB2LPENR_CRYPLPEN
 ((
uöt32_t
)0x00000010)

	)

7039 
	#RCC_AHB2LPENR_HASHLPEN
 ((
uöt32_t
)0x00000020)

	)

7040 
	#RCC_AHB2LPENR_RNGLPEN
 ((
uöt32_t
)0x00000040)

	)

7041 
	#RCC_AHB2LPENR_OTGFSLPEN
 ((
uöt32_t
)0x00000080)

	)

7044 #i‡
deföed
(
STM32F40_41xxx
)

7045 
	#RCC_AHB3LPENR_FSMCLPEN
 ((
uöt32_t
)0x00000001)

	)

7048 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

7049 
	#RCC_AHB3LPENR_FMCLPEN
 ((
uöt32_t
)0x00000001)

	)

7053 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001)

	)

7054 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002)

	)

7055 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004)

	)

7056 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008)

	)

7057 
	#RCC_APB1LPENR_TIM6LPEN
 ((
uöt32_t
)0x00000010)

	)

7058 
	#RCC_APB1LPENR_TIM7LPEN
 ((
uöt32_t
)0x00000020)

	)

7059 
	#RCC_APB1LPENR_TIM12LPEN
 ((
uöt32_t
)0x00000040)

	)

7060 
	#RCC_APB1LPENR_TIM13LPEN
 ((
uöt32_t
)0x00000080)

	)

7061 
	#RCC_APB1LPENR_TIM14LPEN
 ((
uöt32_t
)0x00000100)

	)

7062 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800)

	)

7063 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000)

	)

7064 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000)

	)

7065 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000)

	)

7066 
	#RCC_APB1LPENR_USART3LPEN
 ((
uöt32_t
)0x00040000)

	)

7067 
	#RCC_APB1LPENR_UART4LPEN
 ((
uöt32_t
)0x00080000)

	)

7068 
	#RCC_APB1LPENR_UART5LPEN
 ((
uöt32_t
)0x00100000)

	)

7069 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000)

	)

7070 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000)

	)

7071 
	#RCC_APB1LPENR_I2C3LPEN
 ((
uöt32_t
)0x00800000)

	)

7072 
	#RCC_APB1LPENR_CAN1LPEN
 ((
uöt32_t
)0x02000000)

	)

7073 
	#RCC_APB1LPENR_CAN2LPEN
 ((
uöt32_t
)0x04000000)

	)

7074 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000)

	)

7075 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000)

	)

7076 
	#RCC_APB1LPENR_UART7LPEN
 ((
uöt32_t
)0x40000000)

	)

7077 
	#RCC_APB1LPENR_UART8LPEN
 ((
uöt32_t
)0x80000000)

	)

7080 
	#RCC_APB2LPENR_TIM1LPEN
 ((
uöt32_t
)0x00000001)

	)

7081 
	#RCC_APB2LPENR_TIM8LPEN
 ((
uöt32_t
)0x00000002)

	)

7082 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00000010)

	)

7083 
	#RCC_APB2LPENR_USART6LPEN
 ((
uöt32_t
)0x00000020)

	)

7084 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000100)

	)

7085 
	#RCC_APB2LPENR_ADC2PEN
 ((
uöt32_t
)0x00000200)

	)

7086 
	#RCC_APB2LPENR_ADC3LPEN
 ((
uöt32_t
)0x00000400)

	)

7087 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800)

	)

7088 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000)

	)

7089 
	#RCC_APB2LPENR_SPI4LPEN
 ((
uöt32_t
)0x00002000)

	)

7090 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00004000)

	)

7091 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00010000)

	)

7092 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00020000)

	)

7093 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00040000)

	)

7094 
	#RCC_APB2LPENR_SPI5LPEN
 ((
uöt32_t
)0x00100000)

	)

7095 
	#RCC_APB2LPENR_SPI6LPEN
 ((
uöt32_t
)0x00200000)

	)

7096 
	#RCC_APB2LPENR_SAI1LPEN
 ((
uöt32_t
)0x00400000)

	)

7097 
	#RCC_APB2LPENR_LTDCLPEN
 ((
uöt32_t
)0x04000000)

	)

7100 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001)

	)

7101 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002)

	)

7102 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004)

	)

7103 
	#RCC_BDCR_LSEMOD
 ((
uöt32_t
)0x00000008)

	)

7105 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300)

	)

7106 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100)

	)

7107 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200)

	)

7109 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000)

	)

7110 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000)

	)

7113 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001)

	)

7114 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002)

	)

7115 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000)

	)

7116 
	#RCC_CSR_BORRSTF
 ((
uöt32_t
)0x02000000)

	)

7117 
	#RCC_CSR_PADRSTF
 ((
uöt32_t
)0x04000000)

	)

7118 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000)

	)

7119 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000)

	)

7120 
	#RCC_CSR_WDGRSTF
 ((
uöt32_t
)0x20000000)

	)

7121 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000)

	)

7122 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000)

	)

7125 
	#RCC_SSCGR_MODPER
 ((
uöt32_t
)0x00001FFF)

	)

7126 
	#RCC_SSCGR_INCSTEP
 ((
uöt32_t
)0x0FFFE000)

	)

7127 
	#RCC_SSCGR_SPREADSEL
 ((
uöt32_t
)0x40000000)

	)

7128 
	#RCC_SSCGR_SSCGEN
 ((
uöt32_t
)0x80000000)

	)

7131 
	#RCC_PLLI2SCFGR_PLLI2SM
 ((
uöt32_t
)0x0000003F)

	)

7132 
	#RCC_PLLI2SCFGR_PLLI2SM_0
 ((
uöt32_t
)0x00000001)

	)

7133 
	#RCC_PLLI2SCFGR_PLLI2SM_1
 ((
uöt32_t
)0x00000002)

	)

7134 
	#RCC_PLLI2SCFGR_PLLI2SM_2
 ((
uöt32_t
)0x00000004)

	)

7135 
	#RCC_PLLI2SCFGR_PLLI2SM_3
 ((
uöt32_t
)0x00000008)

	)

7136 
	#RCC_PLLI2SCFGR_PLLI2SM_4
 ((
uöt32_t
)0x00000010)

	)

7137 
	#RCC_PLLI2SCFGR_PLLI2SM_5
 ((
uöt32_t
)0x00000020)

	)

7140 
	#RCC_PLLI2SCFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

7141 
	#RCC_PLLI2SCFGR_PLLI2SQ
 ((
uöt32_t
)0x0F000000)

	)

7142 
	#RCC_PLLI2SCFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

7145 
	#RCC_PLLSAICFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

7146 
	#RCC_PLLSAICFGR_PLLI2SQ
 ((
uöt32_t
)0x0F000000)

	)

7147 
	#RCC_PLLSAICFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

7150 
	#RCC_DCKCFGR_PLLI2SDIVQ
 ((
uöt32_t
)0x0000001F)

	)

7151 
	#RCC_DCKCFGR_PLLSAIDIVQ
 ((
uöt32_t
)0x00001F00)

	)

7152 
	#RCC_DCKCFGR_PLLSAIDIVR
 ((
uöt32_t
)0x00030000)

	)

7153 
	#RCC_DCKCFGR_SAI1ASRC
 ((
uöt32_t
)0x00300000)

	)

7154 
	#RCC_DCKCFGR_SAI1BSRC
 ((
uöt32_t
)0x00C00000)

	)

7155 
	#RCC_DCKCFGR_TIMPRE
 ((
uöt32_t
)0x01000000)

	)

7164 
	#RNG_CR_RNGEN
 ((
uöt32_t
)0x00000004)

	)

7165 
	#RNG_CR_IE
 ((
uöt32_t
)0x00000008)

	)

7168 
	#RNG_SR_DRDY
 ((
uöt32_t
)0x00000001)

	)

7169 
	#RNG_SR_CECS
 ((
uöt32_t
)0x00000002)

	)

7170 
	#RNG_SR_SECS
 ((
uöt32_t
)0x00000004)

	)

7171 
	#RNG_SR_CEIS
 ((
uöt32_t
)0x00000020)

	)

7172 
	#RNG_SR_SEIS
 ((
uöt32_t
)0x00000040)

	)

7180 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

7181 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

7182 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7183 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7184 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

7185 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7186 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7187 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7188 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7189 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

7190 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7191 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7192 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7193 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7194 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7195 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7196 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7197 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7198 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

7199 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7200 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7201 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7202 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

7203 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7204 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7205 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7206 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7209 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

7210 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

7211 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

7212 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

7213 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

7214 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

7215 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

7216 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

7217 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

7218 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

7219 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

7220 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

7221 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

7222 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

7223 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

7224 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

7225 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

7226 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

7227 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

7228 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

7229 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

7230 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

7231 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

7232 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

7233 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

7234 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

7235 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

7236 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

7239 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

7240 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

7241 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

7242 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

7243 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

7244 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

7245 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

7246 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

7247 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

7248 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

7249 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

7250 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

7251 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

7252 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

7253 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

7254 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

7255 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

7256 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

7257 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

7258 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

7259 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

7260 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

7261 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

7262 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

7263 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

7264 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

7267 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

7268 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

7269 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

7270 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

7271 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

7272 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

7273 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

7274 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

7275 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

7276 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

7277 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

7278 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

7279 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

7280 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

7281 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

7284 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

7285 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00001FFF)

	)

7288 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

7291 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

7292 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

7295 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

7296 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

7297 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

7298 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

7299 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

7300 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

7301 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

7302 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

7303 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

7304 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

7305 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

7306 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

7307 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

7308 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7309 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7310 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

7311 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7312 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7313 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7314 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7315 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

7316 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

7317 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7318 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7319 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7320 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7321 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7322 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7323 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7324 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7325 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

7326 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

7327 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7328 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7329 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7330 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

7331 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7332 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7333 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7334 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7337 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

7338 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

7339 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

7340 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

7341 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

7342 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

7343 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

7344 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

7345 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

7346 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

7347 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

7348 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

7349 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

7350 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7351 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7352 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

7353 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7354 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7355 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7356 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7357 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

7358 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

7359 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7360 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7361 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7362 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7363 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7364 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7365 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7366 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7367 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

7368 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

7369 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7370 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7371 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7372 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

7373 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7374 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7375 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7376 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7379 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

7382 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

7385 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

7386 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

7389 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

7390 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

7391 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7392 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7393 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

7394 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7395 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7396 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7397 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7398 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

7399 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7400 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7401 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7402 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7403 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7404 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7405 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7406 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7407 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

7408 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7409 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7410 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7411 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

7412 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7413 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7414 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7415 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7418 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

7419 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

7420 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

7421 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

7422 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

7423 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

7424 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

7425 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

7426 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

7427 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

7428 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

7429 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

7430 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

7431 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

7432 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

7433 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

7434 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

7435 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

7438 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

7441 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

7442 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

7443 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

7444 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

7445 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

7446 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

7447 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

7448 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

7449 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

7450 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

7451 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

7452 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

7453 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

7456 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

7457 
	#RTC_TAFCR_TSINSEL
 ((
uöt32_t
)0x00020000)

	)

7458 
	#RTC_TAFCR_TAMPINSEL
 ((
uöt32_t
)0x00010000)

	)

7459 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

7460 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

7461 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

7462 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

7463 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

7464 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

7465 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

7466 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

7467 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

7468 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

7469 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

7470 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

7471 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

7472 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

7473 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

7476 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

7477 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

7478 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

7479 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

7480 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

7481 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

7484 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

7485 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

7486 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

7487 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

7488 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

7489 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

7492 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7495 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7498 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7501 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7504 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7507 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7510 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7513 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7516 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7519 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7522 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7525 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7528 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7531 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7534 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7537 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7540 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7543 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7546 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7549 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7557 
	#SAI_GCR_SYNCIN
 ((
uöt32_t
)0x00000003Ë

	)

7558 
	#SAI_GCR_SYNCIN_0
 ((
uöt32_t
)0x00000001Ë

	)

7559 
	#SAI_GCR_SYNCIN_1
 ((
uöt32_t
)0x00000002Ë

	)

7561 
	#SAI_GCR_SYNCOUT
 ((
uöt32_t
)0x00000030Ë

	)

7562 
	#SAI_GCR_SYNCOUT_0
 ((
uöt32_t
)0x00000010Ë

	)

7563 
	#SAI_GCR_SYNCOUT_1
 ((
uöt32_t
)0x00000020Ë

	)

7566 
	#SAI_xCR1_MODE
 ((
uöt32_t
)0x00000003Ë

	)

7567 
	#SAI_xCR1_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

7568 
	#SAI_xCR1_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

7570 
	#SAI_xCR1_PRTCFG
 ((
uöt32_t
)0x0000000CË

	)

7571 
	#SAI_xCR1_PRTCFG_0
 ((
uöt32_t
)0x00000004Ë

	)

7572 
	#SAI_xCR1_PRTCFG_1
 ((
uöt32_t
)0x00000008Ë

	)

7574 
	#SAI_xCR1_DS
 ((
uöt32_t
)0x000000E0Ë

	)

7575 
	#SAI_xCR1_DS_0
 ((
uöt32_t
)0x00000020Ë

	)

7576 
	#SAI_xCR1_DS_1
 ((
uöt32_t
)0x00000040Ë

	)

7577 
	#SAI_xCR1_DS_2
 ((
uöt32_t
)0x00000080Ë

	)

7579 
	#SAI_xCR1_LSBFIRST
 ((
uöt32_t
)0x00000100Ë

	)

7580 
	#SAI_xCR1_CKSTR
 ((
uöt32_t
)0x00000200Ë

	)

7582 
	#SAI_xCR1_SYNCEN
 ((
uöt32_t
)0x00000C00Ë

	)

7583 
	#SAI_xCR1_SYNCEN_0
 ((
uöt32_t
)0x00000400Ë

	)

7584 
	#SAI_xCR1_SYNCEN_1
 ((
uöt32_t
)0x00000800Ë

	)

7586 
	#SAI_xCR1_MONO
 ((
uöt32_t
)0x00001000Ë

	)

7587 
	#SAI_xCR1_OUTDRIV
 ((
uöt32_t
)0x00002000Ë

	)

7588 
	#SAI_xCR1_SAIEN
 ((
uöt32_t
)0x00010000Ë

	)

7589 
	#SAI_xCR1_DMAEN
 ((
uöt32_t
)0x00020000Ë

	)

7590 
	#SAI_xCR1_NODIV
 ((
uöt32_t
)0x00080000Ë

	)

7592 
	#SAI_xCR1_MCKDIV
 ((
uöt32_t
)0x00780000Ë

	)

7593 
	#SAI_xCR1_MCKDIV_0
 ((
uöt32_t
)0x00080000Ë

	)

7594 
	#SAI_xCR1_MCKDIV_1
 ((
uöt32_t
)0x00100000Ë

	)

7595 
	#SAI_xCR1_MCKDIV_2
 ((
uöt32_t
)0x00200000Ë

	)

7596 
	#SAI_xCR1_MCKDIV_3
 ((
uöt32_t
)0x00400000Ë

	)

7599 
	#SAI_xCR2_FTH
 ((
uöt32_t
)0x00000003Ë

	)

7600 
	#SAI_xCR2_FTH_0
 ((
uöt32_t
)0x00000001Ë

	)

7601 
	#SAI_xCR2_FTH_1
 ((
uöt32_t
)0x00000002Ë

	)

7603 
	#SAI_xCR2_FFLUSH
 ((
uöt32_t
)0x00000008Ë

	)

7604 
	#SAI_xCR2_TRIS
 ((
uöt32_t
)0x00000010Ë

	)

7605 
	#SAI_xCR2_MUTE
 ((
uöt32_t
)0x00000020Ë

	)

7606 
	#SAI_xCR2_MUTEVAL
 ((
uöt32_t
)0x00000040Ë

	)

7608 
	#SAI_xCR2_MUTECNT
 ((
uöt32_t
)0x00001F80Ë

	)

7609 
	#SAI_xCR2_MUTECNT_0
 ((
uöt32_t
)0x00000080Ë

	)

7610 
	#SAI_xCR2_MUTECNT_1
 ((
uöt32_t
)0x00000100Ë

	)

7611 
	#SAI_xCR2_MUTECNT_2
 ((
uöt32_t
)0x00000200Ë

	)

7612 
	#SAI_xCR2_MUTECNT_3
 ((
uöt32_t
)0x00000400Ë

	)

7613 
	#SAI_xCR2_MUTECNT_4
 ((
uöt32_t
)0x00000800Ë

	)

7614 
	#SAI_xCR2_MUTECNT_5
 ((
uöt32_t
)0x00001000Ë

	)

7616 
	#SAI_xCR2_CPL
 ((
uöt32_t
)0x00080000Ë

	)

7618 
	#SAI_xCR2_COMP
 ((
uöt32_t
)0x0000C000Ë

	)

7619 
	#SAI_xCR2_COMP_0
 ((
uöt32_t
)0x00004000Ë

	)

7620 
	#SAI_xCR2_COMP_1
 ((
uöt32_t
)0x00008000Ë

	)

7623 
	#SAI_xFRCR_FRL
 ((
uöt32_t
)0x000000FFË

	)

7624 
	#SAI_xFRCR_FRL_0
 ((
uöt32_t
)0x00000001Ë

	)

7625 
	#SAI_xFRCR_FRL_1
 ((
uöt32_t
)0x00000002Ë

	)

7626 
	#SAI_xFRCR_FRL_2
 ((
uöt32_t
)0x00000004Ë

	)

7627 
	#SAI_xFRCR_FRL_3
 ((
uöt32_t
)0x00000008Ë

	)

7628 
	#SAI_xFRCR_FRL_4
 ((
uöt32_t
)0x00000010Ë

	)

7629 
	#SAI_xFRCR_FRL_5
 ((
uöt32_t
)0x00000020Ë

	)

7630 
	#SAI_xFRCR_FRL_6
 ((
uöt32_t
)0x00000040Ë

	)

7631 
	#SAI_xFRCR_FRL_7
 ((
uöt32_t
)0x00000080Ë

	)

7633 
	#SAI_xFRCR_FSALL
 ((
uöt32_t
)0x00007F00Ë

	)

7634 
	#SAI_xFRCR_FSALL_0
 ((
uöt32_t
)0x00000100Ë

	)

7635 
	#SAI_xFRCR_FSALL_1
 ((
uöt32_t
)0x00000200Ë

	)

7636 
	#SAI_xFRCR_FSALL_2
 ((
uöt32_t
)0x00000400Ë

	)

7637 
	#SAI_xFRCR_FSALL_3
 ((
uöt32_t
)0x00000800Ë

	)

7638 
	#SAI_xFRCR_FSALL_4
 ((
uöt32_t
)0x00001000Ë

	)

7639 
	#SAI_xFRCR_FSALL_5
 ((
uöt32_t
)0x00002000Ë

	)

7640 
	#SAI_xFRCR_FSALL_6
 ((
uöt32_t
)0x00004000Ë

	)

7642 
	#SAI_xFRCR_FSDEF
 ((
uöt32_t
)0x00010000Ë

	)

7643 
	#SAI_xFRCR_FSPO
 ((
uöt32_t
)0x00020000Ë

	)

7644 
	#SAI_xFRCR_FSOFF
 ((
uöt32_t
)0x00040000Ë

	)

7647 
	#SAI_xSLOTR_FBOFF
 ((
uöt32_t
)0x0000001FË

	)

7648 
	#SAI_xSLOTR_FBOFF_0
 ((
uöt32_t
)0x00000001Ë

	)

7649 
	#SAI_xSLOTR_FBOFF_1
 ((
uöt32_t
)0x00000002Ë

	)

7650 
	#SAI_xSLOTR_FBOFF_2
 ((
uöt32_t
)0x00000004Ë

	)

7651 
	#SAI_xSLOTR_FBOFF_3
 ((
uöt32_t
)0x00000008Ë

	)

7652 
	#SAI_xSLOTR_FBOFF_4
 ((
uöt32_t
)0x00000010Ë

	)

7654 
	#SAI_xSLOTR_SLOTSZ
 ((
uöt32_t
)0x000000C0Ë

	)

7655 
	#SAI_xSLOTR_SLOTSZ_0
 ((
uöt32_t
)0x00000040Ë

	)

7656 
	#SAI_xSLOTR_SLOTSZ_1
 ((
uöt32_t
)0x00000080Ë

	)

7658 
	#SAI_xSLOTR_NBSLOT
 ((
uöt32_t
)0x00000F00Ë

	)

7659 
	#SAI_xSLOTR_NBSLOT_0
 ((
uöt32_t
)0x00000100Ë

	)

7660 
	#SAI_xSLOTR_NBSLOT_1
 ((
uöt32_t
)0x00000200Ë

	)

7661 
	#SAI_xSLOTR_NBSLOT_2
 ((
uöt32_t
)0x00000400Ë

	)

7662 
	#SAI_xSLOTR_NBSLOT_3
 ((
uöt32_t
)0x00000800Ë

	)

7664 
	#SAI_xSLOTR_SLOTEN
 ((
uöt32_t
)0xFFFF0000Ë

	)

7667 
	#SAI_xIMR_OVRUDRIE
 ((
uöt32_t
)0x00000001Ë

	)

7668 
	#SAI_xIMR_MUTEDETIE
 ((
uöt32_t
)0x00000002Ë

	)

7669 
	#SAI_xIMR_WCKCFGIE
 ((
uöt32_t
)0x00000004Ë

	)

7670 
	#SAI_xIMR_FREQIE
 ((
uöt32_t
)0x00000008Ë

	)

7671 
	#SAI_xIMR_CNRDYIE
 ((
uöt32_t
)0x00000010Ë

	)

7672 
	#SAI_xIMR_AFSDETIE
 ((
uöt32_t
)0x00000020Ë

	)

7673 
	#SAI_xIMR_LFSDETIE
 ((
uöt32_t
)0x00000040Ë

	)

7676 
	#SAI_xSR_OVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

7677 
	#SAI_xSR_MUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

7678 
	#SAI_xSR_WCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

7679 
	#SAI_xSR_FREQ
 ((
uöt32_t
)0x00000008Ë

	)

7680 
	#SAI_xSR_CNRDY
 ((
uöt32_t
)0x00000010Ë

	)

7681 
	#SAI_xSR_AFSDET
 ((
uöt32_t
)0x00000020Ë

	)

7682 
	#SAI_xSR_LFSDET
 ((
uöt32_t
)0x00000040Ë

	)

7684 
	#SAI_xSR_FLVL
 ((
uöt32_t
)0x00070000Ë

	)

7685 
	#SAI_xSR_FLVL_0
 ((
uöt32_t
)0x00010000Ë

	)

7686 
	#SAI_xSR_FLVL_1
 ((
uöt32_t
)0x00020000Ë

	)

7687 
	#SAI_xSR_FLVL_2
 ((
uöt32_t
)0x00030000Ë

	)

7690 
	#SAI_xCLRFR_COVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

7691 
	#SAI_xCLRFR_CMUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

7692 
	#SAI_xCLRFR_CWCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

7693 
	#SAI_xCLRFR_CFREQ
 ((
uöt32_t
)0x00000008Ë

	)

7694 
	#SAI_xCLRFR_CCNRDY
 ((
uöt32_t
)0x00000010Ë

	)

7695 
	#SAI_xCLRFR_CAFSDET
 ((
uöt32_t
)0x00000020Ë

	)

7696 
	#SAI_xCLRFR_CLFSDET
 ((
uöt32_t
)0x00000040Ë

	)

7699 
	#SAI_xDR_DATA
 ((
uöt32_t
)0xFFFFFFFF)

	)

7707 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

7708 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

7709 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

7712 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

7713 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

7714 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

7715 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

7717 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

7718 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

7719 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

7721 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

7722 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

7725 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

7728 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

7730 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

7731 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

7732 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

7734 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

7735 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

7736 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

7737 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

7738 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

7739 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

7740 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

7743 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

7746 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

7749 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

7752 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

7755 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

7758 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

7761 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

7764 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

7767 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

7768 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

7769 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

7770 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

7772 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

7773 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

7774 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

7775 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

7776 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

7778 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

7779 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

7780 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

7781 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

7784 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

7787 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

7788 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

7789 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

7790 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

7791 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

7792 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

7793 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

7794 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

7795 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

7796 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

7797 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

7798 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

7799 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

7800 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

7801 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

7802 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

7803 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

7804 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

7805 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

7806 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

7807 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

7808 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

7809 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

7810 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

7813 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

7814 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

7815 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

7816 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

7817 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

7818 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

7819 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

7820 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

7821 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

7822 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

7823 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

7824 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

7825 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

7828 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

7829 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

7830 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

7831 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

7832 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

7833 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

7834 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

7835 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

7836 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

7837 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

7838 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

7839 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

7840 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

7841 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

7842 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

7843 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

7844 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

7845 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

7846 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

7847 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

7848 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

7849 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

7850 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

7851 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

7854 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

7857 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

7865 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

7866 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

7867 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

7869 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

7870 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

7871 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7872 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7874 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7875 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7876 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7877 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7878 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7879 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7880 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7881 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7882 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7883 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7886 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7887 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7888 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7889 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7890 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7891 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7894 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7895 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7896 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7897 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7898 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7899 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7900 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7901 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7904 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7907 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7910 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7913 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7916 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7918 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7919 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7920 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7922 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7924 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7925 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7926 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7928 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7930 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7931 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7932 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7934 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7935 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7938 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7939 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7940 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7948 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000007Ë

	)

7949 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

7950 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

7951 
	#SYSCFG_MEMRMP_MEM_MODE_2
 ((
uöt32_t
)0x00000004Ë

	)

7953 
	#SYSCFG_MEMRMP_FB_MODE
 ((
uöt32_t
)0x00000100Ë

	)

7955 
	#SYSCFG_MEMRMP_SWP_FMC
 ((
uöt32_t
)0x00000C00Ë

	)

7956 
	#SYSCFG_MEMRMP_SWP_FMC_0
 ((
uöt32_t
)0x00000400Ë

	)

7957 
	#SYSCFG_MEMRMP_SWP_FMC_1
 ((
uöt32_t
)0x00000800Ë

	)

7961 
	#SYSCFG_PMC_ADCxDC2
 ((
uöt32_t
)0x00070000Ë

	)

7962 
	#SYSCFG_PMC_ADC1DC2
 ((
uöt32_t
)0x00010000Ë

	)

7963 
	#SYSCFG_PMC_ADC2DC2
 ((
uöt32_t
)0x00020000Ë

	)

7964 
	#SYSCFG_PMC_ADC3DC2
 ((
uöt32_t
)0x00040000Ë

	)

7966 
	#SYSCFG_PMC_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

7968 
	#SYSCFG_PMC_MII_RMII
 
SYSCFG_PMC_MII_RMII_SEL


	)

7971 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

7972 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

7973 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

7974 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

7978 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

7979 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

7980 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

7981 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

7982 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

7983 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

7984 
	#SYSCFG_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

7985 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt16_t
)0x0007Ë

	)

7986 
	#SYSCFG_EXTICR1_EXTI0_PI
 ((
uöt16_t
)0x0008Ë

	)

7987 
	#SYSCFG_EXTICR1_EXTI0_PJ
 ((
uöt16_t
)0x0009Ë

	)

7988 
	#SYSCFG_EXTICR1_EXTI0_PK
 ((
uöt16_t
)0x000AË

	)

7993 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

7994 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

7995 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

7996 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

7997 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

7998 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

7999 
	#SYSCFG_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

8000 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt16_t
)0x0070Ë

	)

8001 
	#SYSCFG_EXTICR1_EXTI1_PI
 ((
uöt16_t
)0x0080Ë

	)

8002 
	#SYSCFG_EXTICR1_EXTI1_PJ
 ((
uöt16_t
)0x0090Ë

	)

8003 
	#SYSCFG_EXTICR1_EXTI1_PK
 ((
uöt16_t
)0x00A0Ë

	)

8008 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

8009 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

8010 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

8011 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

8012 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

8013 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

8014 
	#SYSCFG_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

8015 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt16_t
)0x0700Ë

	)

8016 
	#SYSCFG_EXTICR1_EXTI2_PI
 ((
uöt16_t
)0x0800Ë

	)

8017 
	#SYSCFG_EXTICR1_EXTI2_PJ
 ((
uöt16_t
)0x0900Ë

	)

8018 
	#SYSCFG_EXTICR1_EXTI2_PK
 ((
uöt16_t
)0x0A00Ë

	)

8023 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

8024 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

8025 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

8026 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

8027 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

8028 
	#SYSCFG_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

8029 
	#SYSCFG_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

8030 
	#SYSCFG_EXTICR1_EXTI3_PH
 ((
uöt16_t
)0x7000Ë

	)

8031 
	#SYSCFG_EXTICR1_EXTI3_PI
 ((
uöt16_t
)0x8000Ë

	)

8032 
	#SYSCFG_EXTICR1_EXTI3_PJ
 ((
uöt16_t
)0x9000Ë

	)

8033 
	#SYSCFG_EXTICR1_EXTI3_PK
 ((
uöt16_t
)0xA000Ë

	)

8036 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

8037 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

8038 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

8039 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

8043 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

8044 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

8045 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

8046 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

8047 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

8048 
	#SYSCFG_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

8049 
	#SYSCFG_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

8050 
	#SYSCFG_EXTICR2_EXTI4_PH
 ((
uöt16_t
)0x0007Ë

	)

8051 
	#SYSCFG_EXTICR2_EXTI4_PI
 ((
uöt16_t
)0x0008Ë

	)

8052 
	#SYSCFG_EXTICR2_EXTI4_PJ
 ((
uöt16_t
)0x0009Ë

	)

8053 
	#SYSCFG_EXTICR2_EXTI4_PK
 ((
uöt16_t
)0x000AË

	)

8058 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

8059 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

8060 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

8061 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

8062 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

8063 
	#SYSCFG_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

8064 
	#SYSCFG_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

8065 
	#SYSCFG_EXTICR2_EXTI5_PH
 ((
uöt16_t
)0x0070Ë

	)

8066 
	#SYSCFG_EXTICR2_EXTI5_PI
 ((
uöt16_t
)0x0080Ë

	)

8067 
	#SYSCFG_EXTICR2_EXTI5_PJ
 ((
uöt16_t
)0x0090Ë

	)

8068 
	#SYSCFG_EXTICR2_EXTI5_PK
 ((
uöt16_t
)0x00A0Ë

	)

8073 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

8074 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

8075 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

8076 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

8077 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

8078 
	#SYSCFG_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

8079 
	#SYSCFG_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

8080 
	#SYSCFG_EXTICR2_EXTI6_PH
 ((
uöt16_t
)0x0700Ë

	)

8081 
	#SYSCFG_EXTICR2_EXTI6_PI
 ((
uöt16_t
)0x0800Ë

	)

8082 
	#SYSCFG_EXTICR2_EXTI6_PJ
 ((
uöt16_t
)0x0900Ë

	)

8083 
	#SYSCFG_EXTICR2_EXTI6_PK
 ((
uöt16_t
)0x0A00Ë

	)

8088 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

8089 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

8090 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

8091 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

8092 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

8093 
	#SYSCFG_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

8094 
	#SYSCFG_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

8095 
	#SYSCFG_EXTICR2_EXTI7_PH
 ((
uöt16_t
)0x7000Ë

	)

8096 
	#SYSCFG_EXTICR2_EXTI7_PI
 ((
uöt16_t
)0x8000Ë

	)

8097 
	#SYSCFG_EXTICR2_EXTI7_PJ
 ((
uöt16_t
)0x9000Ë

	)

8098 
	#SYSCFG_EXTICR2_EXTI7_PK
 ((
uöt16_t
)0xA000Ë

	)

8101 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

8102 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

8103 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

8104 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

8109 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

8110 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

8111 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

8112 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

8113 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

8114 
	#SYSCFG_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

8115 
	#SYSCFG_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

8116 
	#SYSCFG_EXTICR3_EXTI8_PH
 ((
uöt16_t
)0x0007Ë

	)

8117 
	#SYSCFG_EXTICR3_EXTI8_PI
 ((
uöt16_t
)0x0008Ë

	)

8118 
	#SYSCFG_EXTICR3_EXTI8_PJ
 ((
uöt16_t
)0x0009Ë

	)

8123 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

8124 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

8125 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

8126 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

8127 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

8128 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

8129 
	#SYSCFG_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

8130 
	#SYSCFG_EXTICR3_EXTI9_PH
 ((
uöt16_t
)0x0070Ë

	)

8131 
	#SYSCFG_EXTICR3_EXTI9_PI
 ((
uöt16_t
)0x0080Ë

	)

8132 
	#SYSCFG_EXTICR3_EXTI9_PJ
 ((
uöt16_t
)0x0090Ë

	)

8137 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

8138 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

8139 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

8140 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

8141 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

8142 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

8143 
	#SYSCFG_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

8144 
	#SYSCFG_EXTICR3_EXTI10_PH
 ((
uöt16_t
)0x0700Ë

	)

8145 
	#SYSCFG_EXTICR3_EXTI10_PI
 ((
uöt16_t
)0x0800Ë

	)

8146 
	#SYSCFG_EXTICR3_EXTI10_PJ
 ((
uöt16_t
)0x0900Ë

	)

8151 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

8152 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

8153 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

8154 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

8155 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

8156 
	#SYSCFG_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

8157 
	#SYSCFG_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

8158 
	#SYSCFG_EXTICR3_EXTI11_PH
 ((
uöt16_t
)0x7000Ë

	)

8159 
	#SYSCFG_EXTICR3_EXTI11_PI
 ((
uöt16_t
)0x8000Ë

	)

8160 
	#SYSCFG_EXTICR3_EXTI11_PJ
 ((
uöt16_t
)0x9000Ë

	)

8163 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

8164 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

8165 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

8166 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

8170 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

8171 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

8172 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

8173 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

8174 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

8175 
	#SYSCFG_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

8176 
	#SYSCFG_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

8177 
	#SYSCFG_EXTICR4_EXTI12_PH
 ((
uöt16_t
)0x0007Ë

	)

8178 
	#SYSCFG_EXTICR4_EXTI12_PI
 ((
uöt16_t
)0x0008Ë

	)

8179 
	#SYSCFG_EXTICR4_EXTI12_PJ
 ((
uöt16_t
)0x0009Ë

	)

8184 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

8185 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

8186 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

8187 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

8188 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

8189 
	#SYSCFG_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

8190 
	#SYSCFG_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

8191 
	#SYSCFG_EXTICR4_EXTI13_PH
 ((
uöt16_t
)0x0070Ë

	)

8192 
	#SYSCFG_EXTICR4_EXTI13_PI
 ((
uöt16_t
)0x0008Ë

	)

8193 
	#SYSCFG_EXTICR4_EXTI13_PJ
 ((
uöt16_t
)0x0009Ë

	)

8198 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

8199 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

8200 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

8201 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

8202 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

8203 
	#SYSCFG_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

8204 
	#SYSCFG_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

8205 
	#SYSCFG_EXTICR4_EXTI14_PH
 ((
uöt16_t
)0x0700Ë

	)

8206 
	#SYSCFG_EXTICR4_EXTI14_PI
 ((
uöt16_t
)0x0800Ë

	)

8207 
	#SYSCFG_EXTICR4_EXTI14_PJ
 ((
uöt16_t
)0x0900Ë

	)

8212 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

8213 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

8214 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

8215 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

8216 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

8217 
	#SYSCFG_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

8218 
	#SYSCFG_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

8219 
	#SYSCFG_EXTICR4_EXTI15_PH
 ((
uöt16_t
)0x7000Ë

	)

8220 
	#SYSCFG_EXTICR4_EXTI15_PI
 ((
uöt16_t
)0x8000Ë

	)

8221 
	#SYSCFG_EXTICR4_EXTI15_PJ
 ((
uöt16_t
)0x9000Ë

	)

8224 
	#SYSCFG_CMPCR_CMP_PD
 ((
uöt32_t
)0x00000001Ë

	)

8225 
	#SYSCFG_CMPCR_READY
 ((
uöt32_t
)0x00000100Ë

	)

8233 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

8234 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

8235 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

8236 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

8237 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

8239 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

8240 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

8241 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

8243 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

8245 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

8246 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

8247 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

8250 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

8251 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

8252 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

8254 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

8255 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

8256 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

8257 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

8259 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

8260 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

8261 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

8262 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

8263 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

8264 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

8265 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

8266 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

8269 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

8270 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

8271 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

8272 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

8274 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

8275 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

8276 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

8277 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

8279 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

8281 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

8282 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

8283 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

8284 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

8285 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

8287 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

8288 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

8289 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

8291 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

8292 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

8295 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

8296 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

8297 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

8298 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

8299 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

8300 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

8301 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

8302 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

8303 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

8304 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

8305 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

8306 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

8307 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

8308 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

8309 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

8312 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

8313 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

8314 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

8315 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

8316 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

8317 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

8318 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

8319 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

8320 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

8321 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

8322 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

8323 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

8326 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

8327 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

8328 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

8329 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

8330 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

8331 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

8332 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

8333 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

8336 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

8337 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

8338 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

8340 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

8341 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

8343 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

8344 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

8345 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

8346 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

8348 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

8350 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

8351 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

8352 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

8354 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

8355 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

8357 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

8358 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

8359 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

8360 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

8362 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

8366 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

8367 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

8368 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

8370 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

8371 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

8372 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

8373 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

8374 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

8376 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

8377 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

8378 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

8380 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

8381 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

8382 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

8383 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

8384 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

8387 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

8388 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

8389 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

8391 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

8392 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

8394 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

8395 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

8396 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

8397 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

8399 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

8401 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

8402 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

8403 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

8405 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

8406 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

8408 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

8409 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

8410 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

8411 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

8413 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

8417 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

8418 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

8419 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

8421 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

8422 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

8423 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

8424 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

8425 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

8427 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

8428 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

8429 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

8431 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

8432 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

8433 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

8434 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

8435 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

8438 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

8439 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

8440 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

8441 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

8442 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

8443 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

8444 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

8445 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

8446 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

8447 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

8448 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

8449 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

8450 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

8451 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

8452 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

8455 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

8458 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

8461 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

8464 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

8467 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

8470 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

8473 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

8476 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

8479 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

8480 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

8481 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

8482 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

8483 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

8484 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

8485 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

8486 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

8487 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

8489 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

8490 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

8491 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

8493 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

8494 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

8495 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

8496 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

8497 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

8498 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

8501 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

8502 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

8503 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

8504 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

8505 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

8506 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

8508 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

8509 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

8510 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

8511 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

8512 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

8513 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

8516 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

8519 
	#TIM_OR_TI4_RMP
 ((
uöt16_t
)0x00C0Ë

	)

8520 
	#TIM_OR_TI4_RMP_0
 ((
uöt16_t
)0x0040Ë

	)

8521 
	#TIM_OR_TI4_RMP_1
 ((
uöt16_t
)0x0080Ë

	)

8522 
	#TIM_OR_ITR1_RMP
 ((
uöt16_t
)0x0C00Ë

	)

8523 
	#TIM_OR_ITR1_RMP_0
 ((
uöt16_t
)0x0400Ë

	)

8524 
	#TIM_OR_ITR1_RMP_1
 ((
uöt16_t
)0x0800Ë

	)

8533 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

8534 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

8535 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

8536 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

8537 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

8538 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

8539 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

8540 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

8541 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

8542 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

8545 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

8548 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

8549 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

8552 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

8553 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

8554 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

8555 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

8556 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

8557 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

8558 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

8559 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

8560 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

8561 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

8562 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

8563 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

8564 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

8565 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

8566 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

8569 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

8570 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

8571 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

8572 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

8573 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

8574 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

8575 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

8577 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

8578 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

8579 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

8581 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

8584 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

8585 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

8586 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

8587 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

8588 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

8589 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

8590 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

8591 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

8592 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

8593 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

8594 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

8595 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

8598 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

8599 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

8600 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

8601 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

8602 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

8603 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

8604 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

8605 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

8606 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

8608 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

8616 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

8617 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

8618 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

8619 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

8620 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

8621 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

8622 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

8623 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

8625 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

8628 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

8629 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

8630 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

8631 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

8632 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

8633 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

8634 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

8635 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

8637 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

8638 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

8639 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

8641 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

8644 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

8653 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

8654 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

8657 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

8658 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

8659 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

8660 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

8662 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

8663 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

8664 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

8667 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

8668 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

8669 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

8670 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

8671 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

8672 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

8673 
	#DBGMCU_APB1_FZ_DBG_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

8674 
	#DBGMCU_APB1_FZ_DBG_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

8675 
	#DBGMCU_APB1_FZ_DBG_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

8676 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

8677 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

8678 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

8679 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

8680 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

8681 
	#DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

8682 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

8683 
	#DBGMCU_APB1_FZ_DBG_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

8685 
	#DBGMCU_APB1_FZ_DBG_IWDEG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP


	)

8688 
	#DBGMCU_APB1_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

8689 
	#DBGMCU_APB1_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

8690 
	#DBGMCU_APB1_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

8691 
	#DBGMCU_APB1_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

8692 
	#DBGMCU_APB1_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

8700 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

8701 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

8702 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

8703 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

8704 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

8705 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

8706 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

8707 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

8708 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

8709 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

8710 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

8711 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

8712 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

8713 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

8714 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

8715 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

8716 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

8717 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

8718 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

8719 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

8721 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

8722 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

8723 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

8724 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

8725 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

8726 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

8727 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

8730 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

8731 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

8732 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

8733 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

8734 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

8735 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

8736 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

8737 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

8738 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

8739 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

8740 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

8741 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

8742 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

8743 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

8746 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8749 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8752 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

8753 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

8754 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

8755 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

8756 
	#ETH_MACMIIAR_CR_Div62
 ((
uöt32_t
)0x00000004Ë

	)

8757 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

8758 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

8759 
	#ETH_MACMIIAR_CR_Div102
 ((
uöt32_t
)0x00000010Ë

	)

8760 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

8761 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

8764 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

8767 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

8768 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

8769 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

8770 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

8771 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

8772 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

8773 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

8774 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

8775 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

8776 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

8777 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

8780 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

8781 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

8784 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

8798 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

8799 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

8800 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

8801 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

8802 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

8803 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

8804 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

8807 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

8808 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

8809 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

8810 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

8811 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

8814 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

8815 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

8818 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

8821 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8824 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8825 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8826 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8827 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8828 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8829 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8830 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8831 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8832 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8833 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

8836 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8839 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8840 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8841 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8842 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8843 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8844 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8845 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8846 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8847 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8848 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

8851 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8854 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8855 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8856 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8857 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8858 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8859 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8860 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8861 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8862 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8863 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

8866 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8873 
	#ETH_MMCCR_MCFHP
 ((
uöt32_t
)0x00000020Ë

	)

8874 
	#ETH_MMCCR_MCP
 ((
uöt32_t
)0x00000010Ë

	)

8875 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

8876 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

8877 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

8878 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

8881 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

8882 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

8883 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

8886 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

8887 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

8888 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

8891 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

8892 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

8893 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

8896 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

8897 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

8898 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

8901 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8904 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8907 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8910 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8913 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8916 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8923 
	#ETH_PTPTSCR_TSCNT
 ((
uöt32_t
)0x00030000Ë

	)

8924 
	#ETH_PTPTSSR_TSSMRME
 ((
uöt32_t
)0x00008000Ë

	)

8925 
	#ETH_PTPTSSR_TSSEME
 ((
uöt32_t
)0x00004000Ë

	)

8926 
	#ETH_PTPTSSR_TSSIPV4FE
 ((
uöt32_t
)0x00002000Ë

	)

8927 
	#ETH_PTPTSSR_TSSIPV6FE
 ((
uöt32_t
)0x00001000Ë

	)

8928 
	#ETH_PTPTSSR_TSSPTPOEFE
 ((
uöt32_t
)0x00000800Ë

	)

8929 
	#ETH_PTPTSSR_TSPTPPSV2E
 ((
uöt32_t
)0x00000400Ë

	)

8930 
	#ETH_PTPTSSR_TSSSR
 ((
uöt32_t
)0x00000200Ë

	)

8931 
	#ETH_PTPTSSR_TSSARFE
 ((
uöt32_t
)0x00000100Ë

	)

8933 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

8934 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

8935 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

8936 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

8937 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

8938 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

8941 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

8944 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8947 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

8948 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8951 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8954 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

8955 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8958 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8961 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8964 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8967 
	#ETH_PTPTSSR_TSTTR
 ((
uöt32_t
)0x00000020Ë

	)

8968 
	#ETH_PTPTSSR_TSSO
 ((
uöt32_t
)0x00000010Ë

	)

8975 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

8976 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

8977 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

8978 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

8979 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

8980 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

8981 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

8982 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

8983 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

8984 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

8985 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

8986 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

8987 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

8988 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

8989 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

8990 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

8991 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

8992 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

8993 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

8994 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

8995 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

8996 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

8997 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

8998 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

8999 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

9000 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

9001 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

9002 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

9003 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

9004 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

9005 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

9006 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

9007 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

9008 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

9009 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

9010 
	#ETH_DMABMR_EDE
 ((
uöt32_t
)0x00000080Ë

	)

9011 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

9012 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

9013 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

9016 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

9019 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

9022 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9025 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9028 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

9029 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

9030 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

9031 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

9033 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

9034 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

9035 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

9036 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

9037 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

9038 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

9039 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

9040 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

9041 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

9042 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

9043 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

9044 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

9045 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

9046 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

9047 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

9048 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

9049 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

9050 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

9051 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

9052 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

9053 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

9054 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

9055 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

9056 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

9057 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

9058 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

9059 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

9060 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

9061 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

9062 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

9063 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

9064 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

9067 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

9068 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

9069 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

9070 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

9071 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

9072 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

9073 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

9074 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

9075 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

9076 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

9077 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

9078 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

9079 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

9080 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

9081 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

9082 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

9083 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

9084 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

9085 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

9086 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

9087 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

9088 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

9089 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

9090 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

9093 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

9094 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

9095 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

9096 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

9097 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

9098 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

9099 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

9100 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

9101 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

9102 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

9103 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

9104 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

9105 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

9106 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

9107 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

9110 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

9111 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

9112 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

9113 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

9116 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9119 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9122 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9125 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9135 #ifde‡
USE_STDPERIPH_DRIVER


9143 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

9145 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

9147 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

9149 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

9151 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

9153 
	#READ_REG
(
REG
Ë((REG))

	)

9155 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

9161 #ifde‡
__˝lu•lus


	@cmsis/system_stm32f4xx.h

39 #i‚de‡
__SYSTEM_STM32F4XX_H


40 
	#__SYSTEM_STM32F4XX_H


	)

42 #ifde‡
__˝lu•lus


59 
uöt32_t
 
Sy°emC‹eClock
;

86 
Sy°emInô
();

87 
Sy°emC‹eClockUpd©e
();

92 #ifde‡
__˝lu•lus


	@spl/misc.h

30 #i‚de‡
__MISC_H


31 
	#__MISC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt8_t
 
NVIC_IRQCh™√l
;

61 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

66 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

71 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

74 } 
	tNVIC_InôTy≥Def
;

86 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

87 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

88 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
Ë|| \

	)

89 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

98 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

99 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

100 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

101 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
Ë|| \

	)

102 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

103 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

112 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

114 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

116 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

118 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

120 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

123 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
Ë|| \

	)

124 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

125 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

126 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

127 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

129 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

131 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

133 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

143 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

144 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

145 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
Ë|| \

	)

146 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

158 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

159 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

160 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

161 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

162 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

164 #ifde‡
__˝lu•lus


	@spl/stm32f4xx.h

53 #i‚de‡
__STM32F4xx_H


54 
	#__STM32F4xx_H


	)

56 #ifde‡
__˝lu•lus


68 #i‡!
deföed
 (
STM32F40_41xxx
Ë&& !deföed (
STM32F427_437xx
Ë&& !deföed (
STM32F429_439xx
Ë&& !deföed (
STM32F401xx
Ë&& !deföed (
STM32F411xE
)

76 
	#STM32F429_439xx
 
STM32F429ZI


	)

88 #ifde‡
STM32F40XX


89 
	#STM32F40_41xxx


	)

93 #ifde‡
STM32F427X


94 
	#STM32F427_437xx


	)

101 #i‡!
deföed
 (
STM32F40_41xxx
Ë&& !deföed (
STM32F427_437xx
Ë&& !deföed (
STM32F429_439xx
Ë&& !deföed (
STM32F401xx
Ë&& !deföed (
STM32F411xE
)

105 #i‡!
deföed
 (
USE_STDPERIPH_DRIVER
)

111 
	#USE_STDPERIPH_DRIVER


	)

122 #i‡!
deföed
 (
HSE_VALUE
)

123 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

131 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

132 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x05000Ë

	)

135 #i‡!
deföed
 (
HSI_VALUE
)

136 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

142 
	#__STM32F4XX_STDPERIPH_VERSION_MAIN
 (0x01Ë

	)

143 
	#__STM32F4XX_STDPERIPH_VERSION_SUB1
 (0x04Ë

	)

144 
	#__STM32F4XX_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

145 
	#__STM32F4XX_STDPERIPH_VERSION_RC
 (0x00Ë

	)

146 
	#__STM32F4XX_STDPERIPH_VERSION
 ((
__STM32F4XX_STDPERIPH_VERSION_MAIN
 << 24)\

	)

147 |(
__STM32F4XX_STDPERIPH_VERSION_SUB1
 << 16)\

148 |(
__STM32F4XX_STDPERIPH_VERSION_SUB2
 << 8)\

149 |(
__STM32F4XX_STDPERIPH_VERSION_RC
))

162 
	#__CM4_REV
 0x0001

	)

163 
	#__MPU_PRESENT
 1

	)

164 
	#__NVIC_PRIO_BITS
 4

	)

165 
	#__Víd‹_SysTickC⁄fig
 0

	)

166 
	#__FPU_PRESENT
 1

	)

172 
	eIRQn


175 
N⁄MaskabÀI¡_IRQn
 = -14,

176 
Mem‹yM™agemít_IRQn
 = -12,

177 
BusFau…_IRQn
 = -11,

178 
UßgeFau…_IRQn
 = -10,

179 
SVCÆl_IRQn
 = -5,

180 
DebugM⁄ô‹_IRQn
 = -4,

181 
PídSV_IRQn
 = -2,

182 
SysTick_IRQn
 = -1,

184 
WWDG_IRQn
 = 0,

185 
PVD_IRQn
 = 1,

186 
TAMP_STAMP_IRQn
 = 2,

187 
RTC_WKUP_IRQn
 = 3,

188 
FLASH_IRQn
 = 4,

189 
RCC_IRQn
 = 5,

190 
EXTI0_IRQn
 = 6,

191 
EXTI1_IRQn
 = 7,

192 
EXTI2_IRQn
 = 8,

193 
EXTI3_IRQn
 = 9,

194 
EXTI4_IRQn
 = 10,

195 
DMA1_Såóm0_IRQn
 = 11,

196 
DMA1_Såóm1_IRQn
 = 12,

197 
DMA1_Såóm2_IRQn
 = 13,

198 
DMA1_Såóm3_IRQn
 = 14,

199 
DMA1_Såóm4_IRQn
 = 15,

200 
DMA1_Såóm5_IRQn
 = 16,

201 
DMA1_Såóm6_IRQn
 = 17,

202 
ADC_IRQn
 = 18,

204 #i‡
deföed
 (
STM32F40_41xxx
)

205 
CAN1_TX_IRQn
 = 19,

206 
CAN1_RX0_IRQn
 = 20,

207 
CAN1_RX1_IRQn
 = 21,

208 
CAN1_SCE_IRQn
 = 22,

209 
EXTI9_5_IRQn
 = 23,

210 
TIM1_BRK_TIM9_IRQn
 = 24,

211 
TIM1_UP_TIM10_IRQn
 = 25,

212 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

213 
TIM1_CC_IRQn
 = 27,

214 
TIM2_IRQn
 = 28,

215 
TIM3_IRQn
 = 29,

216 
TIM4_IRQn
 = 30,

217 
I2C1_EV_IRQn
 = 31,

218 
I2C1_ER_IRQn
 = 32,

219 
I2C2_EV_IRQn
 = 33,

220 
I2C2_ER_IRQn
 = 34,

221 
SPI1_IRQn
 = 35,

222 
SPI2_IRQn
 = 36,

223 
USART1_IRQn
 = 37,

224 
USART2_IRQn
 = 38,

225 
USART3_IRQn
 = 39,

226 
EXTI15_10_IRQn
 = 40,

227 
RTC_Aœrm_IRQn
 = 41,

228 
OTG_FS_WKUP_IRQn
 = 42,

229 
TIM8_BRK_TIM12_IRQn
 = 43,

230 
TIM8_UP_TIM13_IRQn
 = 44,

231 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

232 
TIM8_CC_IRQn
 = 46,

233 
DMA1_Såóm7_IRQn
 = 47,

234 
FSMC_IRQn
 = 48,

235 
SDIO_IRQn
 = 49,

236 
TIM5_IRQn
 = 50,

237 
SPI3_IRQn
 = 51,

238 
UART4_IRQn
 = 52,

239 
UART5_IRQn
 = 53,

240 
TIM6_DAC_IRQn
 = 54,

241 
TIM7_IRQn
 = 55,

242 
DMA2_Såóm0_IRQn
 = 56,

243 
DMA2_Såóm1_IRQn
 = 57,

244 
DMA2_Såóm2_IRQn
 = 58,

245 
DMA2_Såóm3_IRQn
 = 59,

246 
DMA2_Såóm4_IRQn
 = 60,

247 
ETH_IRQn
 = 61,

248 
ETH_WKUP_IRQn
 = 62,

249 
CAN2_TX_IRQn
 = 63,

250 
CAN2_RX0_IRQn
 = 64,

251 
CAN2_RX1_IRQn
 = 65,

252 
CAN2_SCE_IRQn
 = 66,

253 
OTG_FS_IRQn
 = 67,

254 
DMA2_Såóm5_IRQn
 = 68,

255 
DMA2_Såóm6_IRQn
 = 69,

256 
DMA2_Såóm7_IRQn
 = 70,

257 
USART6_IRQn
 = 71,

258 
I2C3_EV_IRQn
 = 72,

259 
I2C3_ER_IRQn
 = 73,

260 
OTG_HS_EP1_OUT_IRQn
 = 74,

261 
OTG_HS_EP1_IN_IRQn
 = 75,

262 
OTG_HS_WKUP_IRQn
 = 76,

263 
OTG_HS_IRQn
 = 77,

264 
DCMI_IRQn
 = 78,

265 
CRYP_IRQn
 = 79,

266 
HASH_RNG_IRQn
 = 80,

267 
FPU_IRQn
 = 81

270 #i‡
deföed
 (
STM32F427_437xx
)

271 
CAN1_TX_IRQn
 = 19,

272 
CAN1_RX0_IRQn
 = 20,

273 
CAN1_RX1_IRQn
 = 21,

274 
CAN1_SCE_IRQn
 = 22,

275 
EXTI9_5_IRQn
 = 23,

276 
TIM1_BRK_TIM9_IRQn
 = 24,

277 
TIM1_UP_TIM10_IRQn
 = 25,

278 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

279 
TIM1_CC_IRQn
 = 27,

280 
TIM2_IRQn
 = 28,

281 
TIM3_IRQn
 = 29,

282 
TIM4_IRQn
 = 30,

283 
I2C1_EV_IRQn
 = 31,

284 
I2C1_ER_IRQn
 = 32,

285 
I2C2_EV_IRQn
 = 33,

286 
I2C2_ER_IRQn
 = 34,

287 
SPI1_IRQn
 = 35,

288 
SPI2_IRQn
 = 36,

289 
USART1_IRQn
 = 37,

290 
USART2_IRQn
 = 38,

291 
USART3_IRQn
 = 39,

292 
EXTI15_10_IRQn
 = 40,

293 
RTC_Aœrm_IRQn
 = 41,

294 
OTG_FS_WKUP_IRQn
 = 42,

295 
TIM8_BRK_TIM12_IRQn
 = 43,

296 
TIM8_UP_TIM13_IRQn
 = 44,

297 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

298 
TIM8_CC_IRQn
 = 46,

299 
DMA1_Såóm7_IRQn
 = 47,

300 
FMC_IRQn
 = 48,

301 
SDIO_IRQn
 = 49,

302 
TIM5_IRQn
 = 50,

303 
SPI3_IRQn
 = 51,

304 
UART4_IRQn
 = 52,

305 
UART5_IRQn
 = 53,

306 
TIM6_DAC_IRQn
 = 54,

307 
TIM7_IRQn
 = 55,

308 
DMA2_Såóm0_IRQn
 = 56,

309 
DMA2_Såóm1_IRQn
 = 57,

310 
DMA2_Såóm2_IRQn
 = 58,

311 
DMA2_Såóm3_IRQn
 = 59,

312 
DMA2_Såóm4_IRQn
 = 60,

313 
ETH_IRQn
 = 61,

314 
ETH_WKUP_IRQn
 = 62,

315 
CAN2_TX_IRQn
 = 63,

316 
CAN2_RX0_IRQn
 = 64,

317 
CAN2_RX1_IRQn
 = 65,

318 
CAN2_SCE_IRQn
 = 66,

319 
OTG_FS_IRQn
 = 67,

320 
DMA2_Såóm5_IRQn
 = 68,

321 
DMA2_Såóm6_IRQn
 = 69,

322 
DMA2_Såóm7_IRQn
 = 70,

323 
USART6_IRQn
 = 71,

324 
I2C3_EV_IRQn
 = 72,

325 
I2C3_ER_IRQn
 = 73,

326 
OTG_HS_EP1_OUT_IRQn
 = 74,

327 
OTG_HS_EP1_IN_IRQn
 = 75,

328 
OTG_HS_WKUP_IRQn
 = 76,

329 
OTG_HS_IRQn
 = 77,

330 
DCMI_IRQn
 = 78,

331 
CRYP_IRQn
 = 79,

332 
HASH_RNG_IRQn
 = 80,

333 
FPU_IRQn
 = 81,

334 
UART7_IRQn
 = 82,

335 
UART8_IRQn
 = 83,

336 
SPI4_IRQn
 = 84,

337 
SPI5_IRQn
 = 85,

338 
SPI6_IRQn
 = 86,

339 
SAI1_IRQn
 = 87,

340 
DMA2D_IRQn
 = 90

343 #i‡
deföed
 (
STM32F429_439xx
)

344 
CAN1_TX_IRQn
 = 19,

345 
CAN1_RX0_IRQn
 = 20,

346 
CAN1_RX1_IRQn
 = 21,

347 
CAN1_SCE_IRQn
 = 22,

348 
EXTI9_5_IRQn
 = 23,

349 
TIM1_BRK_TIM9_IRQn
 = 24,

350 
TIM1_UP_TIM10_IRQn
 = 25,

351 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

352 
TIM1_CC_IRQn
 = 27,

353 
TIM2_IRQn
 = 28,

354 
TIM3_IRQn
 = 29,

355 
TIM4_IRQn
 = 30,

356 
I2C1_EV_IRQn
 = 31,

357 
I2C1_ER_IRQn
 = 32,

358 
I2C2_EV_IRQn
 = 33,

359 
I2C2_ER_IRQn
 = 34,

360 
SPI1_IRQn
 = 35,

361 
SPI2_IRQn
 = 36,

362 
USART1_IRQn
 = 37,

363 
USART2_IRQn
 = 38,

364 
USART3_IRQn
 = 39,

365 
EXTI15_10_IRQn
 = 40,

366 
RTC_Aœrm_IRQn
 = 41,

367 
OTG_FS_WKUP_IRQn
 = 42,

368 
TIM8_BRK_TIM12_IRQn
 = 43,

369 
TIM8_UP_TIM13_IRQn
 = 44,

370 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

371 
TIM8_CC_IRQn
 = 46,

372 
DMA1_Såóm7_IRQn
 = 47,

373 
FMC_IRQn
 = 48,

374 
SDIO_IRQn
 = 49,

375 
TIM5_IRQn
 = 50,

376 
SPI3_IRQn
 = 51,

377 
UART4_IRQn
 = 52,

378 
UART5_IRQn
 = 53,

379 
TIM6_DAC_IRQn
 = 54,

380 
TIM7_IRQn
 = 55,

381 
DMA2_Såóm0_IRQn
 = 56,

382 
DMA2_Såóm1_IRQn
 = 57,

383 
DMA2_Såóm2_IRQn
 = 58,

384 
DMA2_Såóm3_IRQn
 = 59,

385 
DMA2_Såóm4_IRQn
 = 60,

386 
ETH_IRQn
 = 61,

387 
ETH_WKUP_IRQn
 = 62,

388 
CAN2_TX_IRQn
 = 63,

389 
CAN2_RX0_IRQn
 = 64,

390 
CAN2_RX1_IRQn
 = 65,

391 
CAN2_SCE_IRQn
 = 66,

392 
OTG_FS_IRQn
 = 67,

393 
DMA2_Såóm5_IRQn
 = 68,

394 
DMA2_Såóm6_IRQn
 = 69,

395 
DMA2_Såóm7_IRQn
 = 70,

396 
USART6_IRQn
 = 71,

397 
I2C3_EV_IRQn
 = 72,

398 
I2C3_ER_IRQn
 = 73,

399 
OTG_HS_EP1_OUT_IRQn
 = 74,

400 
OTG_HS_EP1_IN_IRQn
 = 75,

401 
OTG_HS_WKUP_IRQn
 = 76,

402 
OTG_HS_IRQn
 = 77,

403 
DCMI_IRQn
 = 78,

404 
CRYP_IRQn
 = 79,

405 
HASH_RNG_IRQn
 = 80,

406 
FPU_IRQn
 = 81,

407 
UART7_IRQn
 = 82,

408 
UART8_IRQn
 = 83,

409 
SPI4_IRQn
 = 84,

410 
SPI5_IRQn
 = 85,

411 
SPI6_IRQn
 = 86,

412 
SAI1_IRQn
 = 87,

413 
LTDC_IRQn
 = 88,

414 
LTDC_ER_IRQn
 = 89,

415 
DMA2D_IRQn
 = 90

418 #i‡
deföed
 (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

419 
EXTI9_5_IRQn
 = 23,

420 
TIM1_BRK_TIM9_IRQn
 = 24,

421 
TIM1_UP_TIM10_IRQn
 = 25,

422 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

423 
TIM1_CC_IRQn
 = 27,

424 
TIM2_IRQn
 = 28,

425 
TIM3_IRQn
 = 29,

426 
TIM4_IRQn
 = 30,

427 
I2C1_EV_IRQn
 = 31,

428 
I2C1_ER_IRQn
 = 32,

429 
I2C2_EV_IRQn
 = 33,

430 
I2C2_ER_IRQn
 = 34,

431 
SPI1_IRQn
 = 35,

432 
SPI2_IRQn
 = 36,

433 
USART1_IRQn
 = 37,

434 
USART2_IRQn
 = 38,

435 
EXTI15_10_IRQn
 = 40,

436 
RTC_Aœrm_IRQn
 = 41,

437 
OTG_FS_WKUP_IRQn
 = 42,

438 
DMA1_Såóm7_IRQn
 = 47,

439 
SDIO_IRQn
 = 49,

440 
TIM5_IRQn
 = 50,

441 
SPI3_IRQn
 = 51,

442 
DMA2_Såóm0_IRQn
 = 56,

443 
DMA2_Såóm1_IRQn
 = 57,

444 
DMA2_Såóm2_IRQn
 = 58,

445 
DMA2_Såóm3_IRQn
 = 59,

446 
DMA2_Såóm4_IRQn
 = 60,

447 
OTG_FS_IRQn
 = 67,

448 
DMA2_Såóm5_IRQn
 = 68,

449 
DMA2_Såóm6_IRQn
 = 69,

450 
DMA2_Såóm7_IRQn
 = 70,

451 
USART6_IRQn
 = 71,

452 
I2C3_EV_IRQn
 = 72,

453 
I2C3_ER_IRQn
 = 73,

454 
FPU_IRQn
 = 81,

455 #i‡
deföed
 (
STM32F401xx
)

456 
SPI4_IRQn
 = 84

458 #i‡
deföed
 (
STM32F411xE
)

459 
SPI4_IRQn
 = 84,

460 
SPI5_IRQn
 = 85

464 } 
	tIRQn_Ty≥
;

470 
	~"c‹e_cm4.h
"

471 
	~"sy°em_°m32f4xx.h
"

472 
	~<°döt.h
>

478 
öt32_t
 
	ts32
;

479 
öt16_t
 
	ts16
;

480 
öt8_t
 
	ts8
;

482 c⁄° 
	töt32_t
 
	tsc32
;

483 c⁄° 
	töt16_t
 
	tsc16
;

484 c⁄° 
	töt8_t
 
	tsc8
;

486 
__IO
 
	töt32_t
 
	tvs32
;

487 
__IO
 
	töt16_t
 
	tvs16
;

488 
__IO
 
	töt8_t
 
	tvs8
;

490 
__I
 
	töt32_t
 
	tvsc32
;

491 
__I
 
	töt16_t
 
	tvsc16
;

492 
__I
 
	töt8_t
 
	tvsc8
;

494 
uöt32_t
 
	tu32
;

495 
uöt16_t
 
	tu16
;

496 
uöt8_t
 
	tu8
;

498 c⁄° 
	tuöt32_t
 
	tuc32
;

499 c⁄° 
	tuöt16_t
 
	tuc16
;

500 c⁄° 
	tuöt8_t
 
	tuc8
;

502 
__IO
 
	tuöt32_t
 
	tvu32
;

503 
__IO
 
	tuöt16_t
 
	tvu16
;

504 
__IO
 
	tuöt8_t
 
	tvu8
;

506 
__I
 
	tuöt32_t
 
	tvuc32
;

507 
__I
 
	tuöt16_t
 
	tvuc16
;

508 
__I
 
	tuöt8_t
 
	tvuc8
;

510 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

512 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

513 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

515 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

531 
__IO
 
uöt32_t
 
SR
;

532 
__IO
 
uöt32_t
 
CR1
;

533 
__IO
 
uöt32_t
 
CR2
;

534 
__IO
 
uöt32_t
 
SMPR1
;

535 
__IO
 
uöt32_t
 
SMPR2
;

536 
__IO
 
uöt32_t
 
JOFR1
;

537 
__IO
 
uöt32_t
 
JOFR2
;

538 
__IO
 
uöt32_t
 
JOFR3
;

539 
__IO
 
uöt32_t
 
JOFR4
;

540 
__IO
 
uöt32_t
 
HTR
;

541 
__IO
 
uöt32_t
 
LTR
;

542 
__IO
 
uöt32_t
 
SQR1
;

543 
__IO
 
uöt32_t
 
SQR2
;

544 
__IO
 
uöt32_t
 
SQR3
;

545 
__IO
 
uöt32_t
 
JSQR
;

546 
__IO
 
uöt32_t
 
JDR1
;

547 
__IO
 
uöt32_t
 
JDR2
;

548 
__IO
 
uöt32_t
 
JDR3
;

549 
__IO
 
uöt32_t
 
JDR4
;

550 
__IO
 
uöt32_t
 
DR
;

551 } 
	tADC_Ty≥Def
;

555 
__IO
 
uöt32_t
 
CSR
;

556 
__IO
 
uöt32_t
 
CCR
;

557 
__IO
 
uöt32_t
 
CDR
;

559 } 
	tADC_Comm⁄_Ty≥Def
;

568 
__IO
 
uöt32_t
 
TIR
;

569 
__IO
 
uöt32_t
 
TDTR
;

570 
__IO
 
uöt32_t
 
TDLR
;

571 
__IO
 
uöt32_t
 
TDHR
;

572 } 
	tCAN_TxMaûBox_Ty≥Def
;

580 
__IO
 
uöt32_t
 
RIR
;

581 
__IO
 
uöt32_t
 
RDTR
;

582 
__IO
 
uöt32_t
 
RDLR
;

583 
__IO
 
uöt32_t
 
RDHR
;

584 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

592 
__IO
 
uöt32_t
 
FR1
;

593 
__IO
 
uöt32_t
 
FR2
;

594 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

602 
__IO
 
uöt32_t
 
MCR
;

603 
__IO
 
uöt32_t
 
MSR
;

604 
__IO
 
uöt32_t
 
TSR
;

605 
__IO
 
uöt32_t
 
RF0R
;

606 
__IO
 
uöt32_t
 
RF1R
;

607 
__IO
 
uöt32_t
 
IER
;

608 
__IO
 
uöt32_t
 
ESR
;

609 
__IO
 
uöt32_t
 
BTR
;

610 
uöt32_t
 
RESERVED0
[88];

611 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

612 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

613 
uöt32_t
 
RESERVED1
[12];

614 
__IO
 
uöt32_t
 
FMR
;

615 
__IO
 
uöt32_t
 
FM1R
;

616 
uöt32_t
 
RESERVED2
;

617 
__IO
 
uöt32_t
 
FS1R
;

618 
uöt32_t
 
RESERVED3
;

619 
__IO
 
uöt32_t
 
FFA1R
;

620 
uöt32_t
 
RESERVED4
;

621 
__IO
 
uöt32_t
 
FA1R
;

622 
uöt32_t
 
RESERVED5
[8];

623 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

624 } 
	tCAN_Ty≥Def
;

632 
__IO
 
uöt32_t
 
DR
;

633 
__IO
 
uöt8_t
 
IDR
;

634 
uöt8_t
 
RESERVED0
;

635 
uöt16_t
 
RESERVED1
;

636 
__IO
 
uöt32_t
 
CR
;

637 } 
	tCRC_Ty≥Def
;

645 
__IO
 
uöt32_t
 
CR
;

646 
__IO
 
uöt32_t
 
SWTRIGR
;

647 
__IO
 
uöt32_t
 
DHR12R1
;

648 
__IO
 
uöt32_t
 
DHR12L1
;

649 
__IO
 
uöt32_t
 
DHR8R1
;

650 
__IO
 
uöt32_t
 
DHR12R2
;

651 
__IO
 
uöt32_t
 
DHR12L2
;

652 
__IO
 
uöt32_t
 
DHR8R2
;

653 
__IO
 
uöt32_t
 
DHR12RD
;

654 
__IO
 
uöt32_t
 
DHR12LD
;

655 
__IO
 
uöt32_t
 
DHR8RD
;

656 
__IO
 
uöt32_t
 
DOR1
;

657 
__IO
 
uöt32_t
 
DOR2
;

658 
__IO
 
uöt32_t
 
SR
;

659 } 
	tDAC_Ty≥Def
;

667 
__IO
 
uöt32_t
 
IDCODE
;

668 
__IO
 
uöt32_t
 
CR
;

669 
__IO
 
uöt32_t
 
APB1FZ
;

670 
__IO
 
uöt32_t
 
APB2FZ
;

671 }
	tDBGMCU_Ty≥Def
;

679 
__IO
 
uöt32_t
 
CR
;

680 
__IO
 
uöt32_t
 
SR
;

681 
__IO
 
uöt32_t
 
RISR
;

682 
__IO
 
uöt32_t
 
IER
;

683 
__IO
 
uöt32_t
 
MISR
;

684 
__IO
 
uöt32_t
 
ICR
;

685 
__IO
 
uöt32_t
 
ESCR
;

686 
__IO
 
uöt32_t
 
ESUR
;

687 
__IO
 
uöt32_t
 
CWSTRTR
;

688 
__IO
 
uöt32_t
 
CWSIZER
;

689 
__IO
 
uöt32_t
 
DR
;

690 } 
	tDCMI_Ty≥Def
;

698 
__IO
 
uöt32_t
 
CR
;

699 
__IO
 
uöt32_t
 
NDTR
;

700 
__IO
 
uöt32_t
 
PAR
;

701 
__IO
 
uöt32_t
 
M0AR
;

702 
__IO
 
uöt32_t
 
M1AR
;

703 
__IO
 
uöt32_t
 
FCR
;

704 } 
	tDMA_Såóm_Ty≥Def
;

708 
__IO
 
uöt32_t
 
LISR
;

709 
__IO
 
uöt32_t
 
HISR
;

710 
__IO
 
uöt32_t
 
LIFCR
;

711 
__IO
 
uöt32_t
 
HIFCR
;

712 } 
	tDMA_Ty≥Def
;

720 
__IO
 
uöt32_t
 
CR
;

721 
__IO
 
uöt32_t
 
ISR
;

722 
__IO
 
uöt32_t
 
IFCR
;

723 
__IO
 
uöt32_t
 
FGMAR
;

724 
__IO
 
uöt32_t
 
FGOR
;

725 
__IO
 
uöt32_t
 
BGMAR
;

726 
__IO
 
uöt32_t
 
BGOR
;

727 
__IO
 
uöt32_t
 
FGPFCCR
;

728 
__IO
 
uöt32_t
 
FGCOLR
;

729 
__IO
 
uöt32_t
 
BGPFCCR
;

730 
__IO
 
uöt32_t
 
BGCOLR
;

731 
__IO
 
uöt32_t
 
FGCMAR
;

732 
__IO
 
uöt32_t
 
BGCMAR
;

733 
__IO
 
uöt32_t
 
OPFCCR
;

734 
__IO
 
uöt32_t
 
OCOLR
;

735 
__IO
 
uöt32_t
 
OMAR
;

736 
__IO
 
uöt32_t
 
OOR
;

737 
__IO
 
uöt32_t
 
NLR
;

738 
__IO
 
uöt32_t
 
LWR
;

739 
__IO
 
uöt32_t
 
AMTCR
;

740 
uöt32_t
 
RESERVED
[236];

741 
__IO
 
uöt32_t
 
FGCLUT
[256];

742 
__IO
 
uöt32_t
 
BGCLUT
[256];

743 } 
	tDMA2D_Ty≥Def
;

751 
__IO
 
uöt32_t
 
MACCR
;

752 
__IO
 
uöt32_t
 
MACFFR
;

753 
__IO
 
uöt32_t
 
MACHTHR
;

754 
__IO
 
uöt32_t
 
MACHTLR
;

755 
__IO
 
uöt32_t
 
MACMIIAR
;

756 
__IO
 
uöt32_t
 
MACMIIDR
;

757 
__IO
 
uöt32_t
 
MACFCR
;

758 
__IO
 
uöt32_t
 
MACVLANTR
;

759 
uöt32_t
 
RESERVED0
[2];

760 
__IO
 
uöt32_t
 
MACRWUFFR
;

761 
__IO
 
uöt32_t
 
MACPMTCSR
;

762 
uöt32_t
 
RESERVED1
[2];

763 
__IO
 
uöt32_t
 
MACSR
;

764 
__IO
 
uöt32_t
 
MACIMR
;

765 
__IO
 
uöt32_t
 
MACA0HR
;

766 
__IO
 
uöt32_t
 
MACA0LR
;

767 
__IO
 
uöt32_t
 
MACA1HR
;

768 
__IO
 
uöt32_t
 
MACA1LR
;

769 
__IO
 
uöt32_t
 
MACA2HR
;

770 
__IO
 
uöt32_t
 
MACA2LR
;

771 
__IO
 
uöt32_t
 
MACA3HR
;

772 
__IO
 
uöt32_t
 
MACA3LR
;

773 
uöt32_t
 
RESERVED2
[40];

774 
__IO
 
uöt32_t
 
MMCCR
;

775 
__IO
 
uöt32_t
 
MMCRIR
;

776 
__IO
 
uöt32_t
 
MMCTIR
;

777 
__IO
 
uöt32_t
 
MMCRIMR
;

778 
__IO
 
uöt32_t
 
MMCTIMR
;

779 
uöt32_t
 
RESERVED3
[14];

780 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

781 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

782 
uöt32_t
 
RESERVED4
[5];

783 
__IO
 
uöt32_t
 
MMCTGFCR
;

784 
uöt32_t
 
RESERVED5
[10];

785 
__IO
 
uöt32_t
 
MMCRFCECR
;

786 
__IO
 
uöt32_t
 
MMCRFAECR
;

787 
uöt32_t
 
RESERVED6
[10];

788 
__IO
 
uöt32_t
 
MMCRGUFCR
;

789 
uöt32_t
 
RESERVED7
[334];

790 
__IO
 
uöt32_t
 
PTPTSCR
;

791 
__IO
 
uöt32_t
 
PTPSSIR
;

792 
__IO
 
uöt32_t
 
PTPTSHR
;

793 
__IO
 
uöt32_t
 
PTPTSLR
;

794 
__IO
 
uöt32_t
 
PTPTSHUR
;

795 
__IO
 
uöt32_t
 
PTPTSLUR
;

796 
__IO
 
uöt32_t
 
PTPTSAR
;

797 
__IO
 
uöt32_t
 
PTPTTHR
;

798 
__IO
 
uöt32_t
 
PTPTTLR
;

799 
__IO
 
uöt32_t
 
RESERVED8
;

800 
__IO
 
uöt32_t
 
PTPTSSR
;

801 
uöt32_t
 
RESERVED9
[565];

802 
__IO
 
uöt32_t
 
DMABMR
;

803 
__IO
 
uöt32_t
 
DMATPDR
;

804 
__IO
 
uöt32_t
 
DMARPDR
;

805 
__IO
 
uöt32_t
 
DMARDLAR
;

806 
__IO
 
uöt32_t
 
DMATDLAR
;

807 
__IO
 
uöt32_t
 
DMASR
;

808 
__IO
 
uöt32_t
 
DMAOMR
;

809 
__IO
 
uöt32_t
 
DMAIER
;

810 
__IO
 
uöt32_t
 
DMAMFBOCR
;

811 
__IO
 
uöt32_t
 
DMARSWTR
;

812 
uöt32_t
 
RESERVED10
[8];

813 
__IO
 
uöt32_t
 
DMACHTDR
;

814 
__IO
 
uöt32_t
 
DMACHRDR
;

815 
__IO
 
uöt32_t
 
DMACHTBAR
;

816 
__IO
 
uöt32_t
 
DMACHRBAR
;

817 } 
	tETH_Ty≥Def
;

825 
__IO
 
uöt32_t
 
IMR
;

826 
__IO
 
uöt32_t
 
EMR
;

827 
__IO
 
uöt32_t
 
RTSR
;

828 
__IO
 
uöt32_t
 
FTSR
;

829 
__IO
 
uöt32_t
 
SWIER
;

830 
__IO
 
uöt32_t
 
PR
;

831 } 
	tEXTI_Ty≥Def
;

839 
__IO
 
uöt32_t
 
ACR
;

840 
__IO
 
uöt32_t
 
KEYR
;

841 
__IO
 
uöt32_t
 
OPTKEYR
;

842 
__IO
 
uöt32_t
 
SR
;

843 
__IO
 
uöt32_t
 
CR
;

844 
__IO
 
uöt32_t
 
OPTCR
;

845 
__IO
 
uöt32_t
 
OPTCR1
;

846 } 
	tFLASH_Ty≥Def
;

848 #i‡
deföed
 (
STM32F40_41xxx
)

855 
__IO
 
uöt32_t
 
BTCR
[8];

856 } 
	tFSMC_B™k1_Ty≥Def
;

864 
__IO
 
uöt32_t
 
BWTR
[7];

865 } 
	tFSMC_B™k1E_Ty≥Def
;

873 
__IO
 
uöt32_t
 
PCR2
;

874 
__IO
 
uöt32_t
 
SR2
;

875 
__IO
 
uöt32_t
 
PMEM2
;

876 
__IO
 
uöt32_t
 
PATT2
;

877 
uöt32_t
 
RESERVED0
;

878 
__IO
 
uöt32_t
 
ECCR2
;

879 } 
	tFSMC_B™k2_Ty≥Def
;

887 
__IO
 
uöt32_t
 
PCR3
;

888 
__IO
 
uöt32_t
 
SR3
;

889 
__IO
 
uöt32_t
 
PMEM3
;

890 
__IO
 
uöt32_t
 
PATT3
;

891 
uöt32_t
 
RESERVED0
;

892 
__IO
 
uöt32_t
 
ECCR3
;

893 } 
	tFSMC_B™k3_Ty≥Def
;

901 
__IO
 
uöt32_t
 
PCR4
;

902 
__IO
 
uöt32_t
 
SR4
;

903 
__IO
 
uöt32_t
 
PMEM4
;

904 
__IO
 
uöt32_t
 
PATT4
;

905 
__IO
 
uöt32_t
 
PIO4
;

906 } 
	tFSMC_B™k4_Ty≥Def
;

909 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

916 
__IO
 
uöt32_t
 
BTCR
[8];

917 } 
	tFMC_B™k1_Ty≥Def
;

925 
__IO
 
uöt32_t
 
BWTR
[7];

926 } 
	tFMC_B™k1E_Ty≥Def
;

934 
__IO
 
uöt32_t
 
PCR2
;

935 
__IO
 
uöt32_t
 
SR2
;

936 
__IO
 
uöt32_t
 
PMEM2
;

937 
__IO
 
uöt32_t
 
PATT2
;

938 
uöt32_t
 
RESERVED0
;

939 
__IO
 
uöt32_t
 
ECCR2
;

940 } 
	tFMC_B™k2_Ty≥Def
;

948 
__IO
 
uöt32_t
 
PCR3
;

949 
__IO
 
uöt32_t
 
SR3
;

950 
__IO
 
uöt32_t
 
PMEM3
;

951 
__IO
 
uöt32_t
 
PATT3
;

952 
uöt32_t
 
RESERVED0
;

953 
__IO
 
uöt32_t
 
ECCR3
;

954 } 
	tFMC_B™k3_Ty≥Def
;

962 
__IO
 
uöt32_t
 
PCR4
;

963 
__IO
 
uöt32_t
 
SR4
;

964 
__IO
 
uöt32_t
 
PMEM4
;

965 
__IO
 
uöt32_t
 
PATT4
;

966 
__IO
 
uöt32_t
 
PIO4
;

967 } 
	tFMC_B™k4_Ty≥Def
;

975 
__IO
 
uöt32_t
 
SDCR
[2];

976 
__IO
 
uöt32_t
 
SDTR
[2];

977 
__IO
 
uöt32_t
 
SDCMR
;

978 
__IO
 
uöt32_t
 
SDRTR
;

979 
__IO
 
uöt32_t
 
SDSR
;

980 } 
	tFMC_B™k5_6_Ty≥Def
;

989 
__IO
 
uöt32_t
 
MODER
;

990 
__IO
 
uöt32_t
 
OTYPER
;

991 
__IO
 
uöt32_t
 
OSPEEDR
;

992 
__IO
 
uöt32_t
 
PUPDR
;

993 
__IO
 
uöt32_t
 
IDR
;

994 
__IO
 
uöt32_t
 
ODR
;

995 
__IO
 
uöt16_t
 
BSRRL
;

996 
__IO
 
uöt16_t
 
BSRRH
;

997 
__IO
 
uöt32_t
 
LCKR
;

998 
__IO
 
uöt32_t
 
AFR
[2];

999 } 
	tGPIO_Ty≥Def
;

1007 
__IO
 
uöt32_t
 
MEMRMP
;

1008 
__IO
 
uöt32_t
 
PMC
;

1009 
__IO
 
uöt32_t
 
EXTICR
[4];

1010 
uöt32_t
 
RESERVED
[2];

1011 
__IO
 
uöt32_t
 
CMPCR
;

1012 } 
	tSYSCFG_Ty≥Def
;

1020 
__IO
 
uöt16_t
 
CR1
;

1021 
uöt16_t
 
RESERVED0
;

1022 
__IO
 
uöt16_t
 
CR2
;

1023 
uöt16_t
 
RESERVED1
;

1024 
__IO
 
uöt16_t
 
OAR1
;

1025 
uöt16_t
 
RESERVED2
;

1026 
__IO
 
uöt16_t
 
OAR2
;

1027 
uöt16_t
 
RESERVED3
;

1028 
__IO
 
uöt16_t
 
DR
;

1029 
uöt16_t
 
RESERVED4
;

1030 
__IO
 
uöt16_t
 
SR1
;

1031 
uöt16_t
 
RESERVED5
;

1032 
__IO
 
uöt16_t
 
SR2
;

1033 
uöt16_t
 
RESERVED6
;

1034 
__IO
 
uöt16_t
 
CCR
;

1035 
uöt16_t
 
RESERVED7
;

1036 
__IO
 
uöt16_t
 
TRISE
;

1037 
uöt16_t
 
RESERVED8
;

1038 
__IO
 
uöt16_t
 
FLTR
;

1039 
uöt16_t
 
RESERVED9
;

1040 } 
	tI2C_Ty≥Def
;

1048 
__IO
 
uöt32_t
 
KR
;

1049 
__IO
 
uöt32_t
 
PR
;

1050 
__IO
 
uöt32_t
 
RLR
;

1051 
__IO
 
uöt32_t
 
SR
;

1052 } 
	tIWDG_Ty≥Def
;

1060 
uöt32_t
 
RESERVED0
[2];

1061 
__IO
 
uöt32_t
 
SSCR
;

1062 
__IO
 
uöt32_t
 
BPCR
;

1063 
__IO
 
uöt32_t
 
AWCR
;

1064 
__IO
 
uöt32_t
 
TWCR
;

1065 
__IO
 
uöt32_t
 
GCR
;

1066 
uöt32_t
 
RESERVED1
[2];

1067 
__IO
 
uöt32_t
 
SRCR
;

1068 
uöt32_t
 
RESERVED2
[1];

1069 
__IO
 
uöt32_t
 
BCCR
;

1070 
uöt32_t
 
RESERVED3
[1];

1071 
__IO
 
uöt32_t
 
IER
;

1072 
__IO
 
uöt32_t
 
ISR
;

1073 
__IO
 
uöt32_t
 
ICR
;

1074 
__IO
 
uöt32_t
 
LIPCR
;

1075 
__IO
 
uöt32_t
 
CPSR
;

1076 
__IO
 
uöt32_t
 
CDSR
;

1077 } 
	tLTDC_Ty≥Def
;

1085 
__IO
 
uöt32_t
 
CR
;

1086 
__IO
 
uöt32_t
 
WHPCR
;

1087 
__IO
 
uöt32_t
 
WVPCR
;

1088 
__IO
 
uöt32_t
 
CKCR
;

1089 
__IO
 
uöt32_t
 
PFCR
;

1090 
__IO
 
uöt32_t
 
CACR
;

1091 
__IO
 
uöt32_t
 
DCCR
;

1092 
__IO
 
uöt32_t
 
BFCR
;

1093 
uöt32_t
 
RESERVED0
[2];

1094 
__IO
 
uöt32_t
 
CFBAR
;

1095 
__IO
 
uöt32_t
 
CFBLR
;

1096 
__IO
 
uöt32_t
 
CFBLNR
;

1097 
uöt32_t
 
RESERVED1
[3];

1098 
__IO
 
uöt32_t
 
CLUTWR
;

1100 } 
	tLTDC_Layî_Ty≥Def
;

1108 
__IO
 
uöt32_t
 
CR
;

1109 
__IO
 
uöt32_t
 
CSR
;

1110 } 
	tPWR_Ty≥Def
;

1118 
__IO
 
uöt32_t
 
CR
;

1119 
__IO
 
uöt32_t
 
PLLCFGR
;

1120 
__IO
 
uöt32_t
 
CFGR
;

1121 
__IO
 
uöt32_t
 
CIR
;

1122 
__IO
 
uöt32_t
 
AHB1RSTR
;

1123 
__IO
 
uöt32_t
 
AHB2RSTR
;

1124 
__IO
 
uöt32_t
 
AHB3RSTR
;

1125 
uöt32_t
 
RESERVED0
;

1126 
__IO
 
uöt32_t
 
APB1RSTR
;

1127 
__IO
 
uöt32_t
 
APB2RSTR
;

1128 
uöt32_t
 
RESERVED1
[2];

1129 
__IO
 
uöt32_t
 
AHB1ENR
;

1130 
__IO
 
uöt32_t
 
AHB2ENR
;

1131 
__IO
 
uöt32_t
 
AHB3ENR
;

1132 
uöt32_t
 
RESERVED2
;

1133 
__IO
 
uöt32_t
 
APB1ENR
;

1134 
__IO
 
uöt32_t
 
APB2ENR
;

1135 
uöt32_t
 
RESERVED3
[2];

1136 
__IO
 
uöt32_t
 
AHB1LPENR
;

1137 
__IO
 
uöt32_t
 
AHB2LPENR
;

1138 
__IO
 
uöt32_t
 
AHB3LPENR
;

1139 
uöt32_t
 
RESERVED4
;

1140 
__IO
 
uöt32_t
 
APB1LPENR
;

1141 
__IO
 
uöt32_t
 
APB2LPENR
;

1142 
uöt32_t
 
RESERVED5
[2];

1143 
__IO
 
uöt32_t
 
BDCR
;

1144 
__IO
 
uöt32_t
 
CSR
;

1145 
uöt32_t
 
RESERVED6
[2];

1146 
__IO
 
uöt32_t
 
SSCGR
;

1147 
__IO
 
uöt32_t
 
PLLI2SCFGR
;

1148 
__IO
 
uöt32_t
 
PLLSAICFGR
;

1149 
__IO
 
uöt32_t
 
DCKCFGR
;

1151 } 
	tRCC_Ty≥Def
;

1159 
__IO
 
uöt32_t
 
TR
;

1160 
__IO
 
uöt32_t
 
DR
;

1161 
__IO
 
uöt32_t
 
CR
;

1162 
__IO
 
uöt32_t
 
ISR
;

1163 
__IO
 
uöt32_t
 
PRER
;

1164 
__IO
 
uöt32_t
 
WUTR
;

1165 
__IO
 
uöt32_t
 
CALIBR
;

1166 
__IO
 
uöt32_t
 
ALRMAR
;

1167 
__IO
 
uöt32_t
 
ALRMBR
;

1168 
__IO
 
uöt32_t
 
WPR
;

1169 
__IO
 
uöt32_t
 
SSR
;

1170 
__IO
 
uöt32_t
 
SHIFTR
;

1171 
__IO
 
uöt32_t
 
TSTR
;

1172 
__IO
 
uöt32_t
 
TSDR
;

1173 
__IO
 
uöt32_t
 
TSSSR
;

1174 
__IO
 
uöt32_t
 
CALR
;

1175 
__IO
 
uöt32_t
 
TAFCR
;

1176 
__IO
 
uöt32_t
 
ALRMASSR
;

1177 
__IO
 
uöt32_t
 
ALRMBSSR
;

1178 
uöt32_t
 
RESERVED7
;

1179 
__IO
 
uöt32_t
 
BKP0R
;

1180 
__IO
 
uöt32_t
 
BKP1R
;

1181 
__IO
 
uöt32_t
 
BKP2R
;

1182 
__IO
 
uöt32_t
 
BKP3R
;

1183 
__IO
 
uöt32_t
 
BKP4R
;

1184 
__IO
 
uöt32_t
 
BKP5R
;

1185 
__IO
 
uöt32_t
 
BKP6R
;

1186 
__IO
 
uöt32_t
 
BKP7R
;

1187 
__IO
 
uöt32_t
 
BKP8R
;

1188 
__IO
 
uöt32_t
 
BKP9R
;

1189 
__IO
 
uöt32_t
 
BKP10R
;

1190 
__IO
 
uöt32_t
 
BKP11R
;

1191 
__IO
 
uöt32_t
 
BKP12R
;

1192 
__IO
 
uöt32_t
 
BKP13R
;

1193 
__IO
 
uöt32_t
 
BKP14R
;

1194 
__IO
 
uöt32_t
 
BKP15R
;

1195 
__IO
 
uöt32_t
 
BKP16R
;

1196 
__IO
 
uöt32_t
 
BKP17R
;

1197 
__IO
 
uöt32_t
 
BKP18R
;

1198 
__IO
 
uöt32_t
 
BKP19R
;

1199 } 
	tRTC_Ty≥Def
;

1208 
__IO
 
uöt32_t
 
GCR
;

1209 } 
	tSAI_Ty≥Def
;

1213 
__IO
 
uöt32_t
 
CR1
;

1214 
__IO
 
uöt32_t
 
CR2
;

1215 
__IO
 
uöt32_t
 
FRCR
;

1216 
__IO
 
uöt32_t
 
SLOTR
;

1217 
__IO
 
uöt32_t
 
IMR
;

1218 
__IO
 
uöt32_t
 
SR
;

1219 
__IO
 
uöt32_t
 
CLRFR
;

1220 
__IO
 
uöt32_t
 
DR
;

1221 } 
	tSAI_Block_Ty≥Def
;

1229 
__IO
 
uöt32_t
 
POWER
;

1230 
__IO
 
uöt32_t
 
CLKCR
;

1231 
__IO
 
uöt32_t
 
ARG
;

1232 
__IO
 
uöt32_t
 
CMD
;

1233 
__I
 
uöt32_t
 
RESPCMD
;

1234 
__I
 
uöt32_t
 
RESP1
;

1235 
__I
 
uöt32_t
 
RESP2
;

1236 
__I
 
uöt32_t
 
RESP3
;

1237 
__I
 
uöt32_t
 
RESP4
;

1238 
__IO
 
uöt32_t
 
DTIMER
;

1239 
__IO
 
uöt32_t
 
DLEN
;

1240 
__IO
 
uöt32_t
 
DCTRL
;

1241 
__I
 
uöt32_t
 
DCOUNT
;

1242 
__I
 
uöt32_t
 
STA
;

1243 
__IO
 
uöt32_t
 
ICR
;

1244 
__IO
 
uöt32_t
 
MASK
;

1245 
uöt32_t
 
RESERVED0
[2];

1246 
__I
 
uöt32_t
 
FIFOCNT
;

1247 
uöt32_t
 
RESERVED1
[13];

1248 
__IO
 
uöt32_t
 
FIFO
;

1249 } 
	tSDIO_Ty≥Def
;

1257 
__IO
 
uöt16_t
 
CR1
;

1258 
uöt16_t
 
RESERVED0
;

1259 
__IO
 
uöt16_t
 
CR2
;

1260 
uöt16_t
 
RESERVED1
;

1261 
__IO
 
uöt16_t
 
SR
;

1262 
uöt16_t
 
RESERVED2
;

1263 
__IO
 
uöt16_t
 
DR
;

1264 
uöt16_t
 
RESERVED3
;

1265 
__IO
 
uöt16_t
 
CRCPR
;

1266 
uöt16_t
 
RESERVED4
;

1267 
__IO
 
uöt16_t
 
RXCRCR
;

1268 
uöt16_t
 
RESERVED5
;

1269 
__IO
 
uöt16_t
 
TXCRCR
;

1270 
uöt16_t
 
RESERVED6
;

1271 
__IO
 
uöt16_t
 
I2SCFGR
;

1272 
uöt16_t
 
RESERVED7
;

1273 
__IO
 
uöt16_t
 
I2SPR
;

1274 
uöt16_t
 
RESERVED8
;

1275 } 
	tSPI_Ty≥Def
;

1283 
__IO
 
uöt16_t
 
CR1
;

1284 
uöt16_t
 
RESERVED0
;

1285 
__IO
 
uöt16_t
 
CR2
;

1286 
uöt16_t
 
RESERVED1
;

1287 
__IO
 
uöt16_t
 
SMCR
;

1288 
uöt16_t
 
RESERVED2
;

1289 
__IO
 
uöt16_t
 
DIER
;

1290 
uöt16_t
 
RESERVED3
;

1291 
__IO
 
uöt16_t
 
SR
;

1292 
uöt16_t
 
RESERVED4
;

1293 
__IO
 
uöt16_t
 
EGR
;

1294 
uöt16_t
 
RESERVED5
;

1295 
__IO
 
uöt16_t
 
CCMR1
;

1296 
uöt16_t
 
RESERVED6
;

1297 
__IO
 
uöt16_t
 
CCMR2
;

1298 
uöt16_t
 
RESERVED7
;

1299 
__IO
 
uöt16_t
 
CCER
;

1300 
uöt16_t
 
RESERVED8
;

1301 
__IO
 
uöt32_t
 
CNT
;

1302 
__IO
 
uöt16_t
 
PSC
;

1303 
uöt16_t
 
RESERVED9
;

1304 
__IO
 
uöt32_t
 
ARR
;

1305 
__IO
 
uöt16_t
 
RCR
;

1306 
uöt16_t
 
RESERVED10
;

1307 
__IO
 
uöt32_t
 
CCR1
;

1308 
__IO
 
uöt32_t
 
CCR2
;

1309 
__IO
 
uöt32_t
 
CCR3
;

1310 
__IO
 
uöt32_t
 
CCR4
;

1311 
__IO
 
uöt16_t
 
BDTR
;

1312 
uöt16_t
 
RESERVED11
;

1313 
__IO
 
uöt16_t
 
DCR
;

1314 
uöt16_t
 
RESERVED12
;

1315 
__IO
 
uöt16_t
 
DMAR
;

1316 
uöt16_t
 
RESERVED13
;

1317 
__IO
 
uöt16_t
 
OR
;

1318 
uöt16_t
 
RESERVED14
;

1319 } 
	tTIM_Ty≥Def
;

1327 
__IO
 
uöt16_t
 
SR
;

1328 
uöt16_t
 
RESERVED0
;

1329 
__IO
 
uöt16_t
 
DR
;

1330 
uöt16_t
 
RESERVED1
;

1331 
__IO
 
uöt16_t
 
BRR
;

1332 
uöt16_t
 
RESERVED2
;

1333 
__IO
 
uöt16_t
 
CR1
;

1334 
uöt16_t
 
RESERVED3
;

1335 
__IO
 
uöt16_t
 
CR2
;

1336 
uöt16_t
 
RESERVED4
;

1337 
__IO
 
uöt16_t
 
CR3
;

1338 
uöt16_t
 
RESERVED5
;

1339 
__IO
 
uöt16_t
 
GTPR
;

1340 
uöt16_t
 
RESERVED6
;

1341 } 
	tUSART_Ty≥Def
;

1349 
__IO
 
uöt32_t
 
CR
;

1350 
__IO
 
uöt32_t
 
CFR
;

1351 
__IO
 
uöt32_t
 
SR
;

1352 } 
	tWWDG_Ty≥Def
;

1360 
__IO
 
uöt32_t
 
CR
;

1361 
__IO
 
uöt32_t
 
SR
;

1362 
__IO
 
uöt32_t
 
DR
;

1363 
__IO
 
uöt32_t
 
DOUT
;

1364 
__IO
 
uöt32_t
 
DMACR
;

1365 
__IO
 
uöt32_t
 
IMSCR
;

1366 
__IO
 
uöt32_t
 
RISR
;

1367 
__IO
 
uöt32_t
 
MISR
;

1368 
__IO
 
uöt32_t
 
K0LR
;

1369 
__IO
 
uöt32_t
 
K0RR
;

1370 
__IO
 
uöt32_t
 
K1LR
;

1371 
__IO
 
uöt32_t
 
K1RR
;

1372 
__IO
 
uöt32_t
 
K2LR
;

1373 
__IO
 
uöt32_t
 
K2RR
;

1374 
__IO
 
uöt32_t
 
K3LR
;

1375 
__IO
 
uöt32_t
 
K3RR
;

1376 
__IO
 
uöt32_t
 
IV0LR
;

1377 
__IO
 
uöt32_t
 
IV0RR
;

1378 
__IO
 
uöt32_t
 
IV1LR
;

1379 
__IO
 
uöt32_t
 
IV1RR
;

1380 
__IO
 
uöt32_t
 
CSGCMCCM0R
;

1381 
__IO
 
uöt32_t
 
CSGCMCCM1R
;

1382 
__IO
 
uöt32_t
 
CSGCMCCM2R
;

1383 
__IO
 
uöt32_t
 
CSGCMCCM3R
;

1384 
__IO
 
uöt32_t
 
CSGCMCCM4R
;

1385 
__IO
 
uöt32_t
 
CSGCMCCM5R
;

1386 
__IO
 
uöt32_t
 
CSGCMCCM6R
;

1387 
__IO
 
uöt32_t
 
CSGCMCCM7R
;

1388 
__IO
 
uöt32_t
 
CSGCM0R
;

1389 
__IO
 
uöt32_t
 
CSGCM1R
;

1390 
__IO
 
uöt32_t
 
CSGCM2R
;

1391 
__IO
 
uöt32_t
 
CSGCM3R
;

1392 
__IO
 
uöt32_t
 
CSGCM4R
;

1393 
__IO
 
uöt32_t
 
CSGCM5R
;

1394 
__IO
 
uöt32_t
 
CSGCM6R
;

1395 
__IO
 
uöt32_t
 
CSGCM7R
;

1396 } 
	tCRYP_Ty≥Def
;

1404 
__IO
 
uöt32_t
 
CR
;

1405 
__IO
 
uöt32_t
 
DIN
;

1406 
__IO
 
uöt32_t
 
STR
;

1407 
__IO
 
uöt32_t
 
HR
[5];

1408 
__IO
 
uöt32_t
 
IMR
;

1409 
__IO
 
uöt32_t
 
SR
;

1410 
uöt32_t
 
RESERVED
[52];

1411 
__IO
 
uöt32_t
 
CSR
[54];

1412 } 
	tHASH_Ty≥Def
;

1420 
__IO
 
uöt32_t
 
HR
[8];

1421 } 
	tHASH_DIGEST_Ty≥Def
;

1429 
__IO
 
uöt32_t
 
CR
;

1430 
__IO
 
uöt32_t
 
SR
;

1431 
__IO
 
uöt32_t
 
DR
;

1432 } 
	tRNG_Ty≥Def
;

1441 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1442 
	#CCMDATARAM_BASE
 ((
uöt32_t
)0x10000000Ë

	)

1443 
	#SRAM1_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1444 
	#SRAM2_BASE
 ((
uöt32_t
)0x2001C000Ë

	)

1445 
	#SRAM3_BASE
 ((
uöt32_t
)0x20020000Ë

	)

1446 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1447 
	#BKPSRAM_BASE
 ((
uöt32_t
)0x40024000Ë

	)

1449 #i‡
deföed
 (
STM32F40_41xxx
)

1450 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1453 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1454 
	#FMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1457 
	#CCMDATARAM_BB_BASE
 ((
uöt32_t
)0x12000000Ë

	)

1458 
	#SRAM1_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1459 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x2201C000Ë

	)

1460 
	#SRAM3_BB_BASE
 ((
uöt32_t
)0x22400000Ë

	)

1461 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1462 
	#BKPSRAM_BB_BASE
 ((
uöt32_t
)0x42024000Ë

	)

1465 
	#SRAM_BASE
 
SRAM1_BASE


	)

1466 
	#SRAM_BB_BASE
 
SRAM1_BB_BASE


	)

1470 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1471 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

1472 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

1473 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

1476 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1477 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1478 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1479 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1480 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1481 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1482 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1483 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1484 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1485 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1486 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1487 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1488 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x3400)

	)

1489 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1490 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1491 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

1492 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1493 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1494 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1495 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1496 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1497 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1498 
	#I2C3_BASE
 (
APB1PERIPH_BASE
 + 0x5C00)

	)

1499 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1500 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1501 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1502 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1503 
	#UART7_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1504 
	#UART8_BASE
 (
APB1PERIPH_BASE
 + 0x7C00)

	)

1507 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1508 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1509 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1510 
	#USART6_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1511 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1512 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2100)

	)

1513 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x2200)

	)

1514 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2300)

	)

1515 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1516 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1517 
	#SPI4_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1518 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1519 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1520 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1521 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1522 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1523 
	#SPI5_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1524 
	#SPI6_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1525 
	#SAI1_BASE
 (
APB2PERIPH_BASE
 + 0x5800)

	)

1526 
	#SAI1_Block_A_BASE
 (
SAI1_BASE
 + 0x004)

	)

1527 
	#SAI1_Block_B_BASE
 (
SAI1_BASE
 + 0x024)

	)

1528 
	#LTDC_BASE
 (
APB2PERIPH_BASE
 + 0x6800)

	)

1529 
	#LTDC_Layî1_BASE
 (
LTDC_BASE
 + 0x84)

	)

1530 
	#LTDC_Layî2_BASE
 (
LTDC_BASE
 + 0x104)

	)

1533 
	#GPIOA_BASE
 (
AHB1PERIPH_BASE
 + 0x0000)

	)

1534 
	#GPIOB_BASE
 (
AHB1PERIPH_BASE
 + 0x0400)

	)

1535 
	#GPIOC_BASE
 (
AHB1PERIPH_BASE
 + 0x0800)

	)

1536 
	#GPIOD_BASE
 (
AHB1PERIPH_BASE
 + 0x0C00)

	)

1537 
	#GPIOE_BASE
 (
AHB1PERIPH_BASE
 + 0x1000)

	)

1538 
	#GPIOF_BASE
 (
AHB1PERIPH_BASE
 + 0x1400)

	)

1539 
	#GPIOG_BASE
 (
AHB1PERIPH_BASE
 + 0x1800)

	)

1540 
	#GPIOH_BASE
 (
AHB1PERIPH_BASE
 + 0x1C00)

	)

1541 
	#GPIOI_BASE
 (
AHB1PERIPH_BASE
 + 0x2000)

	)

1542 
	#GPIOJ_BASE
 (
AHB1PERIPH_BASE
 + 0x2400)

	)

1543 
	#GPIOK_BASE
 (
AHB1PERIPH_BASE
 + 0x2800)

	)

1544 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x3000)

	)

1545 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x3800)

	)

1546 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x3C00)

	)

1547 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x6000)

	)

1548 
	#DMA1_Såóm0_BASE
 (
DMA1_BASE
 + 0x010)

	)

1549 
	#DMA1_Såóm1_BASE
 (
DMA1_BASE
 + 0x028)

	)

1550 
	#DMA1_Såóm2_BASE
 (
DMA1_BASE
 + 0x040)

	)

1551 
	#DMA1_Såóm3_BASE
 (
DMA1_BASE
 + 0x058)

	)

1552 
	#DMA1_Såóm4_BASE
 (
DMA1_BASE
 + 0x070)

	)

1553 
	#DMA1_Såóm5_BASE
 (
DMA1_BASE
 + 0x088)

	)

1554 
	#DMA1_Såóm6_BASE
 (
DMA1_BASE
 + 0x0A0)

	)

1555 
	#DMA1_Såóm7_BASE
 (
DMA1_BASE
 + 0x0B8)

	)

1556 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x6400)

	)

1557 
	#DMA2_Såóm0_BASE
 (
DMA2_BASE
 + 0x010)

	)

1558 
	#DMA2_Såóm1_BASE
 (
DMA2_BASE
 + 0x028)

	)

1559 
	#DMA2_Såóm2_BASE
 (
DMA2_BASE
 + 0x040)

	)

1560 
	#DMA2_Såóm3_BASE
 (
DMA2_BASE
 + 0x058)

	)

1561 
	#DMA2_Såóm4_BASE
 (
DMA2_BASE
 + 0x070)

	)

1562 
	#DMA2_Såóm5_BASE
 (
DMA2_BASE
 + 0x088)

	)

1563 
	#DMA2_Såóm6_BASE
 (
DMA2_BASE
 + 0x0A0)

	)

1564 
	#DMA2_Såóm7_BASE
 (
DMA2_BASE
 + 0x0B8)

	)

1565 
	#ETH_BASE
 (
AHB1PERIPH_BASE
 + 0x8000)

	)

1566 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1567 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1568 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1569 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1570 
	#DMA2D_BASE
 (
AHB1PERIPH_BASE
 + 0xB000)

	)

1573 
	#DCMI_BASE
 (
AHB2PERIPH_BASE
 + 0x50000)

	)

1574 
	#CRYP_BASE
 (
AHB2PERIPH_BASE
 + 0x60000)

	)

1575 
	#HASH_BASE
 (
AHB2PERIPH_BASE
 + 0x60400)

	)

1576 
	#HASH_DIGEST_BASE
 (
AHB2PERIPH_BASE
 + 0x60710)

	)

1577 
	#RNG_BASE
 (
AHB2PERIPH_BASE
 + 0x60800)

	)

1579 #i‡
deföed
 (
STM32F40_41xxx
)

1581 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000)

	)

1582 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104)

	)

1583 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060)

	)

1584 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080)

	)

1585 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0)

	)

1588 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1590 
	#FMC_B™k1_R_BASE
 (
FMC_R_BASE
 + 0x0000)

	)

1591 
	#FMC_B™k1E_R_BASE
 (
FMC_R_BASE
 + 0x0104)

	)

1592 
	#FMC_B™k2_R_BASE
 (
FMC_R_BASE
 + 0x0060)

	)

1593 
	#FMC_B™k3_R_BASE
 (
FMC_R_BASE
 + 0x0080)

	)

1594 
	#FMC_B™k4_R_BASE
 (
FMC_R_BASE
 + 0x00A0)

	)

1595 
	#FMC_B™k5_6_R_BASE
 (
FMC_R_BASE
 + 0x0140)

	)

1599 
	#DBGMCU_BASE
 ((
uöt32_t
 )0xE0042000)

	)

1608 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1609 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1610 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1611 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1612 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1613 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1614 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1615 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1616 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1617 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1618 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1619 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1620 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

1621 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1622 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1623 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

1624 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1625 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1626 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1627 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1628 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1629 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1630 
	#I2C3
 ((
I2C_Ty≥Def
 *Ë
I2C3_BASE
)

	)

1631 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1632 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1633 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1634 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1635 
	#UART7
 ((
USART_Ty≥Def
 *Ë
UART7_BASE
)

	)

1636 
	#UART8
 ((
USART_Ty≥Def
 *Ë
UART8_BASE
)

	)

1637 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1638 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1639 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1640 
	#USART6
 ((
USART_Ty≥Def
 *Ë
USART6_BASE
)

	)

1641 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

1642 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1643 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1644 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1645 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1646 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1647 
	#SPI4
 ((
SPI_Ty≥Def
 *Ë
SPI4_BASE
)

	)

1648 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

1649 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1650 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1651 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1652 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1653 
	#SPI5
 ((
SPI_Ty≥Def
 *Ë
SPI5_BASE
)

	)

1654 
	#SPI6
 ((
SPI_Ty≥Def
 *Ë
SPI6_BASE
)

	)

1655 
	#SAI1
 ((
SAI_Ty≥Def
 *Ë
SAI1_BASE
)

	)

1656 
	#SAI1_Block_A
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_A_BASE
)

	)

1657 
	#SAI1_Block_B
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_B_BASE
)

	)

1658 
	#LTDC
 ((
LTDC_Ty≥Def
 *)
LTDC_BASE
)

	)

1659 
	#LTDC_Layî1
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî1_BASE
)

	)

1660 
	#LTDC_Layî2
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî2_BASE
)

	)

1661 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1662 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1663 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1664 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1665 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1666 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1667 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1668 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

1669 
	#GPIOI
 ((
GPIO_Ty≥Def
 *Ë
GPIOI_BASE
)

	)

1670 
	#GPIOJ
 ((
GPIO_Ty≥Def
 *Ë
GPIOJ_BASE
)

	)

1671 
	#GPIOK
 ((
GPIO_Ty≥Def
 *Ë
GPIOK_BASE
)

	)

1672 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1673 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1674 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1675 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1676 
	#DMA1_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm0_BASE
)

	)

1677 
	#DMA1_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm1_BASE
)

	)

1678 
	#DMA1_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm2_BASE
)

	)

1679 
	#DMA1_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm3_BASE
)

	)

1680 
	#DMA1_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm4_BASE
)

	)

1681 
	#DMA1_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm5_BASE
)

	)

1682 
	#DMA1_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm6_BASE
)

	)

1683 
	#DMA1_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm7_BASE
)

	)

1684 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1685 
	#DMA2_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm0_BASE
)

	)

1686 
	#DMA2_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm1_BASE
)

	)

1687 
	#DMA2_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm2_BASE
)

	)

1688 
	#DMA2_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm3_BASE
)

	)

1689 
	#DMA2_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm4_BASE
)

	)

1690 
	#DMA2_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm5_BASE
)

	)

1691 
	#DMA2_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm6_BASE
)

	)

1692 
	#DMA2_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm7_BASE
)

	)

1693 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1694 
	#DMA2D
 ((
DMA2D_Ty≥Def
 *)
DMA2D_BASE
)

	)

1695 
	#DCMI
 ((
DCMI_Ty≥Def
 *Ë
DCMI_BASE
)

	)

1696 
	#CRYP
 ((
CRYP_Ty≥Def
 *Ë
CRYP_BASE
)

	)

1697 
	#HASH
 ((
HASH_Ty≥Def
 *Ë
HASH_BASE
)

	)

1698 
	#HASH_DIGEST
 ((
HASH_DIGEST_Ty≥Def
 *Ë
HASH_DIGEST_BASE
)

	)

1699 
	#RNG
 ((
RNG_Ty≥Def
 *Ë
RNG_BASE
)

	)

1701 #i‡
deföed
 (
STM32F40_41xxx
)

1702 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1703 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1704 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1705 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1706 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1709 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1710 
	#FMC_B™k1
 ((
FMC_B™k1_Ty≥Def
 *Ë
FMC_B™k1_R_BASE
)

	)

1711 
	#FMC_B™k1E
 ((
FMC_B™k1E_Ty≥Def
 *Ë
FMC_B™k1E_R_BASE
)

	)

1712 
	#FMC_B™k2
 ((
FMC_B™k2_Ty≥Def
 *Ë
FMC_B™k2_R_BASE
)

	)

1713 
	#FMC_B™k3
 ((
FMC_B™k3_Ty≥Def
 *Ë
FMC_B™k3_R_BASE
)

	)

1714 
	#FMC_B™k4
 ((
FMC_B™k4_Ty≥Def
 *Ë
FMC_B™k4_R_BASE
)

	)

1715 
	#FMC_B™k5_6
 ((
FMC_B™k5_6_Ty≥Def
 *Ë
FMC_B™k5_6_R_BASE
)

	)

1718 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1742 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

1743 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

1744 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

1745 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

1746 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

1747 
	#ADC_SR_OVR
 ((
uöt8_t
)0x20Ë

	)

1750 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

1751 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

1752 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

1753 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

1754 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

1755 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

1756 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

1757 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

1758 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

1759 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

1760 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

1761 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

1762 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

1763 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

1764 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

1765 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

1766 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

1767 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

1768 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

1769 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

1770 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

1771 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

1772 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

1773 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

1776 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

1777 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

1778 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

1779 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

1780 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

1781 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

1782 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

1783 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

1784 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

1785 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

1786 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

1787 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

1788 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

1789 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

1790 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

1791 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

1792 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

1793 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

1794 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

1795 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

1796 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

1797 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

1798 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

1799 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

1802 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

1803 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

1804 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

1805 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

1806 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

1807 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

1808 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

1809 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

1810 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

1811 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

1812 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

1813 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

1814 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

1815 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

1816 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

1817 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

1818 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

1819 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

1820 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

1821 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

1822 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

1823 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

1824 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

1825 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

1826 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

1827 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

1828 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

1829 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

1830 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

1831 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

1832 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

1833 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

1834 
	#ADC_SMPR1_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

1835 
	#ADC_SMPR1_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

1836 
	#ADC_SMPR1_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

1837 
	#ADC_SMPR1_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

1840 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

1841 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

1842 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

1843 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

1844 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

1845 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

1846 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

1847 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

1848 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

1849 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

1850 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

1851 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

1852 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

1853 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

1854 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

1855 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

1856 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

1857 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

1858 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

1859 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

1860 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

1861 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

1862 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

1863 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

1864 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

1865 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

1866 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

1867 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

1868 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

1869 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

1870 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

1871 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

1872 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

1873 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

1874 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

1875 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

1876 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

1877 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

1878 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

1879 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

1882 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

1885 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

1888 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

1891 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

1894 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

1897 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

1900 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

1901 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

1902 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

1903 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

1904 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

1905 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

1906 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

1907 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

1908 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

1909 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

1910 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

1911 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

1912 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

1913 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

1914 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

1915 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

1916 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

1917 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

1918 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

1919 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

1920 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

1921 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

1922 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

1923 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

1924 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

1925 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

1926 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

1927 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

1928 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

1931 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

1932 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

1933 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

1934 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

1935 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

1936 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

1937 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

1938 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

1939 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

1940 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

1941 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

1942 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

1943 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

1944 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

1945 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

1946 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

1947 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

1948 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

1949 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

1950 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

1951 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

1952 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

1953 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

1954 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

1955 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

1956 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

1957 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

1958 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

1959 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

1960 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

1961 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

1962 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

1963 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

1964 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

1965 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

1966 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

1969 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

1970 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1971 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1972 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1973 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1974 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1975 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1976 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1977 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1978 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1979 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1980 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1981 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1982 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1983 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1984 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1985 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1986 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1987 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1988 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1989 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1990 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1991 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1992 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1993 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

1994 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

1995 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

1996 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

1997 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

1998 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

1999 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

2000 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

2001 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

2002 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

2003 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

2004 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

2007 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

2008 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2009 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2010 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2011 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2012 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2013 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2014 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2015 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2016 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2017 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2018 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2019 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2020 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2021 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2022 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2023 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2024 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2025 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2026 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2027 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2028 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2029 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2030 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2031 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

2032 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

2033 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

2036 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2039 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2042 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2045 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2048 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

2049 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

2052 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

2053 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

2054 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

2055 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

2056 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

2057 
	#ADC_CSR_DOVR1
 ((
uöt32_t
)0x00000020Ë

	)

2058 
	#ADC_CSR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

2059 
	#ADC_CSR_EOC2
 ((
uöt32_t
)0x00000200Ë

	)

2060 
	#ADC_CSR_JEOC2
 ((
uöt32_t
)0x00000400Ë

	)

2061 
	#ADC_CSR_JSTRT2
 ((
uöt32_t
)0x00000800Ë

	)

2062 
	#ADC_CSR_STRT2
 ((
uöt32_t
)0x00001000Ë

	)

2063 
	#ADC_CSR_DOVR2
 ((
uöt32_t
)0x00002000Ë

	)

2064 
	#ADC_CSR_AWD3
 ((
uöt32_t
)0x00010000Ë

	)

2065 
	#ADC_CSR_EOC3
 ((
uöt32_t
)0x00020000Ë

	)

2066 
	#ADC_CSR_JEOC3
 ((
uöt32_t
)0x00040000Ë

	)

2067 
	#ADC_CSR_JSTRT3
 ((
uöt32_t
)0x00080000Ë

	)

2068 
	#ADC_CSR_STRT3
 ((
uöt32_t
)0x00100000Ë

	)

2069 
	#ADC_CSR_DOVR3
 ((
uöt32_t
)0x00200000Ë

	)

2072 
	#ADC_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

2073 
	#ADC_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

2074 
	#ADC_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

2075 
	#ADC_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

2076 
	#ADC_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

2077 
	#ADC_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

2078 
	#ADC_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

2079 
	#ADC_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

2080 
	#ADC_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

2081 
	#ADC_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

2082 
	#ADC_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

2083 
	#ADC_CCR_DDS
 ((
uöt32_t
)0x00002000Ë

	)

2084 
	#ADC_CCR_DMA
 ((
uöt32_t
)0x0000C000Ë

	)

2085 
	#ADC_CCR_DMA_0
 ((
uöt32_t
)0x00004000Ë

	)

2086 
	#ADC_CCR_DMA_1
 ((
uöt32_t
)0x00008000Ë

	)

2087 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

2088 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

2089 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

2090 
	#ADC_CCR_VBATE
 ((
uöt32_t
)0x00400000Ë

	)

2091 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

2094 
	#ADC_CDR_DATA1
 ((
uöt32_t
)0x0000FFFFË

	)

2095 
	#ADC_CDR_DATA2
 ((
uöt32_t
)0xFFFF0000Ë

	)

2104 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

2105 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

2106 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

2107 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

2108 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

2109 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

2110 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

2111 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

2112 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

2115 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

2116 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

2117 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

2118 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

2119 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

2120 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

2121 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

2122 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

2123 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

2126 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

2127 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

2128 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

2129 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

2130 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

2131 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

2132 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

2133 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

2134 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

2135 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

2136 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

2137 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

2138 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

2139 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

2140 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

2141 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

2143 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

2144 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

2145 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

2146 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

2148 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

2149 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

2150 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

2151 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

2154 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

2155 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

2156 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

2157 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

2160 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

2161 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

2162 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

2163 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

2166 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

2167 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

2168 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

2169 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

2170 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

2171 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

2172 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

2173 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

2174 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

2175 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

2176 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

2177 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

2178 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

2179 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

2182 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

2183 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

2184 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

2186 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

2187 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

2188 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

2189 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

2191 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

2192 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

2195 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

2196 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

2197 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

2198 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

2199 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

2200 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

2204 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2205 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2206 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2207 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2208 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2211 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2212 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2213 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2216 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2217 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2218 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2219 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2222 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2223 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2224 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2225 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2228 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2229 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2230 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2231 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2232 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2235 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2236 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2237 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2240 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2241 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2242 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2243 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2246 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2247 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2248 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2249 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2252 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2253 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2254 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2255 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2256 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2259 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2260 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2261 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2264 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2265 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2266 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2267 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2270 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2271 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2272 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2273 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2276 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2277 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2278 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2279 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2282 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2283 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2284 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2287 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2288 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2289 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2290 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2293 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2294 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2295 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2296 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2299 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2300 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2301 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2302 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2305 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2306 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2307 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2310 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2311 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2312 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2313 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2316 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2317 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2318 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2319 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2323 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

2326 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

2327 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

2328 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

2329 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

2330 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

2331 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

2332 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

2333 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

2334 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

2335 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

2336 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

2337 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

2338 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

2339 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

2340 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

2343 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

2344 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

2345 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

2346 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

2347 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

2348 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

2349 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

2350 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

2351 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

2352 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

2353 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

2354 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

2355 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

2356 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

2357 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

2360 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

2361 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

2362 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

2363 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

2364 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

2365 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

2366 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

2367 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

2368 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

2369 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

2370 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

2371 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

2372 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

2373 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

2374 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

2377 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

2378 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

2379 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

2380 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

2381 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

2382 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

2383 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

2384 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

2385 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

2386 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

2387 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

2388 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

2389 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

2390 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

2391 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

2394 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2395 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2396 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2397 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2398 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2399 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2400 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2401 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2402 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2403 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2404 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2405 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2406 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2407 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2408 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2409 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2410 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2411 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2412 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2413 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2414 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2415 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2416 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2417 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2418 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2419 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2420 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2421 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2422 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2423 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2424 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2425 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2428 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2429 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2430 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2431 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2432 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2433 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2434 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2435 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2436 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2437 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2438 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2439 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2440 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2441 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2442 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2443 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2444 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2445 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2446 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2447 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2448 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2449 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2450 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2451 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2452 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2453 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2454 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2455 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2456 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2457 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2458 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2459 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2462 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2463 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2464 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2465 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2466 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2467 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2468 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2469 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2470 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2471 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2472 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2473 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2474 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2475 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2476 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2477 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2478 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2479 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2480 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2481 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2482 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2483 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2484 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2485 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2486 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2487 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2488 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2489 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2490 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2491 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2492 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2493 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2496 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2497 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2498 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2499 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2500 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2501 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2502 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2503 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2504 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2505 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2506 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2507 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2508 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2509 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2510 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2511 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2512 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2513 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2514 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2515 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2516 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2517 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2518 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2519 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2520 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2521 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2522 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2523 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2524 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2525 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2526 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2527 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2530 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2531 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2532 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2533 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2534 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2535 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2536 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2537 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2538 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2539 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2540 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2541 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2542 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2543 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2544 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2545 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2546 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2547 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2548 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2549 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2550 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2551 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2552 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2553 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2554 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2555 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2556 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2557 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2558 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2559 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2560 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2561 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2564 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2565 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2566 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2567 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2568 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2569 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2570 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2571 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2572 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2573 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2574 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2575 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2576 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2577 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2578 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2579 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2580 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2581 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2582 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2583 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2584 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2585 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2586 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2587 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2588 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2589 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2590 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2591 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2592 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2593 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2594 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2595 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2598 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2599 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2600 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2601 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2602 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2603 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2604 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2605 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2606 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2607 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2608 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2609 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2610 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2611 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2612 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2613 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2614 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2615 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2616 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2617 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2618 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2619 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2620 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2621 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2622 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2623 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2624 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2625 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2626 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2627 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2628 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2629 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2632 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2633 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2634 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2635 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2636 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2637 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2638 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2639 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2640 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2641 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2642 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2643 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2644 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2645 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2646 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2647 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2648 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2649 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2650 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2651 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2652 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2653 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2654 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2655 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2656 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2657 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2658 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2659 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2660 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2661 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2662 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2663 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2666 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2667 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2668 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2669 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2670 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2671 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2672 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2673 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2674 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2675 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2676 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2677 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2678 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2679 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2680 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2681 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2682 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2683 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2684 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2685 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2686 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2687 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2688 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2689 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2690 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2691 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2692 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2693 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2694 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2695 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2696 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2697 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2700 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2701 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2702 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2703 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2704 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2705 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2706 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2707 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2708 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2709 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2710 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2711 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2712 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2713 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2714 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2715 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2716 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2717 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2718 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2719 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2720 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2721 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2722 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2723 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2724 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2725 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2726 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2727 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2728 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2729 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2730 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2731 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2734 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2735 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2736 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2737 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2738 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2739 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2740 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2741 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2742 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2743 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2744 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2745 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2746 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2747 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2748 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2749 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2750 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2751 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2752 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2753 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2754 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2755 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2756 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2757 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2758 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2759 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2760 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2761 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2762 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2763 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2764 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2765 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2768 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2769 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2770 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2771 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2772 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2773 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2774 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2775 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2776 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2777 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2778 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2779 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2780 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2781 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2782 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2783 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2784 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2785 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2786 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2787 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2788 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2789 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2790 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2791 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2792 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2793 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2794 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2795 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2796 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2797 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2798 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2799 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2802 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2803 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2804 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2805 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2806 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2807 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2808 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2809 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2810 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2811 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2812 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2813 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2814 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2815 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2816 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2817 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2818 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2819 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2820 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2821 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2822 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2823 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2824 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2825 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2826 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2827 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2828 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2829 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2830 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2831 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2832 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2833 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2836 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2837 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2838 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2839 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2840 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2841 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2842 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2843 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2844 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2845 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2846 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2847 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2848 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2849 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2850 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2851 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2852 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2853 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2854 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2855 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2856 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2857 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2858 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2859 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2860 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2861 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2862 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2863 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2864 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2865 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2866 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2867 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2870 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2871 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2872 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2873 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2874 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2875 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2876 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2877 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2878 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2879 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2880 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2881 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2882 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2883 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2884 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2885 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2886 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2887 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2888 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2889 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2890 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2891 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2892 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2893 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2894 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2895 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2896 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2897 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2898 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2899 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2900 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2901 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2904 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2905 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2906 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2907 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2908 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2909 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2910 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2911 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2912 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2913 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2914 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2915 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2916 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2917 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2918 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2919 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2920 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2921 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2922 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2923 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2924 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2925 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2926 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2927 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2928 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2929 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2930 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2931 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2932 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2933 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2934 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2935 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2938 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2939 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2940 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2941 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2942 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2943 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2944 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2945 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2946 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2947 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2948 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2949 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2950 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2951 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2952 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2953 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2954 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2955 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2956 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2957 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2958 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2959 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2960 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2961 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2962 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2963 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2964 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2965 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2966 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2967 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2968 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2969 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2972 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2973 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2974 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2975 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2976 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2977 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2978 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2979 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2980 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2981 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2982 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2983 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2984 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2985 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2986 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2987 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2988 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2989 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2990 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2991 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2992 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2993 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2994 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2995 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2996 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2997 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2998 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2999 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3000 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3001 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3002 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3003 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3006 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3007 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3008 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3009 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3010 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3011 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3012 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3013 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3014 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3015 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3016 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3017 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3018 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3019 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3020 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3021 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3022 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3023 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3024 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3025 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3026 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3027 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3028 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3029 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3030 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3031 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3032 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3033 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3034 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3035 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3036 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3037 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3040 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3041 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3042 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3043 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3044 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3045 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3046 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3047 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3048 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3049 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3050 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3051 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3052 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3053 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3054 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3055 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3056 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3057 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3058 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3059 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3060 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3061 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3062 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3063 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3064 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3065 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3066 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3067 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3068 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3069 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3070 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3071 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3074 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3075 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3076 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3077 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3078 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3079 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3080 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3081 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3082 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3083 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3084 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3085 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3086 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3087 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3088 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3089 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3090 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3091 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3092 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3093 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3094 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3095 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3096 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3097 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3098 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3099 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3100 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3101 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3102 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3103 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3104 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3105 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3108 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3109 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3110 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3111 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3112 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3113 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3114 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3115 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3116 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3117 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3118 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3119 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3120 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3121 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3122 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3123 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3124 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3125 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3126 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3127 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3128 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3129 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3130 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3131 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3132 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3133 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3134 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3135 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3136 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3137 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3138 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3139 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3142 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3143 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3144 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3145 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3146 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3147 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3148 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3149 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3150 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3151 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3152 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3153 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3154 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3155 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3156 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3157 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3158 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3159 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3160 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3161 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3162 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3163 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3164 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3165 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3166 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3167 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3168 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3169 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3170 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3171 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3172 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3173 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3176 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3177 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3178 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3179 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3180 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3181 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3182 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3183 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3184 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3185 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3186 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3187 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3188 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3189 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3190 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3191 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3192 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3193 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3194 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3195 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3196 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3197 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3198 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3199 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3200 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3201 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3202 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3203 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3204 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3205 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3206 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3207 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3210 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3211 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3212 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3213 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3214 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3215 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3216 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3217 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3218 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3219 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3220 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3221 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3222 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3223 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3224 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3225 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3226 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3227 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3228 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3229 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3230 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3231 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3232 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3233 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3234 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3235 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3236 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3237 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3238 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3239 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3240 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3241 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3244 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3245 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3246 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3247 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3248 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3249 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3250 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3251 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3252 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3253 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3254 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3255 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3256 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3257 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3258 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3259 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3260 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3261 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3262 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3263 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3264 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3265 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3266 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3267 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3268 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3269 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3270 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3271 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3272 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3273 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3274 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3275 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3278 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3279 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3280 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3281 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3282 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3283 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3284 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3285 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3286 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3287 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3288 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3289 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3290 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3291 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3292 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3293 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3294 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3295 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3296 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3297 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3298 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3299 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3300 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3301 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3302 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3303 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3304 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3305 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3306 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3307 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3308 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3309 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3312 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3313 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3314 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3315 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3316 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3317 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3318 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3319 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3320 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3321 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3322 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3323 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3324 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3325 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3326 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3327 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3328 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3329 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3330 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3331 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3332 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3333 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3334 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3335 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3336 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3337 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3338 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3339 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3340 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3341 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3342 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3343 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3351 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3355 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

3359 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

3367 
	#CRYP_CR_ALGODIR
 ((
uöt32_t
)0x00000004)

	)

3369 
	#CRYP_CR_ALGOMODE
 ((
uöt32_t
)0x00080038)

	)

3370 
	#CRYP_CR_ALGOMODE_0
 ((
uöt32_t
)0x00000008)

	)

3371 
	#CRYP_CR_ALGOMODE_1
 ((
uöt32_t
)0x00000010)

	)

3372 
	#CRYP_CR_ALGOMODE_2
 ((
uöt32_t
)0x00000020)

	)

3373 
	#CRYP_CR_ALGOMODE_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

3374 
	#CRYP_CR_ALGOMODE_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

3375 
	#CRYP_CR_ALGOMODE_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

3376 
	#CRYP_CR_ALGOMODE_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

3377 
	#CRYP_CR_ALGOMODE_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

3378 
	#CRYP_CR_ALGOMODE_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

3379 
	#CRYP_CR_ALGOMODE_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

3380 
	#CRYP_CR_ALGOMODE_AES_KEY
 ((
uöt32_t
)0x00000038)

	)

3382 
	#CRYP_CR_DATATYPE
 ((
uöt32_t
)0x000000C0)

	)

3383 
	#CRYP_CR_DATATYPE_0
 ((
uöt32_t
)0x00000040)

	)

3384 
	#CRYP_CR_DATATYPE_1
 ((
uöt32_t
)0x00000080)

	)

3385 
	#CRYP_CR_KEYSIZE
 ((
uöt32_t
)0x00000300)

	)

3386 
	#CRYP_CR_KEYSIZE_0
 ((
uöt32_t
)0x00000100)

	)

3387 
	#CRYP_CR_KEYSIZE_1
 ((
uöt32_t
)0x00000200)

	)

3388 
	#CRYP_CR_FFLUSH
 ((
uöt32_t
)0x00004000)

	)

3389 
	#CRYP_CR_CRYPEN
 ((
uöt32_t
)0x00008000)

	)

3391 
	#CRYP_CR_GCM_CCMPH
 ((
uöt32_t
)0x00030000)

	)

3392 
	#CRYP_CR_GCM_CCMPH_0
 ((
uöt32_t
)0x00010000)

	)

3393 
	#CRYP_CR_GCM_CCMPH_1
 ((
uöt32_t
)0x00020000)

	)

3394 
	#CRYP_CR_ALGOMODE_3
 ((
uöt32_t
)0x00080000)

	)

3397 
	#CRYP_SR_IFEM
 ((
uöt32_t
)0x00000001)

	)

3398 
	#CRYP_SR_IFNF
 ((
uöt32_t
)0x00000002)

	)

3399 
	#CRYP_SR_OFNE
 ((
uöt32_t
)0x00000004)

	)

3400 
	#CRYP_SR_OFFU
 ((
uöt32_t
)0x00000008)

	)

3401 
	#CRYP_SR_BUSY
 ((
uöt32_t
)0x00000010)

	)

3403 
	#CRYP_DMACR_DIEN
 ((
uöt32_t
)0x00000001)

	)

3404 
	#CRYP_DMACR_DOEN
 ((
uöt32_t
)0x00000002)

	)

3406 
	#CRYP_IMSCR_INIM
 ((
uöt32_t
)0x00000001)

	)

3407 
	#CRYP_IMSCR_OUTIM
 ((
uöt32_t
)0x00000002)

	)

3409 
	#CRYP_RISR_OUTRIS
 ((
uöt32_t
)0x00000001)

	)

3410 
	#CRYP_RISR_INRIS
 ((
uöt32_t
)0x00000002)

	)

3412 
	#CRYP_MISR_INMIS
 ((
uöt32_t
)0x00000001)

	)

3413 
	#CRYP_MISR_OUTMIS
 ((
uöt32_t
)0x00000002)

	)

3421 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3422 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3423 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3425 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3426 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3427 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3428 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3430 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3431 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3432 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3434 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3435 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3436 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3437 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3438 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3440 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3441 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3442 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3443 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3445 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3446 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3447 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3448 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3450 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3451 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3452 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3454 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3455 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3456 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3457 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3458 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3460 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3463 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3464 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3467 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3470 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3473 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

3476 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

3479 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3482 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

3485 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3486 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3489 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3490 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3493 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3494 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3497 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3500 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3503 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

3504 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

3518 
	#DCMI_CR_CAPTURE
 ((
uöt32_t
)0x00000001)

	)

3519 
	#DCMI_CR_CM
 ((
uöt32_t
)0x00000002)

	)

3520 
	#DCMI_CR_CROP
 ((
uöt32_t
)0x00000004)

	)

3521 
	#DCMI_CR_JPEG
 ((
uöt32_t
)0x00000008)

	)

3522 
	#DCMI_CR_ESS
 ((
uöt32_t
)0x00000010)

	)

3523 
	#DCMI_CR_PCKPOL
 ((
uöt32_t
)0x00000020)

	)

3524 
	#DCMI_CR_HSPOL
 ((
uöt32_t
)0x00000040)

	)

3525 
	#DCMI_CR_VSPOL
 ((
uöt32_t
)0x00000080)

	)

3526 
	#DCMI_CR_FCRC_0
 ((
uöt32_t
)0x00000100)

	)

3527 
	#DCMI_CR_FCRC_1
 ((
uöt32_t
)0x00000200)

	)

3528 
	#DCMI_CR_EDM_0
 ((
uöt32_t
)0x00000400)

	)

3529 
	#DCMI_CR_EDM_1
 ((
uöt32_t
)0x00000800)

	)

3530 
	#DCMI_CR_CRE
 ((
uöt32_t
)0x00001000)

	)

3531 
	#DCMI_CR_ENABLE
 ((
uöt32_t
)0x00004000)

	)

3534 
	#DCMI_SR_HSYNC
 ((
uöt32_t
)0x00000001)

	)

3535 
	#DCMI_SR_VSYNC
 ((
uöt32_t
)0x00000002)

	)

3536 
	#DCMI_SR_FNE
 ((
uöt32_t
)0x00000004)

	)

3539 
	#DCMI_RISR_FRAME_RIS
 ((
uöt32_t
)0x00000001)

	)

3540 
	#DCMI_RISR_OVF_RIS
 ((
uöt32_t
)0x00000002)

	)

3541 
	#DCMI_RISR_ERR_RIS
 ((
uöt32_t
)0x00000004)

	)

3542 
	#DCMI_RISR_VSYNC_RIS
 ((
uöt32_t
)0x00000008)

	)

3543 
	#DCMI_RISR_LINE_RIS
 ((
uöt32_t
)0x00000010)

	)

3546 
	#DCMI_IER_FRAME_IE
 ((
uöt32_t
)0x00000001)

	)

3547 
	#DCMI_IER_OVF_IE
 ((
uöt32_t
)0x00000002)

	)

3548 
	#DCMI_IER_ERR_IE
 ((
uöt32_t
)0x00000004)

	)

3549 
	#DCMI_IER_VSYNC_IE
 ((
uöt32_t
)0x00000008)

	)

3550 
	#DCMI_IER_LINE_IE
 ((
uöt32_t
)0x00000010)

	)

3553 
	#DCMI_MISR_FRAME_MIS
 ((
uöt32_t
)0x00000001)

	)

3554 
	#DCMI_MISR_OVF_MIS
 ((
uöt32_t
)0x00000002)

	)

3555 
	#DCMI_MISR_ERR_MIS
 ((
uöt32_t
)0x00000004)

	)

3556 
	#DCMI_MISR_VSYNC_MIS
 ((
uöt32_t
)0x00000008)

	)

3557 
	#DCMI_MISR_LINE_MIS
 ((
uöt32_t
)0x00000010)

	)

3560 
	#DCMI_ICR_FRAME_ISC
 ((
uöt32_t
)0x00000001)

	)

3561 
	#DCMI_ICR_OVF_ISC
 ((
uöt32_t
)0x00000002)

	)

3562 
	#DCMI_ICR_ERR_ISC
 ((
uöt32_t
)0x00000004)

	)

3563 
	#DCMI_ICR_VSYNC_ISC
 ((
uöt32_t
)0x00000008)

	)

3564 
	#DCMI_ICR_LINE_ISC
 ((
uöt32_t
)0x00000010)

	)

3572 
	#DMA_SxCR_CHSEL
 ((
uöt32_t
)0x0E000000)

	)

3573 
	#DMA_SxCR_CHSEL_0
 ((
uöt32_t
)0x02000000)

	)

3574 
	#DMA_SxCR_CHSEL_1
 ((
uöt32_t
)0x04000000)

	)

3575 
	#DMA_SxCR_CHSEL_2
 ((
uöt32_t
)0x08000000)

	)

3576 
	#DMA_SxCR_MBURST
 ((
uöt32_t
)0x01800000)

	)

3577 
	#DMA_SxCR_MBURST_0
 ((
uöt32_t
)0x00800000)

	)

3578 
	#DMA_SxCR_MBURST_1
 ((
uöt32_t
)0x01000000)

	)

3579 
	#DMA_SxCR_PBURST
 ((
uöt32_t
)0x00600000)

	)

3580 
	#DMA_SxCR_PBURST_0
 ((
uöt32_t
)0x00200000)

	)

3581 
	#DMA_SxCR_PBURST_1
 ((
uöt32_t
)0x00400000)

	)

3582 
	#DMA_SxCR_ACK
 ((
uöt32_t
)0x00100000)

	)

3583 
	#DMA_SxCR_CT
 ((
uöt32_t
)0x00080000)

	)

3584 
	#DMA_SxCR_DBM
 ((
uöt32_t
)0x00040000)

	)

3585 
	#DMA_SxCR_PL
 ((
uöt32_t
)0x00030000)

	)

3586 
	#DMA_SxCR_PL_0
 ((
uöt32_t
)0x00010000)

	)

3587 
	#DMA_SxCR_PL_1
 ((
uöt32_t
)0x00020000)

	)

3588 
	#DMA_SxCR_PINCOS
 ((
uöt32_t
)0x00008000)

	)

3589 
	#DMA_SxCR_MSIZE
 ((
uöt32_t
)0x00006000)

	)

3590 
	#DMA_SxCR_MSIZE_0
 ((
uöt32_t
)0x00002000)

	)

3591 
	#DMA_SxCR_MSIZE_1
 ((
uöt32_t
)0x00004000)

	)

3592 
	#DMA_SxCR_PSIZE
 ((
uöt32_t
)0x00001800)

	)

3593 
	#DMA_SxCR_PSIZE_0
 ((
uöt32_t
)0x00000800)

	)

3594 
	#DMA_SxCR_PSIZE_1
 ((
uöt32_t
)0x00001000)

	)

3595 
	#DMA_SxCR_MINC
 ((
uöt32_t
)0x00000400)

	)

3596 
	#DMA_SxCR_PINC
 ((
uöt32_t
)0x00000200)

	)

3597 
	#DMA_SxCR_CIRC
 ((
uöt32_t
)0x00000100)

	)

3598 
	#DMA_SxCR_DIR
 ((
uöt32_t
)0x000000C0)

	)

3599 
	#DMA_SxCR_DIR_0
 ((
uöt32_t
)0x00000040)

	)

3600 
	#DMA_SxCR_DIR_1
 ((
uöt32_t
)0x00000080)

	)

3601 
	#DMA_SxCR_PFCTRL
 ((
uöt32_t
)0x00000020)

	)

3602 
	#DMA_SxCR_TCIE
 ((
uöt32_t
)0x00000010)

	)

3603 
	#DMA_SxCR_HTIE
 ((
uöt32_t
)0x00000008)

	)

3604 
	#DMA_SxCR_TEIE
 ((
uöt32_t
)0x00000004)

	)

3605 
	#DMA_SxCR_DMEIE
 ((
uöt32_t
)0x00000002)

	)

3606 
	#DMA_SxCR_EN
 ((
uöt32_t
)0x00000001)

	)

3609 
	#DMA_SxNDT
 ((
uöt32_t
)0x0000FFFF)

	)

3610 
	#DMA_SxNDT_0
 ((
uöt32_t
)0x00000001)

	)

3611 
	#DMA_SxNDT_1
 ((
uöt32_t
)0x00000002)

	)

3612 
	#DMA_SxNDT_2
 ((
uöt32_t
)0x00000004)

	)

3613 
	#DMA_SxNDT_3
 ((
uöt32_t
)0x00000008)

	)

3614 
	#DMA_SxNDT_4
 ((
uöt32_t
)0x00000010)

	)

3615 
	#DMA_SxNDT_5
 ((
uöt32_t
)0x00000020)

	)

3616 
	#DMA_SxNDT_6
 ((
uöt32_t
)0x00000040)

	)

3617 
	#DMA_SxNDT_7
 ((
uöt32_t
)0x00000080)

	)

3618 
	#DMA_SxNDT_8
 ((
uöt32_t
)0x00000100)

	)

3619 
	#DMA_SxNDT_9
 ((
uöt32_t
)0x00000200)

	)

3620 
	#DMA_SxNDT_10
 ((
uöt32_t
)0x00000400)

	)

3621 
	#DMA_SxNDT_11
 ((
uöt32_t
)0x00000800)

	)

3622 
	#DMA_SxNDT_12
 ((
uöt32_t
)0x00001000)

	)

3623 
	#DMA_SxNDT_13
 ((
uöt32_t
)0x00002000)

	)

3624 
	#DMA_SxNDT_14
 ((
uöt32_t
)0x00004000)

	)

3625 
	#DMA_SxNDT_15
 ((
uöt32_t
)0x00008000)

	)

3628 
	#DMA_SxFCR_FEIE
 ((
uöt32_t
)0x00000080)

	)

3629 
	#DMA_SxFCR_FS
 ((
uöt32_t
)0x00000038)

	)

3630 
	#DMA_SxFCR_FS_0
 ((
uöt32_t
)0x00000008)

	)

3631 
	#DMA_SxFCR_FS_1
 ((
uöt32_t
)0x00000010)

	)

3632 
	#DMA_SxFCR_FS_2
 ((
uöt32_t
)0x00000020)

	)

3633 
	#DMA_SxFCR_DMDIS
 ((
uöt32_t
)0x00000004)

	)

3634 
	#DMA_SxFCR_FTH
 ((
uöt32_t
)0x00000003)

	)

3635 
	#DMA_SxFCR_FTH_0
 ((
uöt32_t
)0x00000001)

	)

3636 
	#DMA_SxFCR_FTH_1
 ((
uöt32_t
)0x00000002)

	)

3639 
	#DMA_LISR_TCIF3
 ((
uöt32_t
)0x08000000)

	)

3640 
	#DMA_LISR_HTIF3
 ((
uöt32_t
)0x04000000)

	)

3641 
	#DMA_LISR_TEIF3
 ((
uöt32_t
)0x02000000)

	)

3642 
	#DMA_LISR_DMEIF3
 ((
uöt32_t
)0x01000000)

	)

3643 
	#DMA_LISR_FEIF3
 ((
uöt32_t
)0x00400000)

	)

3644 
	#DMA_LISR_TCIF2
 ((
uöt32_t
)0x00200000)

	)

3645 
	#DMA_LISR_HTIF2
 ((
uöt32_t
)0x00100000)

	)

3646 
	#DMA_LISR_TEIF2
 ((
uöt32_t
)0x00080000)

	)

3647 
	#DMA_LISR_DMEIF2
 ((
uöt32_t
)0x00040000)

	)

3648 
	#DMA_LISR_FEIF2
 ((
uöt32_t
)0x00010000)

	)

3649 
	#DMA_LISR_TCIF1
 ((
uöt32_t
)0x00000800)

	)

3650 
	#DMA_LISR_HTIF1
 ((
uöt32_t
)0x00000400)

	)

3651 
	#DMA_LISR_TEIF1
 ((
uöt32_t
)0x00000200)

	)

3652 
	#DMA_LISR_DMEIF1
 ((
uöt32_t
)0x00000100)

	)

3653 
	#DMA_LISR_FEIF1
 ((
uöt32_t
)0x00000040)

	)

3654 
	#DMA_LISR_TCIF0
 ((
uöt32_t
)0x00000020)

	)

3655 
	#DMA_LISR_HTIF0
 ((
uöt32_t
)0x00000010)

	)

3656 
	#DMA_LISR_TEIF0
 ((
uöt32_t
)0x00000008)

	)

3657 
	#DMA_LISR_DMEIF0
 ((
uöt32_t
)0x00000004)

	)

3658 
	#DMA_LISR_FEIF0
 ((
uöt32_t
)0x00000001)

	)

3661 
	#DMA_HISR_TCIF7
 ((
uöt32_t
)0x08000000)

	)

3662 
	#DMA_HISR_HTIF7
 ((
uöt32_t
)0x04000000)

	)

3663 
	#DMA_HISR_TEIF7
 ((
uöt32_t
)0x02000000)

	)

3664 
	#DMA_HISR_DMEIF7
 ((
uöt32_t
)0x01000000)

	)

3665 
	#DMA_HISR_FEIF7
 ((
uöt32_t
)0x00400000)

	)

3666 
	#DMA_HISR_TCIF6
 ((
uöt32_t
)0x00200000)

	)

3667 
	#DMA_HISR_HTIF6
 ((
uöt32_t
)0x00100000)

	)

3668 
	#DMA_HISR_TEIF6
 ((
uöt32_t
)0x00080000)

	)

3669 
	#DMA_HISR_DMEIF6
 ((
uöt32_t
)0x00040000)

	)

3670 
	#DMA_HISR_FEIF6
 ((
uöt32_t
)0x00010000)

	)

3671 
	#DMA_HISR_TCIF5
 ((
uöt32_t
)0x00000800)

	)

3672 
	#DMA_HISR_HTIF5
 ((
uöt32_t
)0x00000400)

	)

3673 
	#DMA_HISR_TEIF5
 ((
uöt32_t
)0x00000200)

	)

3674 
	#DMA_HISR_DMEIF5
 ((
uöt32_t
)0x00000100)

	)

3675 
	#DMA_HISR_FEIF5
 ((
uöt32_t
)0x00000040)

	)

3676 
	#DMA_HISR_TCIF4
 ((
uöt32_t
)0x00000020)

	)

3677 
	#DMA_HISR_HTIF4
 ((
uöt32_t
)0x00000010)

	)

3678 
	#DMA_HISR_TEIF4
 ((
uöt32_t
)0x00000008)

	)

3679 
	#DMA_HISR_DMEIF4
 ((
uöt32_t
)0x00000004)

	)

3680 
	#DMA_HISR_FEIF4
 ((
uöt32_t
)0x00000001)

	)

3683 
	#DMA_LIFCR_CTCIF3
 ((
uöt32_t
)0x08000000)

	)

3684 
	#DMA_LIFCR_CHTIF3
 ((
uöt32_t
)0x04000000)

	)

3685 
	#DMA_LIFCR_CTEIF3
 ((
uöt32_t
)0x02000000)

	)

3686 
	#DMA_LIFCR_CDMEIF3
 ((
uöt32_t
)0x01000000)

	)

3687 
	#DMA_LIFCR_CFEIF3
 ((
uöt32_t
)0x00400000)

	)

3688 
	#DMA_LIFCR_CTCIF2
 ((
uöt32_t
)0x00200000)

	)

3689 
	#DMA_LIFCR_CHTIF2
 ((
uöt32_t
)0x00100000)

	)

3690 
	#DMA_LIFCR_CTEIF2
 ((
uöt32_t
)0x00080000)

	)

3691 
	#DMA_LIFCR_CDMEIF2
 ((
uöt32_t
)0x00040000)

	)

3692 
	#DMA_LIFCR_CFEIF2
 ((
uöt32_t
)0x00010000)

	)

3693 
	#DMA_LIFCR_CTCIF1
 ((
uöt32_t
)0x00000800)

	)

3694 
	#DMA_LIFCR_CHTIF1
 ((
uöt32_t
)0x00000400)

	)

3695 
	#DMA_LIFCR_CTEIF1
 ((
uöt32_t
)0x00000200)

	)

3696 
	#DMA_LIFCR_CDMEIF1
 ((
uöt32_t
)0x00000100)

	)

3697 
	#DMA_LIFCR_CFEIF1
 ((
uöt32_t
)0x00000040)

	)

3698 
	#DMA_LIFCR_CTCIF0
 ((
uöt32_t
)0x00000020)

	)

3699 
	#DMA_LIFCR_CHTIF0
 ((
uöt32_t
)0x00000010)

	)

3700 
	#DMA_LIFCR_CTEIF0
 ((
uöt32_t
)0x00000008)

	)

3701 
	#DMA_LIFCR_CDMEIF0
 ((
uöt32_t
)0x00000004)

	)

3702 
	#DMA_LIFCR_CFEIF0
 ((
uöt32_t
)0x00000001)

	)

3705 
	#DMA_HIFCR_CTCIF7
 ((
uöt32_t
)0x08000000)

	)

3706 
	#DMA_HIFCR_CHTIF7
 ((
uöt32_t
)0x04000000)

	)

3707 
	#DMA_HIFCR_CTEIF7
 ((
uöt32_t
)0x02000000)

	)

3708 
	#DMA_HIFCR_CDMEIF7
 ((
uöt32_t
)0x01000000)

	)

3709 
	#DMA_HIFCR_CFEIF7
 ((
uöt32_t
)0x00400000)

	)

3710 
	#DMA_HIFCR_CTCIF6
 ((
uöt32_t
)0x00200000)

	)

3711 
	#DMA_HIFCR_CHTIF6
 ((
uöt32_t
)0x00100000)

	)

3712 
	#DMA_HIFCR_CTEIF6
 ((
uöt32_t
)0x00080000)

	)

3713 
	#DMA_HIFCR_CDMEIF6
 ((
uöt32_t
)0x00040000)

	)

3714 
	#DMA_HIFCR_CFEIF6
 ((
uöt32_t
)0x00010000)

	)

3715 
	#DMA_HIFCR_CTCIF5
 ((
uöt32_t
)0x00000800)

	)

3716 
	#DMA_HIFCR_CHTIF5
 ((
uöt32_t
)0x00000400)

	)

3717 
	#DMA_HIFCR_CTEIF5
 ((
uöt32_t
)0x00000200)

	)

3718 
	#DMA_HIFCR_CDMEIF5
 ((
uöt32_t
)0x00000100)

	)

3719 
	#DMA_HIFCR_CFEIF5
 ((
uöt32_t
)0x00000040)

	)

3720 
	#DMA_HIFCR_CTCIF4
 ((
uöt32_t
)0x00000020)

	)

3721 
	#DMA_HIFCR_CHTIF4
 ((
uöt32_t
)0x00000010)

	)

3722 
	#DMA_HIFCR_CTEIF4
 ((
uöt32_t
)0x00000008)

	)

3723 
	#DMA_HIFCR_CDMEIF4
 ((
uöt32_t
)0x00000004)

	)

3724 
	#DMA_HIFCR_CFEIF4
 ((
uöt32_t
)0x00000001)

	)

3734 
	#DMA2D_CR_START
 ((
uöt32_t
)0x00000001Ë

	)

3735 
	#DMA2D_CR_SUSP
 ((
uöt32_t
)0x00000002Ë

	)

3736 
	#DMA2D_CR_ABORT
 ((
uöt32_t
)0x00000004Ë

	)

3737 
	#DMA2D_CR_TEIE
 ((
uöt32_t
)0x00000100Ë

	)

3738 
	#DMA2D_CR_TCIE
 ((
uöt32_t
)0x00000200Ë

	)

3739 
	#DMA2D_CR_TWIE
 ((
uöt32_t
)0x00000400Ë

	)

3740 
	#DMA2D_CR_CAEIE
 ((
uöt32_t
)0x00000800Ë

	)

3741 
	#DMA2D_CR_CTCIE
 ((
uöt32_t
)0x00001000Ë

	)

3742 
	#DMA2D_CR_CEIE
 ((
uöt32_t
)0x00002000Ë

	)

3743 
	#DMA2D_CR_MODE
 ((
uöt32_t
)0x00030000Ë

	)

3747 
	#DMA2D_ISR_TEIF
 ((
uöt32_t
)0x00000001Ë

	)

3748 
	#DMA2D_ISR_TCIF
 ((
uöt32_t
)0x00000002Ë

	)

3749 
	#DMA2D_ISR_TWIF
 ((
uöt32_t
)0x00000004Ë

	)

3750 
	#DMA2D_ISR_CAEIF
 ((
uöt32_t
)0x00000008Ë

	)

3751 
	#DMA2D_ISR_CTCIF
 ((
uöt32_t
)0x00000010Ë

	)

3752 
	#DMA2D_ISR_CEIF
 ((
uöt32_t
)0x00000020Ë

	)

3756 
	#DMA2D_IFSR_CTEIF
 ((
uöt32_t
)0x00000001Ë

	)

3757 
	#DMA2D_IFSR_CTCIF
 ((
uöt32_t
)0x00000002Ë

	)

3758 
	#DMA2D_IFSR_CTWIF
 ((
uöt32_t
)0x00000004Ë

	)

3759 
	#DMA2D_IFSR_CCAEIF
 ((
uöt32_t
)0x00000008Ë

	)

3760 
	#DMA2D_IFSR_CCTCIF
 ((
uöt32_t
)0x00000010Ë

	)

3761 
	#DMA2D_IFSR_CCEIF
 ((
uöt32_t
)0x00000020Ë

	)

3765 
	#DMA2D_FGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3769 
	#DMA2D_FGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3773 
	#DMA2D_BGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3777 
	#DMA2D_BGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3781 
	#DMA2D_FGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

3782 
	#DMA2D_FGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

3783 
	#DMA2D_FGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

3784 
	#DMA2D_FGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

3785 
	#DMA2D_FGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

3786 
	#DMA2D_FGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

3790 
	#DMA2D_FGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

3791 
	#DMA2D_FGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

3792 
	#DMA2D_FGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

3796 
	#DMA2D_BGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

3797 
	#DMA2D_BGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

3798 
	#DMA2D_BGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

3799 
	#DMA2D_BGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

3800 
	#DMA2D_BGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

3801 
	#DMA2D_BGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

3805 
	#DMA2D_BGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

3806 
	#DMA2D_BGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

3807 
	#DMA2D_BGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

3811 
	#DMA2D_FGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3815 
	#DMA2D_BGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3819 
	#DMA2D_OPFCCR_CM
 ((
uöt32_t
)0x00000007Ë

	)

3825 
	#DMA2D_OCOLR_BLUE_1
 ((
uöt32_t
)0x000000FFË

	)

3826 
	#DMA2D_OCOLR_GREEN_1
 ((
uöt32_t
)0x0000FF00Ë

	)

3827 
	#DMA2D_OCOLR_RED_1
 ((
uöt32_t
)0x00FF0000Ë

	)

3828 
	#DMA2D_OCOLR_ALPHA_1
 ((
uöt32_t
)0xFF000000Ë

	)

3831 
	#DMA2D_OCOLR_BLUE_2
 ((
uöt32_t
)0x0000001FË

	)

3832 
	#DMA2D_OCOLR_GREEN_2
 ((
uöt32_t
)0x000007E0Ë

	)

3833 
	#DMA2D_OCOLR_RED_2
 ((
uöt32_t
)0x0000F800Ë

	)

3836 
	#DMA2D_OCOLR_BLUE_3
 ((
uöt32_t
)0x0000001FË

	)

3837 
	#DMA2D_OCOLR_GREEN_3
 ((
uöt32_t
)0x000003E0Ë

	)

3838 
	#DMA2D_OCOLR_RED_3
 ((
uöt32_t
)0x00007C00Ë

	)

3839 
	#DMA2D_OCOLR_ALPHA_3
 ((
uöt32_t
)0x00008000Ë

	)

3842 
	#DMA2D_OCOLR_BLUE_4
 ((
uöt32_t
)0x0000000FË

	)

3843 
	#DMA2D_OCOLR_GREEN_4
 ((
uöt32_t
)0x000000F0Ë

	)

3844 
	#DMA2D_OCOLR_RED_4
 ((
uöt32_t
)0x00000F00Ë

	)

3845 
	#DMA2D_OCOLR_ALPHA_4
 ((
uöt32_t
)0x0000F000Ë

	)

3849 
	#DMA2D_OMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3853 
	#DMA2D_OOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3857 
	#DMA2D_NLR_NL
 ((
uöt32_t
)0x0000FFFFË

	)

3858 
	#DMA2D_NLR_PL
 ((
uöt32_t
)0x3FFF0000Ë

	)

3862 
	#DMA2D_LWR_LW
 ((
uöt32_t
)0x0000FFFFË

	)

3866 
	#DMA2D_AMTCR_EN
 ((
uöt32_t
)0x00000001Ë

	)

3867 
	#DMA2D_AMTCR_DT
 ((
uöt32_t
)0x0000FF00Ë

	)

3882 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3883 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3884 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3885 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3886 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3887 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3888 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3889 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3890 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3891 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3892 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3893 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3894 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3895 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3896 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3897 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3898 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3899 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3900 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3901 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3904 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3905 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3906 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3907 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3908 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3909 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3910 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3911 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3912 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3913 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3914 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3915 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3916 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3917 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3918 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3919 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3920 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3921 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3922 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3923 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3926 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3927 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3928 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3929 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3930 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3931 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3932 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3933 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3934 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3935 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3936 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3937 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3938 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3939 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3940 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3941 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3942 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3943 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3944 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3945 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3948 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3949 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3950 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3951 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3952 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3953 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3954 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3955 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3956 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3957 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3958 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3959 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3960 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3961 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3962 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3963 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3964 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3965 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3966 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3967 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3970 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3971 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3972 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3973 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3974 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3975 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3976 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3977 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3978 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3979 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3980 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3981 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3982 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3983 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3984 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3985 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3986 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3987 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3988 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3989 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3992 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3993 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3994 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3995 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3996 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3997 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3998 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3999 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

4000 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

4001 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

4002 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

4003 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

4004 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

4005 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

4006 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

4007 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

4008 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

4009 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

4010 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

4011 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

4019 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x0000000F)

	)

4020 
	#FLASH_ACR_LATENCY_0WS
 ((
uöt32_t
)0x00000000)

	)

4021 
	#FLASH_ACR_LATENCY_1WS
 ((
uöt32_t
)0x00000001)

	)

4022 
	#FLASH_ACR_LATENCY_2WS
 ((
uöt32_t
)0x00000002)

	)

4023 
	#FLASH_ACR_LATENCY_3WS
 ((
uöt32_t
)0x00000003)

	)

4024 
	#FLASH_ACR_LATENCY_4WS
 ((
uöt32_t
)0x00000004)

	)

4025 
	#FLASH_ACR_LATENCY_5WS
 ((
uöt32_t
)0x00000005)

	)

4026 
	#FLASH_ACR_LATENCY_6WS
 ((
uöt32_t
)0x00000006)

	)

4027 
	#FLASH_ACR_LATENCY_7WS
 ((
uöt32_t
)0x00000007)

	)

4028 
	#FLASH_ACR_LATENCY_8WS
 ((
uöt32_t
)0x00000008)

	)

4029 
	#FLASH_ACR_LATENCY_9WS
 ((
uöt32_t
)0x00000009)

	)

4030 
	#FLASH_ACR_LATENCY_10WS
 ((
uöt32_t
)0x0000000A)

	)

4031 
	#FLASH_ACR_LATENCY_11WS
 ((
uöt32_t
)0x0000000B)

	)

4032 
	#FLASH_ACR_LATENCY_12WS
 ((
uöt32_t
)0x0000000C)

	)

4033 
	#FLASH_ACR_LATENCY_13WS
 ((
uöt32_t
)0x0000000D)

	)

4034 
	#FLASH_ACR_LATENCY_14WS
 ((
uöt32_t
)0x0000000E)

	)

4035 
	#FLASH_ACR_LATENCY_15WS
 ((
uöt32_t
)0x0000000F)

	)

4037 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000100)

	)

4038 
	#FLASH_ACR_ICEN
 ((
uöt32_t
)0x00000200)

	)

4039 
	#FLASH_ACR_DCEN
 ((
uöt32_t
)0x00000400)

	)

4040 
	#FLASH_ACR_ICRST
 ((
uöt32_t
)0x00000800)

	)

4041 
	#FLASH_ACR_DCRST
 ((
uöt32_t
)0x00001000)

	)

4042 
	#FLASH_ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

4043 
	#FLASH_ACR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C03)

	)

4046 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000001)

	)

4047 
	#FLASH_SR_SOP
 ((
uöt32_t
)0x00000002)

	)

4048 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010)

	)

4049 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000020)

	)

4050 
	#FLASH_SR_PGPERR
 ((
uöt32_t
)0x00000040)

	)

4051 
	#FLASH_SR_PGSERR
 ((
uöt32_t
)0x00000080)

	)

4052 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00010000)

	)

4055 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001)

	)

4056 
	#FLASH_CR_SER
 ((
uöt32_t
)0x00000002)

	)

4057 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004)

	)

4058 
	#FLASH_CR_MER1
 
FLASH_CR_MER


	)

4059 
	#FLASH_CR_SNB
 ((
uöt32_t
)0x000000F8)

	)

4060 
	#FLASH_CR_SNB_0
 ((
uöt32_t
)0x00000008)

	)

4061 
	#FLASH_CR_SNB_1
 ((
uöt32_t
)0x00000010)

	)

4062 
	#FLASH_CR_SNB_2
 ((
uöt32_t
)0x00000020)

	)

4063 
	#FLASH_CR_SNB_3
 ((
uöt32_t
)0x00000040)

	)

4064 
	#FLASH_CR_SNB_4
 ((
uöt32_t
)0x00000040)

	)

4065 
	#FLASH_CR_PSIZE
 ((
uöt32_t
)0x00000300)

	)

4066 
	#FLASH_CR_PSIZE_0
 ((
uöt32_t
)0x00000100)

	)

4067 
	#FLASH_CR_PSIZE_1
 ((
uöt32_t
)0x00000200)

	)

4068 
	#FLASH_CR_MER2
 ((
uöt32_t
)0x00008000)

	)

4069 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00010000)

	)

4070 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x01000000)

	)

4071 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x80000000)

	)

4074 
	#FLASH_OPTCR_OPTLOCK
 ((
uöt32_t
)0x00000001)

	)

4075 
	#FLASH_OPTCR_OPTSTRT
 ((
uöt32_t
)0x00000002)

	)

4076 
	#FLASH_OPTCR_BOR_LEV_0
 ((
uöt32_t
)0x00000004)

	)

4077 
	#FLASH_OPTCR_BOR_LEV_1
 ((
uöt32_t
)0x00000008)

	)

4078 
	#FLASH_OPTCR_BOR_LEV
 ((
uöt32_t
)0x0000000C)

	)

4079 
	#FLASH_OPTCR_BFB2
 ((
uöt32_t
)0x00000010)

	)

4081 
	#FLASH_OPTCR_WDG_SW
 ((
uöt32_t
)0x00000020)

	)

4082 
	#FLASH_OPTCR_nRST_STOP
 ((
uöt32_t
)0x00000040)

	)

4083 
	#FLASH_OPTCR_nRST_STDBY
 ((
uöt32_t
)0x00000080)

	)

4084 
	#FLASH_OPTCR_RDP
 ((
uöt32_t
)0x0000FF00)

	)

4085 
	#FLASH_OPTCR_RDP_0
 ((
uöt32_t
)0x00000100)

	)

4086 
	#FLASH_OPTCR_RDP_1
 ((
uöt32_t
)0x00000200)

	)

4087 
	#FLASH_OPTCR_RDP_2
 ((
uöt32_t
)0x00000400)

	)

4088 
	#FLASH_OPTCR_RDP_3
 ((
uöt32_t
)0x00000800)

	)

4089 
	#FLASH_OPTCR_RDP_4
 ((
uöt32_t
)0x00001000)

	)

4090 
	#FLASH_OPTCR_RDP_5
 ((
uöt32_t
)0x00002000)

	)

4091 
	#FLASH_OPTCR_RDP_6
 ((
uöt32_t
)0x00004000)

	)

4092 
	#FLASH_OPTCR_RDP_7
 ((
uöt32_t
)0x00008000)

	)

4093 
	#FLASH_OPTCR_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

4094 
	#FLASH_OPTCR_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4095 
	#FLASH_OPTCR_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4096 
	#FLASH_OPTCR_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4097 
	#FLASH_OPTCR_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4098 
	#FLASH_OPTCR_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4099 
	#FLASH_OPTCR_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4100 
	#FLASH_OPTCR_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4101 
	#FLASH_OPTCR_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4102 
	#FLASH_OPTCR_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4103 
	#FLASH_OPTCR_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4104 
	#FLASH_OPTCR_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4105 
	#FLASH_OPTCR_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4107 
	#FLASH_OPTCR_DB1M
 ((
uöt32_t
)0x40000000)

	)

4108 
	#FLASH_OPTCR_SPRMOD
 ((
uöt32_t
)0x80000000)

	)

4111 
	#FLASH_OPTCR1_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

4112 
	#FLASH_OPTCR1_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4113 
	#FLASH_OPTCR1_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4114 
	#FLASH_OPTCR1_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4115 
	#FLASH_OPTCR1_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4116 
	#FLASH_OPTCR1_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4117 
	#FLASH_OPTCR1_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4118 
	#FLASH_OPTCR1_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4119 
	#FLASH_OPTCR1_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4120 
	#FLASH_OPTCR1_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4121 
	#FLASH_OPTCR1_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4122 
	#FLASH_OPTCR1_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4123 
	#FLASH_OPTCR1_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4125 #i‡
deföed
 (
STM32F40_41xxx
)

4132 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4133 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4135 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4136 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4137 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4139 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4140 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4141 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4143 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4144 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4145 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4146 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4147 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4148 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4149 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4150 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4151 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4152 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4155 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4156 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4158 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4159 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4160 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4162 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4163 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4164 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4166 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4167 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4168 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4169 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4170 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4171 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4172 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4173 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4174 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4175 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4178 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4179 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4181 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4182 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4183 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4185 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4186 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4187 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4189 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4190 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4191 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4192 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4193 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4194 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4195 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4196 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4197 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4198 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4201 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4202 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4204 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4205 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4206 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4208 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4209 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4210 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4212 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4213 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4214 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4215 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4216 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4217 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4218 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4219 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4220 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4221 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4224 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4225 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4226 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4227 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4228 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4230 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4231 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4232 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4233 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4234 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4236 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4237 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4238 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4239 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4240 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4242 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4243 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4244 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4245 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4246 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4248 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4249 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4250 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4251 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4252 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4254 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4255 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4256 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4257 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4258 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4260 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4261 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4262 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4265 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4266 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4267 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4268 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4269 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4271 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4272 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4273 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4274 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4275 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4277 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4278 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4279 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4280 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4281 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4283 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4284 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4285 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4286 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4287 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4289 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4290 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4291 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4292 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4293 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4295 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4296 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4297 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4298 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4299 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4301 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4302 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4303 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4306 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4307 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4308 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4309 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4310 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4312 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4313 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4314 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4315 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4316 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4318 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4319 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4320 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4321 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4322 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4324 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4325 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4326 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4327 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4328 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4330 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4331 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4332 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4333 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4334 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4336 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4337 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4338 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4339 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4340 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4342 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4343 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4344 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4347 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4348 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4349 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4350 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4351 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4353 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4354 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4355 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4356 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4357 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4359 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4360 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4361 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4362 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4363 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4365 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4366 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4367 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4368 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4369 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4371 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4372 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4373 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4374 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4375 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4377 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4378 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4379 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4380 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4381 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4383 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4384 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4385 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4388 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4389 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4390 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4391 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4392 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4394 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4395 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4396 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4397 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4398 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4400 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4401 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4402 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4403 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4404 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4406 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4407 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4408 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4409 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4410 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4412 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4413 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4414 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4415 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4416 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4418 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4419 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4420 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4423 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4424 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4425 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4426 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4427 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4429 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4430 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4431 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4432 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4433 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4435 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4436 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4437 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4438 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4439 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4441 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4442 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4443 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4444 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4445 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4447 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4448 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4449 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4450 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4451 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4453 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4454 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4455 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4458 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4459 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4460 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4461 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4462 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4464 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4465 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4466 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4467 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4468 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4470 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4471 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4472 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4473 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4474 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4476 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4477 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4478 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4479 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4480 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4482 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4483 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4484 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4485 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4486 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4488 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4489 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4490 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4493 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4494 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4495 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4496 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4497 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4499 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4500 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4501 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4502 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4503 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4505 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4506 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4507 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4508 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4509 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4511 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4512 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4513 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4514 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4515 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4517 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4518 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4519 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4520 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4521 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4523 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4524 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4525 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4528 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4529 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4530 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4532 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4533 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4534 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4536 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4538 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4539 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4540 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4541 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4542 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4544 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4545 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4546 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4547 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4548 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4550 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4551 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4552 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4553 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4556 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4557 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4558 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4560 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4561 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4562 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4564 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4566 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4567 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4568 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4569 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4570 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4572 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4573 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4574 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4575 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4576 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4578 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4579 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4580 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4581 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4584 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4585 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4586 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4588 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4589 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4590 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4592 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4594 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4595 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4596 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4597 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4598 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4600 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4601 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4602 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4603 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4604 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4606 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4607 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4608 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4609 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4612 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4613 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4614 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4615 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4616 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4617 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4618 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4621 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4622 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4623 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4624 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4625 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4626 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4627 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4630 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4631 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4632 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4633 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4634 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4635 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4636 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4639 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4640 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4641 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4642 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4643 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4644 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4645 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4646 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4647 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4649 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4650 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4651 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4652 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4653 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4654 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4655 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4656 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4657 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4659 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4660 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4661 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4662 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4663 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4664 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4665 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4666 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4667 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4669 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4670 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4671 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4672 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4673 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4674 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4675 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4676 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4677 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4680 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4681 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4682 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4683 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4684 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4685 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4686 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4687 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4688 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4690 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4691 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4692 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4693 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4694 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4695 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4696 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4697 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4698 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4700 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4701 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4702 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4703 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4704 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4705 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4706 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4707 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4708 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4710 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4711 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4712 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4713 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4714 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4715 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4716 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4717 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4718 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4721 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

4722 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4723 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4724 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4725 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4726 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4727 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4728 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4729 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4731 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4732 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4733 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4734 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4735 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4736 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4737 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4738 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4739 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4741 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4742 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4743 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4744 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4745 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4746 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4747 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4748 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4749 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4751 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4752 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4753 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4754 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4755 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4756 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4757 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4758 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4759 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4762 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

4763 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4764 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4765 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4766 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4767 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4768 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4769 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4770 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4772 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4773 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4774 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4775 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4776 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4777 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4778 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4779 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4780 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4782 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4783 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4784 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4785 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4786 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4787 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4788 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4789 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4790 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4792 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4793 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4794 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4795 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4796 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4797 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4798 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4799 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4800 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4803 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

4804 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4805 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4806 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4807 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4808 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4809 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4810 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4811 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4813 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4814 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4815 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4816 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4817 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4818 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4819 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4820 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4821 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4823 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4824 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4825 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4826 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4827 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4828 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4829 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4830 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4831 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4833 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4834 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4835 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4836 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4837 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4838 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4839 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4840 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4841 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4844 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

4845 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4846 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4847 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4848 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4849 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4850 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4851 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4852 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4854 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4855 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4856 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4857 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4858 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4859 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4860 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4861 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4862 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4864 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4865 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4866 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4867 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4868 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4869 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4870 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4871 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4872 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4874 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4875 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4876 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4877 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4878 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4879 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4880 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4881 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4882 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4885 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

4886 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4887 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4888 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4889 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4890 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4891 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4892 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4893 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4895 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4896 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4897 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4898 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4899 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4900 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4901 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4902 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4903 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4905 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4906 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4907 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4908 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4909 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4910 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4911 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4912 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4913 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4915 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4916 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4917 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4918 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4919 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4920 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4921 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4922 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4923 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4926 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4929 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4932 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

4939 
	#FMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4940 
	#FMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4942 
	#FMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4943 
	#FMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4944 
	#FMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4946 
	#FMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4947 
	#FMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4948 
	#FMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4950 
	#FMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4951 
	#FMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4952 
	#FMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4953 
	#FMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4954 
	#FMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4955 
	#FMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4956 
	#FMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4957 
	#FMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4958 
	#FMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4959 
	#FMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4960 
	#FMC_BCR1_CCLKEN
 ((
uöt32_t
)0x00100000Ë

	)

4963 
	#FMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4964 
	#FMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4966 
	#FMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4967 
	#FMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4968 
	#FMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4970 
	#FMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4971 
	#FMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4972 
	#FMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4974 
	#FMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4975 
	#FMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4976 
	#FMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4977 
	#FMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4978 
	#FMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4979 
	#FMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4980 
	#FMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4981 
	#FMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4982 
	#FMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4983 
	#FMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4986 
	#FMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4987 
	#FMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4989 
	#FMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4990 
	#FMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4991 
	#FMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4993 
	#FMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4994 
	#FMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4995 
	#FMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4997 
	#FMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4998 
	#FMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4999 
	#FMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5000 
	#FMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5001 
	#FMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5002 
	#FMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5003 
	#FMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5004 
	#FMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5005 
	#FMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5006 
	#FMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5009 
	#FMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5010 
	#FMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5012 
	#FMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5013 
	#FMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5014 
	#FMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5016 
	#FMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5017 
	#FMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5018 
	#FMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5020 
	#FMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5021 
	#FMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5022 
	#FMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5023 
	#FMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5024 
	#FMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5025 
	#FMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5026 
	#FMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5027 
	#FMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5028 
	#FMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5029 
	#FMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5032 
	#FMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5033 
	#FMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5034 
	#FMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5035 
	#FMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5036 
	#FMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5038 
	#FMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5039 
	#FMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5040 
	#FMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5041 
	#FMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5042 
	#FMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5044 
	#FMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5045 
	#FMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5046 
	#FMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5047 
	#FMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5048 
	#FMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5049 
	#FMC_BTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5050 
	#FMC_BTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5051 
	#FMC_BTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5052 
	#FMC_BTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5054 
	#FMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5055 
	#FMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5056 
	#FMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5057 
	#FMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5058 
	#FMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5060 
	#FMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5061 
	#FMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5062 
	#FMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5063 
	#FMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5064 
	#FMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5066 
	#FMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5067 
	#FMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5068 
	#FMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5069 
	#FMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5070 
	#FMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5072 
	#FMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5073 
	#FMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5074 
	#FMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5077 
	#FMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5078 
	#FMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5079 
	#FMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5080 
	#FMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5081 
	#FMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5083 
	#FMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5084 
	#FMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5085 
	#FMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5086 
	#FMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5087 
	#FMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5089 
	#FMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5090 
	#FMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5091 
	#FMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5092 
	#FMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5093 
	#FMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5094 
	#FMC_BTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5095 
	#FMC_BTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5096 
	#FMC_BTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5097 
	#FMC_BTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5099 
	#FMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5100 
	#FMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5101 
	#FMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5102 
	#FMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5103 
	#FMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5105 
	#FMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5106 
	#FMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5107 
	#FMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5108 
	#FMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5109 
	#FMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5111 
	#FMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5112 
	#FMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5113 
	#FMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5114 
	#FMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5115 
	#FMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5117 
	#FMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5118 
	#FMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5119 
	#FMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5122 
	#FMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5123 
	#FMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5124 
	#FMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5125 
	#FMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5126 
	#FMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5128 
	#FMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5129 
	#FMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5130 
	#FMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5131 
	#FMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5132 
	#FMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5134 
	#FMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5135 
	#FMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5136 
	#FMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5137 
	#FMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5138 
	#FMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5139 
	#FMC_BTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5140 
	#FMC_BTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5141 
	#FMC_BTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5142 
	#FMC_BTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5144 
	#FMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5145 
	#FMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5146 
	#FMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5147 
	#FMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5148 
	#FMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5150 
	#FMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5151 
	#FMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5152 
	#FMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5153 
	#FMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5154 
	#FMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5156 
	#FMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5157 
	#FMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5158 
	#FMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5159 
	#FMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5160 
	#FMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5162 
	#FMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5163 
	#FMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5164 
	#FMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5167 
	#FMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5168 
	#FMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5169 
	#FMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5170 
	#FMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5171 
	#FMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5173 
	#FMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5174 
	#FMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5175 
	#FMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5176 
	#FMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5177 
	#FMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5179 
	#FMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5180 
	#FMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5181 
	#FMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5182 
	#FMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5183 
	#FMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5184 
	#FMC_BTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5185 
	#FMC_BTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5186 
	#FMC_BTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5187 
	#FMC_BTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5189 
	#FMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5190 
	#FMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5191 
	#FMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5192 
	#FMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5193 
	#FMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5195 
	#FMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5196 
	#FMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5197 
	#FMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5198 
	#FMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5199 
	#FMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5201 
	#FMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5202 
	#FMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5203 
	#FMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5204 
	#FMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5205 
	#FMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5207 
	#FMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5208 
	#FMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5209 
	#FMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5212 
	#FMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5213 
	#FMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5214 
	#FMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5215 
	#FMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5216 
	#FMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5218 
	#FMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5219 
	#FMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5220 
	#FMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5221 
	#FMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5222 
	#FMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5224 
	#FMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5225 
	#FMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5226 
	#FMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5227 
	#FMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5228 
	#FMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5229 
	#FMC_BWTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5230 
	#FMC_BWTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5231 
	#FMC_BWTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5232 
	#FMC_BWTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5234 
	#FMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5235 
	#FMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5236 
	#FMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5237 
	#FMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5238 
	#FMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5240 
	#FMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5241 
	#FMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5242 
	#FMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5243 
	#FMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5244 
	#FMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5246 
	#FMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5247 
	#FMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5248 
	#FMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5251 
	#FMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5252 
	#FMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5253 
	#FMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5254 
	#FMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5255 
	#FMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5257 
	#FMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5258 
	#FMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5259 
	#FMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5260 
	#FMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5261 
	#FMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5263 
	#FMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5264 
	#FMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5265 
	#FMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5266 
	#FMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5267 
	#FMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5268 
	#FMC_BWTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5269 
	#FMC_BWTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5270 
	#FMC_BWTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5271 
	#FMC_BWTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5273 
	#FMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5274 
	#FMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5275 
	#FMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5276 
	#FMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5277 
	#FMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5279 
	#FMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5280 
	#FMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5281 
	#FMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5282 
	#FMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5283 
	#FMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5285 
	#FMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5286 
	#FMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5287 
	#FMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5290 
	#FMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5291 
	#FMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5292 
	#FMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5293 
	#FMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5294 
	#FMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5296 
	#FMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5297 
	#FMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5298 
	#FMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5299 
	#FMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5300 
	#FMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5302 
	#FMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5303 
	#FMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5304 
	#FMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5305 
	#FMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5306 
	#FMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5307 
	#FMC_BWTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5308 
	#FMC_BWTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5309 
	#FMC_BWTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5310 
	#FMC_BWTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5312 
	#FMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5313 
	#FMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5314 
	#FMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5315 
	#FMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5316 
	#FMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5318 
	#FMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5319 
	#FMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5320 
	#FMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5321 
	#FMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5322 
	#FMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5324 
	#FMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5325 
	#FMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5326 
	#FMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5329 
	#FMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5330 
	#FMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5331 
	#FMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5332 
	#FMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5333 
	#FMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5335 
	#FMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5336 
	#FMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5337 
	#FMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5338 
	#FMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5339 
	#FMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5341 
	#FMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5342 
	#FMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5343 
	#FMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5344 
	#FMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5345 
	#FMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5346 
	#FMC_BWTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5347 
	#FMC_BWTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5348 
	#FMC_BWTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5349 
	#FMC_BWTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5351 
	#FMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5352 
	#FMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5353 
	#FMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5354 
	#FMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5355 
	#FMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5357 
	#FMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5358 
	#FMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5359 
	#FMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5360 
	#FMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5361 
	#FMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5363 
	#FMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5364 
	#FMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5365 
	#FMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5368 
	#FMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5369 
	#FMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5370 
	#FMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5372 
	#FMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5373 
	#FMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5374 
	#FMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5376 
	#FMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5378 
	#FMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5379 
	#FMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5380 
	#FMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5381 
	#FMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5382 
	#FMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5384 
	#FMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5385 
	#FMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5386 
	#FMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5387 
	#FMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5388 
	#FMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5390 
	#FMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5391 
	#FMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5392 
	#FMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5393 
	#FMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5396 
	#FMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5397 
	#FMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5398 
	#FMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5400 
	#FMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5401 
	#FMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5402 
	#FMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5404 
	#FMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5406 
	#FMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5407 
	#FMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5408 
	#FMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5409 
	#FMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5410 
	#FMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5412 
	#FMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5413 
	#FMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5414 
	#FMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5415 
	#FMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5416 
	#FMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5418 
	#FMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5419 
	#FMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5420 
	#FMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5421 
	#FMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5424 
	#FMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5425 
	#FMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5426 
	#FMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5428 
	#FMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5429 
	#FMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5430 
	#FMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5432 
	#FMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5434 
	#FMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5435 
	#FMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5436 
	#FMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5437 
	#FMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5438 
	#FMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5440 
	#FMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5441 
	#FMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5442 
	#FMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5443 
	#FMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5444 
	#FMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5446 
	#FMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5447 
	#FMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5448 
	#FMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5449 
	#FMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5452 
	#FMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

5453 
	#FMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

5454 
	#FMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

5455 
	#FMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

5456 
	#FMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

5457 
	#FMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

5458 
	#FMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5461 
	#FMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

5462 
	#FMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

5463 
	#FMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

5464 
	#FMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

5465 
	#FMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

5466 
	#FMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

5467 
	#FMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5470 
	#FMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

5471 
	#FMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

5472 
	#FMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

5473 
	#FMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

5474 
	#FMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

5475 
	#FMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

5476 
	#FMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5479 
	#FMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

5480 
	#FMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5481 
	#FMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5482 
	#FMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5483 
	#FMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5484 
	#FMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5485 
	#FMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5486 
	#FMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5487 
	#FMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5489 
	#FMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5490 
	#FMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5491 
	#FMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5492 
	#FMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5493 
	#FMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5494 
	#FMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5495 
	#FMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5496 
	#FMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5497 
	#FMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5499 
	#FMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5500 
	#FMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5501 
	#FMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5502 
	#FMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5503 
	#FMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5504 
	#FMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5505 
	#FMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5506 
	#FMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5507 
	#FMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5509 
	#FMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5510 
	#FMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5511 
	#FMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5512 
	#FMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5513 
	#FMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5514 
	#FMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5515 
	#FMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5516 
	#FMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5517 
	#FMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5520 
	#FMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5521 
	#FMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5522 
	#FMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5523 
	#FMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5524 
	#FMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5525 
	#FMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5526 
	#FMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5527 
	#FMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5528 
	#FMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5530 
	#FMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5531 
	#FMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5532 
	#FMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5533 
	#FMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5534 
	#FMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5535 
	#FMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5536 
	#FMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5537 
	#FMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5538 
	#FMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5540 
	#FMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5541 
	#FMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5542 
	#FMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5543 
	#FMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5544 
	#FMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5545 
	#FMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5546 
	#FMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5547 
	#FMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5548 
	#FMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5550 
	#FMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5551 
	#FMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5552 
	#FMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5553 
	#FMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5554 
	#FMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5555 
	#FMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5556 
	#FMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5557 
	#FMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5558 
	#FMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5561 
	#FMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5562 
	#FMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5563 
	#FMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5564 
	#FMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5565 
	#FMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5566 
	#FMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5567 
	#FMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5568 
	#FMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5569 
	#FMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5571 
	#FMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5572 
	#FMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5573 
	#FMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5574 
	#FMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5575 
	#FMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5576 
	#FMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5577 
	#FMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5578 
	#FMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5579 
	#FMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5581 
	#FMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5582 
	#FMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5583 
	#FMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5584 
	#FMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5585 
	#FMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5586 
	#FMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5587 
	#FMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5588 
	#FMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5589 
	#FMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5591 
	#FMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5592 
	#FMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5593 
	#FMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5594 
	#FMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5595 
	#FMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5596 
	#FMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5597 
	#FMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5598 
	#FMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5599 
	#FMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5602 
	#FMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5603 
	#FMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5604 
	#FMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5605 
	#FMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5606 
	#FMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5607 
	#FMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5608 
	#FMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5609 
	#FMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5610 
	#FMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5612 
	#FMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5613 
	#FMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5614 
	#FMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5615 
	#FMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5616 
	#FMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5617 
	#FMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5618 
	#FMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5619 
	#FMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5620 
	#FMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5622 
	#FMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5623 
	#FMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5624 
	#FMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5625 
	#FMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5626 
	#FMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5627 
	#FMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5628 
	#FMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5629 
	#FMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5630 
	#FMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5632 
	#FMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5633 
	#FMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5634 
	#FMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5635 
	#FMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5636 
	#FMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5637 
	#FMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5638 
	#FMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5639 
	#FMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5640 
	#FMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5643 
	#FMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5644 
	#FMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5645 
	#FMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5646 
	#FMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5647 
	#FMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5648 
	#FMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5649 
	#FMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5650 
	#FMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5651 
	#FMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5653 
	#FMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5654 
	#FMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5655 
	#FMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5656 
	#FMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5657 
	#FMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5658 
	#FMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5659 
	#FMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5660 
	#FMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5661 
	#FMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5663 
	#FMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5664 
	#FMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5665 
	#FMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5666 
	#FMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5667 
	#FMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5668 
	#FMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5669 
	#FMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5670 
	#FMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5671 
	#FMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5673 
	#FMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5674 
	#FMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5675 
	#FMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5676 
	#FMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5677 
	#FMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5678 
	#FMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5679 
	#FMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5680 
	#FMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5681 
	#FMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5684 
	#FMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5685 
	#FMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5686 
	#FMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5687 
	#FMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5688 
	#FMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5689 
	#FMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5690 
	#FMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5691 
	#FMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5692 
	#FMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5694 
	#FMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5695 
	#FMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5696 
	#FMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5697 
	#FMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5698 
	#FMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5699 
	#FMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5700 
	#FMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5701 
	#FMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5702 
	#FMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5704 
	#FMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5705 
	#FMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5706 
	#FMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5707 
	#FMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5708 
	#FMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5709 
	#FMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5710 
	#FMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5711 
	#FMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5712 
	#FMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5714 
	#FMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5715 
	#FMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5716 
	#FMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5717 
	#FMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5718 
	#FMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5719 
	#FMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5720 
	#FMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5721 
	#FMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5722 
	#FMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5725 
	#FMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5726 
	#FMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5727 
	#FMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5728 
	#FMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5729 
	#FMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5730 
	#FMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5731 
	#FMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5732 
	#FMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5733 
	#FMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5735 
	#FMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5736 
	#FMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5737 
	#FMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5738 
	#FMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5739 
	#FMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5740 
	#FMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5741 
	#FMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5742 
	#FMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5743 
	#FMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5745 
	#FMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5746 
	#FMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5747 
	#FMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5748 
	#FMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5749 
	#FMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5750 
	#FMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5751 
	#FMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5752 
	#FMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5753 
	#FMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5755 
	#FMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5756 
	#FMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5757 
	#FMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5758 
	#FMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5759 
	#FMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5760 
	#FMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5761 
	#FMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5762 
	#FMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5763 
	#FMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5766 
	#FMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5769 
	#FMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5772 
	#FMC_SDCR1_NC
 ((
uöt32_t
)0x00000003Ë

	)

5773 
	#FMC_SDCR1_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

5774 
	#FMC_SDCR1_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

5776 
	#FMC_SDCR1_NR
 ((
uöt32_t
)0x0000000CË

	)

5777 
	#FMC_SDCR1_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

5778 
	#FMC_SDCR1_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

5780 
	#FMC_SDCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5781 
	#FMC_SDCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5782 
	#FMC_SDCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5784 
	#FMC_SDCR1_NB
 ((
uöt32_t
)0x00000040Ë

	)

5786 
	#FMC_SDCR1_CAS
 ((
uöt32_t
)0x00000180Ë

	)

5787 
	#FMC_SDCR1_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

5788 
	#FMC_SDCR1_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

5790 
	#FMC_SDCR1_WP
 ((
uöt32_t
)0x00000200Ë

	)

5792 
	#FMC_SDCR1_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

5793 
	#FMC_SDCR1_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

5794 
	#FMC_SDCR1_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

5796 
	#FMC_SDCR1_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

5798 
	#FMC_SDCR1_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

5799 
	#FMC_SDCR1_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

5800 
	#FMC_SDCR1_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

5803 
	#FMC_SDCR2_NC
 ((
uöt32_t
)0x00000003Ë

	)

5804 
	#FMC_SDCR2_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

5805 
	#FMC_SDCR2_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

5807 
	#FMC_SDCR2_NR
 ((
uöt32_t
)0x0000000CË

	)

5808 
	#FMC_SDCR2_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

5809 
	#FMC_SDCR2_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

5811 
	#FMC_SDCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5812 
	#FMC_SDCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5813 
	#FMC_SDCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5815 
	#FMC_SDCR2_NB
 ((
uöt32_t
)0x00000040Ë

	)

5817 
	#FMC_SDCR2_CAS
 ((
uöt32_t
)0x00000180Ë

	)

5818 
	#FMC_SDCR2_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

5819 
	#FMC_SDCR2_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

5821 
	#FMC_SDCR2_WP
 ((
uöt32_t
)0x00000200Ë

	)

5823 
	#FMC_SDCR2_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

5824 
	#FMC_SDCR2_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

5825 
	#FMC_SDCR2_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

5827 
	#FMC_SDCR2_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

5829 
	#FMC_SDCR2_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

5830 
	#FMC_SDCR2_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

5831 
	#FMC_SDCR2_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

5834 
	#FMC_SDTR1_TMRD
 ((
uöt32_t
)0x0000000FË

	)

5835 
	#FMC_SDTR1_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

5836 
	#FMC_SDTR1_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

5837 
	#FMC_SDTR1_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

5838 
	#FMC_SDTR1_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

5840 
	#FMC_SDTR1_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

5841 
	#FMC_SDTR1_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

5842 
	#FMC_SDTR1_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

5843 
	#FMC_SDTR1_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

5844 
	#FMC_SDTR1_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

5846 
	#FMC_SDTR1_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

5847 
	#FMC_SDTR1_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

5848 
	#FMC_SDTR1_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

5849 
	#FMC_SDTR1_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

5850 
	#FMC_SDTR1_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

5852 
	#FMC_SDTR1_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

5853 
	#FMC_SDTR1_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

5854 
	#FMC_SDTR1_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

5855 
	#FMC_SDTR1_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

5857 
	#FMC_SDTR1_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

5858 
	#FMC_SDTR1_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

5859 
	#FMC_SDTR1_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

5860 
	#FMC_SDTR1_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

5862 
	#FMC_SDTR1_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

5863 
	#FMC_SDTR1_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

5864 
	#FMC_SDTR1_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

5865 
	#FMC_SDTR1_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

5867 
	#FMC_SDTR1_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

5868 
	#FMC_SDTR1_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

5869 
	#FMC_SDTR1_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

5870 
	#FMC_SDTR1_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

5873 
	#FMC_SDTR2_TMRD
 ((
uöt32_t
)0x0000000FË

	)

5874 
	#FMC_SDTR2_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

5875 
	#FMC_SDTR2_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

5876 
	#FMC_SDTR2_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

5877 
	#FMC_SDTR2_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

5879 
	#FMC_SDTR2_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

5880 
	#FMC_SDTR2_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

5881 
	#FMC_SDTR2_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

5882 
	#FMC_SDTR2_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

5883 
	#FMC_SDTR2_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

5885 
	#FMC_SDTR2_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

5886 
	#FMC_SDTR2_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

5887 
	#FMC_SDTR2_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

5888 
	#FMC_SDTR2_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

5889 
	#FMC_SDTR2_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

5891 
	#FMC_SDTR2_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

5892 
	#FMC_SDTR2_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

5893 
	#FMC_SDTR2_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

5894 
	#FMC_SDTR2_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

5896 
	#FMC_SDTR2_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

5897 
	#FMC_SDTR2_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

5898 
	#FMC_SDTR2_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

5899 
	#FMC_SDTR2_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

5901 
	#FMC_SDTR2_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

5902 
	#FMC_SDTR2_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

5903 
	#FMC_SDTR2_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

5904 
	#FMC_SDTR2_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

5906 
	#FMC_SDTR2_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

5907 
	#FMC_SDTR2_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

5908 
	#FMC_SDTR2_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

5909 
	#FMC_SDTR2_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

5912 
	#FMC_SDCMR_MODE
 ((
uöt32_t
)0x00000007Ë

	)

5913 
	#FMC_SDCMR_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

5914 
	#FMC_SDCMR_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

5915 
	#FMC_SDCMR_MODE_2
 ((
uöt32_t
)0x00000003Ë

	)

5917 
	#FMC_SDCMR_CTB2
 ((
uöt32_t
)0x00000008Ë

	)

5919 
	#FMC_SDCMR_CTB1
 ((
uöt32_t
)0x00000010Ë

	)

5921 
	#FMC_SDCMR_NRFS
 ((
uöt32_t
)0x000001E0Ë

	)

5922 
	#FMC_SDCMR_NRFS_0
 ((
uöt32_t
)0x00000020Ë

	)

5923 
	#FMC_SDCMR_NRFS_1
 ((
uöt32_t
)0x00000040Ë

	)

5924 
	#FMC_SDCMR_NRFS_2
 ((
uöt32_t
)0x00000080Ë

	)

5925 
	#FMC_SDCMR_NRFS_3
 ((
uöt32_t
)0x00000100Ë

	)

5927 
	#FMC_SDCMR_MRD
 ((
uöt32_t
)0x003FFE00Ë

	)

5930 
	#FMC_SDRTR_CRE
 ((
uöt32_t
)0x00000001Ë

	)

5932 
	#FMC_SDRTR_COUNT
 ((
uöt32_t
)0x00003FFEË

	)

5934 
	#FMC_SDRTR_REIE
 ((
uöt32_t
)0x00004000Ë

	)

5937 
	#FMC_SDSR_RE
 ((
uöt32_t
)0x00000001Ë

	)

5939 
	#FMC_SDSR_MODES1
 ((
uöt32_t
)0x00000006Ë

	)

5940 
	#FMC_SDSR_MODES1_0
 ((
uöt32_t
)0x00000002Ë

	)

5941 
	#FMC_SDSR_MODES1_1
 ((
uöt32_t
)0x00000004Ë

	)

5943 
	#FMC_SDSR_MODES2
 ((
uöt32_t
)0x00000018Ë

	)

5944 
	#FMC_SDSR_MODES2_0
 ((
uöt32_t
)0x00000008Ë

	)

5945 
	#FMC_SDSR_MODES2_1
 ((
uöt32_t
)0x00000010Ë

	)

5947 
	#FMC_SDSR_BUSY
 ((
uöt32_t
)0x00000020Ë

	)

5957 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

5958 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

5959 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

5961 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

5962 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

5963 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

5965 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

5966 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

5967 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

5969 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

5970 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

5971 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

5973 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

5974 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

5975 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

5977 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

5978 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

5979 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

5981 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

5982 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

5983 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

5985 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

5986 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

5987 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

5989 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

5990 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

5991 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

5993 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

5994 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

5995 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

5997 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

5998 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

5999 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

6001 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

6002 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

6003 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

6005 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

6006 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

6007 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

6009 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

6010 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

6011 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

6013 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

6014 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

6015 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

6017 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

6018 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

6019 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

6022 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

6023 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

6024 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

6025 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

6026 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

6027 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

6028 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

6029 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

6030 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

6031 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

6032 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

6033 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

6034 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

6035 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

6036 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

6037 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

6040 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

6041 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

6042 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

6044 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

6045 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

6046 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

6048 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

6049 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

6050 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

6052 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

6053 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

6054 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

6056 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

6057 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

6058 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

6060 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

6061 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

6062 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

6064 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

6065 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

6066 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

6068 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

6069 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

6070 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

6072 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

6073 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

6074 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

6076 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

6077 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

6078 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

6080 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

6081 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

6082 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

6084 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

6085 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

6086 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

6088 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

6089 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

6090 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

6092 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

6093 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

6094 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

6096 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

6097 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

6098 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

6100 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

6101 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

6102 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

6105 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

6106 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

6107 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

6109 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

6110 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

6111 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

6113 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

6114 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

6115 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

6117 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

6118 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

6119 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

6121 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

6122 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

6123 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

6125 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

6126 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

6127 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

6129 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

6130 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

6131 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

6133 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

6134 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

6135 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

6137 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

6138 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

6139 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

6141 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

6142 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

6143 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

6145 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

6146 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

6147 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

6149 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

6150 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

6151 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

6153 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

6154 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

6155 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

6157 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

6158 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

6159 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

6161 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

6162 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

6163 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

6165 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

6166 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

6167 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

6170 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

6171 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

6172 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

6173 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

6174 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

6175 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

6176 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

6177 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

6178 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

6179 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

6180 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

6181 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

6182 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

6183 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

6184 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

6185 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

6187 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

6188 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

6189 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

6190 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

6191 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

6192 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

6193 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

6194 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

6195 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

6196 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

6197 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

6198 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

6199 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

6200 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

6201 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

6202 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

6205 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

6206 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

6207 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

6208 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

6209 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

6210 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

6211 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

6212 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

6213 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

6214 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

6215 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

6216 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

6217 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

6218 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

6219 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

6220 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

6222 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

6223 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

6224 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

6225 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

6226 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

6227 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

6228 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

6229 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

6230 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

6231 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

6232 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

6233 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

6234 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

6235 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

6236 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

6237 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

6240 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

6241 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

6242 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

6243 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

6244 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

6245 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

6246 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

6247 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

6248 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

6249 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

6250 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

6251 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

6252 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

6253 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

6254 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

6255 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

6256 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

6257 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

6258 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

6259 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

6260 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

6261 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

6262 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

6263 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

6264 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

6265 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

6266 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

6267 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

6268 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

6269 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

6270 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

6271 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

6279 
	#HASH_CR_INIT
 ((
uöt32_t
)0x00000004)

	)

6280 
	#HASH_CR_DMAE
 ((
uöt32_t
)0x00000008)

	)

6281 
	#HASH_CR_DATATYPE
 ((
uöt32_t
)0x00000030)

	)

6282 
	#HASH_CR_DATATYPE_0
 ((
uöt32_t
)0x00000010)

	)

6283 
	#HASH_CR_DATATYPE_1
 ((
uöt32_t
)0x00000020)

	)

6284 
	#HASH_CR_MODE
 ((
uöt32_t
)0x00000040)

	)

6285 
	#HASH_CR_ALGO
 ((
uöt32_t
)0x00040080)

	)

6286 
	#HASH_CR_ALGO_0
 ((
uöt32_t
)0x00000080)

	)

6287 
	#HASH_CR_ALGO_1
 ((
uöt32_t
)0x00040000)

	)

6288 
	#HASH_CR_NBW
 ((
uöt32_t
)0x00000F00)

	)

6289 
	#HASH_CR_NBW_0
 ((
uöt32_t
)0x00000100)

	)

6290 
	#HASH_CR_NBW_1
 ((
uöt32_t
)0x00000200)

	)

6291 
	#HASH_CR_NBW_2
 ((
uöt32_t
)0x00000400)

	)

6292 
	#HASH_CR_NBW_3
 ((
uöt32_t
)0x00000800)

	)

6293 
	#HASH_CR_DINNE
 ((
uöt32_t
)0x00001000)

	)

6294 
	#HASH_CR_MDMAT
 ((
uöt32_t
)0x00002000)

	)

6295 
	#HASH_CR_LKEY
 ((
uöt32_t
)0x00010000)

	)

6298 
	#HASH_STR_NBW
 ((
uöt32_t
)0x0000001F)

	)

6299 
	#HASH_STR_NBW_0
 ((
uöt32_t
)0x00000001)

	)

6300 
	#HASH_STR_NBW_1
 ((
uöt32_t
)0x00000002)

	)

6301 
	#HASH_STR_NBW_2
 ((
uöt32_t
)0x00000004)

	)

6302 
	#HASH_STR_NBW_3
 ((
uöt32_t
)0x00000008)

	)

6303 
	#HASH_STR_NBW_4
 ((
uöt32_t
)0x00000010)

	)

6304 
	#HASH_STR_DCAL
 ((
uöt32_t
)0x00000100)

	)

6307 
	#HASH_IMR_DINIM
 ((
uöt32_t
)0x00000001)

	)

6308 
	#HASH_IMR_DCIM
 ((
uöt32_t
)0x00000002)

	)

6311 
	#HASH_SR_DINIS
 ((
uöt32_t
)0x00000001)

	)

6312 
	#HASH_SR_DCIS
 ((
uöt32_t
)0x00000002)

	)

6313 
	#HASH_SR_DMAS
 ((
uöt32_t
)0x00000004)

	)

6314 
	#HASH_SR_BUSY
 ((
uöt32_t
)0x00000008)

	)

6322 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

6323 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

6324 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

6325 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

6326 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

6327 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

6328 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

6329 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

6330 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

6331 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

6332 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

6333 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

6334 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

6335 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

6338 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

6339 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

6340 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

6341 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

6342 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

6343 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

6344 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

6346 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

6347 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

6348 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

6349 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

6350 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

6353 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

6354 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

6356 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

6357 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

6358 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

6359 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

6360 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

6361 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

6362 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

6363 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

6364 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

6365 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

6367 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

6370 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

6371 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

6374 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

6377 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

6378 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

6379 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

6380 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

6381 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

6382 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

6383 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

6384 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

6385 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

6386 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

6387 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

6388 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

6389 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

6390 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

6393 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

6394 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

6395 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

6396 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

6397 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

6398 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

6399 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

6400 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

6403 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

6404 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

6405 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

6408 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

6411 
	#I2C_FLTR_DNF
 ((
uöt8_t
)0x0FË

	)

6412 
	#I2C_FLTR_ANOFF
 ((
uöt8_t
)0x10Ë

	)

6420 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

6423 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

6424 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

6425 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

6426 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

6429 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

6432 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

6433 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

6443 
	#LTDC_SSCR_VSH
 ((
uöt32_t
)0x000007FFË

	)

6444 
	#LTDC_SSCR_HSW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6448 
	#LTDC_BPCR_AVBP
 ((
uöt32_t
)0x000007FFË

	)

6449 
	#LTDC_BPCR_AHBP
 ((
uöt32_t
)0x0FFF0000Ë

	)

6453 
	#LTDC_AWCR_AAH
 ((
uöt32_t
)0x000007FFË

	)

6454 
	#LTDC_AWCR_AAW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6458 
	#LTDC_TWCR_TOTALH
 ((
uöt32_t
)0x000007FFË

	)

6459 
	#LTDC_TWCR_TOTALW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6463 
	#LTDC_GCR_LTDCEN
 ((
uöt32_t
)0x00000001Ë

	)

6464 
	#LTDC_GCR_DBW
 ((
uöt32_t
)0x00000070Ë

	)

6465 
	#LTDC_GCR_DGW
 ((
uöt32_t
)0x00000700Ë

	)

6466 
	#LTDC_GCR_DRW
 ((
uöt32_t
)0x00007000Ë

	)

6467 
	#LTDC_GCR_DTEN
 ((
uöt32_t
)0x00010000Ë

	)

6468 
	#LTDC_GCR_PCPOL
 ((
uöt32_t
)0x10000000Ë

	)

6469 
	#LTDC_GCR_DEPOL
 ((
uöt32_t
)0x20000000Ë

	)

6470 
	#LTDC_GCR_VSPOL
 ((
uöt32_t
)0x40000000Ë

	)

6471 
	#LTDC_GCR_HSPOL
 ((
uöt32_t
)0x80000000Ë

	)

6475 
	#LTDC_SRCR_IMR
 ((
uöt32_t
)0x00000001Ë

	)

6476 
	#LTDC_SRCR_VBR
 ((
uöt32_t
)0x00000002Ë

	)

6480 
	#LTDC_BCCR_BCBLUE
 ((
uöt32_t
)0x000000FFË

	)

6481 
	#LTDC_BCCR_BCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6482 
	#LTDC_BCCR_BCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6486 
	#LTDC_IER_LIE
 ((
uöt32_t
)0x00000001Ë

	)

6487 
	#LTDC_IER_FUIE
 ((
uöt32_t
)0x00000002Ë

	)

6488 
	#LTDC_IER_TERRIE
 ((
uöt32_t
)0x00000004Ë

	)

6489 
	#LTDC_IER_RRIE
 ((
uöt32_t
)0x00000008Ë

	)

6493 
	#LTDC_ISR_LIF
 ((
uöt32_t
)0x00000001Ë

	)

6494 
	#LTDC_ISR_FUIF
 ((
uöt32_t
)0x00000002Ë

	)

6495 
	#LTDC_ISR_TERRIF
 ((
uöt32_t
)0x00000004Ë

	)

6496 
	#LTDC_ISR_RRIF
 ((
uöt32_t
)0x00000008Ë

	)

6500 
	#LTDC_ICR_CLIF
 ((
uöt32_t
)0x00000001Ë

	)

6501 
	#LTDC_ICR_CFUIF
 ((
uöt32_t
)0x00000002Ë

	)

6502 
	#LTDC_ICR_CTERRIF
 ((
uöt32_t
)0x00000004Ë

	)

6503 
	#LTDC_ICR_CRRIF
 ((
uöt32_t
)0x00000008Ë

	)

6507 
	#LTDC_LIPCR_LIPOS
 ((
uöt32_t
)0x000007FFË

	)

6511 
	#LTDC_CPSR_CYPOS
 ((
uöt32_t
)0x0000FFFFË

	)

6512 
	#LTDC_CPSR_CXPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6516 
	#LTDC_CDSR_VDES
 ((
uöt32_t
)0x00000001Ë

	)

6517 
	#LTDC_CDSR_HDES
 ((
uöt32_t
)0x00000002Ë

	)

6518 
	#LTDC_CDSR_VSYNCS
 ((
uöt32_t
)0x00000004Ë

	)

6519 
	#LTDC_CDSR_HSYNCS
 ((
uöt32_t
)0x00000008Ë

	)

6523 
	#LTDC_LxCR_LEN
 ((
uöt32_t
)0x00000001Ë

	)

6524 
	#LTDC_LxCR_COLKEN
 ((
uöt32_t
)0x00000002Ë

	)

6525 
	#LTDC_LxCR_CLUTEN
 ((
uöt32_t
)0x00000010Ë

	)

6529 
	#LTDC_LxWHPCR_WHSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

6530 
	#LTDC_LxWHPCR_WHSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6534 
	#LTDC_LxWVPCR_WVSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

6535 
	#LTDC_LxWVPCR_WVSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6539 
	#LTDC_LxCKCR_CKBLUE
 ((
uöt32_t
)0x000000FFË

	)

6540 
	#LTDC_LxCKCR_CKGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6541 
	#LTDC_LxCKCR_CKRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6545 
	#LTDC_LxPFCR_PF
 ((
uöt32_t
)0x00000007Ë

	)

6549 
	#LTDC_LxCACR_CONSTA
 ((
uöt32_t
)0x000000FFË

	)

6553 
	#LTDC_LxDCCR_DCBLUE
 ((
uöt32_t
)0x000000FFË

	)

6554 
	#LTDC_LxDCCR_DCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6555 
	#LTDC_LxDCCR_DCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6556 
	#LTDC_LxDCCR_DCALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

6560 
	#LTDC_LxBFCR_BF2
 ((
uöt32_t
)0x00000007Ë

	)

6561 
	#LTDC_LxBFCR_BF1
 ((
uöt32_t
)0x00000700Ë

	)

6565 
	#LTDC_LxCFBAR_CFBADD
 ((
uöt32_t
)0xFFFFFFFFË

	)

6569 
	#LTDC_LxCFBLR_CFBLL
 ((
uöt32_t
)0x00001FFFË

	)

6570 
	#LTDC_LxCFBLR_CFBP
 ((
uöt32_t
)0x1FFF0000Ë

	)

6574 
	#LTDC_LxCFBLNR_CFBLNBR
 ((
uöt32_t
)0x000007FFË

	)

6578 
	#LTDC_LxCLUTWR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

6579 
	#LTDC_LxCLUTWR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6580 
	#LTDC_LxCLUTWR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

6581 
	#LTDC_LxCLUTWR_CLUTADD
 ((
uöt32_t
)0xFF000000Ë

	)

6589 
	#PWR_CR_LPDS
 ((
uöt32_t
)0x00000001Ë

	)

6590 
	#PWR_CR_PDDS
 ((
uöt32_t
)0x00000002Ë

	)

6591 
	#PWR_CR_CWUF
 ((
uöt32_t
)0x00000004Ë

	)

6592 
	#PWR_CR_CSBF
 ((
uöt32_t
)0x00000008Ë

	)

6593 
	#PWR_CR_PVDE
 ((
uöt32_t
)0x00000010Ë

	)

6595 
	#PWR_CR_PLS
 ((
uöt32_t
)0x000000E0Ë

	)

6596 
	#PWR_CR_PLS_0
 ((
uöt32_t
)0x00000020Ë

	)

6597 
	#PWR_CR_PLS_1
 ((
uöt32_t
)0x00000040Ë

	)

6598 
	#PWR_CR_PLS_2
 ((
uöt32_t
)0x00000080Ë

	)

6601 
	#PWR_CR_PLS_LEV0
 ((
uöt32_t
)0x00000000Ë

	)

6602 
	#PWR_CR_PLS_LEV1
 ((
uöt32_t
)0x00000020Ë

	)

6603 
	#PWR_CR_PLS_LEV2
 ((
uöt32_t
)0x00000040Ë

	)

6604 
	#PWR_CR_PLS_LEV3
 ((
uöt32_t
)0x00000060Ë

	)

6605 
	#PWR_CR_PLS_LEV4
 ((
uöt32_t
)0x00000080Ë

	)

6606 
	#PWR_CR_PLS_LEV5
 ((
uöt32_t
)0x000000A0Ë

	)

6607 
	#PWR_CR_PLS_LEV6
 ((
uöt32_t
)0x000000C0Ë

	)

6608 
	#PWR_CR_PLS_LEV7
 ((
uöt32_t
)0x000000E0Ë

	)

6610 
	#PWR_CR_DBP
 ((
uöt32_t
)0x00000100Ë

	)

6611 
	#PWR_CR_FPDS
 ((
uöt32_t
)0x00000200Ë

	)

6612 
	#PWR_CR_LPUDS
 ((
uöt32_t
)0x00000400Ë

	)

6613 
	#PWR_CR_MRUDS
 ((
uöt32_t
)0x00000800Ë

	)

6614 
	#PWR_CR_LPLVDS
 ((
uöt32_t
)0x00000400Ë

	)

6615 
	#PWR_CR_MRLVDS
 ((
uöt32_t
)0x00000800Ë

	)

6617 
	#PWR_CR_ADCDC1
 ((
uöt32_t
)0x00002000Ë

	)

6619 
	#PWR_CR_VOS
 ((
uöt32_t
)0x0000C000Ë

	)

6620 
	#PWR_CR_VOS_0
 ((
uöt32_t
)0x00004000Ë

	)

6621 
	#PWR_CR_VOS_1
 ((
uöt32_t
)0x00008000Ë

	)

6623 
	#PWR_CR_ODEN
 ((
uöt32_t
)0x00010000Ë

	)

6624 
	#PWR_CR_ODSWEN
 ((
uöt32_t
)0x00020000Ë

	)

6625 
	#PWR_CR_UDEN
 ((
uöt32_t
)0x000C0000Ë

	)

6626 
	#PWR_CR_UDEN_0
 ((
uöt32_t
)0x00040000Ë

	)

6627 
	#PWR_CR_UDEN_1
 ((
uöt32_t
)0x00080000Ë

	)

6629 
	#PWR_CR_FMSSR
 ((
uöt32_t
)0x00100000Ë

	)

6630 
	#PWR_CR_FISSR
 ((
uöt32_t
)0x00200000Ë

	)

6633 
	#PWR_CR_PMODE
 
PWR_CR_VOS


	)

6636 
	#PWR_CSR_WUF
 ((
uöt32_t
)0x00000001Ë

	)

6637 
	#PWR_CSR_SBF
 ((
uöt32_t
)0x00000002Ë

	)

6638 
	#PWR_CSR_PVDO
 ((
uöt32_t
)0x00000004Ë

	)

6639 
	#PWR_CSR_BRR
 ((
uöt32_t
)0x00000008Ë

	)

6640 
	#PWR_CSR_EWUP
 ((
uöt32_t
)0x00000100Ë

	)

6641 
	#PWR_CSR_BRE
 ((
uöt32_t
)0x00000200Ë

	)

6642 
	#PWR_CSR_VOSRDY
 ((
uöt32_t
)0x00004000Ë

	)

6643 
	#PWR_CSR_ODRDY
 ((
uöt32_t
)0x00010000Ë

	)

6644 
	#PWR_CSR_ODSWRDY
 ((
uöt32_t
)0x00020000Ë

	)

6645 
	#PWR_CSR_UDSWRDY
 ((
uöt32_t
)0x000C0000Ë

	)

6648 
	#PWR_CSR_REGRDY
 
PWR_CSR_VOSRDY


	)

6656 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

6657 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

6659 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

6660 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

6661 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

6662 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

6663 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

6664 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

6666 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

6667 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

6668 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

6669 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

6670 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

6671 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

6672 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

6673 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

6674 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

6676 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

6677 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

6678 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

6679 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

6680 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

6681 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

6682 
	#RCC_CR_PLLI2SON
 ((
uöt32_t
)0x04000000)

	)

6683 
	#RCC_CR_PLLI2SRDY
 ((
uöt32_t
)0x08000000)

	)

6684 
	#RCC_CR_PLLSAION
 ((
uöt32_t
)0x10000000)

	)

6685 
	#RCC_CR_PLLSAIRDY
 ((
uöt32_t
)0x20000000)

	)

6688 
	#RCC_PLLCFGR_PLLM
 ((
uöt32_t
)0x0000003F)

	)

6689 
	#RCC_PLLCFGR_PLLM_0
 ((
uöt32_t
)0x00000001)

	)

6690 
	#RCC_PLLCFGR_PLLM_1
 ((
uöt32_t
)0x00000002)

	)

6691 
	#RCC_PLLCFGR_PLLM_2
 ((
uöt32_t
)0x00000004)

	)

6692 
	#RCC_PLLCFGR_PLLM_3
 ((
uöt32_t
)0x00000008)

	)

6693 
	#RCC_PLLCFGR_PLLM_4
 ((
uöt32_t
)0x00000010)

	)

6694 
	#RCC_PLLCFGR_PLLM_5
 ((
uöt32_t
)0x00000020)

	)

6696 
	#RCC_PLLCFGR_PLLN
 ((
uöt32_t
)0x00007FC0)

	)

6697 
	#RCC_PLLCFGR_PLLN_0
 ((
uöt32_t
)0x00000040)

	)

6698 
	#RCC_PLLCFGR_PLLN_1
 ((
uöt32_t
)0x00000080)

	)

6699 
	#RCC_PLLCFGR_PLLN_2
 ((
uöt32_t
)0x00000100)

	)

6700 
	#RCC_PLLCFGR_PLLN_3
 ((
uöt32_t
)0x00000200)

	)

6701 
	#RCC_PLLCFGR_PLLN_4
 ((
uöt32_t
)0x00000400)

	)

6702 
	#RCC_PLLCFGR_PLLN_5
 ((
uöt32_t
)0x00000800)

	)

6703 
	#RCC_PLLCFGR_PLLN_6
 ((
uöt32_t
)0x00001000)

	)

6704 
	#RCC_PLLCFGR_PLLN_7
 ((
uöt32_t
)0x00002000)

	)

6705 
	#RCC_PLLCFGR_PLLN_8
 ((
uöt32_t
)0x00004000)

	)

6707 
	#RCC_PLLCFGR_PLLP
 ((
uöt32_t
)0x00030000)

	)

6708 
	#RCC_PLLCFGR_PLLP_0
 ((
uöt32_t
)0x00010000)

	)

6709 
	#RCC_PLLCFGR_PLLP_1
 ((
uöt32_t
)0x00020000)

	)

6711 
	#RCC_PLLCFGR_PLLSRC
 ((
uöt32_t
)0x00400000)

	)

6712 
	#RCC_PLLCFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00400000)

	)

6713 
	#RCC_PLLCFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000)

	)

6715 
	#RCC_PLLCFGR_PLLQ
 ((
uöt32_t
)0x0F000000)

	)

6716 
	#RCC_PLLCFGR_PLLQ_0
 ((
uöt32_t
)0x01000000)

	)

6717 
	#RCC_PLLCFGR_PLLQ_1
 ((
uöt32_t
)0x02000000)

	)

6718 
	#RCC_PLLCFGR_PLLQ_2
 ((
uöt32_t
)0x04000000)

	)

6719 
	#RCC_PLLCFGR_PLLQ_3
 ((
uöt32_t
)0x08000000)

	)

6723 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

6724 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

6725 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

6727 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

6728 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

6729 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

6732 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

6733 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

6734 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

6736 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

6737 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

6738 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

6741 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

6742 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

6743 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

6744 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

6745 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

6747 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6748 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

6749 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

6750 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

6751 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

6752 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

6753 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

6754 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

6755 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

6758 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00001C00Ë

	)

6759 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000400Ë

	)

6760 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000800Ë

	)

6761 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00001000Ë

	)

6763 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6764 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00001000Ë

	)

6765 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00001400Ë

	)

6766 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00001800Ë

	)

6767 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00001C00Ë

	)

6770 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x0000E000Ë

	)

6771 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00002000Ë

	)

6772 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00004000Ë

	)

6773 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00008000Ë

	)

6775 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6776 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00008000Ë

	)

6777 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x0000A000Ë

	)

6778 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

6779 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x0000E000Ë

	)

6782 
	#RCC_CFGR_RTCPRE
 ((
uöt32_t
)0x001F0000)

	)

6783 
	#RCC_CFGR_RTCPRE_0
 ((
uöt32_t
)0x00010000)

	)

6784 
	#RCC_CFGR_RTCPRE_1
 ((
uöt32_t
)0x00020000)

	)

6785 
	#RCC_CFGR_RTCPRE_2
 ((
uöt32_t
)0x00040000)

	)

6786 
	#RCC_CFGR_RTCPRE_3
 ((
uöt32_t
)0x00080000)

	)

6787 
	#RCC_CFGR_RTCPRE_4
 ((
uöt32_t
)0x00100000)

	)

6790 
	#RCC_CFGR_MCO1
 ((
uöt32_t
)0x00600000)

	)

6791 
	#RCC_CFGR_MCO1_0
 ((
uöt32_t
)0x00200000)

	)

6792 
	#RCC_CFGR_MCO1_1
 ((
uöt32_t
)0x00400000)

	)

6794 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000)

	)

6796 
	#RCC_CFGR_MCO1PRE
 ((
uöt32_t
)0x07000000)

	)

6797 
	#RCC_CFGR_MCO1PRE_0
 ((
uöt32_t
)0x01000000)

	)

6798 
	#RCC_CFGR_MCO1PRE_1
 ((
uöt32_t
)0x02000000)

	)

6799 
	#RCC_CFGR_MCO1PRE_2
 ((
uöt32_t
)0x04000000)

	)

6801 
	#RCC_CFGR_MCO2PRE
 ((
uöt32_t
)0x38000000)

	)

6802 
	#RCC_CFGR_MCO2PRE_0
 ((
uöt32_t
)0x08000000)

	)

6803 
	#RCC_CFGR_MCO2PRE_1
 ((
uöt32_t
)0x10000000)

	)

6804 
	#RCC_CFGR_MCO2PRE_2
 ((
uöt32_t
)0x20000000)

	)

6806 
	#RCC_CFGR_MCO2
 ((
uöt32_t
)0xC0000000)

	)

6807 
	#RCC_CFGR_MCO2_0
 ((
uöt32_t
)0x40000000)

	)

6808 
	#RCC_CFGR_MCO2_1
 ((
uöt32_t
)0x80000000)

	)

6811 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001)

	)

6812 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002)

	)

6813 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004)

	)

6814 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008)

	)

6815 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010)

	)

6816 
	#RCC_CIR_PLLI2SRDYF
 ((
uöt32_t
)0x00000020)

	)

6817 
	#RCC_CIR_PLLSAIRDYF
 ((
uöt32_t
)0x00000040)

	)

6818 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080)

	)

6819 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100)

	)

6820 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200)

	)

6821 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400)

	)

6822 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800)

	)

6823 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000)

	)

6824 
	#RCC_CIR_PLLI2SRDYIE
 ((
uöt32_t
)0x00002000)

	)

6825 
	#RCC_CIR_PLLSAIRDYIE
 ((
uöt32_t
)0x00004000)

	)

6826 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000)

	)

6827 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000)

	)

6828 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000)

	)

6829 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000)

	)

6830 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000)

	)

6831 
	#RCC_CIR_PLLI2SRDYC
 ((
uöt32_t
)0x00200000)

	)

6832 
	#RCC_CIR_PLLSAIRDYC
 ((
uöt32_t
)0x00400000)

	)

6833 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000)

	)

6836 
	#RCC_AHB1RSTR_GPIOARST
 ((
uöt32_t
)0x00000001)

	)

6837 
	#RCC_AHB1RSTR_GPIOBRST
 ((
uöt32_t
)0x00000002)

	)

6838 
	#RCC_AHB1RSTR_GPIOCRST
 ((
uöt32_t
)0x00000004)

	)

6839 
	#RCC_AHB1RSTR_GPIODRST
 ((
uöt32_t
)0x00000008)

	)

6840 
	#RCC_AHB1RSTR_GPIOERST
 ((
uöt32_t
)0x00000010)

	)

6841 
	#RCC_AHB1RSTR_GPIOFRST
 ((
uöt32_t
)0x00000020)

	)

6842 
	#RCC_AHB1RSTR_GPIOGRST
 ((
uöt32_t
)0x00000040)

	)

6843 
	#RCC_AHB1RSTR_GPIOHRST
 ((
uöt32_t
)0x00000080)

	)

6844 
	#RCC_AHB1RSTR_GPIOIRST
 ((
uöt32_t
)0x00000100)

	)

6845 
	#RCC_AHB1RSTR_GPIOJRST
 ((
uöt32_t
)0x00000200)

	)

6846 
	#RCC_AHB1RSTR_GPIOKRST
 ((
uöt32_t
)0x00000400)

	)

6847 
	#RCC_AHB1RSTR_CRCRST
 ((
uöt32_t
)0x00001000)

	)

6848 
	#RCC_AHB1RSTR_DMA1RST
 ((
uöt32_t
)0x00200000)

	)

6849 
	#RCC_AHB1RSTR_DMA2RST
 ((
uöt32_t
)0x00400000)

	)

6850 
	#RCC_AHB1RSTR_DMA2DRST
 ((
uöt32_t
)0x00800000)

	)

6851 
	#RCC_AHB1RSTR_ETHMACRST
 ((
uöt32_t
)0x02000000)

	)

6852 
	#RCC_AHB1RSTR_OTGHRST
 ((
uöt32_t
)0x10000000)

	)

6855 
	#RCC_AHB2RSTR_DCMIRST
 ((
uöt32_t
)0x00000001)

	)

6856 
	#RCC_AHB2RSTR_CRYPRST
 ((
uöt32_t
)0x00000010)

	)

6857 
	#RCC_AHB2RSTR_HASHRST
 ((
uöt32_t
)0x00000020)

	)

6859 
	#RCC_AHB2RSTR_HSAHRST
 
RCC_AHB2RSTR_HASHRST


	)

6860 
	#RCC_AHB2RSTR_RNGRST
 ((
uöt32_t
)0x00000040)

	)

6861 
	#RCC_AHB2RSTR_OTGFSRST
 ((
uöt32_t
)0x00000080)

	)

6864 #i‡
deföed
(
STM32F40_41xxx
)

6865 
	#RCC_AHB3RSTR_FSMCRST
 ((
uöt32_t
)0x00000001)

	)

6868 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

6869 
	#RCC_AHB3RSTR_FMCRST
 ((
uöt32_t
)0x00000001)

	)

6872 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001)

	)

6873 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002)

	)

6874 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004)

	)

6875 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008)

	)

6876 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010)

	)

6877 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020)

	)

6878 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040)

	)

6879 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080)

	)

6880 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100)

	)

6881 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800)

	)

6882 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000)

	)

6883 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000)

	)

6884 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000)

	)

6885 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000)

	)

6886 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000)

	)

6887 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000)

	)

6888 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000)

	)

6889 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000)

	)

6890 
	#RCC_APB1RSTR_I2C3RST
 ((
uöt32_t
)0x00800000)

	)

6891 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000)

	)

6892 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000)

	)

6893 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000)

	)

6894 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000)

	)

6895 
	#RCC_APB1RSTR_UART7RST
 ((
uöt32_t
)0x40000000)

	)

6896 
	#RCC_APB1RSTR_UART8RST
 ((
uöt32_t
)0x80000000)

	)

6899 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000001)

	)

6900 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00000002)

	)

6901 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00000010)

	)

6902 
	#RCC_APB2RSTR_USART6RST
 ((
uöt32_t
)0x00000020)

	)

6903 
	#RCC_APB2RSTR_ADCRST
 ((
uöt32_t
)0x00000100)

	)

6904 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800)

	)

6905 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000)

	)

6906 
	#RCC_APB2RSTR_SPI4RST
 ((
uöt32_t
)0x00002000)

	)

6907 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00004000)

	)

6908 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00010000)

	)

6909 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00020000)

	)

6910 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00040000)

	)

6911 
	#RCC_APB2RSTR_SPI5RST
 ((
uöt32_t
)0x00100000)

	)

6912 
	#RCC_APB2RSTR_SPI6RST
 ((
uöt32_t
)0x00200000)

	)

6913 
	#RCC_APB2RSTR_SAI1RST
 ((
uöt32_t
)0x00400000)

	)

6914 
	#RCC_APB2RSTR_LTDCRST
 ((
uöt32_t
)0x04000000)

	)

6917 
	#RCC_APB2RSTR_SPI1
 
RCC_APB2RSTR_SPI1RST


	)

6920 
	#RCC_AHB1ENR_GPIOAEN
 ((
uöt32_t
)0x00000001)

	)

6921 
	#RCC_AHB1ENR_GPIOBEN
 ((
uöt32_t
)0x00000002)

	)

6922 
	#RCC_AHB1ENR_GPIOCEN
 ((
uöt32_t
)0x00000004)

	)

6923 
	#RCC_AHB1ENR_GPIODEN
 ((
uöt32_t
)0x00000008)

	)

6924 
	#RCC_AHB1ENR_GPIOEEN
 ((
uöt32_t
)0x00000010)

	)

6925 
	#RCC_AHB1ENR_GPIOFEN
 ((
uöt32_t
)0x00000020)

	)

6926 
	#RCC_AHB1ENR_GPIOGEN
 ((
uöt32_t
)0x00000040)

	)

6927 
	#RCC_AHB1ENR_GPIOHEN
 ((
uöt32_t
)0x00000080)

	)

6928 
	#RCC_AHB1ENR_GPIOIEN
 ((
uöt32_t
)0x00000100)

	)

6929 
	#RCC_AHB1ENR_GPIOJEN
 ((
uöt32_t
)0x00000200)

	)

6930 
	#RCC_AHB1ENR_GPIOKEN
 ((
uöt32_t
)0x00000400)

	)

6931 
	#RCC_AHB1ENR_CRCEN
 ((
uöt32_t
)0x00001000)

	)

6932 
	#RCC_AHB1ENR_BKPSRAMEN
 ((
uöt32_t
)0x00040000)

	)

6933 
	#RCC_AHB1ENR_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

6934 
	#RCC_AHB1ENR_DMA1EN
 ((
uöt32_t
)0x00200000)

	)

6935 
	#RCC_AHB1ENR_DMA2EN
 ((
uöt32_t
)0x00400000)

	)

6936 
	#RCC_AHB1ENR_DMA2DEN
 ((
uöt32_t
)0x00800000)

	)

6937 
	#RCC_AHB1ENR_ETHMACEN
 ((
uöt32_t
)0x02000000)

	)

6938 
	#RCC_AHB1ENR_ETHMACTXEN
 ((
uöt32_t
)0x04000000)

	)

6939 
	#RCC_AHB1ENR_ETHMACRXEN
 ((
uöt32_t
)0x08000000)

	)

6940 
	#RCC_AHB1ENR_ETHMACPTPEN
 ((
uöt32_t
)0x10000000)

	)

6941 
	#RCC_AHB1ENR_OTGHSEN
 ((
uöt32_t
)0x20000000)

	)

6942 
	#RCC_AHB1ENR_OTGHSULPIEN
 ((
uöt32_t
)0x40000000)

	)

6945 
	#RCC_AHB2ENR_DCMIEN
 ((
uöt32_t
)0x00000001)

	)

6946 
	#RCC_AHB2ENR_CRYPEN
 ((
uöt32_t
)0x00000010)

	)

6947 
	#RCC_AHB2ENR_HASHEN
 ((
uöt32_t
)0x00000020)

	)

6948 
	#RCC_AHB2ENR_RNGEN
 ((
uöt32_t
)0x00000040)

	)

6949 
	#RCC_AHB2ENR_OTGFSEN
 ((
uöt32_t
)0x00000080)

	)

6953 #i‡
deföed
(
STM32F40_41xxx
)

6954 
	#RCC_AHB3ENR_FSMCEN
 ((
uöt32_t
)0x00000001)

	)

6957 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

6958 
	#RCC_AHB3ENR_FMCEN
 ((
uöt32_t
)0x00000001)

	)

6962 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001)

	)

6963 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002)

	)

6964 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004)

	)

6965 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008)

	)

6966 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010)

	)

6967 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020)

	)

6968 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040)

	)

6969 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080)

	)

6970 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100)

	)

6971 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

6972 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000)

	)

6973 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000)

	)

6974 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000)

	)

6975 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000)

	)

6976 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000)

	)

6977 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000)

	)

6978 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000)

	)

6979 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000)

	)

6980 
	#RCC_APB1ENR_I2C3EN
 ((
uöt32_t
)0x00800000)

	)

6981 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000)

	)

6982 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000)

	)

6983 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000)

	)

6984 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000)

	)

6985 
	#RCC_APB1ENR_UART7EN
 ((
uöt32_t
)0x40000000)

	)

6986 
	#RCC_APB1ENR_UART8EN
 ((
uöt32_t
)0x80000000)

	)

6989 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000001)

	)

6990 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00000002)

	)

6991 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00000010)

	)

6992 
	#RCC_APB2ENR_USART6EN
 ((
uöt32_t
)0x00000020)

	)

6993 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000100)

	)

6994 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000200)

	)

6995 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00000400)

	)

6996 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800)

	)

6997 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000)

	)

6998 
	#RCC_APB2ENR_SPI4EN
 ((
uöt32_t
)0x00002000)

	)

6999 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00004000)

	)

7000 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00010000)

	)

7001 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00020000)

	)

7002 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00040000)

	)

7003 
	#RCC_APB2ENR_SPI5EN
 ((
uöt32_t
)0x00100000)

	)

7004 
	#RCC_APB2ENR_SPI6EN
 ((
uöt32_t
)0x00200000)

	)

7005 
	#RCC_APB2ENR_SAI1EN
 ((
uöt32_t
)0x00400000)

	)

7006 
	#RCC_APB2ENR_LTDCEN
 ((
uöt32_t
)0x04000000)

	)

7009 
	#RCC_AHB1LPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001)

	)

7010 
	#RCC_AHB1LPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002)

	)

7011 
	#RCC_AHB1LPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004)

	)

7012 
	#RCC_AHB1LPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008)

	)

7013 
	#RCC_AHB1LPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010)

	)

7014 
	#RCC_AHB1LPENR_GPIOFLPEN
 ((
uöt32_t
)0x00000020)

	)

7015 
	#RCC_AHB1LPENR_GPIOGLPEN
 ((
uöt32_t
)0x00000040)

	)

7016 
	#RCC_AHB1LPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000080)

	)

7017 
	#RCC_AHB1LPENR_GPIOILPEN
 ((
uöt32_t
)0x00000100)

	)

7018 
	#RCC_AHB1LPENR_GPIOJLPEN
 ((
uöt32_t
)0x00000200)

	)

7019 
	#RCC_AHB1LPENR_GPIOKLPEN
 ((
uöt32_t
)0x00000400)

	)

7020 
	#RCC_AHB1LPENR_CRCLPEN
 ((
uöt32_t
)0x00001000)

	)

7021 
	#RCC_AHB1LPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000)

	)

7022 
	#RCC_AHB1LPENR_SRAM1LPEN
 ((
uöt32_t
)0x00010000)

	)

7023 
	#RCC_AHB1LPENR_SRAM2LPEN
 ((
uöt32_t
)0x00020000)

	)

7024 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 ((
uöt32_t
)0x00040000)

	)

7025 
	#RCC_AHB1LPENR_SRAM3LPEN
 ((
uöt32_t
)0x00080000)

	)

7026 
	#RCC_AHB1LPENR_DMA1LPEN
 ((
uöt32_t
)0x00200000)

	)

7027 
	#RCC_AHB1LPENR_DMA2LPEN
 ((
uöt32_t
)0x00400000)

	)

7028 
	#RCC_AHB1LPENR_DMA2DLPEN
 ((
uöt32_t
)0x00800000)

	)

7029 
	#RCC_AHB1LPENR_ETHMACLPEN
 ((
uöt32_t
)0x02000000)

	)

7030 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 ((
uöt32_t
)0x04000000)

	)

7031 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 ((
uöt32_t
)0x08000000)

	)

7032 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 ((
uöt32_t
)0x10000000)

	)

7033 
	#RCC_AHB1LPENR_OTGHSLPEN
 ((
uöt32_t
)0x20000000)

	)

7034 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 ((
uöt32_t
)0x40000000)

	)

7037 
	#RCC_AHB2LPENR_DCMILPEN
 ((
uöt32_t
)0x00000001)

	)

7038 
	#RCC_AHB2LPENR_CRYPLPEN
 ((
uöt32_t
)0x00000010)

	)

7039 
	#RCC_AHB2LPENR_HASHLPEN
 ((
uöt32_t
)0x00000020)

	)

7040 
	#RCC_AHB2LPENR_RNGLPEN
 ((
uöt32_t
)0x00000040)

	)

7041 
	#RCC_AHB2LPENR_OTGFSLPEN
 ((
uöt32_t
)0x00000080)

	)

7044 #i‡
deföed
(
STM32F40_41xxx
)

7045 
	#RCC_AHB3LPENR_FSMCLPEN
 ((
uöt32_t
)0x00000001)

	)

7048 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

7049 
	#RCC_AHB3LPENR_FMCLPEN
 ((
uöt32_t
)0x00000001)

	)

7053 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001)

	)

7054 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002)

	)

7055 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004)

	)

7056 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008)

	)

7057 
	#RCC_APB1LPENR_TIM6LPEN
 ((
uöt32_t
)0x00000010)

	)

7058 
	#RCC_APB1LPENR_TIM7LPEN
 ((
uöt32_t
)0x00000020)

	)

7059 
	#RCC_APB1LPENR_TIM12LPEN
 ((
uöt32_t
)0x00000040)

	)

7060 
	#RCC_APB1LPENR_TIM13LPEN
 ((
uöt32_t
)0x00000080)

	)

7061 
	#RCC_APB1LPENR_TIM14LPEN
 ((
uöt32_t
)0x00000100)

	)

7062 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800)

	)

7063 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000)

	)

7064 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000)

	)

7065 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000)

	)

7066 
	#RCC_APB1LPENR_USART3LPEN
 ((
uöt32_t
)0x00040000)

	)

7067 
	#RCC_APB1LPENR_UART4LPEN
 ((
uöt32_t
)0x00080000)

	)

7068 
	#RCC_APB1LPENR_UART5LPEN
 ((
uöt32_t
)0x00100000)

	)

7069 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000)

	)

7070 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000)

	)

7071 
	#RCC_APB1LPENR_I2C3LPEN
 ((
uöt32_t
)0x00800000)

	)

7072 
	#RCC_APB1LPENR_CAN1LPEN
 ((
uöt32_t
)0x02000000)

	)

7073 
	#RCC_APB1LPENR_CAN2LPEN
 ((
uöt32_t
)0x04000000)

	)

7074 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000)

	)

7075 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000)

	)

7076 
	#RCC_APB1LPENR_UART7LPEN
 ((
uöt32_t
)0x40000000)

	)

7077 
	#RCC_APB1LPENR_UART8LPEN
 ((
uöt32_t
)0x80000000)

	)

7080 
	#RCC_APB2LPENR_TIM1LPEN
 ((
uöt32_t
)0x00000001)

	)

7081 
	#RCC_APB2LPENR_TIM8LPEN
 ((
uöt32_t
)0x00000002)

	)

7082 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00000010)

	)

7083 
	#RCC_APB2LPENR_USART6LPEN
 ((
uöt32_t
)0x00000020)

	)

7084 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000100)

	)

7085 
	#RCC_APB2LPENR_ADC2PEN
 ((
uöt32_t
)0x00000200)

	)

7086 
	#RCC_APB2LPENR_ADC3LPEN
 ((
uöt32_t
)0x00000400)

	)

7087 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800)

	)

7088 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000)

	)

7089 
	#RCC_APB2LPENR_SPI4LPEN
 ((
uöt32_t
)0x00002000)

	)

7090 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00004000)

	)

7091 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00010000)

	)

7092 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00020000)

	)

7093 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00040000)

	)

7094 
	#RCC_APB2LPENR_SPI5LPEN
 ((
uöt32_t
)0x00100000)

	)

7095 
	#RCC_APB2LPENR_SPI6LPEN
 ((
uöt32_t
)0x00200000)

	)

7096 
	#RCC_APB2LPENR_SAI1LPEN
 ((
uöt32_t
)0x00400000)

	)

7097 
	#RCC_APB2LPENR_LTDCLPEN
 ((
uöt32_t
)0x04000000)

	)

7100 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001)

	)

7101 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002)

	)

7102 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004)

	)

7103 
	#RCC_BDCR_LSEMOD
 ((
uöt32_t
)0x00000008)

	)

7105 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300)

	)

7106 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100)

	)

7107 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200)

	)

7109 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000)

	)

7110 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000)

	)

7113 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001)

	)

7114 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002)

	)

7115 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000)

	)

7116 
	#RCC_CSR_BORRSTF
 ((
uöt32_t
)0x02000000)

	)

7117 
	#RCC_CSR_PADRSTF
 ((
uöt32_t
)0x04000000)

	)

7118 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000)

	)

7119 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000)

	)

7120 
	#RCC_CSR_WDGRSTF
 ((
uöt32_t
)0x20000000)

	)

7121 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000)

	)

7122 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000)

	)

7125 
	#RCC_SSCGR_MODPER
 ((
uöt32_t
)0x00001FFF)

	)

7126 
	#RCC_SSCGR_INCSTEP
 ((
uöt32_t
)0x0FFFE000)

	)

7127 
	#RCC_SSCGR_SPREADSEL
 ((
uöt32_t
)0x40000000)

	)

7128 
	#RCC_SSCGR_SSCGEN
 ((
uöt32_t
)0x80000000)

	)

7131 
	#RCC_PLLI2SCFGR_PLLI2SM
 ((
uöt32_t
)0x0000003F)

	)

7132 
	#RCC_PLLI2SCFGR_PLLI2SM_0
 ((
uöt32_t
)0x00000001)

	)

7133 
	#RCC_PLLI2SCFGR_PLLI2SM_1
 ((
uöt32_t
)0x00000002)

	)

7134 
	#RCC_PLLI2SCFGR_PLLI2SM_2
 ((
uöt32_t
)0x00000004)

	)

7135 
	#RCC_PLLI2SCFGR_PLLI2SM_3
 ((
uöt32_t
)0x00000008)

	)

7136 
	#RCC_PLLI2SCFGR_PLLI2SM_4
 ((
uöt32_t
)0x00000010)

	)

7137 
	#RCC_PLLI2SCFGR_PLLI2SM_5
 ((
uöt32_t
)0x00000020)

	)

7140 
	#RCC_PLLI2SCFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

7141 
	#RCC_PLLI2SCFGR_PLLI2SQ
 ((
uöt32_t
)0x0F000000)

	)

7142 
	#RCC_PLLI2SCFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

7145 
	#RCC_PLLSAICFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

7146 
	#RCC_PLLSAICFGR_PLLI2SQ
 ((
uöt32_t
)0x0F000000)

	)

7147 
	#RCC_PLLSAICFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

7150 
	#RCC_DCKCFGR_PLLI2SDIVQ
 ((
uöt32_t
)0x0000001F)

	)

7151 
	#RCC_DCKCFGR_PLLSAIDIVQ
 ((
uöt32_t
)0x00001F00)

	)

7152 
	#RCC_DCKCFGR_PLLSAIDIVR
 ((
uöt32_t
)0x00030000)

	)

7153 
	#RCC_DCKCFGR_SAI1ASRC
 ((
uöt32_t
)0x00300000)

	)

7154 
	#RCC_DCKCFGR_SAI1BSRC
 ((
uöt32_t
)0x00C00000)

	)

7155 
	#RCC_DCKCFGR_TIMPRE
 ((
uöt32_t
)0x01000000)

	)

7164 
	#RNG_CR_RNGEN
 ((
uöt32_t
)0x00000004)

	)

7165 
	#RNG_CR_IE
 ((
uöt32_t
)0x00000008)

	)

7168 
	#RNG_SR_DRDY
 ((
uöt32_t
)0x00000001)

	)

7169 
	#RNG_SR_CECS
 ((
uöt32_t
)0x00000002)

	)

7170 
	#RNG_SR_SECS
 ((
uöt32_t
)0x00000004)

	)

7171 
	#RNG_SR_CEIS
 ((
uöt32_t
)0x00000020)

	)

7172 
	#RNG_SR_SEIS
 ((
uöt32_t
)0x00000040)

	)

7180 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

7181 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

7182 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7183 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7184 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

7185 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7186 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7187 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7188 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7189 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

7190 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7191 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7192 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7193 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7194 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7195 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7196 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7197 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7198 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

7199 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7200 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7201 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7202 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

7203 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7204 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7205 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7206 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7209 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

7210 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

7211 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

7212 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

7213 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

7214 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

7215 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

7216 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

7217 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

7218 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

7219 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

7220 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

7221 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

7222 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

7223 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

7224 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

7225 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

7226 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

7227 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

7228 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

7229 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

7230 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

7231 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

7232 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

7233 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

7234 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

7235 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

7236 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

7239 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

7240 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

7241 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

7242 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

7243 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

7244 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

7245 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

7246 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

7247 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

7248 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

7249 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

7250 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

7251 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

7252 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

7253 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

7254 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

7255 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

7256 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

7257 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

7258 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

7259 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

7260 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

7261 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

7262 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

7263 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

7264 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

7267 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

7268 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

7269 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

7270 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

7271 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

7272 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

7273 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

7274 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

7275 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

7276 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

7277 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

7278 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

7279 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

7280 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

7281 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

7284 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

7285 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00001FFF)

	)

7288 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

7291 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

7292 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

7295 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

7296 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

7297 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

7298 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

7299 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

7300 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

7301 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

7302 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

7303 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

7304 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

7305 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

7306 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

7307 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

7308 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7309 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7310 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

7311 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7312 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7313 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7314 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7315 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

7316 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

7317 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7318 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7319 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7320 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7321 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7322 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7323 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7324 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7325 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

7326 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

7327 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7328 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7329 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7330 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

7331 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7332 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7333 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7334 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7337 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

7338 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

7339 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

7340 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

7341 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

7342 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

7343 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

7344 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

7345 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

7346 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

7347 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

7348 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

7349 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

7350 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7351 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7352 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

7353 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7354 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7355 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7356 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7357 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

7358 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

7359 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7360 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7361 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7362 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7363 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7364 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7365 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7366 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7367 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

7368 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

7369 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7370 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7371 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7372 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

7373 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7374 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7375 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7376 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7379 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

7382 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

7385 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

7386 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

7389 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

7390 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

7391 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7392 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7393 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

7394 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7395 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7396 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7397 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7398 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

7399 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7400 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7401 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7402 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7403 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7404 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7405 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7406 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7407 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

7408 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7409 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7410 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7411 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

7412 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7413 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7414 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7415 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7418 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

7419 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

7420 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

7421 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

7422 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

7423 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

7424 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

7425 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

7426 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

7427 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

7428 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

7429 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

7430 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

7431 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

7432 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

7433 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

7434 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

7435 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

7438 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

7441 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

7442 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

7443 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

7444 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

7445 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

7446 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

7447 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

7448 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

7449 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

7450 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

7451 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

7452 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

7453 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

7456 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

7457 
	#RTC_TAFCR_TSINSEL
 ((
uöt32_t
)0x00020000)

	)

7458 
	#RTC_TAFCR_TAMPINSEL
 ((
uöt32_t
)0x00010000)

	)

7459 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

7460 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

7461 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

7462 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

7463 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

7464 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

7465 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

7466 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

7467 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

7468 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

7469 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

7470 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

7471 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

7472 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

7473 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

7476 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

7477 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

7478 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

7479 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

7480 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

7481 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

7484 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

7485 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

7486 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

7487 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

7488 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

7489 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

7492 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7495 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7498 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7501 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7504 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7507 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7510 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7513 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7516 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7519 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7522 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7525 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7528 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7531 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7534 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7537 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7540 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7543 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7546 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7549 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7557 
	#SAI_GCR_SYNCIN
 ((
uöt32_t
)0x00000003Ë

	)

7558 
	#SAI_GCR_SYNCIN_0
 ((
uöt32_t
)0x00000001Ë

	)

7559 
	#SAI_GCR_SYNCIN_1
 ((
uöt32_t
)0x00000002Ë

	)

7561 
	#SAI_GCR_SYNCOUT
 ((
uöt32_t
)0x00000030Ë

	)

7562 
	#SAI_GCR_SYNCOUT_0
 ((
uöt32_t
)0x00000010Ë

	)

7563 
	#SAI_GCR_SYNCOUT_1
 ((
uöt32_t
)0x00000020Ë

	)

7566 
	#SAI_xCR1_MODE
 ((
uöt32_t
)0x00000003Ë

	)

7567 
	#SAI_xCR1_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

7568 
	#SAI_xCR1_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

7570 
	#SAI_xCR1_PRTCFG
 ((
uöt32_t
)0x0000000CË

	)

7571 
	#SAI_xCR1_PRTCFG_0
 ((
uöt32_t
)0x00000004Ë

	)

7572 
	#SAI_xCR1_PRTCFG_1
 ((
uöt32_t
)0x00000008Ë

	)

7574 
	#SAI_xCR1_DS
 ((
uöt32_t
)0x000000E0Ë

	)

7575 
	#SAI_xCR1_DS_0
 ((
uöt32_t
)0x00000020Ë

	)

7576 
	#SAI_xCR1_DS_1
 ((
uöt32_t
)0x00000040Ë

	)

7577 
	#SAI_xCR1_DS_2
 ((
uöt32_t
)0x00000080Ë

	)

7579 
	#SAI_xCR1_LSBFIRST
 ((
uöt32_t
)0x00000100Ë

	)

7580 
	#SAI_xCR1_CKSTR
 ((
uöt32_t
)0x00000200Ë

	)

7582 
	#SAI_xCR1_SYNCEN
 ((
uöt32_t
)0x00000C00Ë

	)

7583 
	#SAI_xCR1_SYNCEN_0
 ((
uöt32_t
)0x00000400Ë

	)

7584 
	#SAI_xCR1_SYNCEN_1
 ((
uöt32_t
)0x00000800Ë

	)

7586 
	#SAI_xCR1_MONO
 ((
uöt32_t
)0x00001000Ë

	)

7587 
	#SAI_xCR1_OUTDRIV
 ((
uöt32_t
)0x00002000Ë

	)

7588 
	#SAI_xCR1_SAIEN
 ((
uöt32_t
)0x00010000Ë

	)

7589 
	#SAI_xCR1_DMAEN
 ((
uöt32_t
)0x00020000Ë

	)

7590 
	#SAI_xCR1_NODIV
 ((
uöt32_t
)0x00080000Ë

	)

7592 
	#SAI_xCR1_MCKDIV
 ((
uöt32_t
)0x00780000Ë

	)

7593 
	#SAI_xCR1_MCKDIV_0
 ((
uöt32_t
)0x00080000Ë

	)

7594 
	#SAI_xCR1_MCKDIV_1
 ((
uöt32_t
)0x00100000Ë

	)

7595 
	#SAI_xCR1_MCKDIV_2
 ((
uöt32_t
)0x00200000Ë

	)

7596 
	#SAI_xCR1_MCKDIV_3
 ((
uöt32_t
)0x00400000Ë

	)

7599 
	#SAI_xCR2_FTH
 ((
uöt32_t
)0x00000003Ë

	)

7600 
	#SAI_xCR2_FTH_0
 ((
uöt32_t
)0x00000001Ë

	)

7601 
	#SAI_xCR2_FTH_1
 ((
uöt32_t
)0x00000002Ë

	)

7603 
	#SAI_xCR2_FFLUSH
 ((
uöt32_t
)0x00000008Ë

	)

7604 
	#SAI_xCR2_TRIS
 ((
uöt32_t
)0x00000010Ë

	)

7605 
	#SAI_xCR2_MUTE
 ((
uöt32_t
)0x00000020Ë

	)

7606 
	#SAI_xCR2_MUTEVAL
 ((
uöt32_t
)0x00000040Ë

	)

7608 
	#SAI_xCR2_MUTECNT
 ((
uöt32_t
)0x00001F80Ë

	)

7609 
	#SAI_xCR2_MUTECNT_0
 ((
uöt32_t
)0x00000080Ë

	)

7610 
	#SAI_xCR2_MUTECNT_1
 ((
uöt32_t
)0x00000100Ë

	)

7611 
	#SAI_xCR2_MUTECNT_2
 ((
uöt32_t
)0x00000200Ë

	)

7612 
	#SAI_xCR2_MUTECNT_3
 ((
uöt32_t
)0x00000400Ë

	)

7613 
	#SAI_xCR2_MUTECNT_4
 ((
uöt32_t
)0x00000800Ë

	)

7614 
	#SAI_xCR2_MUTECNT_5
 ((
uöt32_t
)0x00001000Ë

	)

7616 
	#SAI_xCR2_CPL
 ((
uöt32_t
)0x00080000Ë

	)

7618 
	#SAI_xCR2_COMP
 ((
uöt32_t
)0x0000C000Ë

	)

7619 
	#SAI_xCR2_COMP_0
 ((
uöt32_t
)0x00004000Ë

	)

7620 
	#SAI_xCR2_COMP_1
 ((
uöt32_t
)0x00008000Ë

	)

7623 
	#SAI_xFRCR_FRL
 ((
uöt32_t
)0x000000FFË

	)

7624 
	#SAI_xFRCR_FRL_0
 ((
uöt32_t
)0x00000001Ë

	)

7625 
	#SAI_xFRCR_FRL_1
 ((
uöt32_t
)0x00000002Ë

	)

7626 
	#SAI_xFRCR_FRL_2
 ((
uöt32_t
)0x00000004Ë

	)

7627 
	#SAI_xFRCR_FRL_3
 ((
uöt32_t
)0x00000008Ë

	)

7628 
	#SAI_xFRCR_FRL_4
 ((
uöt32_t
)0x00000010Ë

	)

7629 
	#SAI_xFRCR_FRL_5
 ((
uöt32_t
)0x00000020Ë

	)

7630 
	#SAI_xFRCR_FRL_6
 ((
uöt32_t
)0x00000040Ë

	)

7631 
	#SAI_xFRCR_FRL_7
 ((
uöt32_t
)0x00000080Ë

	)

7633 
	#SAI_xFRCR_FSALL
 ((
uöt32_t
)0x00007F00Ë

	)

7634 
	#SAI_xFRCR_FSALL_0
 ((
uöt32_t
)0x00000100Ë

	)

7635 
	#SAI_xFRCR_FSALL_1
 ((
uöt32_t
)0x00000200Ë

	)

7636 
	#SAI_xFRCR_FSALL_2
 ((
uöt32_t
)0x00000400Ë

	)

7637 
	#SAI_xFRCR_FSALL_3
 ((
uöt32_t
)0x00000800Ë

	)

7638 
	#SAI_xFRCR_FSALL_4
 ((
uöt32_t
)0x00001000Ë

	)

7639 
	#SAI_xFRCR_FSALL_5
 ((
uöt32_t
)0x00002000Ë

	)

7640 
	#SAI_xFRCR_FSALL_6
 ((
uöt32_t
)0x00004000Ë

	)

7642 
	#SAI_xFRCR_FSDEF
 ((
uöt32_t
)0x00010000Ë

	)

7643 
	#SAI_xFRCR_FSPO
 ((
uöt32_t
)0x00020000Ë

	)

7644 
	#SAI_xFRCR_FSOFF
 ((
uöt32_t
)0x00040000Ë

	)

7647 
	#SAI_xSLOTR_FBOFF
 ((
uöt32_t
)0x0000001FË

	)

7648 
	#SAI_xSLOTR_FBOFF_0
 ((
uöt32_t
)0x00000001Ë

	)

7649 
	#SAI_xSLOTR_FBOFF_1
 ((
uöt32_t
)0x00000002Ë

	)

7650 
	#SAI_xSLOTR_FBOFF_2
 ((
uöt32_t
)0x00000004Ë

	)

7651 
	#SAI_xSLOTR_FBOFF_3
 ((
uöt32_t
)0x00000008Ë

	)

7652 
	#SAI_xSLOTR_FBOFF_4
 ((
uöt32_t
)0x00000010Ë

	)

7654 
	#SAI_xSLOTR_SLOTSZ
 ((
uöt32_t
)0x000000C0Ë

	)

7655 
	#SAI_xSLOTR_SLOTSZ_0
 ((
uöt32_t
)0x00000040Ë

	)

7656 
	#SAI_xSLOTR_SLOTSZ_1
 ((
uöt32_t
)0x00000080Ë

	)

7658 
	#SAI_xSLOTR_NBSLOT
 ((
uöt32_t
)0x00000F00Ë

	)

7659 
	#SAI_xSLOTR_NBSLOT_0
 ((
uöt32_t
)0x00000100Ë

	)

7660 
	#SAI_xSLOTR_NBSLOT_1
 ((
uöt32_t
)0x00000200Ë

	)

7661 
	#SAI_xSLOTR_NBSLOT_2
 ((
uöt32_t
)0x00000400Ë

	)

7662 
	#SAI_xSLOTR_NBSLOT_3
 ((
uöt32_t
)0x00000800Ë

	)

7664 
	#SAI_xSLOTR_SLOTEN
 ((
uöt32_t
)0xFFFF0000Ë

	)

7667 
	#SAI_xIMR_OVRUDRIE
 ((
uöt32_t
)0x00000001Ë

	)

7668 
	#SAI_xIMR_MUTEDETIE
 ((
uöt32_t
)0x00000002Ë

	)

7669 
	#SAI_xIMR_WCKCFGIE
 ((
uöt32_t
)0x00000004Ë

	)

7670 
	#SAI_xIMR_FREQIE
 ((
uöt32_t
)0x00000008Ë

	)

7671 
	#SAI_xIMR_CNRDYIE
 ((
uöt32_t
)0x00000010Ë

	)

7672 
	#SAI_xIMR_AFSDETIE
 ((
uöt32_t
)0x00000020Ë

	)

7673 
	#SAI_xIMR_LFSDETIE
 ((
uöt32_t
)0x00000040Ë

	)

7676 
	#SAI_xSR_OVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

7677 
	#SAI_xSR_MUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

7678 
	#SAI_xSR_WCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

7679 
	#SAI_xSR_FREQ
 ((
uöt32_t
)0x00000008Ë

	)

7680 
	#SAI_xSR_CNRDY
 ((
uöt32_t
)0x00000010Ë

	)

7681 
	#SAI_xSR_AFSDET
 ((
uöt32_t
)0x00000020Ë

	)

7682 
	#SAI_xSR_LFSDET
 ((
uöt32_t
)0x00000040Ë

	)

7684 
	#SAI_xSR_FLVL
 ((
uöt32_t
)0x00070000Ë

	)

7685 
	#SAI_xSR_FLVL_0
 ((
uöt32_t
)0x00010000Ë

	)

7686 
	#SAI_xSR_FLVL_1
 ((
uöt32_t
)0x00020000Ë

	)

7687 
	#SAI_xSR_FLVL_2
 ((
uöt32_t
)0x00030000Ë

	)

7690 
	#SAI_xCLRFR_COVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

7691 
	#SAI_xCLRFR_CMUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

7692 
	#SAI_xCLRFR_CWCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

7693 
	#SAI_xCLRFR_CFREQ
 ((
uöt32_t
)0x00000008Ë

	)

7694 
	#SAI_xCLRFR_CCNRDY
 ((
uöt32_t
)0x00000010Ë

	)

7695 
	#SAI_xCLRFR_CAFSDET
 ((
uöt32_t
)0x00000020Ë

	)

7696 
	#SAI_xCLRFR_CLFSDET
 ((
uöt32_t
)0x00000040Ë

	)

7699 
	#SAI_xDR_DATA
 ((
uöt32_t
)0xFFFFFFFF)

	)

7707 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

7708 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

7709 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

7712 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

7713 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

7714 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

7715 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

7717 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

7718 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

7719 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

7721 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

7722 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

7725 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

7728 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

7730 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

7731 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

7732 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

7734 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

7735 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

7736 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

7737 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

7738 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

7739 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

7740 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

7743 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

7746 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

7749 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

7752 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

7755 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

7758 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

7761 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

7764 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

7767 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

7768 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

7769 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

7770 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

7772 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

7773 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

7774 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

7775 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

7776 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

7778 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

7779 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

7780 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

7781 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

7784 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

7787 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

7788 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

7789 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

7790 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

7791 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

7792 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

7793 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

7794 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

7795 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

7796 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

7797 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

7798 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

7799 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

7800 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

7801 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

7802 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

7803 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

7804 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

7805 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

7806 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

7807 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

7808 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

7809 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

7810 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

7813 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

7814 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

7815 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

7816 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

7817 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

7818 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

7819 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

7820 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

7821 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

7822 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

7823 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

7824 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

7825 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

7828 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

7829 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

7830 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

7831 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

7832 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

7833 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

7834 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

7835 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

7836 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

7837 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

7838 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

7839 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

7840 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

7841 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

7842 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

7843 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

7844 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

7845 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

7846 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

7847 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

7848 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

7849 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

7850 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

7851 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

7854 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

7857 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

7865 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

7866 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

7867 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

7869 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

7870 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

7871 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7872 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7874 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7875 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7876 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7877 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7878 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7879 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7880 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7881 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7882 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7883 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7886 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7887 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7888 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7889 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7890 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7891 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7894 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7895 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7896 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7897 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7898 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7899 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7900 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7901 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7904 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7907 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7910 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7913 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7916 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7918 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7919 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7920 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7922 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7924 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7925 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7926 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7928 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7930 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7931 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7932 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7934 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7935 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7938 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7939 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7940 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7948 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000007Ë

	)

7949 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

7950 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

7951 
	#SYSCFG_MEMRMP_MEM_MODE_2
 ((
uöt32_t
)0x00000004Ë

	)

7953 
	#SYSCFG_MEMRMP_FB_MODE
 ((
uöt32_t
)0x00000100Ë

	)

7955 
	#SYSCFG_MEMRMP_SWP_FMC
 ((
uöt32_t
)0x00000C00Ë

	)

7956 
	#SYSCFG_MEMRMP_SWP_FMC_0
 ((
uöt32_t
)0x00000400Ë

	)

7957 
	#SYSCFG_MEMRMP_SWP_FMC_1
 ((
uöt32_t
)0x00000800Ë

	)

7961 
	#SYSCFG_PMC_ADCxDC2
 ((
uöt32_t
)0x00070000Ë

	)

7962 
	#SYSCFG_PMC_ADC1DC2
 ((
uöt32_t
)0x00010000Ë

	)

7963 
	#SYSCFG_PMC_ADC2DC2
 ((
uöt32_t
)0x00020000Ë

	)

7964 
	#SYSCFG_PMC_ADC3DC2
 ((
uöt32_t
)0x00040000Ë

	)

7966 
	#SYSCFG_PMC_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

7968 
	#SYSCFG_PMC_MII_RMII
 
SYSCFG_PMC_MII_RMII_SEL


	)

7971 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

7972 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

7973 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

7974 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

7978 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

7979 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

7980 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

7981 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

7982 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

7983 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

7984 
	#SYSCFG_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

7985 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt16_t
)0x0007Ë

	)

7986 
	#SYSCFG_EXTICR1_EXTI0_PI
 ((
uöt16_t
)0x0008Ë

	)

7987 
	#SYSCFG_EXTICR1_EXTI0_PJ
 ((
uöt16_t
)0x0009Ë

	)

7988 
	#SYSCFG_EXTICR1_EXTI0_PK
 ((
uöt16_t
)0x000AË

	)

7993 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

7994 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

7995 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

7996 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

7997 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

7998 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

7999 
	#SYSCFG_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

8000 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt16_t
)0x0070Ë

	)

8001 
	#SYSCFG_EXTICR1_EXTI1_PI
 ((
uöt16_t
)0x0080Ë

	)

8002 
	#SYSCFG_EXTICR1_EXTI1_PJ
 ((
uöt16_t
)0x0090Ë

	)

8003 
	#SYSCFG_EXTICR1_EXTI1_PK
 ((
uöt16_t
)0x00A0Ë

	)

8008 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

8009 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

8010 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

8011 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

8012 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

8013 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

8014 
	#SYSCFG_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

8015 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt16_t
)0x0700Ë

	)

8016 
	#SYSCFG_EXTICR1_EXTI2_PI
 ((
uöt16_t
)0x0800Ë

	)

8017 
	#SYSCFG_EXTICR1_EXTI2_PJ
 ((
uöt16_t
)0x0900Ë

	)

8018 
	#SYSCFG_EXTICR1_EXTI2_PK
 ((
uöt16_t
)0x0A00Ë

	)

8023 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

8024 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

8025 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

8026 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

8027 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

8028 
	#SYSCFG_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

8029 
	#SYSCFG_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

8030 
	#SYSCFG_EXTICR1_EXTI3_PH
 ((
uöt16_t
)0x7000Ë

	)

8031 
	#SYSCFG_EXTICR1_EXTI3_PI
 ((
uöt16_t
)0x8000Ë

	)

8032 
	#SYSCFG_EXTICR1_EXTI3_PJ
 ((
uöt16_t
)0x9000Ë

	)

8033 
	#SYSCFG_EXTICR1_EXTI3_PK
 ((
uöt16_t
)0xA000Ë

	)

8036 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

8037 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

8038 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

8039 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

8043 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

8044 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

8045 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

8046 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

8047 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

8048 
	#SYSCFG_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

8049 
	#SYSCFG_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

8050 
	#SYSCFG_EXTICR2_EXTI4_PH
 ((
uöt16_t
)0x0007Ë

	)

8051 
	#SYSCFG_EXTICR2_EXTI4_PI
 ((
uöt16_t
)0x0008Ë

	)

8052 
	#SYSCFG_EXTICR2_EXTI4_PJ
 ((
uöt16_t
)0x0009Ë

	)

8053 
	#SYSCFG_EXTICR2_EXTI4_PK
 ((
uöt16_t
)0x000AË

	)

8058 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

8059 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

8060 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

8061 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

8062 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

8063 
	#SYSCFG_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

8064 
	#SYSCFG_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

8065 
	#SYSCFG_EXTICR2_EXTI5_PH
 ((
uöt16_t
)0x0070Ë

	)

8066 
	#SYSCFG_EXTICR2_EXTI5_PI
 ((
uöt16_t
)0x0080Ë

	)

8067 
	#SYSCFG_EXTICR2_EXTI5_PJ
 ((
uöt16_t
)0x0090Ë

	)

8068 
	#SYSCFG_EXTICR2_EXTI5_PK
 ((
uöt16_t
)0x00A0Ë

	)

8073 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

8074 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

8075 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

8076 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

8077 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

8078 
	#SYSCFG_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

8079 
	#SYSCFG_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

8080 
	#SYSCFG_EXTICR2_EXTI6_PH
 ((
uöt16_t
)0x0700Ë

	)

8081 
	#SYSCFG_EXTICR2_EXTI6_PI
 ((
uöt16_t
)0x0800Ë

	)

8082 
	#SYSCFG_EXTICR2_EXTI6_PJ
 ((
uöt16_t
)0x0900Ë

	)

8083 
	#SYSCFG_EXTICR2_EXTI6_PK
 ((
uöt16_t
)0x0A00Ë

	)

8088 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

8089 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

8090 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

8091 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

8092 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

8093 
	#SYSCFG_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

8094 
	#SYSCFG_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

8095 
	#SYSCFG_EXTICR2_EXTI7_PH
 ((
uöt16_t
)0x7000Ë

	)

8096 
	#SYSCFG_EXTICR2_EXTI7_PI
 ((
uöt16_t
)0x8000Ë

	)

8097 
	#SYSCFG_EXTICR2_EXTI7_PJ
 ((
uöt16_t
)0x9000Ë

	)

8098 
	#SYSCFG_EXTICR2_EXTI7_PK
 ((
uöt16_t
)0xA000Ë

	)

8101 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

8102 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

8103 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

8104 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

8109 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

8110 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

8111 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

8112 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

8113 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

8114 
	#SYSCFG_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

8115 
	#SYSCFG_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

8116 
	#SYSCFG_EXTICR3_EXTI8_PH
 ((
uöt16_t
)0x0007Ë

	)

8117 
	#SYSCFG_EXTICR3_EXTI8_PI
 ((
uöt16_t
)0x0008Ë

	)

8118 
	#SYSCFG_EXTICR3_EXTI8_PJ
 ((
uöt16_t
)0x0009Ë

	)

8123 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

8124 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

8125 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

8126 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

8127 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

8128 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

8129 
	#SYSCFG_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

8130 
	#SYSCFG_EXTICR3_EXTI9_PH
 ((
uöt16_t
)0x0070Ë

	)

8131 
	#SYSCFG_EXTICR3_EXTI9_PI
 ((
uöt16_t
)0x0080Ë

	)

8132 
	#SYSCFG_EXTICR3_EXTI9_PJ
 ((
uöt16_t
)0x0090Ë

	)

8137 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

8138 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

8139 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

8140 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

8141 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

8142 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

8143 
	#SYSCFG_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

8144 
	#SYSCFG_EXTICR3_EXTI10_PH
 ((
uöt16_t
)0x0700Ë

	)

8145 
	#SYSCFG_EXTICR3_EXTI10_PI
 ((
uöt16_t
)0x0800Ë

	)

8146 
	#SYSCFG_EXTICR3_EXTI10_PJ
 ((
uöt16_t
)0x0900Ë

	)

8151 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

8152 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

8153 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

8154 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

8155 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

8156 
	#SYSCFG_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

8157 
	#SYSCFG_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

8158 
	#SYSCFG_EXTICR3_EXTI11_PH
 ((
uöt16_t
)0x7000Ë

	)

8159 
	#SYSCFG_EXTICR3_EXTI11_PI
 ((
uöt16_t
)0x8000Ë

	)

8160 
	#SYSCFG_EXTICR3_EXTI11_PJ
 ((
uöt16_t
)0x9000Ë

	)

8163 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

8164 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

8165 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

8166 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

8170 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

8171 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

8172 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

8173 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

8174 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

8175 
	#SYSCFG_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

8176 
	#SYSCFG_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

8177 
	#SYSCFG_EXTICR4_EXTI12_PH
 ((
uöt16_t
)0x0007Ë

	)

8178 
	#SYSCFG_EXTICR4_EXTI12_PI
 ((
uöt16_t
)0x0008Ë

	)

8179 
	#SYSCFG_EXTICR4_EXTI12_PJ
 ((
uöt16_t
)0x0009Ë

	)

8184 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

8185 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

8186 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

8187 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

8188 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

8189 
	#SYSCFG_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

8190 
	#SYSCFG_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

8191 
	#SYSCFG_EXTICR4_EXTI13_PH
 ((
uöt16_t
)0x0070Ë

	)

8192 
	#SYSCFG_EXTICR4_EXTI13_PI
 ((
uöt16_t
)0x0008Ë

	)

8193 
	#SYSCFG_EXTICR4_EXTI13_PJ
 ((
uöt16_t
)0x0009Ë

	)

8198 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

8199 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

8200 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

8201 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

8202 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

8203 
	#SYSCFG_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

8204 
	#SYSCFG_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

8205 
	#SYSCFG_EXTICR4_EXTI14_PH
 ((
uöt16_t
)0x0700Ë

	)

8206 
	#SYSCFG_EXTICR4_EXTI14_PI
 ((
uöt16_t
)0x0800Ë

	)

8207 
	#SYSCFG_EXTICR4_EXTI14_PJ
 ((
uöt16_t
)0x0900Ë

	)

8212 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

8213 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

8214 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

8215 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

8216 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

8217 
	#SYSCFG_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

8218 
	#SYSCFG_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

8219 
	#SYSCFG_EXTICR4_EXTI15_PH
 ((
uöt16_t
)0x7000Ë

	)

8220 
	#SYSCFG_EXTICR4_EXTI15_PI
 ((
uöt16_t
)0x8000Ë

	)

8221 
	#SYSCFG_EXTICR4_EXTI15_PJ
 ((
uöt16_t
)0x9000Ë

	)

8224 
	#SYSCFG_CMPCR_CMP_PD
 ((
uöt32_t
)0x00000001Ë

	)

8225 
	#SYSCFG_CMPCR_READY
 ((
uöt32_t
)0x00000100Ë

	)

8233 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

8234 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

8235 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

8236 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

8237 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

8239 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

8240 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

8241 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

8243 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

8245 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

8246 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

8247 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

8250 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

8251 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

8252 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

8254 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

8255 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

8256 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

8257 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

8259 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

8260 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

8261 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

8262 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

8263 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

8264 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

8265 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

8266 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

8269 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

8270 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

8271 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

8272 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

8274 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

8275 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

8276 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

8277 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

8279 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

8281 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

8282 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

8283 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

8284 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

8285 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

8287 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

8288 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

8289 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

8291 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

8292 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

8295 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

8296 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

8297 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

8298 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

8299 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

8300 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

8301 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

8302 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

8303 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

8304 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

8305 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

8306 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

8307 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

8308 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

8309 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

8312 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

8313 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

8314 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

8315 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

8316 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

8317 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

8318 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

8319 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

8320 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

8321 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

8322 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

8323 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

8326 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

8327 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

8328 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

8329 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

8330 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

8331 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

8332 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

8333 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

8336 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

8337 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

8338 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

8340 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

8341 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

8343 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

8344 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

8345 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

8346 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

8348 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

8350 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

8351 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

8352 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

8354 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

8355 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

8357 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

8358 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

8359 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

8360 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

8362 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

8366 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

8367 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

8368 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

8370 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

8371 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

8372 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

8373 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

8374 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

8376 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

8377 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

8378 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

8380 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

8381 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

8382 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

8383 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

8384 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

8387 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

8388 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

8389 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

8391 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

8392 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

8394 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

8395 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

8396 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

8397 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

8399 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

8401 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

8402 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

8403 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

8405 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

8406 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

8408 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

8409 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

8410 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

8411 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

8413 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

8417 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

8418 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

8419 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

8421 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

8422 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

8423 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

8424 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

8425 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

8427 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

8428 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

8429 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

8431 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

8432 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

8433 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

8434 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

8435 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

8438 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

8439 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

8440 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

8441 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

8442 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

8443 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

8444 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

8445 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

8446 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

8447 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

8448 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

8449 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

8450 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

8451 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

8452 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

8455 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

8458 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

8461 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

8464 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

8467 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

8470 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

8473 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

8476 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

8479 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

8480 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

8481 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

8482 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

8483 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

8484 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

8485 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

8486 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

8487 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

8489 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

8490 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

8491 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

8493 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

8494 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

8495 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

8496 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

8497 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

8498 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

8501 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

8502 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

8503 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

8504 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

8505 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

8506 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

8508 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

8509 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

8510 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

8511 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

8512 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

8513 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

8516 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

8519 
	#TIM_OR_TI4_RMP
 ((
uöt16_t
)0x00C0Ë

	)

8520 
	#TIM_OR_TI4_RMP_0
 ((
uöt16_t
)0x0040Ë

	)

8521 
	#TIM_OR_TI4_RMP_1
 ((
uöt16_t
)0x0080Ë

	)

8522 
	#TIM_OR_ITR1_RMP
 ((
uöt16_t
)0x0C00Ë

	)

8523 
	#TIM_OR_ITR1_RMP_0
 ((
uöt16_t
)0x0400Ë

	)

8524 
	#TIM_OR_ITR1_RMP_1
 ((
uöt16_t
)0x0800Ë

	)

8533 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

8534 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

8535 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

8536 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

8537 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

8538 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

8539 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

8540 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

8541 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

8542 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

8545 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

8548 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

8549 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

8552 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

8553 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

8554 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

8555 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

8556 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

8557 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

8558 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

8559 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

8560 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

8561 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

8562 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

8563 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

8564 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

8565 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

8566 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

8569 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

8570 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

8571 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

8572 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

8573 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

8574 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

8575 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

8577 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

8578 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

8579 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

8581 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

8584 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

8585 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

8586 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

8587 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

8588 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

8589 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

8590 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

8591 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

8592 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

8593 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

8594 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

8595 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

8598 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

8599 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

8600 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

8601 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

8602 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

8603 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

8604 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

8605 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

8606 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

8608 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

8616 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

8617 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

8618 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

8619 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

8620 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

8621 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

8622 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

8623 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

8625 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

8628 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

8629 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

8630 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

8631 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

8632 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

8633 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

8634 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

8635 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

8637 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

8638 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

8639 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

8641 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

8644 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

8653 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

8654 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

8657 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

8658 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

8659 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

8660 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

8662 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

8663 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

8664 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

8667 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

8668 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

8669 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

8670 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

8671 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

8672 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

8673 
	#DBGMCU_APB1_FZ_DBG_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

8674 
	#DBGMCU_APB1_FZ_DBG_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

8675 
	#DBGMCU_APB1_FZ_DBG_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

8676 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

8677 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

8678 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

8679 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

8680 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

8681 
	#DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

8682 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

8683 
	#DBGMCU_APB1_FZ_DBG_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

8685 
	#DBGMCU_APB1_FZ_DBG_IWDEG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP


	)

8688 
	#DBGMCU_APB1_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

8689 
	#DBGMCU_APB1_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

8690 
	#DBGMCU_APB1_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

8691 
	#DBGMCU_APB1_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

8692 
	#DBGMCU_APB1_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

8700 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

8701 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

8702 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

8703 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

8704 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

8705 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

8706 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

8707 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

8708 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

8709 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

8710 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

8711 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

8712 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

8713 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

8714 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

8715 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

8716 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

8717 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

8718 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

8719 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

8721 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

8722 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

8723 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

8724 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

8725 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

8726 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

8727 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

8730 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

8731 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

8732 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

8733 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

8734 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

8735 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

8736 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

8737 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

8738 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

8739 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

8740 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

8741 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

8742 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

8743 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

8746 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8749 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8752 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

8753 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

8754 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

8755 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

8756 
	#ETH_MACMIIAR_CR_Div62
 ((
uöt32_t
)0x00000004Ë

	)

8757 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

8758 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

8759 
	#ETH_MACMIIAR_CR_Div102
 ((
uöt32_t
)0x00000010Ë

	)

8760 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

8761 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

8764 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

8767 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

8768 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

8769 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

8770 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

8771 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

8772 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

8773 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

8774 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

8775 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

8776 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

8777 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

8780 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

8781 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

8784 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

8798 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

8799 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

8800 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

8801 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

8802 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

8803 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

8804 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

8807 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

8808 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

8809 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

8810 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

8811 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

8814 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

8815 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

8818 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

8821 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8824 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8825 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8826 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8827 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8828 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8829 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8830 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8831 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8832 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8833 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

8836 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8839 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8840 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8841 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8842 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8843 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8844 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8845 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8846 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8847 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8848 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

8851 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8854 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8855 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8856 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8857 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8858 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8859 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8860 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8861 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8862 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8863 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

8866 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8873 
	#ETH_MMCCR_MCFHP
 ((
uöt32_t
)0x00000020Ë

	)

8874 
	#ETH_MMCCR_MCP
 ((
uöt32_t
)0x00000010Ë

	)

8875 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

8876 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

8877 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

8878 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

8881 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

8882 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

8883 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

8886 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

8887 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

8888 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

8891 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

8892 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

8893 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

8896 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

8897 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

8898 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

8901 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8904 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8907 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8910 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8913 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8916 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8923 
	#ETH_PTPTSCR_TSCNT
 ((
uöt32_t
)0x00030000Ë

	)

8924 
	#ETH_PTPTSSR_TSSMRME
 ((
uöt32_t
)0x00008000Ë

	)

8925 
	#ETH_PTPTSSR_TSSEME
 ((
uöt32_t
)0x00004000Ë

	)

8926 
	#ETH_PTPTSSR_TSSIPV4FE
 ((
uöt32_t
)0x00002000Ë

	)

8927 
	#ETH_PTPTSSR_TSSIPV6FE
 ((
uöt32_t
)0x00001000Ë

	)

8928 
	#ETH_PTPTSSR_TSSPTPOEFE
 ((
uöt32_t
)0x00000800Ë

	)

8929 
	#ETH_PTPTSSR_TSPTPPSV2E
 ((
uöt32_t
)0x00000400Ë

	)

8930 
	#ETH_PTPTSSR_TSSSR
 ((
uöt32_t
)0x00000200Ë

	)

8931 
	#ETH_PTPTSSR_TSSARFE
 ((
uöt32_t
)0x00000100Ë

	)

8933 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

8934 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

8935 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

8936 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

8937 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

8938 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

8941 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

8944 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8947 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

8948 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8951 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8954 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

8955 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8958 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8961 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8964 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8967 
	#ETH_PTPTSSR_TSTTR
 ((
uöt32_t
)0x00000020Ë

	)

8968 
	#ETH_PTPTSSR_TSSO
 ((
uöt32_t
)0x00000010Ë

	)

8975 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

8976 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

8977 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

8978 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

8979 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

8980 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

8981 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

8982 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

8983 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

8984 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

8985 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

8986 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

8987 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

8988 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

8989 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

8990 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

8991 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

8992 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

8993 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

8994 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

8995 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

8996 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

8997 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

8998 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

8999 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

9000 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

9001 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

9002 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

9003 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

9004 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

9005 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

9006 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

9007 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

9008 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

9009 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

9010 
	#ETH_DMABMR_EDE
 ((
uöt32_t
)0x00000080Ë

	)

9011 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

9012 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

9013 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

9016 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

9019 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

9022 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9025 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9028 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

9029 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

9030 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

9031 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

9033 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

9034 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

9035 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

9036 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

9037 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

9038 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

9039 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

9040 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

9041 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

9042 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

9043 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

9044 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

9045 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

9046 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

9047 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

9048 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

9049 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

9050 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

9051 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

9052 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

9053 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

9054 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

9055 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

9056 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

9057 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

9058 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

9059 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

9060 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

9061 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

9062 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

9063 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

9064 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

9067 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

9068 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

9069 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

9070 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

9071 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

9072 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

9073 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

9074 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

9075 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

9076 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

9077 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

9078 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

9079 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

9080 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

9081 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

9082 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

9083 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

9084 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

9085 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

9086 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

9087 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

9088 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

9089 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

9090 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

9093 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

9094 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

9095 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

9096 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

9097 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

9098 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

9099 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

9100 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

9101 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

9102 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

9103 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

9104 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

9105 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

9106 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

9107 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

9110 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

9111 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

9112 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

9113 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

9116 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9119 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9122 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9125 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9135 #ifde‡
USE_STDPERIPH_DRIVER


9136 
	~"°m32f4xx_c⁄f.h
"

9143 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

9145 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

9147 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

9149 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

9151 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

9153 
	#READ_REG
(
REG
Ë((REG))

	)

9155 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

9161 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_adc.h

30 #i‚de‡
__STM32F4xx_ADC_H


31 
	#__STM32F4xx_ADC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
ADC_Resﬁuti⁄
;

57 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

61 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

64 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄vEdge
;

68 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

72 
uöt32_t
 
ADC_D©aAlign
;

75 
uöt8_t
 
ADC_NbrOfC⁄vîsi⁄
;

79 }
	tADC_InôTy≥Def
;

86 
uöt32_t
 
ADC_Mode
;

89 
uöt32_t
 
ADC_PªsˇÀr
;

92 
uöt32_t
 
ADC_DMAAc˚ssMode
;

96 
uöt32_t
 
ADC_TwoSam∂ögDñay
;

100 }
	tADC_Comm⁄InôTy≥Def
;

108 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

109 ((
PERIPH
Ë=
ADC2
) || \

110 ((
PERIPH
Ë=
ADC3
))

115 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

116 
	#ADC_DuÆMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000001)

	)

117 
	#ADC_DuÆMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000002)

	)

118 
	#ADC_DuÆMode_InjecSimu…
 ((
uöt32_t
)0x00000005)

	)

119 
	#ADC_DuÆMode_RegSimu…
 ((
uöt32_t
)0x00000006)

	)

120 
	#ADC_DuÆMode_I¡îl
 ((
uöt32_t
)0x00000007)

	)

121 
	#ADC_DuÆMode_A…îTrig
 ((
uöt32_t
)0x00000009)

	)

122 
	#ADC_TrùÀMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000011)

	)

123 
	#ADC_TrùÀMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000012)

	)

124 
	#ADC_TrùÀMode_InjecSimu…
 ((
uöt32_t
)0x00000015)

	)

125 
	#ADC_TrùÀMode_RegSimu…
 ((
uöt32_t
)0x00000016)

	)

126 
	#ADC_TrùÀMode_I¡îl
 ((
uöt32_t
)0x00000017)

	)

127 
	#ADC_TrùÀMode_A…îTrig
 ((
uöt32_t
)0x00000019)

	)

128 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
Ë|| \

	)

129 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_InjecSimu…
) || \

130 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_A…îTrig
) || \

131 ((
MODE
Ë=
ADC_DuÆMode_InjecSimu…
) || \

132 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…
) || \

133 ((
MODE
Ë=
ADC_DuÆMode_I¡îl
) || \

134 ((
MODE
Ë=
ADC_DuÆMode_A…îTrig
) || \

135 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_InjecSimu…
) || \

136 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_A…îTrig
) || \

137 ((
MODE
Ë=
ADC_TrùÀMode_InjecSimu…
) || \

138 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…
) || \

139 ((
MODE
Ë=
ADC_TrùÀMode_I¡îl
) || \

140 ((
MODE
Ë=
ADC_TrùÀMode_A…îTrig
))

149 
	#ADC_PªsˇÀr_Div2
 ((
uöt32_t
)0x00000000)

	)

150 
	#ADC_PªsˇÀr_Div4
 ((
uöt32_t
)0x00010000)

	)

151 
	#ADC_PªsˇÀr_Div6
 ((
uöt32_t
)0x00020000)

	)

152 
	#ADC_PªsˇÀr_Div8
 ((
uöt32_t
)0x00030000)

	)

153 
	#IS_ADC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
ADC_PªsˇÀr_Div2
Ë|| \

	)

154 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div4
) || \

155 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div6
) || \

156 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div8
))

165 
	#ADC_DMAAc˚ssMode_DißbÀd
 ((
uöt32_t
)0x00000000Ë

	)

166 
	#ADC_DMAAc˚ssMode_1
 ((
uöt32_t
)0x00004000Ë

	)

167 
	#ADC_DMAAc˚ssMode_2
 ((
uöt32_t
)0x00008000Ë

	)

168 
	#ADC_DMAAc˚ssMode_3
 ((
uöt32_t
)0x0000C000Ë

	)

169 
	#IS_ADC_DMA_ACCESS_MODE
(
MODE
Ë(((MODEË=
ADC_DMAAc˚ssMode_DißbÀd
Ë|| \

	)

170 ((
MODE
Ë=
ADC_DMAAc˚ssMode_1
) || \

171 ((
MODE
Ë=
ADC_DMAAc˚ssMode_2
) || \

172 ((
MODE
Ë=
ADC_DMAAc˚ssMode_3
))

182 
	#ADC_TwoSam∂ögDñay_5Cy˛es
 ((
uöt32_t
)0x00000000)

	)

183 
	#ADC_TwoSam∂ögDñay_6Cy˛es
 ((
uöt32_t
)0x00000100)

	)

184 
	#ADC_TwoSam∂ögDñay_7Cy˛es
 ((
uöt32_t
)0x00000200)

	)

185 
	#ADC_TwoSam∂ögDñay_8Cy˛es
 ((
uöt32_t
)0x00000300)

	)

186 
	#ADC_TwoSam∂ögDñay_9Cy˛es
 ((
uöt32_t
)0x00000400)

	)

187 
	#ADC_TwoSam∂ögDñay_10Cy˛es
 ((
uöt32_t
)0x00000500)

	)

188 
	#ADC_TwoSam∂ögDñay_11Cy˛es
 ((
uöt32_t
)0x00000600)

	)

189 
	#ADC_TwoSam∂ögDñay_12Cy˛es
 ((
uöt32_t
)0x00000700)

	)

190 
	#ADC_TwoSam∂ögDñay_13Cy˛es
 ((
uöt32_t
)0x00000800)

	)

191 
	#ADC_TwoSam∂ögDñay_14Cy˛es
 ((
uöt32_t
)0x00000900)

	)

192 
	#ADC_TwoSam∂ögDñay_15Cy˛es
 ((
uöt32_t
)0x00000A00)

	)

193 
	#ADC_TwoSam∂ögDñay_16Cy˛es
 ((
uöt32_t
)0x00000B00)

	)

194 
	#ADC_TwoSam∂ögDñay_17Cy˛es
 ((
uöt32_t
)0x00000C00)

	)

195 
	#ADC_TwoSam∂ögDñay_18Cy˛es
 ((
uöt32_t
)0x00000D00)

	)

196 
	#ADC_TwoSam∂ögDñay_19Cy˛es
 ((
uöt32_t
)0x00000E00)

	)

197 
	#ADC_TwoSam∂ögDñay_20Cy˛es
 ((
uöt32_t
)0x00000F00)

	)

198 
	#IS_ADC_SAMPLING_DELAY
(
DELAY
Ë(((DELAYË=
ADC_TwoSam∂ögDñay_5Cy˛es
Ë|| \

	)

199 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_6Cy˛es
) || \

200 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_7Cy˛es
) || \

201 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_8Cy˛es
) || \

202 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_9Cy˛es
) || \

203 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_10Cy˛es
) || \

204 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_11Cy˛es
) || \

205 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_12Cy˛es
) || \

206 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_13Cy˛es
) || \

207 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_14Cy˛es
) || \

208 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_15Cy˛es
) || \

209 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_16Cy˛es
) || \

210 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_17Cy˛es
) || \

211 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_18Cy˛es
) || \

212 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_19Cy˛es
) || \

213 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_20Cy˛es
))

223 
	#ADC_Resﬁuti⁄_12b
 ((
uöt32_t
)0x00000000)

	)

224 
	#ADC_Resﬁuti⁄_10b
 ((
uöt32_t
)0x01000000)

	)

225 
	#ADC_Resﬁuti⁄_8b
 ((
uöt32_t
)0x02000000)

	)

226 
	#ADC_Resﬁuti⁄_6b
 ((
uöt32_t
)0x03000000)

	)

227 
	#IS_ADC_RESOLUTION
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_Resﬁuti⁄_12b
Ë|| \

	)

228 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_10b
) || \

229 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_8b
) || \

230 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_6b
))

240 
	#ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

241 
	#ADC_Exã∫ÆTrigC⁄vEdge_Risög
 ((
uöt32_t
)0x10000000)

	)

242 
	#ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
 ((
uöt32_t
)0x20000000)

	)

243 
	#ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x30000000)

	)

244 
	#IS_ADC_EXT_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
Ë|| \

	)

245 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_Risög
) || \

246 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
) || \

247 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
))

256 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000)

	)

257 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x01000000)

	)

258 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x02000000)

	)

259 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x03000000)

	)

260 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x04000000)

	)

261 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC4
 ((
uöt32_t
)0x05000000)

	)

262 
	#ADC_Exã∫ÆTrigC⁄v_T2_TRGO
 ((
uöt32_t
)0x06000000)

	)

263 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x07000000)

	)

264 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x08000000)

	)

265 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x09000000)

	)

266 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x0A000000)

	)

267 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC2
 ((
uöt32_t
)0x0B000000)

	)

268 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x0C000000)

	)

269 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x0D000000)

	)

270 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x0E000000)

	)

271 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11
 ((
uöt32_t
)0x0F000000)

	)

272 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
Ë|| \

	)

273 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

274 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

275 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

276 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

277 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC4
) || \

278 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_TRGO
) || \

279 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

280 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

281 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

282 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

283 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC2
) || \

284 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
) || \

285 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

286 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

287 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11
))

296 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

297 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

298 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
Ë|| \

	)

299 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

308 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

309 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

310 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

311 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

312 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

313 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

314 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

315 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

316 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

317 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

318 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

319 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

320 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

321 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

322 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

323 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

324 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

325 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

326 
	#ADC_Ch™√l_18
 ((
uöt8_t
)0x12)

	)

328 #i‡
deföed
 (
STM32F40_41xxx
)

329 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

332 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

333 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

336 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

337 
	#ADC_Ch™√l_Vb©
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

339 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| \

	)

340 ((
CHANNEL
Ë=
ADC_Ch™√l_1
) || \

341 ((
CHANNEL
Ë=
ADC_Ch™√l_2
) || \

342 ((
CHANNEL
Ë=
ADC_Ch™√l_3
) || \

343 ((
CHANNEL
Ë=
ADC_Ch™√l_4
) || \

344 ((
CHANNEL
Ë=
ADC_Ch™√l_5
) || \

345 ((
CHANNEL
Ë=
ADC_Ch™√l_6
) || \

346 ((
CHANNEL
Ë=
ADC_Ch™√l_7
) || \

347 ((
CHANNEL
Ë=
ADC_Ch™√l_8
) || \

348 ((
CHANNEL
Ë=
ADC_Ch™√l_9
) || \

349 ((
CHANNEL
Ë=
ADC_Ch™√l_10
) || \

350 ((
CHANNEL
Ë=
ADC_Ch™√l_11
) || \

351 ((
CHANNEL
Ë=
ADC_Ch™√l_12
) || \

352 ((
CHANNEL
Ë=
ADC_Ch™√l_13
) || \

353 ((
CHANNEL
Ë=
ADC_Ch™√l_14
) || \

354 ((
CHANNEL
Ë=
ADC_Ch™√l_15
) || \

355 ((
CHANNEL
Ë=
ADC_Ch™√l_16
) || \

356 ((
CHANNEL
Ë=
ADC_Ch™√l_17
) || \

357 ((
CHANNEL
Ë=
ADC_Ch™√l_18
))

366 
	#ADC_Sam∂eTime_3Cy˛es
 ((
uöt8_t
)0x00)

	)

367 
	#ADC_Sam∂eTime_15Cy˛es
 ((
uöt8_t
)0x01)

	)

368 
	#ADC_Sam∂eTime_28Cy˛es
 ((
uöt8_t
)0x02)

	)

369 
	#ADC_Sam∂eTime_56Cy˛es
 ((
uöt8_t
)0x03)

	)

370 
	#ADC_Sam∂eTime_84Cy˛es
 ((
uöt8_t
)0x04)

	)

371 
	#ADC_Sam∂eTime_112Cy˛es
 ((
uöt8_t
)0x05)

	)

372 
	#ADC_Sam∂eTime_144Cy˛es
 ((
uöt8_t
)0x06)

	)

373 
	#ADC_Sam∂eTime_480Cy˛es
 ((
uöt8_t
)0x07)

	)

374 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_3Cy˛es
Ë|| \

	)

375 ((
TIME
Ë=
ADC_Sam∂eTime_15Cy˛es
) || \

376 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es
) || \

377 ((
TIME
Ë=
ADC_Sam∂eTime_56Cy˛es
) || \

378 ((
TIME
Ë=
ADC_Sam∂eTime_84Cy˛es
) || \

379 ((
TIME
Ë=
ADC_Sam∂eTime_112Cy˛es
) || \

380 ((
TIME
Ë=
ADC_Sam∂eTime_144Cy˛es
) || \

381 ((
TIME
Ë=
ADC_Sam∂eTime_480Cy˛es
))

390 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

391 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
 ((
uöt32_t
)0x00100000)

	)

392 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
 ((
uöt32_t
)0x00200000)

	)

393 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x00300000)

	)

394 
	#IS_ADC_EXT_INJEC_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
Ë|| \

	)

395 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
) || \

396 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
) || \

397 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
))

407 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00000000)

	)

408 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00010000)

	)

409 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00020000)

	)

410 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00030000)

	)

411 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
 ((
uöt32_t
)0x00040000)

	)

412 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00050000)

	)

413 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
 ((
uöt32_t
)0x00060000)

	)

414 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
 ((
uöt32_t
)0x00070000)

	)

415 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00080000)

	)

416 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00090000)

	)

417 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x000A0000)

	)

418 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x000B0000)

	)

419 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x000C0000)

	)

420 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
 ((
uöt32_t
)0x000D0000)

	)

421 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x000E0000)

	)

422 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
 ((
uöt32_t
)0x000F0000)

	)

423 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
Ë|| \

	)

424 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
) || \

425 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

426 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

427 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
) || \

428 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

429 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
) || \

430 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
) || \

431 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

432 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

433 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
) || \

434 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

435 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

436 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
) || \

437 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

438 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
))

447 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

448 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

449 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

450 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

451 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
Ë|| \

	)

452 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

453 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

454 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

463 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

464 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

465 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

466 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

467 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

468 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

469 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

470 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
Ë|| \

	)

471 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

472 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

473 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

474 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

475 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

476 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

485 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0205)

	)

486 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0106)

	)

487 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0407)

	)

488 
	#ADC_IT_OVR
 ((
uöt16_t
)0x201A)

	)

489 
	#IS_ADC_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
Ë|| \

	)

490 ((
IT
Ë=
ADC_IT_JEOC
)|| ((ITË=
ADC_IT_OVR
))

499 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

500 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

501 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

502 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

503 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

504 
	#ADC_FLAG_OVR
 ((
uöt8_t
)0x20)

	)

506 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xC0Ë=0x00Ë&& ((FLAGË!0x00))

	)

507 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| \

	)

508 ((
FLAG
Ë=
ADC_FLAG_EOC
) || \

509 ((
FLAG
Ë=
ADC_FLAG_JEOC
) || \

510 ((
FLAG
)=
ADC_FLAG_JSTRT
) || \

511 ((
FLAG
Ë=
ADC_FLAG_STRT
) || \

512 ((
FLAG
)=
ADC_FLAG_OVR
))

521 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

530 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

539 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

548 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

557 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

566 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

575 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

589 
ADC_DeInô
();

592 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

593 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

594 
ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

595 
ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

596 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

599 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

600 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,uöt16_à
LowThªshﬁd
);

601 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

604 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

605 
ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

608 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

609 
ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

610 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

611 
ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

612 
ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

613 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

614 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

615 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

616 
uöt32_t
 
ADC_GëMu…iModeC⁄vîsi⁄VÆue
();

619 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

620 
ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

621 
ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

624 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

625 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

626 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

627 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

628 
ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
);

629 
ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

630 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

631 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

632 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

633 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

636 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

637 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

638 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

639 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

640 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

642 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_can.h

30 #i‚de‡
__STM32F4xx_CAN_H


31 
	#__STM32F4xx_CAN_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

50 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
Ë|| \

	)

51 ((
PERIPH
Ë=
CAN2
))

58 
uöt16_t
 
CAN_PªsˇÀr
;

61 
uöt8_t
 
CAN_Mode
;

64 
uöt8_t
 
CAN_SJW
;

69 
uöt8_t
 
CAN_BS1
;

73 
uöt8_t
 
CAN_BS2
;

76 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

79 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

82 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

85 
Fun˘i⁄ÆSèã
 
CAN_NART
;

88 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

91 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

93 } 
	tCAN_InôTy≥Def
;

100 
uöt16_t
 
CAN_FûãrIdHigh
;

104 
uöt16_t
 
CAN_FûãrIdLow
;

108 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

113 
uöt16_t
 
CAN_FûãrMaskIdLow
;

118 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

121 
uöt8_t
 
CAN_FûãrNumbî
;

123 
uöt8_t
 
CAN_FûãrMode
;

126 
uöt8_t
 
CAN_FûãrSˇÀ
;

129 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

131 } 
	tCAN_FûãrInôTy≥Def
;

138 
uöt32_t
 
StdId
;

141 
uöt32_t
 
ExtId
;

144 
uöt8_t
 
IDE
;

148 
uöt8_t
 
RTR
;

152 
uöt8_t
 
DLC
;

156 
uöt8_t
 
D©a
[8];

158 } 
	tC™TxMsg
;

165 
uöt32_t
 
StdId
;

168 
uöt32_t
 
ExtId
;

171 
uöt8_t
 
IDE
;

175 
uöt8_t
 
RTR
;

179 
uöt8_t
 
DLC
;

182 
uöt8_t
 
D©a
[8];

185 
uöt8_t
 
FMI
;

188 } 
	tC™RxMsg
;

200 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

201 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

205 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

206 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

215 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

216 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

217 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

218 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

220 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| \

	)

221 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

222 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

223 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

233 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

234 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

235 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

238 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
Ë||\

	)

239 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

240 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

250 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

251 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

259 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

260 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

261 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

262 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

264 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

	)

265 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

273 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

274 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

275 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

276 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

277 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

278 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

279 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

280 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

281 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

282 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

283 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

284 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

285 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

286 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

287 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

288 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

290 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

298 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

299 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

300 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

301 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

302 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

303 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

304 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

305 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

307 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

315 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

323 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

331 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

332 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

334 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
Ë|| \

	)

335 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

343 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

344 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

346 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
Ë|| \

	)

347 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

355 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

356 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

357 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
Ë|| \

	)

358 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

361 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

362 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

370 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

378 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

379 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

380 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

381 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

389 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

390 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

391 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
Ë|| \

	)

392 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

395 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

396 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

404 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

405 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

406 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

409 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

410 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

418 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

419 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

420 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

421 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

424 
	#CANTXFAILED
 
CAN_TxSètus_Faûed


	)

425 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

426 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

427 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

435 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

436 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

438 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

446 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

447 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

450 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

451 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

459 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

460 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

463 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

464 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

473 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

474 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

475 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

476 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

477 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

478 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

479 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

480 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

494 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

495 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

496 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

499 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

500 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

501 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

502 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

503 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

504 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

507 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

508 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

513 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

514 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

515 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

516 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

518 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
Ë|| \

	)

519 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

520 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

521 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

522 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

523 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

524 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

525 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

527 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
Ë|| \

	)

528 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

529 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

530 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

531 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

540 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

543 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

544 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

545 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

546 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

547 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

548 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

551 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

552 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

555 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

556 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

557 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

558 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

559 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

562 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

563 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

564 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

567 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
Ë||\

	)

568 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

569 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

570 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

571 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

572 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

573 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

575 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
Ë||\

	)

576 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

577 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

578 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

579 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

580 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

593 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

596 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

597 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

598 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

599 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

600 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

601 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

604 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

605 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

606 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

609 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

610 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

611 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

614 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

615 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

616 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

619 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

620 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

621 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

624 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

625 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

626 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

627 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

628 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

630 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_conf.h

29 #i‚de‡
__STM32F4xx_CONF_H


30 
	#__STM32F4xx_CONF_H


	)

32 #i‡
deföed
 (
HSE_VALUE
)

34 #unde‡
HSE_VALUE


35 
	#HSE_VALUE
 ((
uöt32_t
)8000000)

	)

47 
	~"°m32f4xx_dma.h
"

48 
	~"°m32f4xx_exti.h
"

49 
	~"°m32f4xx_Êash.h
"

51 
	~"°m32f4xx_dma2d.h
"

52 
	~"°m32f4xx_fmc.h
"

54 
	~"°m32f4xx_gpio.h
"

56 
	~"°m32f4xx_iwdg.h
"

57 
	~"°m32f4xx_pwr.h
"

58 
	~"°m32f4xx_rcc.h
"

60 
	~"°m32f4xx_πc.h
"

63 
	~"°m32f4xx_syscfg.h
"

65 
	~"°m32f4xx_ußπ.h
"

67 
	~"misc.h
"

83 #ifde‡ 
USE_FULL_ASSERT


93 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

95 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

97 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@spl/stm32f4xx_crc.h

30 #i‚de‡
__STM32F4xx_CRC_H


31 
	#__STM32F4xx_CRC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

62 
CRC_Re£tDR
();

63 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

64 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

65 
uöt32_t
 
CRC_GëCRC
();

66 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

67 
uöt8_t
 
CRC_GëIDRegi°î
();

69 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_cryp.h

30 #i‚de‡
__STM32F4xx_CRYP_H


31 
	#__STM32F4xx_CRYP_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
CRYP_AlgoDú
;

57 
uöt32_t
 
CRYP_AlgoMode
;

60 
uöt32_t
 
CRYP_D©aTy≥
;

62 
uöt32_t
 
CRYP_KeySize
;

65 }
	tCRYP_InôTy≥Def
;

72 
uöt32_t
 
CRYP_Key0Le·
;

73 
uöt32_t
 
CRYP_Key0Right
;

74 
uöt32_t
 
CRYP_Key1Le·
;

75 
uöt32_t
 
CRYP_Key1Right
;

76 
uöt32_t
 
CRYP_Key2Le·
;

77 
uöt32_t
 
CRYP_Key2Right
;

78 
uöt32_t
 
CRYP_Key3Le·
;

79 
uöt32_t
 
CRYP_Key3Right
;

80 }
	tCRYP_KeyInôTy≥Def
;

86 
uöt32_t
 
CRYP_IV0Le·
;

87 
uöt32_t
 
CRYP_IV0Right
;

88 
uöt32_t
 
CRYP_IV1Le·
;

89 
uöt32_t
 
CRYP_IV1Right
;

90 }
	tCRYP_IVInôTy≥Def
;

98 
uöt32_t
 
CR_CuºítC⁄fig
;

100 
uöt32_t
 
CRYP_IV0LR
;

101 
uöt32_t
 
CRYP_IV0RR
;

102 
uöt32_t
 
CRYP_IV1LR
;

103 
uöt32_t
 
CRYP_IV1RR
;

105 
uöt32_t
 
CRYP_K0LR
;

106 
uöt32_t
 
CRYP_K0RR
;

107 
uöt32_t
 
CRYP_K1LR
;

108 
uöt32_t
 
CRYP_K1RR
;

109 
uöt32_t
 
CRYP_K2LR
;

110 
uöt32_t
 
CRYP_K2RR
;

111 
uöt32_t
 
CRYP_K3LR
;

112 
uöt32_t
 
CRYP_K3RR
;

113 
uöt32_t
 
CRYP_CSGCMCCMR
[8];

114 
uöt32_t
 
CRYP_CSGCMR
[8];

115 }
	tCRYP_C⁄ãxt
;

127 
	#CRYP_AlgoDú_En¸y±
 ((
uöt16_t
)0x0000)

	)

128 
	#CRYP_AlgoDú_De¸y±
 ((
uöt16_t
)0x0004)

	)

129 
	#IS_CRYP_ALGODIR
(
ALGODIR
Ë(((ALGODIRË=
CRYP_AlgoDú_En¸y±
Ë|| \

	)

130 ((
ALGODIR
Ë=
CRYP_AlgoDú_De¸y±
))

141 
	#CRYP_AlgoMode_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

142 
	#CRYP_AlgoMode_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

145 
	#CRYP_AlgoMode_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

146 
	#CRYP_AlgoMode_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

149 
	#CRYP_AlgoMode_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

150 
	#CRYP_AlgoMode_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

151 
	#CRYP_AlgoMode_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

152 
	#CRYP_AlgoMode_AES_Key
 ((
uöt32_t
)0x00000038)

	)

153 
	#CRYP_AlgoMode_AES_GCM
 ((
uöt32_t
)0x00080000)

	)

154 
	#CRYP_AlgoMode_AES_CCM
 ((
uöt32_t
)0x00080008)

	)

156 
	#IS_CRYP_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
CRYP_AlgoMode_TDES_ECB
Ë|| \

	)

157 ((
ALGOMODE
Ë=
CRYP_AlgoMode_TDES_CBC
)|| \

158 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_ECB
) || \

159 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_CBC
) || \

160 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_ECB
) || \

161 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CBC
) || \

162 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CTR
) || \

163 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_Key
) || \

164 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_GCM
) || \

165 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CCM
))

175 
	#CRYP_Pha£_Inô
 ((
uöt32_t
)0x00000000)

	)

176 
	#CRYP_Pha£_Hódî
 
CRYP_CR_GCM_CCMPH_0


	)

177 
	#CRYP_Pha£_Paylﬂd
 
CRYP_CR_GCM_CCMPH_1


	)

178 
	#CRYP_Pha£_FöÆ
 
CRYP_CR_GCM_CCMPH


	)

180 
	#IS_CRYP_PHASE
(
PHASE
Ë(((PHASEË=
CRYP_Pha£_Inô
Ë|| \

	)

181 ((
PHASE
Ë=
CRYP_Pha£_Hódî
) || \

182 ((
PHASE
Ë=
CRYP_Pha£_Paylﬂd
) || \

183 ((
PHASE
Ë=
CRYP_Pha£_FöÆ
))

192 
	#CRYP_D©aTy≥_32b
 ((
uöt16_t
)0x0000)

	)

193 
	#CRYP_D©aTy≥_16b
 ((
uöt16_t
)0x0040)

	)

194 
	#CRYP_D©aTy≥_8b
 ((
uöt16_t
)0x0080)

	)

195 
	#CRYP_D©aTy≥_1b
 ((
uöt16_t
)0x00C0)

	)

196 
	#IS_CRYP_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
CRYP_D©aTy≥_32b
Ë|| \

	)

197 ((
DATATYPE
Ë=
CRYP_D©aTy≥_16b
)|| \

198 ((
DATATYPE
Ë=
CRYP_D©aTy≥_8b
)|| \

199 ((
DATATYPE
Ë=
CRYP_D©aTy≥_1b
))

207 
	#CRYP_KeySize_128b
 ((
uöt16_t
)0x0000)

	)

208 
	#CRYP_KeySize_192b
 ((
uöt16_t
)0x0100)

	)

209 
	#CRYP_KeySize_256b
 ((
uöt16_t
)0x0200)

	)

210 
	#IS_CRYP_KEYSIZE
(
KEYSIZE
Ë(((KEYSIZEË=
CRYP_KeySize_128b
)|| \

	)

211 ((
KEYSIZE
Ë=
CRYP_KeySize_192b
)|| \

212 ((
KEYSIZE
Ë=
CRYP_KeySize_256b
))

220 
	#CRYP_FLAG_BUSY
 ((
uöt8_t
)0x10Ë

	)

224 
	#CRYP_FLAG_IFEM
 ((
uöt8_t
)0x01Ë

	)

225 
	#CRYP_FLAG_IFNF
 ((
uöt8_t
)0x02Ë

	)

226 
	#CRYP_FLAG_INRIS
 ((
uöt8_t
)0x22Ë

	)

227 
	#CRYP_FLAG_OFNE
 ((
uöt8_t
)0x04Ë

	)

229 
	#CRYP_FLAG_OFFU
 ((
uöt8_t
)0x08Ë

	)

230 
	#CRYP_FLAG_OUTRIS
 ((
uöt8_t
)0x21Ë

	)

233 
	#IS_CRYP_GET_FLAG
(
FLAG
Ë(((FLAGË=
CRYP_FLAG_IFEM
Ë|| \

	)

234 ((
FLAG
Ë=
CRYP_FLAG_IFNF
) || \

235 ((
FLAG
Ë=
CRYP_FLAG_OFNE
) || \

236 ((
FLAG
Ë=
CRYP_FLAG_OFFU
) || \

237 ((
FLAG
Ë=
CRYP_FLAG_BUSY
) || \

238 ((
FLAG
Ë=
CRYP_FLAG_OUTRIS
)|| \

239 ((
FLAG
Ë=
CRYP_FLAG_INRIS
))

247 
	#CRYP_IT_INI
 ((
uöt8_t
)0x01Ë

	)

248 
	#CRYP_IT_OUTI
 ((
uöt8_t
)0x02Ë

	)

249 
	#IS_CRYP_CONFIG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xFCË=0x00Ë&& ((ITË!0x00))

	)

250 
	#IS_CRYP_GET_IT
(
IT
Ë(((ITË=
CRYP_IT_INI
Ë|| ((ITË=
CRYP_IT_OUTI
))

	)

259 
	#MODE_ENCRYPT
 ((
uöt8_t
)0x01)

	)

260 
	#MODE_DECRYPT
 ((
uöt8_t
)0x00)

	)

269 
	#CRYP_DMAReq_D©aIN
 ((
uöt8_t
)0x01)

	)

270 
	#CRYP_DMAReq_D©aOUT
 ((
uöt8_t
)0x02)

	)

271 
	#IS_CRYP_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt8_t
)0xFCË=0x00Ë&& ((DMAREQË!0x00))

	)

284 
CRYP_DeInô
();

287 
CRYP_Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

288 
CRYP_Såu˘Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

289 
CRYP_KeyInô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

290 
CRYP_KeySåu˘Inô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

291 
CRYP_IVInô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

292 
CRYP_IVSåu˘Inô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

293 
CRYP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

294 
CRYP_Pha£C⁄fig
(
uöt32_t
 
CRYP_Pha£
);

295 
CRYP_FIFOFlush
();

297 
CRYP_D©aIn
(
uöt32_t
 
D©a
);

298 
uöt32_t
 
CRYP_D©aOut
();

301 
Eº‹Sètus
 
CRYP_SaveC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtSave
,

302 
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

303 
CRYP_Re°‹eC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtRe°‹e
);

306 
CRYP_DMACmd
(
uöt8_t
 
CRYP_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

309 
CRYP_ITC⁄fig
(
uöt8_t
 
CRYP_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

310 
ITSètus
 
CRYP_GëITSètus
(
uöt8_t
 
CRYP_IT
);

311 
Fun˘i⁄ÆSèã
 
CRYP_GëCmdSètus
();

312 
FœgSètus
 
CRYP_GëFœgSètus
(
uöt8_t
 
CRYP_FLAG
);

315 
Eº‹Sètus
 
CRYP_AES_ECB
(
uöt8_t
 
Mode
,

316 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

317 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

318 
uöt8_t
 *
Ouçut
);

320 
Eº‹Sètus
 
CRYP_AES_CBC
(
uöt8_t
 
Mode
,

321 
uöt8_t
 
InôVe˘‹s
[16],

322 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

323 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

324 
uöt8_t
 *
Ouçut
);

326 
Eº‹Sètus
 
CRYP_AES_CTR
(
uöt8_t
 
Mode
,

327 
uöt8_t
 
InôVe˘‹s
[16],

328 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

329 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

330 
uöt8_t
 *
Ouçut
);

332 
Eº‹Sètus
 
CRYP_AES_GCM
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16],

333 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

334 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
ILígth
,

335 
uöt8_t
 *
Hódî
, 
uöt32_t
 
HLígth
,

336 
uöt8_t
 *
Ouçut
, uöt8_à*
AuthTAG
);

338 
Eº‹Sètus
 
CRYP_AES_CCM
(
uöt8_t
 
Mode
,

339 
uöt8_t
* 
N⁄˚
, 
uöt32_t
 
N⁄˚Size
,

340 
uöt8_t
* 
Key
, 
uöt16_t
 
Keysize
,

341 
uöt8_t
* 
I≈ut
, 
uöt32_t
 
ILígth
,

342 
uöt8_t
* 
Hódî
, 
uöt32_t
 
HLígth
, uöt8_à*
HBuf„r
,

343 
uöt8_t
* 
Ouçut
,

344 
uöt8_t
* 
AuthTAG
, 
uöt32_t
 
TAGSize
);

347 
Eº‹Sètus
 
CRYP_TDES_ECB
(
uöt8_t
 
Mode
,

348 
uöt8_t
 
Key
[24],

349 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

350 
uöt8_t
 *
Ouçut
);

352 
Eº‹Sètus
 
CRYP_TDES_CBC
(
uöt8_t
 
Mode
,

353 
uöt8_t
 
Key
[24],

354 
uöt8_t
 
InôVe˘‹s
[8],

355 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

356 
uöt8_t
 *
Ouçut
);

359 
Eº‹Sètus
 
CRYP_DES_ECB
(
uöt8_t
 
Mode
,

360 
uöt8_t
 
Key
[8],

361 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

362 
uöt8_t
 *
Ouçut
);

364 
Eº‹Sètus
 
CRYP_DES_CBC
(
uöt8_t
 
Mode
,

365 
uöt8_t
 
Key
[8],

366 
uöt8_t
 
InôVe˘‹s
[8],

367 
uöt8_t
 *
I≈ut
,
uöt32_t
 
IÀngth
,

368 
uöt8_t
 *
Ouçut
);

370 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_dac.h

30 #i‚de‡
__STM32F4xx_DAC_H


31 
	#__STM32F4xx_DAC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DAC_Triggî
;

59 
uöt32_t
 
DAC_WaveGíî©i⁄
;

63 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

67 
uöt32_t
 
DAC_OuçutBuf„r
;

69 }
	tDAC_InôTy≥Def
;

81 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

83 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

84 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

85 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

86 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

87 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

88 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

90 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

91 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

93 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
Ë|| \

	)

94 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

95 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

111 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

112 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

113 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

114 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
Ë|| \

	)

115 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

116 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

125 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

126 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

127 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

128 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

129 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

130 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

131 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

132 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

133 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

134 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

135 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

136 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

137 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

138 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

150 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
Ë|| \

	)

151 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

152 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

162 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

163 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

182 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

183 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

184 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
Ë|| \

	)

185 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

194 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

195 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

196 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
Ë|| \

	)

197 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

206 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

207 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

208 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

209 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
Ë|| \

	)

210 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

211 ((
ALIGN
Ë=
DAC_Align_8b_R
))

220 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

221 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

222 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
Ë|| \

	)

223 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

232 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

240 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

241 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

251 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

252 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

266 
DAC_DeInô
();

269 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

270 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

271 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

272 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

273 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

274 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

275 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

276 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

277 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

278 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

281 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

284 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

286 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

287 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

288 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

290 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_dbgmcu.h

29 #i‚de‡
__STM32F4xx_DBGMCU_H


30 
	#__STM32F4xx_DBGMCU_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

53 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

54 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

55 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

56 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFF8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

58 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

59 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

60 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

61 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

62 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

63 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

64 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

65 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

66 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

67 
	#DBGMCU_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

68 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

69 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

70 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

71 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

72 
	#DBGMCU_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

73 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

74 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

75 
	#IS_DBGMCU_APB1PERIPH
(
PERIPH
Ë((((PERIPHË& 0xF91FE200Ë=0x00Ë&& ((PERIPHË!0x00))

	)

77 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

78 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

79 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

80 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

81 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

82 
	#IS_DBGMCU_APB2PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFF8FFFCË=0x00Ë&& ((PERIPHË!0x00))

	)

89 
uöt32_t
 
DBGMCU_GëREVID
();

90 
uöt32_t
 
DBGMCU_GëDEVID
();

91 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

92 
DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

93 
DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

95 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_dcmi.h

29 #i‚de‡
__STM32F4xx_DCMI_H


30 
	#__STM32F4xx_DCMI_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

53 
uöt16_t
 
DCMI_C≠tuªMode
;

56 
uöt16_t
 
DCMI_SynchroMode
;

59 
uöt16_t
 
DCMI_PCKPﬁ¨ôy
;

62 
uöt16_t
 
DCMI_VSPﬁ¨ôy
;

65 
uöt16_t
 
DCMI_HSPﬁ¨ôy
;

68 
uöt16_t
 
DCMI_C≠tuªR©e
;

71 
uöt16_t
 
DCMI_ExãndedD©aMode
;

73 } 
	tDCMI_InôTy≥Def
;

80 
uöt16_t
 
DCMI_VîtiˇlSèπLöe
;

83 
uöt16_t
 
DCMI_H‹iz⁄èlOff£tCou¡
;

86 
uöt16_t
 
DCMI_VîtiˇlLöeCou¡
;

89 
uöt16_t
 
DCMI_C≠tuªCou¡
;

92 } 
	tDCMI_CROPInôTy≥Def
;

99 
uöt8_t
 
DCMI_FømeSèπCode
;

100 
uöt8_t
 
DCMI_LöeSèπCode
;

101 
uöt8_t
 
DCMI_LöeEndCode
;

102 
uöt8_t
 
DCMI_FømeEndCode
;

103 } 
	tDCMI_CodesInôTy≥Def
;

114 
	#DCMI_C≠tuªMode_C⁄töuous
 ((
uöt16_t
)0x0000Ë

	)

116 
	#DCMI_C≠tuªMode_S«pShŸ
 ((
uöt16_t
)0x0002Ë

	)

118 
	#IS_DCMI_CAPTURE_MODE
(
MODE
)(((MODEË=
DCMI_C≠tuªMode_C⁄töuous
Ë|| \

	)

119 ((
MODE
Ë=
DCMI_C≠tuªMode_S«pShŸ
))

128 
	#DCMI_SynchroMode_H¨dw¨e
 ((
uöt16_t
)0x0000Ë

	)

130 
	#DCMI_SynchroMode_Embedded
 ((
uöt16_t
)0x0010Ë

	)

132 
	#IS_DCMI_SYNCHRO
(
MODE
)(((MODEË=
DCMI_SynchroMode_H¨dw¨e
Ë|| \

	)

133 ((
MODE
Ë=
DCMI_SynchroMode_Embedded
))

142 
	#DCMI_PCKPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0000Ë

	)

143 
	#DCMI_PCKPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0020Ë

	)

144 
	#IS_DCMI_PCKPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_PCKPﬁ¨ôy_FÆlög
Ë|| \

	)

145 ((
POLARITY
Ë=
DCMI_PCKPﬁ¨ôy_Risög
))

154 
	#DCMI_VSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

155 
	#DCMI_VSPﬁ¨ôy_High
 ((
uöt16_t
)0x0080Ë

	)

156 
	#IS_DCMI_VSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_VSPﬁ¨ôy_Low
Ë|| \

	)

157 ((
POLARITY
Ë=
DCMI_VSPﬁ¨ôy_High
))

166 
	#DCMI_HSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

167 
	#DCMI_HSPﬁ¨ôy_High
 ((
uöt16_t
)0x0040Ë

	)

168 
	#IS_DCMI_HSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_HSPﬁ¨ôy_Low
Ë|| \

	)

169 ((
POLARITY
Ë=
DCMI_HSPﬁ¨ôy_High
))

178 
	#DCMI_C≠tuªR©e_AŒ_Føme
 ((
uöt16_t
)0x0000Ë

	)

179 
	#DCMI_C≠tuªR©e_1of2_Føme
 ((
uöt16_t
)0x0100Ë

	)

180 
	#DCMI_C≠tuªR©e_1of4_Føme
 ((
uöt16_t
)0x0200Ë

	)

181 
	#IS_DCMI_CAPTURE_RATE
(
RATE
Ë(((RATEË=
DCMI_C≠tuªR©e_AŒ_Føme
Ë|| \

	)

182 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of2_Føme
) ||\

183 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of4_Føme
))

192 
	#DCMI_ExãndedD©aMode_8b
 ((
uöt16_t
)0x0000Ë

	)

193 
	#DCMI_ExãndedD©aMode_10b
 ((
uöt16_t
)0x0400Ë

	)

194 
	#DCMI_ExãndedD©aMode_12b
 ((
uöt16_t
)0x0800Ë

	)

195 
	#DCMI_ExãndedD©aMode_14b
 ((
uöt16_t
)0x0C00Ë

	)

196 
	#IS_DCMI_EXTENDED_DATA
(
DATA
)(((DATAË=
DCMI_ExãndedD©aMode_8b
Ë|| \

	)

197 ((
DATA
Ë=
DCMI_ExãndedD©aMode_10b
) ||\

198 ((
DATA
Ë=
DCMI_ExãndedD©aMode_12b
) ||\

199 ((
DATA
Ë=
DCMI_ExãndedD©aMode_14b
))

208 
	#DCMI_IT_FRAME
 ((
uöt16_t
)0x0001)

	)

209 
	#DCMI_IT_OVF
 ((
uöt16_t
)0x0002)

	)

210 
	#DCMI_IT_ERR
 ((
uöt16_t
)0x0004)

	)

211 
	#DCMI_IT_VSYNC
 ((
uöt16_t
)0x0008)

	)

212 
	#DCMI_IT_LINE
 ((
uöt16_t
)0x0010)

	)

213 
	#IS_DCMI_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((ITË!0x0000))

	)

214 
	#IS_DCMI_GET_IT
(
IT
Ë(((ITË=
DCMI_IT_FRAME
Ë|| \

	)

215 ((
IT
Ë=
DCMI_IT_OVF
) || \

216 ((
IT
Ë=
DCMI_IT_ERR
) || \

217 ((
IT
Ë=
DCMI_IT_VSYNC
) || \

218 ((
IT
Ë=
DCMI_IT_LINE
))

230 
	#DCMI_FLAG_HSYNC
 ((
uöt16_t
)0x2001)

	)

231 
	#DCMI_FLAG_VSYNC
 ((
uöt16_t
)0x2002)

	)

232 
	#DCMI_FLAG_FNE
 ((
uöt16_t
)0x2004)

	)

236 
	#DCMI_FLAG_FRAMERI
 ((
uöt16_t
)0x0001)

	)

237 
	#DCMI_FLAG_OVFRI
 ((
uöt16_t
)0x0002)

	)

238 
	#DCMI_FLAG_ERRRI
 ((
uöt16_t
)0x0004)

	)

239 
	#DCMI_FLAG_VSYNCRI
 ((
uöt16_t
)0x0008)

	)

240 
	#DCMI_FLAG_LINERI
 ((
uöt16_t
)0x0010)

	)

244 
	#DCMI_FLAG_FRAMEMI
 ((
uöt16_t
)0x1001)

	)

245 
	#DCMI_FLAG_OVFMI
 ((
uöt16_t
)0x1002)

	)

246 
	#DCMI_FLAG_ERRMI
 ((
uöt16_t
)0x1004)

	)

247 
	#DCMI_FLAG_VSYNCMI
 ((
uöt16_t
)0x1008)

	)

248 
	#DCMI_FLAG_LINEMI
 ((
uöt16_t
)0x1010)

	)

249 
	#IS_DCMI_GET_FLAG
(
FLAG
Ë(((FLAGË=
DCMI_FLAG_HSYNC
Ë|| \

	)

250 ((
FLAG
Ë=
DCMI_FLAG_VSYNC
) || \

251 ((
FLAG
Ë=
DCMI_FLAG_FNE
) || \

252 ((
FLAG
Ë=
DCMI_FLAG_FRAMERI
) || \

253 ((
FLAG
Ë=
DCMI_FLAG_OVFRI
) || \

254 ((
FLAG
Ë=
DCMI_FLAG_ERRRI
) || \

255 ((
FLAG
Ë=
DCMI_FLAG_VSYNCRI
) || \

256 ((
FLAG
Ë=
DCMI_FLAG_LINERI
) || \

257 ((
FLAG
Ë=
DCMI_FLAG_FRAMEMI
) || \

258 ((
FLAG
Ë=
DCMI_FLAG_OVFMI
) || \

259 ((
FLAG
Ë=
DCMI_FLAG_ERRMI
) || \

260 ((
FLAG
Ë=
DCMI_FLAG_VSYNCMI
) || \

261 ((
FLAG
Ë=
DCMI_FLAG_LINEMI
))

263 
	#IS_DCMI_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((FLAGË!0x0000))

	)

276 
DCMI_DeInô
();

279 
DCMI_Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

280 
DCMI_Såu˘Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

281 
DCMI_CROPC⁄fig
(
DCMI_CROPInôTy≥Def
* 
DCMI_CROPInôSåu˘
);

282 
DCMI_CROPCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

283 
DCMI_SëEmbeddedSynchroCodes
(
DCMI_CodesInôTy≥Def
* 
DCMI_CodesInôSåu˘
);

284 
DCMI_JPEGCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DCMI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DCMI_C≠tuªCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

289 
uöt32_t
 
DCMI_RódD©a
();

292 
DCMI_ITC⁄fig
(
uöt16_t
 
DCMI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

293 
FœgSètus
 
DCMI_GëFœgSètus
(
uöt16_t
 
DCMI_FLAG
);

294 
DCMI_CÀ¨Fœg
(
uöt16_t
 
DCMI_FLAG
);

295 
ITSètus
 
DCMI_GëITSètus
(
uöt16_t
 
DCMI_IT
);

296 
DCMI_CÀ¨ITPídögBô
(
uöt16_t
 
DCMI_IT
);

298 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_dma.h

30 #i‚de‡
__STM32F4xx_DMA_H


31 
	#__STM32F4xx_DMA_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DMA_Ch™√l
;

59 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

61 
uöt32_t
 
DMA_Mem‹y0Ba£Addr
;

65 
uöt32_t
 
DMA_DIR
;

69 
uöt32_t
 
DMA_Buf„rSize
;

73 
uöt32_t
 
DMA_PîùhîÆInc
;

76 
uöt32_t
 
DMA_Mem‹yInc
;

79 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

82 
uöt32_t
 
DMA_Mem‹yD©aSize
;

85 
uöt32_t
 
DMA_Mode
;

90 
uöt32_t
 
DMA_Pri‹ôy
;

93 
uöt32_t
 
DMA_FIFOMode
;

98 
uöt32_t
 
DMA_FIFOThªshﬁd
;

101 
uöt32_t
 
DMA_Mem‹yBur°
;

106 
uöt32_t
 
DMA_PîùhîÆBur°
;

110 }
	tDMA_InôTy≥Def
;

118 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Såóm0
Ë|| \

	)

119 ((
PERIPH
Ë=
DMA1_Såóm1
) || \

120 ((
PERIPH
Ë=
DMA1_Såóm2
) || \

121 ((
PERIPH
Ë=
DMA1_Såóm3
) || \

122 ((
PERIPH
Ë=
DMA1_Såóm4
) || \

123 ((
PERIPH
Ë=
DMA1_Såóm5
) || \

124 ((
PERIPH
Ë=
DMA1_Såóm6
) || \

125 ((
PERIPH
Ë=
DMA1_Såóm7
) || \

126 ((
PERIPH
Ë=
DMA2_Såóm0
) || \

127 ((
PERIPH
Ë=
DMA2_Såóm1
) || \

128 ((
PERIPH
Ë=
DMA2_Såóm2
) || \

129 ((
PERIPH
Ë=
DMA2_Såóm3
) || \

130 ((
PERIPH
Ë=
DMA2_Såóm4
) || \

131 ((
PERIPH
Ë=
DMA2_Såóm5
) || \

132 ((
PERIPH
Ë=
DMA2_Såóm6
) || \

133 ((
PERIPH
Ë=
DMA2_Såóm7
))

135 
	#IS_DMA_ALL_CONTROLLER
(
CONTROLLER
Ë(((CONTROLLERË=
DMA1
Ë|| \

	)

136 ((
CONTROLLER
Ë=
DMA2
))

141 
	#DMA_Ch™√l_0
 ((
uöt32_t
)0x00000000)

	)

142 
	#DMA_Ch™√l_1
 ((
uöt32_t
)0x02000000)

	)

143 
	#DMA_Ch™√l_2
 ((
uöt32_t
)0x04000000)

	)

144 
	#DMA_Ch™√l_3
 ((
uöt32_t
)0x06000000)

	)

145 
	#DMA_Ch™√l_4
 ((
uöt32_t
)0x08000000)

	)

146 
	#DMA_Ch™√l_5
 ((
uöt32_t
)0x0A000000)

	)

147 
	#DMA_Ch™√l_6
 ((
uöt32_t
)0x0C000000)

	)

148 
	#DMA_Ch™√l_7
 ((
uöt32_t
)0x0E000000)

	)

150 
	#IS_DMA_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DMA_Ch™√l_0
Ë|| \

	)

151 ((
CHANNEL
Ë=
DMA_Ch™√l_1
) || \

152 ((
CHANNEL
Ë=
DMA_Ch™√l_2
) || \

153 ((
CHANNEL
Ë=
DMA_Ch™√l_3
) || \

154 ((
CHANNEL
Ë=
DMA_Ch™√l_4
) || \

155 ((
CHANNEL
Ë=
DMA_Ch™√l_5
) || \

156 ((
CHANNEL
Ë=
DMA_Ch™√l_6
) || \

157 ((
CHANNEL
Ë=
DMA_Ch™√l_7
))

166 
	#DMA_DIR_PîùhîÆToMem‹y
 ((
uöt32_t
)0x00000000)

	)

167 
	#DMA_DIR_Mem‹yToPîùhîÆ
 ((
uöt32_t
)0x00000040)

	)

168 
	#DMA_DIR_Mem‹yToMem‹y
 ((
uöt32_t
)0x00000080)

	)

170 
	#IS_DMA_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
DMA_DIR_PîùhîÆToMem‹y
 ) || \

	)

171 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToPîùhîÆ
) || \

172 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToMem‹y
))

181 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

190 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

191 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

193 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
Ë|| \

	)

194 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

203 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

204 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

206 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
Ë|| \

	)

207 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

216 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

217 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000800)

	)

218 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00001000)

	)

220 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
Ë|| \

	)

221 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

222 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

231 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

232 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00002000)

	)

233 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00004000)

	)

235 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
Ë|| \

	)

236 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

237 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
 ))

246 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

247 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000100)

	)

249 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_N‹mÆ
 ) || \

	)

250 ((
MODE
Ë=
DMA_Mode_Cúcuœr
))

259 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

260 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00010000)

	)

261 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00020000)

	)

262 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00030000)

	)

264 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_Low
 ) || \

	)

265 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

266 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

267 ((
PRIORITY
Ë=
DMA_Pri‹ôy_VîyHigh
))

276 
	#DMA_FIFOMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

277 
	#DMA_FIFOMode_E«bÀ
 ((
uöt32_t
)0x00000004)

	)

279 
	#IS_DMA_FIFO_MODE_STATE
(
STATE
Ë(((STATEË=
DMA_FIFOMode_DißbÀ
 ) || \

	)

280 ((
STATE
Ë=
DMA_FIFOMode_E«bÀ
))

289 
	#DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000)

	)

290 
	#DMA_FIFOThªshﬁd_HÆfFuŒ
 ((
uöt32_t
)0x00000001)

	)

291 
	#DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000002)

	)

292 
	#DMA_FIFOThªshﬁd_FuŒ
 ((
uöt32_t
)0x00000003)

	)

294 
	#IS_DMA_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ) || \

	)

295 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_HÆfFuŒ
) || \

296 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
) || \

297 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_FuŒ
))

306 
	#DMA_Mem‹yBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

307 
	#DMA_Mem‹yBur°_INC4
 ((
uöt32_t
)0x00800000)

	)

308 
	#DMA_Mem‹yBur°_INC8
 ((
uöt32_t
)0x01000000)

	)

309 
	#DMA_Mem‹yBur°_INC16
 ((
uöt32_t
)0x01800000)

	)

311 
	#IS_DMA_MEMORY_BURST
(
BURST
Ë(((BURSTË=
DMA_Mem‹yBur°_SögÀ
Ë|| \

	)

312 ((
BURST
Ë=
DMA_Mem‹yBur°_INC4
) || \

313 ((
BURST
Ë=
DMA_Mem‹yBur°_INC8
) || \

314 ((
BURST
Ë=
DMA_Mem‹yBur°_INC16
))

323 
	#DMA_PîùhîÆBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

324 
	#DMA_PîùhîÆBur°_INC4
 ((
uöt32_t
)0x00200000)

	)

325 
	#DMA_PîùhîÆBur°_INC8
 ((
uöt32_t
)0x00400000)

	)

326 
	#DMA_PîùhîÆBur°_INC16
 ((
uöt32_t
)0x00600000)

	)

328 
	#IS_DMA_PERIPHERAL_BURST
(
BURST
Ë(((BURSTË=
DMA_PîùhîÆBur°_SögÀ
Ë|| \

	)

329 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC4
) || \

330 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC8
) || \

331 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC16
))

340 
	#DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000 << 3)

	)

341 
	#DMA_FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000001 << 3)

	)

342 
	#DMA_FIFOSètus_HÆfFuŒ
 ((
uöt32_t
)0x00000002 << 3)

	)

343 
	#DMA_FIFOSètus_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000003 << 3)

	)

344 
	#DMA_FIFOSètus_Em±y
 ((
uöt32_t
)0x00000004 << 3)

	)

345 
	#DMA_FIFOSètus_FuŒ
 ((
uöt32_t
)0x00000005 << 3)

	)

347 
	#IS_DMA_FIFO_STATUS
(
STATUS
Ë(((STATUSË=
DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ) || \

	)

348 ((
STATUS
Ë=
DMA_FIFOSètus_HÆfFuŒ
) || \

349 ((
STATUS
Ë=
DMA_FIFOSètus_1Qu¨ãrFuŒ
) || \

350 ((
STATUS
Ë=
DMA_FIFOSètus_3Qu¨ãrsFuŒ
) || \

351 ((
STATUS
Ë=
DMA_FIFOSètus_FuŒ
) || \

352 ((
STATUS
Ë=
DMA_FIFOSètus_Em±y
))

360 
	#DMA_FLAG_FEIF0
 ((
uöt32_t
)0x10800001)

	)

361 
	#DMA_FLAG_DMEIF0
 ((
uöt32_t
)0x10800004)

	)

362 
	#DMA_FLAG_TEIF0
 ((
uöt32_t
)0x10000008)

	)

363 
	#DMA_FLAG_HTIF0
 ((
uöt32_t
)0x10000010)

	)

364 
	#DMA_FLAG_TCIF0
 ((
uöt32_t
)0x10000020)

	)

365 
	#DMA_FLAG_FEIF1
 ((
uöt32_t
)0x10000040)

	)

366 
	#DMA_FLAG_DMEIF1
 ((
uöt32_t
)0x10000100)

	)

367 
	#DMA_FLAG_TEIF1
 ((
uöt32_t
)0x10000200)

	)

368 
	#DMA_FLAG_HTIF1
 ((
uöt32_t
)0x10000400)

	)

369 
	#DMA_FLAG_TCIF1
 ((
uöt32_t
)0x10000800)

	)

370 
	#DMA_FLAG_FEIF2
 ((
uöt32_t
)0x10010000)

	)

371 
	#DMA_FLAG_DMEIF2
 ((
uöt32_t
)0x10040000)

	)

372 
	#DMA_FLAG_TEIF2
 ((
uöt32_t
)0x10080000)

	)

373 
	#DMA_FLAG_HTIF2
 ((
uöt32_t
)0x10100000)

	)

374 
	#DMA_FLAG_TCIF2
 ((
uöt32_t
)0x10200000)

	)

375 
	#DMA_FLAG_FEIF3
 ((
uöt32_t
)0x10400000)

	)

376 
	#DMA_FLAG_DMEIF3
 ((
uöt32_t
)0x11000000)

	)

377 
	#DMA_FLAG_TEIF3
 ((
uöt32_t
)0x12000000)

	)

378 
	#DMA_FLAG_HTIF3
 ((
uöt32_t
)0x14000000)

	)

379 
	#DMA_FLAG_TCIF3
 ((
uöt32_t
)0x18000000)

	)

380 
	#DMA_FLAG_FEIF4
 ((
uöt32_t
)0x20000001)

	)

381 
	#DMA_FLAG_DMEIF4
 ((
uöt32_t
)0x20000004)

	)

382 
	#DMA_FLAG_TEIF4
 ((
uöt32_t
)0x20000008)

	)

383 
	#DMA_FLAG_HTIF4
 ((
uöt32_t
)0x20000010)

	)

384 
	#DMA_FLAG_TCIF4
 ((
uöt32_t
)0x20000020)

	)

385 
	#DMA_FLAG_FEIF5
 ((
uöt32_t
)0x20000040)

	)

386 
	#DMA_FLAG_DMEIF5
 ((
uöt32_t
)0x20000100)

	)

387 
	#DMA_FLAG_TEIF5
 ((
uöt32_t
)0x20000200)

	)

388 
	#DMA_FLAG_HTIF5
 ((
uöt32_t
)0x20000400)

	)

389 
	#DMA_FLAG_TCIF5
 ((
uöt32_t
)0x20000800)

	)

390 
	#DMA_FLAG_FEIF6
 ((
uöt32_t
)0x20010000)

	)

391 
	#DMA_FLAG_DMEIF6
 ((
uöt32_t
)0x20040000)

	)

392 
	#DMA_FLAG_TEIF6
 ((
uöt32_t
)0x20080000)

	)

393 
	#DMA_FLAG_HTIF6
 ((
uöt32_t
)0x20100000)

	)

394 
	#DMA_FLAG_TCIF6
 ((
uöt32_t
)0x20200000)

	)

395 
	#DMA_FLAG_FEIF7
 ((
uöt32_t
)0x20400000)

	)

396 
	#DMA_FLAG_DMEIF7
 ((
uöt32_t
)0x21000000)

	)

397 
	#DMA_FLAG_TEIF7
 ((
uöt32_t
)0x22000000)

	)

398 
	#DMA_FLAG_HTIF7
 ((
uöt32_t
)0x24000000)

	)

399 
	#DMA_FLAG_TCIF7
 ((
uöt32_t
)0x28000000)

	)

401 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& 0x30000000Ë!0x30000000Ë&& (((FLAGË& 0x30000000Ë!0Ë&& \

	)

402 (((
FLAG
) & 0xC002F082) == 0x00) && ((FLAG) != 0x00))

404 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA_FLAG_TCIF0
Ë|| ((FLAGË=
DMA_FLAG_HTIF0
Ë|| \

	)

405 ((
FLAG
Ë=
DMA_FLAG_TEIF0
Ë|| ((FLAGË=
DMA_FLAG_DMEIF0
) || \

406 ((
FLAG
Ë=
DMA_FLAG_FEIF0
Ë|| ((FLAGË=
DMA_FLAG_TCIF1
) || \

407 ((
FLAG
Ë=
DMA_FLAG_HTIF1
Ë|| ((FLAGË=
DMA_FLAG_TEIF1
) || \

408 ((
FLAG
Ë=
DMA_FLAG_DMEIF1
Ë|| ((FLAGË=
DMA_FLAG_FEIF1
) || \

409 ((
FLAG
Ë=
DMA_FLAG_TCIF2
Ë|| ((FLAGË=
DMA_FLAG_HTIF2
) || \

410 ((
FLAG
Ë=
DMA_FLAG_TEIF2
Ë|| ((FLAGË=
DMA_FLAG_DMEIF2
) || \

411 ((
FLAG
Ë=
DMA_FLAG_FEIF2
Ë|| ((FLAGË=
DMA_FLAG_TCIF3
) || \

412 ((
FLAG
Ë=
DMA_FLAG_HTIF3
Ë|| ((FLAGË=
DMA_FLAG_TEIF3
) || \

413 ((
FLAG
Ë=
DMA_FLAG_DMEIF3
Ë|| ((FLAGË=
DMA_FLAG_FEIF3
) || \

414 ((
FLAG
Ë=
DMA_FLAG_TCIF4
Ë|| ((FLAGË=
DMA_FLAG_HTIF4
) || \

415 ((
FLAG
Ë=
DMA_FLAG_TEIF4
Ë|| ((FLAGË=
DMA_FLAG_DMEIF4
) || \

416 ((
FLAG
Ë=
DMA_FLAG_FEIF4
Ë|| ((FLAGË=
DMA_FLAG_TCIF5
) || \

417 ((
FLAG
Ë=
DMA_FLAG_HTIF5
Ë|| ((FLAGË=
DMA_FLAG_TEIF5
) || \

418 ((
FLAG
Ë=
DMA_FLAG_DMEIF5
Ë|| ((FLAGË=
DMA_FLAG_FEIF5
) || \

419 ((
FLAG
Ë=
DMA_FLAG_TCIF6
Ë|| ((FLAGË=
DMA_FLAG_HTIF6
) || \

420 ((
FLAG
Ë=
DMA_FLAG_TEIF6
Ë|| ((FLAGË=
DMA_FLAG_DMEIF6
) || \

421 ((
FLAG
Ë=
DMA_FLAG_FEIF6
Ë|| ((FLAGË=
DMA_FLAG_TCIF7
) || \

422 ((
FLAG
Ë=
DMA_FLAG_HTIF7
Ë|| ((FLAGË=
DMA_FLAG_TEIF7
) || \

423 ((
FLAG
Ë=
DMA_FLAG_DMEIF7
Ë|| ((FLAGË=
DMA_FLAG_FEIF7
))

432 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000010)

	)

433 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000008)

	)

434 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000004)

	)

435 
	#DMA_IT_DME
 ((
uöt32_t
)0x00000002)

	)

436 
	#DMA_IT_FE
 ((
uöt32_t
)0x00000080)

	)

438 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFF61Ë=0x00Ë&& ((ITË!0x00))

	)

447 
	#DMA_IT_FEIF0
 ((
uöt32_t
)0x90000001)

	)

448 
	#DMA_IT_DMEIF0
 ((
uöt32_t
)0x10001004)

	)

449 
	#DMA_IT_TEIF0
 ((
uöt32_t
)0x10002008)

	)

450 
	#DMA_IT_HTIF0
 ((
uöt32_t
)0x10004010)

	)

451 
	#DMA_IT_TCIF0
 ((
uöt32_t
)0x10008020)

	)

452 
	#DMA_IT_FEIF1
 ((
uöt32_t
)0x90000040)

	)

453 
	#DMA_IT_DMEIF1
 ((
uöt32_t
)0x10001100)

	)

454 
	#DMA_IT_TEIF1
 ((
uöt32_t
)0x10002200)

	)

455 
	#DMA_IT_HTIF1
 ((
uöt32_t
)0x10004400)

	)

456 
	#DMA_IT_TCIF1
 ((
uöt32_t
)0x10008800)

	)

457 
	#DMA_IT_FEIF2
 ((
uöt32_t
)0x90010000)

	)

458 
	#DMA_IT_DMEIF2
 ((
uöt32_t
)0x10041000)

	)

459 
	#DMA_IT_TEIF2
 ((
uöt32_t
)0x10082000)

	)

460 
	#DMA_IT_HTIF2
 ((
uöt32_t
)0x10104000)

	)

461 
	#DMA_IT_TCIF2
 ((
uöt32_t
)0x10208000)

	)

462 
	#DMA_IT_FEIF3
 ((
uöt32_t
)0x90400000)

	)

463 
	#DMA_IT_DMEIF3
 ((
uöt32_t
)0x11001000)

	)

464 
	#DMA_IT_TEIF3
 ((
uöt32_t
)0x12002000)

	)

465 
	#DMA_IT_HTIF3
 ((
uöt32_t
)0x14004000)

	)

466 
	#DMA_IT_TCIF3
 ((
uöt32_t
)0x18008000)

	)

467 
	#DMA_IT_FEIF4
 ((
uöt32_t
)0xA0000001)

	)

468 
	#DMA_IT_DMEIF4
 ((
uöt32_t
)0x20001004)

	)

469 
	#DMA_IT_TEIF4
 ((
uöt32_t
)0x20002008)

	)

470 
	#DMA_IT_HTIF4
 ((
uöt32_t
)0x20004010)

	)

471 
	#DMA_IT_TCIF4
 ((
uöt32_t
)0x20008020)

	)

472 
	#DMA_IT_FEIF5
 ((
uöt32_t
)0xA0000040)

	)

473 
	#DMA_IT_DMEIF5
 ((
uöt32_t
)0x20001100)

	)

474 
	#DMA_IT_TEIF5
 ((
uöt32_t
)0x20002200)

	)

475 
	#DMA_IT_HTIF5
 ((
uöt32_t
)0x20004400)

	)

476 
	#DMA_IT_TCIF5
 ((
uöt32_t
)0x20008800)

	)

477 
	#DMA_IT_FEIF6
 ((
uöt32_t
)0xA0010000)

	)

478 
	#DMA_IT_DMEIF6
 ((
uöt32_t
)0x20041000)

	)

479 
	#DMA_IT_TEIF6
 ((
uöt32_t
)0x20082000)

	)

480 
	#DMA_IT_HTIF6
 ((
uöt32_t
)0x20104000)

	)

481 
	#DMA_IT_TCIF6
 ((
uöt32_t
)0x20208000)

	)

482 
	#DMA_IT_FEIF7
 ((
uöt32_t
)0xA0400000)

	)

483 
	#DMA_IT_DMEIF7
 ((
uöt32_t
)0x21001000)

	)

484 
	#DMA_IT_TEIF7
 ((
uöt32_t
)0x22002000)

	)

485 
	#DMA_IT_HTIF7
 ((
uöt32_t
)0x24004000)

	)

486 
	#DMA_IT_TCIF7
 ((
uöt32_t
)0x28008000)

	)

488 
	#IS_DMA_CLEAR_IT
(
IT
Ë((((ITË& 0x30000000Ë!0x30000000Ë&& \

	)

489 (((
IT
) & 0x30000000) != 0) && ((IT) != 0x00) && \

490 (((
IT
) & 0x40820082) == 0x00))

492 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA_IT_TCIF0
Ë|| ((ITË=
DMA_IT_HTIF0
Ë|| \

	)

493 ((
IT
Ë=
DMA_IT_TEIF0
Ë|| ((ITË=
DMA_IT_DMEIF0
) || \

494 ((
IT
Ë=
DMA_IT_FEIF0
Ë|| ((ITË=
DMA_IT_TCIF1
) || \

495 ((
IT
Ë=
DMA_IT_HTIF1
Ë|| ((ITË=
DMA_IT_TEIF1
) || \

496 ((
IT
Ë=
DMA_IT_DMEIF1
)|| ((ITË=
DMA_IT_FEIF1
) || \

497 ((
IT
Ë=
DMA_IT_TCIF2
Ë|| ((ITË=
DMA_IT_HTIF2
) || \

498 ((
IT
Ë=
DMA_IT_TEIF2
Ë|| ((ITË=
DMA_IT_DMEIF2
) || \

499 ((
IT
Ë=
DMA_IT_FEIF2
Ë|| ((ITË=
DMA_IT_TCIF3
) || \

500 ((
IT
Ë=
DMA_IT_HTIF3
Ë|| ((ITË=
DMA_IT_TEIF3
) || \

501 ((
IT
Ë=
DMA_IT_DMEIF3
)|| ((ITË=
DMA_IT_FEIF3
) || \

502 ((
IT
Ë=
DMA_IT_TCIF4
Ë|| ((ITË=
DMA_IT_HTIF4
) || \

503 ((
IT
Ë=
DMA_IT_TEIF4
Ë|| ((ITË=
DMA_IT_DMEIF4
) || \

504 ((
IT
Ë=
DMA_IT_FEIF4
Ë|| ((ITË=
DMA_IT_TCIF5
) || \

505 ((
IT
Ë=
DMA_IT_HTIF5
Ë|| ((ITË=
DMA_IT_TEIF5
) || \

506 ((
IT
Ë=
DMA_IT_DMEIF5
)|| ((ITË=
DMA_IT_FEIF5
) || \

507 ((
IT
Ë=
DMA_IT_TCIF6
Ë|| ((ITË=
DMA_IT_HTIF6
) || \

508 ((
IT
Ë=
DMA_IT_TEIF6
Ë|| ((ITË=
DMA_IT_DMEIF6
) || \

509 ((
IT
Ë=
DMA_IT_FEIF6
Ë|| ((ITË=
DMA_IT_TCIF7
) || \

510 ((
IT
Ë=
DMA_IT_HTIF7
Ë|| ((ITË=
DMA_IT_TEIF7
) || \

511 ((
IT
Ë=
DMA_IT_DMEIF7
)|| ((ITË=
DMA_IT_FEIF7
))

520 
	#DMA_PINCOS_Psize
 ((
uöt32_t
)0x00000000)

	)

521 
	#DMA_PINCOS_W‹dAlig√d
 ((
uöt32_t
)0x00008000)

	)

523 
	#IS_DMA_PINCOS_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PINCOS_Psize
Ë|| \

	)

524 ((
SIZE
Ë=
DMA_PINCOS_W‹dAlig√d
))

533 
	#DMA_FlowCål_Mem‹y
 ((
uöt32_t
)0x00000000)

	)

534 
	#DMA_FlowCål_PîùhîÆ
 ((
uöt32_t
)0x00000020)

	)

536 
	#IS_DMA_FLOW_CTRL
(
CTRL
Ë(((CTRLË=
DMA_FlowCål_Mem‹y
Ë|| \

	)

537 ((
CTRL
Ë=
DMA_FlowCål_PîùhîÆ
))

546 
	#DMA_Mem‹y_0
 ((
uöt32_t
)0x00000000)

	)

547 
	#DMA_Mem‹y_1
 ((
uöt32_t
)0x00080000)

	)

549 
	#IS_DMA_CURRENT_MEM
(
MEM
Ë(((MEMË=
DMA_Mem‹y_0
Ë|| ((MEMË=
DMA_Mem‹y_1
))

	)

562 
DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

565 
DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

566 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

567 
DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

570 
DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
);

571 
DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
);

574 
DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
);

575 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

578 
DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

579 
uöt32_t
 
DMA_CuºítMem‹y
);

580 
DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

581 
DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

582 
uöt32_t
 
DMA_Mem‹yT¨gë
);

583 
uöt32_t
 
DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

586 
Fun˘i⁄ÆSèã
 
DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

587 
uöt32_t
 
DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

588 
FœgSètus
 
DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

589 
DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

590 
DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

591 
ITSètus
 
DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

592 
DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

594 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_dma2d.h

30 #i‚de‡
__STM32F4xx_DMA2D_H


31 
	#__STM32F4xx_DMA2D_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DMA2D_Mode
;

59 
uöt32_t
 
DMA2D_CMode
;

62 
uöt32_t
 
DMA2D_OuçutBlue
;

70 
uöt32_t
 
DMA2D_OuçutGªí
;

78 
uöt32_t
 
DMA2D_OuçutRed
;

86 
uöt32_t
 
DMA2D_OuçutAÕha
;

92 
uöt32_t
 
DMA2D_OuçutMem‹yAdd
;

95 
uöt32_t
 
DMA2D_OuçutOff£t
;

98 
uöt32_t
 
DMA2D_NumbîOfLöe
;

101 
uöt32_t
 
DMA2D_PixñPîLöe
;

103 } 
	tDMA2D_InôTy≥Def
;

109 
uöt32_t
 
DMA2D_FGMA
;

112 
uöt32_t
 
DMA2D_FGO
;

115 
uöt32_t
 
DMA2D_FGCM
;

118 
uöt32_t
 
DMA2D_FG_CLUT_CM
;

121 
uöt32_t
 
DMA2D_FG_CLUT_SIZE
;

124 
uöt32_t
 
DMA2D_FGPFC_ALPHA_MODE
;

127 
uöt32_t
 
DMA2D_FGPFC_ALPHA_VALUE
;

130 
uöt32_t
 
DMA2D_FGC_BLUE
;

133 
uöt32_t
 
DMA2D_FGC_GREEN
;

136 
uöt32_t
 
DMA2D_FGC_RED
;

139 
uöt32_t
 
DMA2D_FGCMAR
;

141 } 
	tDMA2D_FG_InôTy≥Def
;

146 
uöt32_t
 
DMA2D_BGMA
;

149 
uöt32_t
 
DMA2D_BGO
;

152 
uöt32_t
 
DMA2D_BGCM
;

155 
uöt32_t
 
DMA2D_BG_CLUT_CM
;

158 
uöt32_t
 
DMA2D_BG_CLUT_SIZE
;

161 
uöt32_t
 
DMA2D_BGPFC_ALPHA_MODE
;

164 
uöt32_t
 
DMA2D_BGPFC_ALPHA_VALUE
;

167 
uöt32_t
 
DMA2D_BGC_BLUE
;

170 
uöt32_t
 
DMA2D_BGC_GREEN
;

173 
uöt32_t
 
DMA2D_BGC_RED
;

176 
uöt32_t
 
DMA2D_BGCMAR
;

178 } 
	tDMA2D_BG_InôTy≥Def
;

193 
	#DMA2D_M2M
 ((
uöt32_t
)0x00000000)

	)

194 
	#DMA2D_M2M_PFC
 ((
uöt32_t
)0x00010000)

	)

195 
	#DMA2D_M2M_BLEND
 ((
uöt32_t
)0x00020000)

	)

196 
	#DMA2D_R2M
 ((
uöt32_t
)0x00030000)

	)

198 
	#IS_DMA2D_MODE
(
MODE
Ë(((MODEË=
DMA2D_M2M
Ë|| ((MODEË=
DMA2D_M2M_PFC
Ë|| \

	)

199 ((
MODE
Ë=
DMA2D_M2M_BLEND
Ë|| ((MODEË=
DMA2D_R2M
))

209 
	#DMA2D_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

210 
	#DMA2D_RGB888
 ((
uöt32_t
)0x00000001)

	)

211 
	#DMA2D_RGB565
 ((
uöt32_t
)0x00000002)

	)

212 
	#DMA2D_ARGB1555
 ((
uöt32_t
)0x00000003)

	)

213 
	#DMA2D_ARGB4444
 ((
uöt32_t
)0x00000004)

	)

215 
	#IS_DMA2D_CMODE
(
MODE_ARGB
Ë(((MODE_ARGBË=
DMA2D_ARGB8888
Ë|| ((MODE_ARGBË=
DMA2D_RGB888
Ë|| \

	)

216 ((
MODE_ARGB
Ë=
DMA2D_RGB565
Ë|| ((MODE_ARGBË=
DMA2D_ARGB1555
) || \

217 ((
MODE_ARGB
Ë=
DMA2D_ARGB4444
))

227 
	#DMA2D_Ouçut_Cﬁ‹
 ((
uöt32_t
)0x000000FF)

	)

229 
	#IS_DMA2D_OGREEN
(
OGREEN
Ë((OGREENË<
DMA2D_Ouçut_Cﬁ‹
)

	)

230 
	#IS_DMA2D_ORED
(
ORED
Ë((OREDË<
DMA2D_Ouçut_Cﬁ‹
)

	)

231 
	#IS_DMA2D_OBLUE
(
OBLUE
Ë((OBLUEË<
DMA2D_Ouçut_Cﬁ‹
)

	)

232 
	#IS_DMA2D_OALPHA
(
OALPHA
Ë((OALPHAË<
DMA2D_Ouçut_Cﬁ‹
)

	)

241 
	#DMA2D_OUTPUT_OFFSET
 ((
uöt32_t
)0x00003FFF)

	)

243 
	#IS_DMA2D_OUTPUT_OFFSET
(
OOFFSET
Ë((OOFFSETË<
DMA2D_OUTPUT_OFFSET
)

	)

254 
	#DMA2D_pixñ
 ((
uöt32_t
)0x00003FFF)

	)

255 
	#DMA2D_Löe
 ((
uöt32_t
)0x0000FFFF)

	)

257 
	#IS_DMA2D_LINE
(
LINE
Ë((LINEË<
DMA2D_Löe
)

	)

258 
	#IS_DMA2D_PIXEL
(
PIXEL
Ë((PIXELË<
DMA2D_pixñ
)

	)

268 
	#OFFSET
 ((
uöt32_t
)0x00003FFF)

	)

270 
	#IS_DMA2D_FGO
(
FGO
Ë((FGOË<
OFFSET
)

	)

272 
	#IS_DMA2D_BGO
(
BGO
Ë((BGOË<
OFFSET
)

	)

283 
	#CM_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

284 
	#CM_RGB888
 ((
uöt32_t
)0x00000001)

	)

285 
	#CM_RGB565
 ((
uöt32_t
)0x00000002)

	)

286 
	#CM_ARGB1555
 ((
uöt32_t
)0x00000003)

	)

287 
	#CM_ARGB4444
 ((
uöt32_t
)0x00000004)

	)

288 
	#CM_L8
 ((
uöt32_t
)0x00000005)

	)

289 
	#CM_AL44
 ((
uöt32_t
)0x00000006)

	)

290 
	#CM_AL88
 ((
uöt32_t
)0x00000007)

	)

291 
	#CM_L4
 ((
uöt32_t
)0x00000008)

	)

292 
	#CM_A8
 ((
uöt32_t
)0x00000009)

	)

293 
	#CM_A4
 ((
uöt32_t
)0x0000000A)

	)

295 
	#IS_DMA2D_FGCM
(
FGCM
Ë(((FGCMË=
CM_ARGB8888
Ë|| ((FGCMË=
CM_RGB888
Ë|| \

	)

296 ((
FGCM
Ë=
CM_RGB565
Ë|| ((FGCMË=
CM_ARGB1555
) || \

297 ((
FGCM
Ë=
CM_ARGB4444
Ë|| ((FGCMË=
CM_L8
) || \

298 ((
FGCM
Ë=
CM_AL44
Ë|| ((FGCMË=
CM_AL88
) || \

299 ((
FGCM
Ë=
CM_L4
Ë|| ((FGCMË=
CM_A8
) || \

300 ((
FGCM
Ë=
CM_A4
))

302 
	#IS_DMA2D_BGCM
(
BGCM
Ë(((BGCMË=
CM_ARGB8888
Ë|| ((BGCMË=
CM_RGB888
Ë|| \

	)

303 ((
BGCM
Ë=
CM_RGB565
Ë|| ((BGCMË=
CM_ARGB1555
) || \

304 ((
BGCM
Ë=
CM_ARGB4444
Ë|| ((BGCMË=
CM_L8
) || \

305 ((
BGCM
Ë=
CM_AL44
Ë|| ((BGCMË=
CM_AL88
) || \

306 ((
BGCM
Ë=
CM_L4
Ë|| ((BGCMË=
CM_A8
) || \

307 ((
BGCM
Ë=
CM_A4
))

317 
	#CLUT_CM_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

318 
	#CLUT_CM_RGB888
 ((
uöt32_t
)0x00000001)

	)

320 
	#IS_DMA2D_FG_CLUT_CM
(
FG_CLUT_CM
Ë(((FG_CLUT_CMË=
CLUT_CM_ARGB8888
Ë|| ((FG_CLUT_CMË=
CLUT_CM_RGB888
))

	)

322 
	#IS_DMA2D_BG_CLUT_CM
(
BG_CLUT_CM
Ë(((BG_CLUT_CMË=
CLUT_CM_ARGB8888
Ë|| ((BG_CLUT_CMË=
CLUT_CM_RGB888
))

	)

332 
	#COLOR_VALUE
 ((
uöt32_t
)0x000000FF)

	)

334 
	#IS_DMA2D_FG_CLUT_SIZE
(
FG_CLUT_SIZE
Ë((FG_CLUT_SIZEË<
COLOR_VALUE
)

	)

336 
	#IS_DMA2D_FG_ALPHA_VALUE
(
FG_ALPHA_VALUE
Ë((FG_ALPHA_VALUEË<
COLOR_VALUE
)

	)

337 
	#IS_DMA2D_FGC_BLUE
(
FGC_BLUE
Ë((FGC_BLUEË<
COLOR_VALUE
)

	)

338 
	#IS_DMA2D_FGC_GREEN
(
FGC_GREEN
Ë((FGC_GREENË<
COLOR_VALUE
)

	)

339 
	#IS_DMA2D_FGC_RED
(
FGC_RED
Ë((FGC_REDË<
COLOR_VALUE
)

	)

341 
	#IS_DMA2D_BG_CLUT_SIZE
(
BG_CLUT_SIZE
Ë((BG_CLUT_SIZEË<
COLOR_VALUE
)

	)

343 
	#IS_DMA2D_BG_ALPHA_VALUE
(
BG_ALPHA_VALUE
Ë((BG_ALPHA_VALUEË<
COLOR_VALUE
)

	)

344 
	#IS_DMA2D_BGC_BLUE
(
BGC_BLUE
Ë((BGC_BLUEË<
COLOR_VALUE
)

	)

345 
	#IS_DMA2D_BGC_GREEN
(
BGC_GREEN
Ë((BGC_GREENË<
COLOR_VALUE
)

	)

346 
	#IS_DMA2D_BGC_RED
(
BGC_RED
Ë((BGC_REDË<
COLOR_VALUE
)

	)

356 
	#NO_MODIF_ALPHA_VALUE
 ((
uöt32_t
)0x00000000)

	)

357 
	#REPLACE_ALPHA_VALUE
 ((
uöt32_t
)0x00000001)

	)

358 
	#COMBINE_ALPHA_VALUE
 ((
uöt32_t
)0x00000002)

	)

360 
	#IS_DMA2D_FG_ALPHA_MODE
(
FG_ALPHA_MODE
Ë(((FG_ALPHA_MODEË=
NO_MODIF_ALPHA_VALUE
Ë|| \

	)

361 ((
FG_ALPHA_MODE
Ë=
REPLACE_ALPHA_VALUE
) || \

362 ((
FG_ALPHA_MODE
Ë=
COMBINE_ALPHA_VALUE
))

364 
	#IS_DMA2D_BG_ALPHA_MODE
(
BG_ALPHA_MODE
Ë(((BG_ALPHA_MODEË=
NO_MODIF_ALPHA_VALUE
Ë|| \

	)

365 ((
BG_ALPHA_MODE
Ë=
REPLACE_ALPHA_VALUE
) || \

366 ((
BG_ALPHA_MODE
Ë=
COMBINE_ALPHA_VALUE
))

376 
	#DMA2D_IT_CE
 
DMA2D_CR_CEIE


	)

377 
	#DMA2D_IT_CTC
 
DMA2D_CR_CTCIE


	)

378 
	#DMA2D_IT_CAE
 
DMA2D_CR_CAEIE


	)

379 
	#DMA2D_IT_TW
 
DMA2D_CR_TWIE


	)

380 
	#DMA2D_IT_TC
 
DMA2D_CR_TCIE


	)

381 
	#DMA2D_IT_TE
 
DMA2D_CR_TEIE


	)

383 
	#IS_DMA2D_IT
(
IT
Ë(((ITË=
DMA2D_IT_CTC
Ë|| ((ITË=
DMA2D_IT_CAE
Ë|| \

	)

384 ((
IT
Ë=
DMA2D_IT_TW
Ë|| ((ITË=
DMA2D_IT_TC
) || \

385 ((
IT
Ë=
DMA2D_IT_TE
Ë|| ((ITË=
DMA2D_IT_CE
))

395 
	#DMA2D_FLAG_CE
 
DMA2D_ISR_CEIF


	)

396 
	#DMA2D_FLAG_CTC
 
DMA2D_ISR_CTCIF


	)

397 
	#DMA2D_FLAG_CAE
 
DMA2D_ISR_CAEIF


	)

398 
	#DMA2D_FLAG_TW
 
DMA2D_ISR_TWIF


	)

399 
	#DMA2D_FLAG_TC
 
DMA2D_ISR_TCIF


	)

400 
	#DMA2D_FLAG_TE
 
DMA2D_ISR_TEIF


	)

403 
	#IS_DMA2D_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA2D_FLAG_CTC
Ë|| ((FLAGË=
DMA2D_FLAG_CAE
Ë|| \

	)

404 ((
FLAG
Ë=
DMA2D_FLAG_TW
Ë|| ((FLAGË=
DMA2D_FLAG_TC
) || \

405 ((
FLAG
Ë=
DMA2D_FLAG_TE
Ë|| ((FLAGË=
DMA2D_FLAG_CE
))

416 
	#DEADTIME
 ((
uöt32_t
)0x000000FF)

	)

418 
	#IS_DMA2D_DEAD_TIME
(
DEAD_TIME
Ë((DEAD_TIMEË<
DEADTIME
)

	)

421 
	#LINE_WATERMARK
 
DMA2D_LWR_LW


	)

423 
	#IS_DMA2D_LöeW©îm¨k
(
LöeW©îm¨k
Ë((LöeW©îm¨kË<
LINE_WATERMARK
)

	)

437 
DMA2D_DeInô
();

440 
DMA2D_Inô
(
DMA2D_InôTy≥Def
* 
DMA2D_InôSåu˘
);

441 
DMA2D_Såu˘Inô
(
DMA2D_InôTy≥Def
* 
DMA2D_InôSåu˘
);

442 
DMA2D_SèπTøns„r
();

443 
DMA2D_Ab‹tTøns„r
();

444 
DMA2D_Su•íd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

445 
DMA2D_FGC⁄fig
(
DMA2D_FG_InôTy≥Def
* 
DMA2D_FG_InôSåu˘
);

446 
DMA2D_FG_Såu˘Inô
(
DMA2D_FG_InôTy≥Def
* 
DMA2D_FG_InôSåu˘
);

447 
DMA2D_BGC⁄fig
(
DMA2D_BG_InôTy≥Def
* 
DMA2D_BG_InôSåu˘
);

448 
DMA2D_BG_Såu˘Inô
(
DMA2D_BG_InôTy≥Def
* 
DMA2D_BG_InôSåu˘
);

449 
DMA2D_FGSèπ
(
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
DMA2D_BGSèπ
(
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
DMA2D_DódTimeC⁄fig
(
uöt32_t
 
DMA2D_DódTime
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

452 
DMA2D_LöeW©îm¨kC⁄fig
(
uöt32_t
 
DMA2D_LW©îm¨kC⁄fig
);

455 
DMA2D_ITC⁄fig
(
uöt32_t
 
DMA2D_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

456 
FœgSètus
 
DMA2D_GëFœgSètus
(
uöt32_t
 
DMA2D_FLAG
);

457 
DMA2D_CÀ¨Fœg
(
uöt32_t
 
DMA2D_FLAG
);

458 
ITSètus
 
DMA2D_GëITSètus
(
uöt32_t
 
DMA2D_IT
);

459 
DMA2D_CÀ¨ITPídögBô
(
uöt32_t
 
DMA2D_IT
);

461 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_exti.h

30 #i‚de‡
__STM32F4xx_EXTI_H


31 
	#__STM32F4xx_EXTI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
EXTI_Mode_I¡îru±
 = 0x00,

57 
EXTI_Mode_Evít
 = 0x04

58 }
	tEXTIMode_Ty≥Def
;

60 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

68 
EXTI_Triggî_Risög
 = 0x08,

69 
EXTI_Triggî_FÆlög
 = 0x0C,

70 
EXTI_Triggî_Risög_FÆlög
 = 0x10

71 }
	tEXTITriggî_Ty≥Def
;

73 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
Ë|| \

	)

74 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

75 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

82 
uöt32_t
 
EXTI_Löe
;

85 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

88 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

91 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

93 }
	tEXTI_InôTy≥Def
;

105 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

106 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

107 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

108 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

109 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

110 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

111 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

112 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

113 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

114 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

115 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

116 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

117 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

118 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

119 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

120 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

121 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

122 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

123 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

124 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

125 
	#EXTI_Löe20
 ((
uöt32_t
)0x00100000Ë

	)

126 
	#EXTI_Löe21
 ((
uöt32_t
)0x00200000Ë

	)

127 
	#EXTI_Löe22
 ((
uöt32_t
)0x00400000Ë

	)

129 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFF800000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

131 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
Ë|| \

	)

132 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

133 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

134 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

135 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

136 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

137 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

138 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

139 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

140 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
) || \

141 ((
LINE
Ë=
EXTI_Löe20
Ë|| ((LINEË=
EXTI_Löe21
) ||\

142 ((
LINE
Ë=
EXTI_Löe22
))

156 
EXTI_DeInô
();

159 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

161 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

164 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

165 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

166 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

167 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

169 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_flash.h

30 #i‚de‡
__STM32F4xx_FLASH_H


31 
	#__STM32F4xx_FLASH_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

54 
FLASH_BUSY
 = 1,

55 
FLASH_ERROR_RD
,

56 
FLASH_ERROR_PGS
,

57 
FLASH_ERROR_PGP
,

58 
FLASH_ERROR_PGA
,

59 
FLASH_ERROR_WRP
,

60 
FLASH_ERROR_PROGRAM
,

61 
FLASH_ERROR_OPERATION
,

62 
FLASH_COMPLETE


63 }
	tFLASH_Sètus
;

74 
	#FLASH_L©ícy_0
 ((
uöt8_t
)0x0000Ë

	)

75 
	#FLASH_L©ícy_1
 ((
uöt8_t
)0x0001Ë

	)

76 
	#FLASH_L©ícy_2
 ((
uöt8_t
)0x0002Ë

	)

77 
	#FLASH_L©ícy_3
 ((
uöt8_t
)0x0003Ë

	)

78 
	#FLASH_L©ícy_4
 ((
uöt8_t
)0x0004Ë

	)

79 
	#FLASH_L©ícy_5
 ((
uöt8_t
)0x0005Ë

	)

80 
	#FLASH_L©ícy_6
 ((
uöt8_t
)0x0006Ë

	)

81 
	#FLASH_L©ícy_7
 ((
uöt8_t
)0x0007Ë

	)

82 
	#FLASH_L©ícy_8
 ((
uöt8_t
)0x0008Ë

	)

83 
	#FLASH_L©ícy_9
 ((
uöt8_t
)0x0009Ë

	)

84 
	#FLASH_L©ícy_10
 ((
uöt8_t
)0x000AË

	)

85 
	#FLASH_L©ícy_11
 ((
uöt8_t
)0x000BË

	)

86 
	#FLASH_L©ícy_12
 ((
uöt8_t
)0x000CË

	)

87 
	#FLASH_L©ícy_13
 ((
uöt8_t
)0x000DË

	)

88 
	#FLASH_L©ícy_14
 ((
uöt8_t
)0x000EË

	)

89 
	#FLASH_L©ícy_15
 ((
uöt8_t
)0x000FË

	)

92 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
Ë|| \

	)

93 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

94 ((
LATENCY
Ë=
FLASH_L©ícy_2
) || \

95 ((
LATENCY
Ë=
FLASH_L©ícy_3
) || \

96 ((
LATENCY
Ë=
FLASH_L©ícy_4
) || \

97 ((
LATENCY
Ë=
FLASH_L©ícy_5
) || \

98 ((
LATENCY
Ë=
FLASH_L©ícy_6
) || \

99 ((
LATENCY
Ë=
FLASH_L©ícy_7
) || \

100 ((
LATENCY
Ë=
FLASH_L©ícy_8
) || \

101 ((
LATENCY
Ë=
FLASH_L©ícy_9
) || \

102 ((
LATENCY
Ë=
FLASH_L©ícy_10
) || \

103 ((
LATENCY
Ë=
FLASH_L©ícy_11
) || \

104 ((
LATENCY
Ë=
FLASH_L©ícy_12
) || \

105 ((
LATENCY
Ë=
FLASH_L©ícy_13
) || \

106 ((
LATENCY
Ë=
FLASH_L©ícy_14
) || \

107 ((
LATENCY
Ë=
FLASH_L©ícy_15
))

115 
	#VﬁègeR™ge_1
 ((
uöt8_t
)0x00Ë

	)

116 
	#VﬁègeR™ge_2
 ((
uöt8_t
)0x01Ë

	)

117 
	#VﬁègeR™ge_3
 ((
uöt8_t
)0x02Ë

	)

118 
	#VﬁègeR™ge_4
 ((
uöt8_t
)0x03Ë

	)

120 
	#IS_VOLTAGERANGE
(
RANGE
)(((RANGEË=
VﬁègeR™ge_1
Ë|| \

	)

121 ((
RANGE
Ë=
VﬁègeR™ge_2
) || \

122 ((
RANGE
Ë=
VﬁègeR™ge_3
) || \

123 ((
RANGE
Ë=
VﬁègeR™ge_4
))

131 
	#FLASH_Se˘‹_0
 ((
uöt16_t
)0x0000Ë

	)

132 
	#FLASH_Se˘‹_1
 ((
uöt16_t
)0x0008Ë

	)

133 
	#FLASH_Se˘‹_2
 ((
uöt16_t
)0x0010Ë

	)

134 
	#FLASH_Se˘‹_3
 ((
uöt16_t
)0x0018Ë

	)

135 
	#FLASH_Se˘‹_4
 ((
uöt16_t
)0x0020Ë

	)

136 
	#FLASH_Se˘‹_5
 ((
uöt16_t
)0x0028Ë

	)

137 
	#FLASH_Se˘‹_6
 ((
uöt16_t
)0x0030Ë

	)

138 
	#FLASH_Se˘‹_7
 ((
uöt16_t
)0x0038Ë

	)

139 
	#FLASH_Se˘‹_8
 ((
uöt16_t
)0x0040Ë

	)

140 
	#FLASH_Se˘‹_9
 ((
uöt16_t
)0x0048Ë

	)

141 
	#FLASH_Se˘‹_10
 ((
uöt16_t
)0x0050Ë

	)

142 
	#FLASH_Se˘‹_11
 ((
uöt16_t
)0x0058Ë

	)

143 
	#FLASH_Se˘‹_12
 ((
uöt16_t
)0x0080Ë

	)

144 
	#FLASH_Se˘‹_13
 ((
uöt16_t
)0x0088Ë

	)

145 
	#FLASH_Se˘‹_14
 ((
uöt16_t
)0x0090Ë

	)

146 
	#FLASH_Se˘‹_15
 ((
uöt16_t
)0x0098Ë

	)

147 
	#FLASH_Se˘‹_16
 ((
uöt16_t
)0x00A0Ë

	)

148 
	#FLASH_Se˘‹_17
 ((
uöt16_t
)0x00A8Ë

	)

149 
	#FLASH_Se˘‹_18
 ((
uöt16_t
)0x00B0Ë

	)

150 
	#FLASH_Se˘‹_19
 ((
uöt16_t
)0x00B8Ë

	)

151 
	#FLASH_Se˘‹_20
 ((
uöt16_t
)0x00C0Ë

	)

152 
	#FLASH_Se˘‹_21
 ((
uöt16_t
)0x00C8Ë

	)

153 
	#FLASH_Se˘‹_22
 ((
uöt16_t
)0x00D0Ë

	)

154 
	#FLASH_Se˘‹_23
 ((
uöt16_t
)0x00D8Ë

	)

156 
	#IS_FLASH_SECTOR
(
SECTOR
Ë(((SECTORË=
FLASH_Se˘‹_0
Ë|| ((SECTORË=
FLASH_Se˘‹_1
Ë||\

	)

157 ((
SECTOR
Ë=
FLASH_Se˘‹_2
Ë|| ((SECTORË=
FLASH_Se˘‹_3
) ||\

158 ((
SECTOR
Ë=
FLASH_Se˘‹_4
Ë|| ((SECTORË=
FLASH_Se˘‹_5
) ||\

159 ((
SECTOR
Ë=
FLASH_Se˘‹_6
Ë|| ((SECTORË=
FLASH_Se˘‹_7
) ||\

160 ((
SECTOR
Ë=
FLASH_Se˘‹_8
Ë|| ((SECTORË=
FLASH_Se˘‹_9
) ||\

161 ((
SECTOR
Ë=
FLASH_Se˘‹_10
Ë|| ((SECTORË=
FLASH_Se˘‹_11
) ||\

162 ((
SECTOR
Ë=
FLASH_Se˘‹_12
Ë|| ((SECTORË=
FLASH_Se˘‹_13
) ||\

163 ((
SECTOR
Ë=
FLASH_Se˘‹_14
Ë|| ((SECTORË=
FLASH_Se˘‹_15
) ||\

164 ((
SECTOR
Ë=
FLASH_Se˘‹_16
Ë|| ((SECTORË=
FLASH_Se˘‹_17
) ||\

165 ((
SECTOR
Ë=
FLASH_Se˘‹_18
Ë|| ((SECTORË=
FLASH_Se˘‹_19
) ||\

166 ((
SECTOR
Ë=
FLASH_Se˘‹_20
Ë|| ((SECTORË=
FLASH_Se˘‹_21
) ||\

167 ((
SECTOR
Ë=
FLASH_Se˘‹_22
Ë|| ((SECTORË=
FLASH_Se˘‹_23
))

169 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

170 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë((((ADDRESSË>0x08000000Ë&& ((ADDRESSË<0x081FFFFF)Ë||\

	)

171 (((
ADDRESS
) >= 0x1FFF7800) && ((ADDRESS) <= 0x1FFF7A0F)))

174 #i‡
deföed
 (
STM32F40_41xxx
)

175 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë((((ADDRESSË>0x08000000Ë&& ((ADDRESSË<0x080FFFFF)Ë||\

	)

176 (((
ADDRESS
) >= 0x1FFF7800) && ((ADDRESS) <= 0x1FFF7A0F)))

179 #i‡
deföed
 (
STM32F401xx
)

180 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë((((ADDRESSË>0x08000000Ë&& ((ADDRESSË<0x0803FFFF)Ë||\

	)

181 (((
ADDRESS
) >= 0x1FFF7800) && ((ADDRESS) <= 0x1FFF7A0F)))

184 #i‡
deföed
 (
STM32F411xE
)

185 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë((((ADDRESSË>0x08000000Ë&& ((ADDRESSË<0x0807FFFF)Ë||\

	)

186 (((
ADDRESS
) >= 0x1FFF7800) && ((ADDRESS) <= 0x1FFF7A0F)))

196 
	#OB_WRP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

197 
	#OB_WRP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

198 
	#OB_WRP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

199 
	#OB_WRP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

200 
	#OB_WRP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

201 
	#OB_WRP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

202 
	#OB_WRP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

203 
	#OB_WRP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

204 
	#OB_WRP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

205 
	#OB_WRP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

206 
	#OB_WRP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

207 
	#OB_WRP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

208 
	#OB_WRP_Se˘‹_12
 ((
uöt32_t
)0x00000001Ë

	)

209 
	#OB_WRP_Se˘‹_13
 ((
uöt32_t
)0x00000002Ë

	)

210 
	#OB_WRP_Se˘‹_14
 ((
uöt32_t
)0x00000004Ë

	)

211 
	#OB_WRP_Se˘‹_15
 ((
uöt32_t
)0x00000008Ë

	)

212 
	#OB_WRP_Se˘‹_16
 ((
uöt32_t
)0x00000010Ë

	)

213 
	#OB_WRP_Se˘‹_17
 ((
uöt32_t
)0x00000020Ë

	)

214 
	#OB_WRP_Se˘‹_18
 ((
uöt32_t
)0x00000040Ë

	)

215 
	#OB_WRP_Se˘‹_19
 ((
uöt32_t
)0x00000080Ë

	)

216 
	#OB_WRP_Se˘‹_20
 ((
uöt32_t
)0x00000100Ë

	)

217 
	#OB_WRP_Se˘‹_21
 ((
uöt32_t
)0x00000200Ë

	)

218 
	#OB_WRP_Se˘‹_22
 ((
uöt32_t
)0x00000400Ë

	)

219 
	#OB_WRP_Se˘‹_23
 ((
uöt32_t
)0x00000800Ë

	)

220 
	#OB_WRP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

222 
	#IS_OB_WRP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

230 
	#OB_PcROP_DißbÀ
 ((
uöt8_t
)0x00Ë

	)

231 
	#OB_PcROP_E«bÀ
 ((
uöt8_t
)0x80Ë

	)

232 
	#IS_OB_PCROP_SELECT
(
PCROP
Ë(((PCROPË=
OB_PcROP_DißbÀ
Ë|| ((PCROPË=
OB_PcROP_E«bÀ
))

	)

240 
	#OB_PCROP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

241 
	#OB_PCROP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

242 
	#OB_PCROP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

243 
	#OB_PCROP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

244 
	#OB_PCROP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

245 
	#OB_PCROP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

246 
	#OB_PCROP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

247 
	#OB_PCROP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

248 
	#OB_PCROP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

249 
	#OB_PCROP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

250 
	#OB_PCROP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

251 
	#OB_PCROP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

252 
	#OB_PCROP_Se˘‹_12
 ((
uöt32_t
)0x00000001Ë

	)

253 
	#OB_PCROP_Se˘‹_13
 ((
uöt32_t
)0x00000002Ë

	)

254 
	#OB_PCROP_Se˘‹_14
 ((
uöt32_t
)0x00000004Ë

	)

255 
	#OB_PCROP_Se˘‹_15
 ((
uöt32_t
)0x00000008Ë

	)

256 
	#OB_PCROP_Se˘‹_16
 ((
uöt32_t
)0x00000010Ë

	)

257 
	#OB_PCROP_Se˘‹_17
 ((
uöt32_t
)0x00000020Ë

	)

258 
	#OB_PCROP_Se˘‹_18
 ((
uöt32_t
)0x00000040Ë

	)

259 
	#OB_PCROP_Se˘‹_19
 ((
uöt32_t
)0x00000080Ë

	)

260 
	#OB_PCROP_Se˘‹_20
 ((
uöt32_t
)0x00000100Ë

	)

261 
	#OB_PCROP_Se˘‹_21
 ((
uöt32_t
)0x00000200Ë

	)

262 
	#OB_PCROP_Se˘‹_22
 ((
uöt32_t
)0x00000400Ë

	)

263 
	#OB_PCROP_Se˘‹_23
 ((
uöt32_t
)0x00000800Ë

	)

264 
	#OB_PCROP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

266 
	#IS_OB_PCROP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

274 
	#OB_RDP_Levñ_0
 ((
uöt8_t
)0xAA)

	)

275 
	#OB_RDP_Levñ_1
 ((
uöt8_t
)0x55)

	)

278 
	#IS_OB_RDP
(
LEVEL
Ë(((LEVELË=
OB_RDP_Levñ_0
)||\

	)

279 ((
LEVEL
Ë=
OB_RDP_Levñ_1
))

288 
	#OB_IWDG_SW
 ((
uöt8_t
)0x20Ë

	)

289 
	#OB_IWDG_HW
 ((
uöt8_t
)0x00Ë

	)

290 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

298 
	#OB_STOP_NoRST
 ((
uöt8_t
)0x40Ë

	)

299 
	#OB_STOP_RST
 ((
uöt8_t
)0x00Ë

	)

300 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

309 
	#OB_STDBY_NoRST
 ((
uöt8_t
)0x80Ë

	)

310 
	#OB_STDBY_RST
 ((
uöt8_t
)0x00Ë

	)

311 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

319 
	#OB_BOR_LEVEL3
 ((
uöt8_t
)0x00Ë

	)

320 
	#OB_BOR_LEVEL2
 ((
uöt8_t
)0x04Ë

	)

321 
	#OB_BOR_LEVEL1
 ((
uöt8_t
)0x08Ë

	)

322 
	#OB_BOR_OFF
 ((
uöt8_t
)0x0CË

	)

323 
	#IS_OB_BOR
(
LEVEL
Ë(((LEVELË=
OB_BOR_LEVEL1
Ë|| ((LEVELË=
OB_BOR_LEVEL2
Ë||\

	)

324 ((
LEVEL
Ë=
OB_BOR_LEVEL3
Ë|| ((LEVELË=
OB_BOR_OFF
))

332 
	#OB_DuÆ_BoŸE«bÀd
 ((
uöt8_t
)0x10Ë

	)

333 
	#OB_DuÆ_BoŸDißbÀd
 ((
uöt8_t
)0x00Ë

	)

334 
	#IS_OB_BOOT
(
BOOT
Ë(((BOOTË=
OB_DuÆ_BoŸE«bÀd
Ë|| ((BOOTË=
OB_DuÆ_BoŸDißbÀd
))

	)

342 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x01000000Ë

	)

343 
	#FLASH_IT_ERR
 ((
uöt32_t
)0x02000000Ë

	)

344 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFCFFFFFFË=0x00000000Ë&& ((ITË!0x00000000))

	)

352 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000001Ë

	)

353 
	#FLASH_FLAG_OPERR
 ((
uöt32_t
)0x00000002Ë

	)

354 
	#FLASH_FLAG_WRPERR
 ((
uöt32_t
)0x00000010Ë

	)

355 
	#FLASH_FLAG_PGAERR
 ((
uöt32_t
)0x00000020Ë

	)

356 
	#FLASH_FLAG_PGPERR
 ((
uöt32_t
)0x00000040Ë

	)

357 
	#FLASH_FLAG_PGSERR
 ((
uöt32_t
)0x00000080Ë

	)

358 
	#FLASH_FLAG_RDERR
 ((
uöt32_t
)0x00000100Ë

	)

359 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00010000Ë

	)

360 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFE0CË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

361 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_EOP
Ë|| ((FLAGË=
FLASH_FLAG_OPERR
Ë|| \

	)

362 ((
FLAG
Ë=
FLASH_FLAG_WRPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGAERR
) || \

363 ((
FLAG
Ë=
FLASH_FLAG_PGPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGSERR
) || \

364 ((
FLAG
Ë=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_RDERR
))

372 
	#FLASH_PSIZE_BYTE
 ((
uöt32_t
)0x00000000)

	)

373 
	#FLASH_PSIZE_HALF_WORD
 ((
uöt32_t
)0x00000100)

	)

374 
	#FLASH_PSIZE_WORD
 ((
uöt32_t
)0x00000200)

	)

375 
	#FLASH_PSIZE_DOUBLE_WORD
 ((
uöt32_t
)0x00000300)

	)

376 
	#CR_PSIZE_MASK
 ((
uöt32_t
)0xFFFFFCFF)

	)

384 
	#RDP_KEY
 ((
uöt16_t
)0x00A5)

	)

385 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

386 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

387 
	#FLASH_OPT_KEY1
 ((
uöt32_t
)0x08192A3B)

	)

388 
	#FLASH_OPT_KEY2
 ((
uöt32_t
)0x4C5D6E7F)

	)

396 
	#ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

400 
	#OPTCR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C14)

	)

404 
	#OPTCR_BYTE1_ADDRESS
 ((
uöt32_t
)0x40023C15)

	)

408 
	#OPTCR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C16)

	)

412 
	#OPTCR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023C17)

	)

417 
	#OPTCR1_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C1A)

	)

427 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

428 
FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

429 
FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

430 
FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
FLASH_In°ru˘i⁄CacheRe£t
();

432 
FLASH_D©aCacheRe£t
();

435 
FLASH_U∆ock
();

436 
FLASH_Lock
();

437 
FLASH_Sètus
 
FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
);

438 
FLASH_Sètus
 
FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

439 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

440 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

441 
FLASH_Sètus
 
FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
);

442 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

443 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

444 
FLASH_Sètus
 
FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

447 
FLASH_OB_U∆ock
();

448 
FLASH_OB_Lock
();

449 
FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
FLASH_OB_WRP1C⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FLASH_OB_PCROPSñe˘i⁄C⁄fig
(
uöt8_t
 
OB_PcROP
);

452 
FLASH_OB_PCROPC⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
FLASH_OB_PCROP1C⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

454 
FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
);

455 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
);

456 
FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
);

457 
FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
);

458 
FLASH_Sètus
 
FLASH_OB_Launch
();

459 
uöt8_t
 
FLASH_OB_GëU£r
();

460 
uöt16_t
 
FLASH_OB_GëWRP
();

461 
uöt16_t
 
FLASH_OB_GëWRP1
();

462 
uöt16_t
 
FLASH_OB_GëPCROP
();

463 
uöt16_t
 
FLASH_OB_GëPCROP1
();

464 
FœgSètus
 
FLASH_OB_GëRDP
();

465 
uöt8_t
 
FLASH_OB_GëBOR
();

468 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

469 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

470 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

471 
FLASH_Sètus
 
FLASH_GëSètus
();

472 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
();

474 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_flash_ramfunc.h

30 #i‚de‡
__STM32F4xx_FLASH_RAMFUNC_H


31 
	#__STM32F4xx_FLASH_RAMFUNC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

53 #i‡
deföed
 ( 
__CC_ARM
 )

63 
	#__RAM_FUNC
 

	)

65 #ñi‡
deföed
 ( 
__ICCARM__
 )

70 
	#__RAM_FUNC
 
__ømfunc
 

	)

72 #ñi‡
deföed
 ( 
__GNUC__
 )

78 
	#__RAM_FUNC
 
	`__©åibuã__
((
	`£˘i⁄
(".RamFunc")))

	)

84 
__RAM_FUNC
 
FLASH_FœshI¡îÁ˚Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

85 
__RAM_FUNC
 
FLASH_FœshSÀïModeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

88 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_fmc.h

30 #i‚de‡
__STM32F4xx_FMC_H


31 
	#__STM32F4xx_FMC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
FMC_AddªssSëupTime
;

60 
uöt32_t
 
FMC_AddªssHﬁdTime
;

65 
uöt32_t
 
FMC_D©aSëupTime
;

70 
uöt32_t
 
FMC_BusTu∫AroundDuøti⁄
;

75 
uöt32_t
 
FMC_CLKDivisi⁄
;

79 
uöt32_t
 
FMC_D©aL©ícy
;

87 
uöt32_t
 
FMC_Ac˚ssMode
;

89 }
	tFMC_NORSRAMTimögInôTy≥Def
;

96 
uöt32_t
 
FMC_B™k
;

99 
uöt32_t
 
FMC_D©aAddªssMux
;

103 
uöt32_t
 
FMC_Mem‹yTy≥
;

107 
uöt32_t
 
FMC_Mem‹yD©aWidth
;

110 
uöt32_t
 
FMC_Bur°Ac˚ssMode
;

114 
uöt32_t
 
FMC_WaôSig«lPﬁ¨ôy
;

118 
uöt32_t
 
FMC_WøpMode
;

122 
uöt32_t
 
FMC_WaôSig«lA˘ive
;

127 
uöt32_t
 
FMC_WrôeO≥øti⁄
;

130 
uöt32_t
 
FMC_WaôSig«l
;

134 
uöt32_t
 
FMC_ExãndedMode
;

137 
uöt32_t
 
FMC_Asynchr⁄ousWaô
;

141 
uöt32_t
 
FMC_WrôeBur°
;

144 
uöt32_t
 
FMC_C⁄töousClock
;

150 
FMC_NORSRAMTimögInôTy≥Def
* 
FMC_RódWrôeTimögSåu˘
;

152 
FMC_NORSRAMTimögInôTy≥Def
* 
FMC_WrôeTimögSåu˘
;

153 }
	tFMC_NORSRAMInôTy≥Def
;

160 
uöt32_t
 
FMC_SëupTime
;

166 
uöt32_t
 
FMC_WaôSëupTime
;

172 
uöt32_t
 
FMC_HﬁdSëupTime
;

179 
uöt32_t
 
FMC_HiZSëupTime
;

184 }
	tFMC_NAND_PCCARDTimögInôTy≥Def
;

191 
uöt32_t
 
FMC_B™k
;

194 
uöt32_t
 
FMC_Waô„©uª
;

197 
uöt32_t
 
FMC_Mem‹yD©aWidth
;

200 
uöt32_t
 
FMC_ECC
;

203 
uöt32_t
 
FMC_ECCPageSize
;

206 
uöt32_t
 
FMC_TCLRSëupTime
;

210 
uöt32_t
 
FMC_TARSëupTime
;

214 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_Comm⁄S∑˚TimögSåu˘
;

216 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_AâribuãS∑˚TimögSåu˘
;

217 }
	tFMC_NANDInôTy≥Def
;

225 
uöt32_t
 
FMC_Waô„©uª
;

228 
uöt32_t
 
FMC_TCLRSëupTime
;

232 
uöt32_t
 
FMC_TARSëupTime
;

237 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_Comm⁄S∑˚TimögSåu˘
;

239 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_AâribuãS∑˚TimögSåu˘
;

241 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_IOS∑˚TimögSåu˘
;

242 }
	tFMC_PCCARDInôTy≥Def
;

250 
uöt32_t
 
FMC_LﬂdToA˘iveDñay
;

254 
uöt32_t
 
FMC_ExôSñfRe‰eshDñay
;

258 
uöt32_t
 
FMC_SñfRe‰eshTime
;

262 
uöt32_t
 
FMC_RowCy˛eDñay
;

267 
uöt32_t
 
FMC_WrôeRecovîyTime
;

270 
uöt32_t
 
FMC_RPDñay
;

274 
uöt32_t
 
FMC_RCDDñay
;

278 }
	tFMC_SDRAMTimögInôTy≥Def
;

287 
uöt32_t
 
FMC_Comm™dMode
;

290 
uöt32_t
 
FMC_Comm™dT¨gë
;

293 
uöt32_t
 
FMC_AutoRe‰eshNumbî
;

297 
uöt32_t
 
FMC_ModeRegi°îDeföôi⁄
;

299 }
	tFMC_SDRAMComm™dTy≥Def
;

307 
uöt32_t
 
FMC_B™k
;

310 
uöt32_t
 
FMC_CﬁumnBôsNumbî
;

313 
uöt32_t
 
FMC_RowBôsNumbî
;

316 
uöt32_t
 
FMC_SDMem‹yD©aWidth
;

319 
uöt32_t
 
FMC_I¡î«lB™kNumbî
;

322 
uöt32_t
 
FMC_CASL©ícy
;

325 
uöt32_t
 
FMC_WrôePrŸe˘i⁄
;

328 
uöt32_t
 
FMC_SDClockPîiod
;

332 
uöt32_t
 
FMC_RódBur°
;

336 
uöt32_t
 
FMC_RódPùeDñay
;

339 
FMC_SDRAMTimögInôTy≥Def
* 
FMC_SDRAMTimögSåu˘
;

341 }
	tFMC_SDRAMInôTy≥Def
;

353 
	#FMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

354 
	#FMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

355 
	#FMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

356 
	#FMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

358 
	#IS_FMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FMC_B™k1_NORSRAM1
Ë|| \

	)

359 ((
BANK
Ë=
FMC_B™k1_NORSRAM2
) || \

360 ((
BANK
Ë=
FMC_B™k1_NORSRAM3
) || \

361 ((
BANK
Ë=
FMC_B™k1_NORSRAM4
))

369 
	#FMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

370 
	#FMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

372 
	#IS_FMC_NAND_BANK
(
BANK
Ë(((BANKË=
FMC_B™k2_NAND
Ë|| \

	)

373 ((
BANK
Ë=
FMC_B™k3_NAND
))

381 
	#FMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

389 
	#FMC_B™k1_SDRAM
 ((
uöt32_t
)0x00000000)

	)

390 
	#FMC_B™k2_SDRAM
 ((
uöt32_t
)0x00000001)

	)

392 
	#IS_FMC_SDRAM_BANK
(
BANK
Ë(((BANKË=
FMC_B™k1_SDRAM
Ë|| \

	)

393 ((
BANK
Ë=
FMC_B™k2_SDRAM
))

408 
	#FMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

409 
	#FMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

411 
	#IS_FMC_MUX
(
MUX
Ë(((MUXË=
FMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

412 ((
MUX
Ë=
FMC_D©aAddªssMux_E«bÀ
))

421 
	#FMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

422 
	#FMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

423 
	#FMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

425 
	#IS_FMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FMC_Mem‹yTy≥_SRAM
Ë|| \

	)

426 ((
MEMORY
Ë=
FMC_Mem‹yTy≥_PSRAM
)|| \

427 ((
MEMORY
Ë=
FMC_Mem‹yTy≥_NOR
))

436 
	#FMC_NORSRAM_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

437 
	#FMC_NORSRAM_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

438 
	#FMC_NORSRAM_Mem‹yD©aWidth_32b
 ((
uöt32_t
)0x00000020)

	)

440 
	#IS_FMC_NORSRAM_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FMC_NORSRAM_Mem‹yD©aWidth_8b
Ë|| \

	)

441 ((
WIDTH
Ë=
FMC_NORSRAM_Mem‹yD©aWidth_16b
) || \

442 ((
WIDTH
Ë=
FMC_NORSRAM_Mem‹yD©aWidth_32b
))

451 
	#FMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

452 
	#FMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

454 
	#IS_FMC_BURSTMODE
(
STATE
Ë(((STATEË=
FMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

455 ((
STATE
Ë=
FMC_Bur°Ac˚ssMode_E«bÀ
))

463 
	#FMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

464 
	#FMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

466 
	#IS_FMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FMC_Asynchr⁄ousWaô_DißbÀ
Ë|| \

	)

467 ((
STATE
Ë=
FMC_Asynchr⁄ousWaô_E«bÀ
))

475 
	#FMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

476 
	#FMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

478 
	#IS_FMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

479 ((
POLARITY
Ë=
FMC_WaôSig«lPﬁ¨ôy_High
))

487 
	#FMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

488 
	#FMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

490 
	#IS_FMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FMC_WøpMode_DißbÀ
Ë|| \

	)

491 ((
MODE
Ë=
FMC_WøpMode_E«bÀ
))

499 
	#FMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

500 
	#FMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

502 
	#IS_FMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

503 ((
ACTIVE
Ë=
FMC_WaôSig«lA˘ive_DurögWaôSèã
))

511 
	#FMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

512 
	#FMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

514 
	#IS_FMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

515 ((
OPERATION
Ë=
FMC_WrôeO≥øti⁄_E«bÀ
))

523 
	#FMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

524 
	#FMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

526 
	#IS_FMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FMC_WaôSig«l_DißbÀ
Ë|| \

	)

527 ((
SIGNAL
Ë=
FMC_WaôSig«l_E«bÀ
))

535 
	#FMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

536 
	#FMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

538 
	#IS_FMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FMC_ExãndedMode_DißbÀ
Ë|| \

	)

539 ((
MODE
Ë=
FMC_ExãndedMode_E«bÀ
))

548 
	#FMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

549 
	#FMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

551 
	#IS_FMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FMC_WrôeBur°_DißbÀ
Ë|| \

	)

552 ((
BURST
Ë=
FMC_WrôeBur°_E«bÀ
))

561 
	#FMC_CClock_SyncO∆y
 ((
uöt32_t
)0x00000000)

	)

562 
	#FMC_CClock_SyncAsync
 ((
uöt32_t
)0x00100000)

	)

564 
	#IS_FMC_CONTINOUS_CLOCK
(
CCLOCK
Ë(((CCLOCKË=
FMC_CClock_SyncO∆y
Ë|| \

	)

565 ((
CCLOCK
Ë=
FMC_CClock_SyncAsync
))

573 
	#IS_FMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<15)

	)

581 
	#IS_FMC_ADDRESS_HOLD_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<15))

	)

589 
	#IS_FMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<255))

	)

597 
	#IS_FMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<15)

	)

605 
	#IS_FMC_CLK_DIV
(
DIV
Ë(((DIVË> 0Ë&& ((DIVË<15))

	)

613 
	#IS_FMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<15)

	)

621 
	#FMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

622 
	#FMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

623 
	#FMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

624 
	#FMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

626 
	#IS_FMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FMC_Ac˚ssMode_A
Ë|| \

	)

627 ((
MODE
Ë=
FMC_Ac˚ssMode_B
) || \

628 ((
MODE
Ë=
FMC_Ac˚ssMode_C
) || \

629 ((
MODE
Ë=
FMC_Ac˚ssMode_D
))

645 
	#FMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

646 
	#FMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

648 
	#IS_FMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FMC_Waô„©uª_DißbÀ
Ë|| \

	)

649 ((
FEATURE
Ë=
FMC_Waô„©uª_E«bÀ
))

657 
	#FMC_NAND_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

658 
	#FMC_NAND_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

660 
	#IS_FMC_NAND_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FMC_NAND_Mem‹yD©aWidth_8b
Ë|| \

	)

661 ((
WIDTH
Ë=
FMC_NAND_Mem‹yD©aWidth_16b
))

669 
	#FMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

670 
	#FMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

672 
	#IS_FMC_ECC_STATE
(
STATE
Ë(((STATEË=
FMC_ECC_DißbÀ
Ë|| \

	)

673 ((
STATE
Ë=
FMC_ECC_E«bÀ
))

681 
	#FMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

682 
	#FMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

683 
	#FMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

684 
	#FMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

685 
	#FMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

686 
	#FMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

688 
	#IS_FMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FMC_ECCPageSize_256Byãs
Ë|| \

	)

689 ((
SIZE
Ë=
FMC_ECCPageSize_512Byãs
) || \

690 ((
SIZE
Ë=
FMC_ECCPageSize_1024Byãs
) || \

691 ((
SIZE
Ë=
FMC_ECCPageSize_2048Byãs
) || \

692 ((
SIZE
Ë=
FMC_ECCPageSize_4096Byãs
) || \

693 ((
SIZE
Ë=
FMC_ECCPageSize_8192Byãs
))

701 
	#IS_FMC_TCLR_TIME
(
TIME
Ë((TIMEË<255)

	)

709 
	#IS_FMC_TAR_TIME
(
TIME
Ë((TIMEË<255)

	)

717 
	#IS_FMC_SETUP_TIME
(
TIME
Ë((TIMEË<255)

	)

725 
	#IS_FMC_WAIT_TIME
(
TIME
Ë((TIMEË<255)

	)

733 
	#IS_FMC_HOLD_TIME
(
TIME
Ë((TIMEË<255)

	)

741 
	#IS_FMC_HIZ_TIME
(
TIME
Ë((TIMEË<255)

	)

758 
	#FMC_CﬁumnBôs_Numbî_8b
 ((
uöt32_t
)0x00000000)

	)

759 
	#FMC_CﬁumnBôs_Numbî_9b
 ((
uöt32_t
)0x00000001)

	)

760 
	#FMC_CﬁumnBôs_Numbî_10b
 ((
uöt32_t
)0x00000002)

	)

761 
	#FMC_CﬁumnBôs_Numbî_11b
 ((
uöt32_t
)0x00000003)

	)

763 
	#IS_FMC_COLUMNBITS_NUMBER
(
COLUMN
Ë(((COLUMNË=
FMC_CﬁumnBôs_Numbî_8b
Ë|| \

	)

764 ((
COLUMN
Ë=
FMC_CﬁumnBôs_Numbî_9b
) || \

765 ((
COLUMN
Ë=
FMC_CﬁumnBôs_Numbî_10b
) || \

766 ((
COLUMN
Ë=
FMC_CﬁumnBôs_Numbî_11b
))

775 
	#FMC_RowBôs_Numbî_11b
 ((
uöt32_t
)0x00000000)

	)

776 
	#FMC_RowBôs_Numbî_12b
 ((
uöt32_t
)0x00000004)

	)

777 
	#FMC_RowBôs_Numbî_13b
 ((
uöt32_t
)0x00000008)

	)

779 
	#IS_FMC_ROWBITS_NUMBER
(
ROW
Ë(((ROWË=
FMC_RowBôs_Numbî_11b
Ë|| \

	)

780 ((
ROW
Ë=
FMC_RowBôs_Numbî_12b
) || \

781 ((
ROW
Ë=
FMC_RowBôs_Numbî_13b
))

790 
	#FMC_SDMem‹y_Width_8b
 ((
uöt32_t
)0x00000000)

	)

791 
	#FMC_SDMem‹y_Width_16b
 ((
uöt32_t
)0x00000010)

	)

792 
	#FMC_SDMem‹y_Width_32b
 ((
uöt32_t
)0x00000020)

	)

794 
	#IS_FMC_SDMEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FMC_SDMem‹y_Width_8b
Ë|| \

	)

795 ((
WIDTH
Ë=
FMC_SDMem‹y_Width_16b
) || \

796 ((
WIDTH
Ë=
FMC_SDMem‹y_Width_32b
))

805 
	#FMC_I¡î«lB™k_Numbî_2
 ((
uöt32_t
)0x00000000)

	)

806 
	#FMC_I¡î«lB™k_Numbî_4
 ((
uöt32_t
)0x00000040)

	)

808 
	#IS_FMC_INTERNALBANK_NUMBER
(
NUMBER
Ë(((NUMBERË=
FMC_I¡î«lB™k_Numbî_2
Ë|| \

	)

809 ((
NUMBER
Ë=
FMC_I¡î«lB™k_Numbî_4
))

819 
	#FMC_CAS_L©ícy_1
 ((
uöt32_t
)0x00000080)

	)

820 
	#FMC_CAS_L©ícy_2
 ((
uöt32_t
)0x00000100)

	)

821 
	#FMC_CAS_L©ícy_3
 ((
uöt32_t
)0x00000180)

	)

823 
	#IS_FMC_CAS_LATENCY
(
LATENCY
Ë(((LATENCYË=
FMC_CAS_L©ícy_1
Ë|| \

	)

824 ((
LATENCY
Ë=
FMC_CAS_L©ícy_2
) || \

825 ((
LATENCY
Ë=
FMC_CAS_L©ícy_3
))

834 
	#FMC_Wrôe_PrŸe˘i⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

835 
	#FMC_Wrôe_PrŸe˘i⁄_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

837 
	#IS_FMC_WRITE_PROTECTION
(
WRITE
Ë(((WRITEË=
FMC_Wrôe_PrŸe˘i⁄_DißbÀ
Ë|| \

	)

838 ((
WRITE
Ë=
FMC_Wrôe_PrŸe˘i⁄_E«bÀ
))

848 
	#FMC_SDClock_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

849 
	#FMC_SDClock_Pîiod_2
 ((
uöt32_t
)0x00000800)

	)

850 
	#FMC_SDClock_Pîiod_3
 ((
uöt32_t
)0x00000C00)

	)

852 
	#IS_FMC_SDCLOCK_PERIOD
(
PERIOD
Ë(((PERIODË=
FMC_SDClock_DißbÀ
Ë|| \

	)

853 ((
PERIOD
Ë=
FMC_SDClock_Pîiod_2
) || \

854 ((
PERIOD
Ë=
FMC_SDClock_Pîiod_3
))

863 
	#FMC_Ród_Bur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

864 
	#FMC_Ród_Bur°_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

866 
	#IS_FMC_READ_BURST
(
RBURST
Ë(((RBURSTË=
FMC_Ród_Bur°_DißbÀ
Ë|| \

	)

867 ((
RBURST
Ë=
FMC_Ród_Bur°_E«bÀ
))

876 
	#FMC_RódPùe_Dñay_0
 ((
uöt32_t
)0x00000000)

	)

877 
	#FMC_RódPùe_Dñay_1
 ((
uöt32_t
)0x00002000)

	)

878 
	#FMC_RódPùe_Dñay_2
 ((
uöt32_t
)0x00004000)

	)

880 
	#IS_FMC_READPIPE_DELAY
(
DELAY
Ë(((DELAYË=
FMC_RódPùe_Dñay_0
Ë|| \

	)

881 ((
DELAY
Ë=
FMC_RódPùe_Dñay_1
) || \

882 ((
DELAY
Ë=
FMC_RódPùe_Dñay_2
))

891 
	#IS_FMC_LOADTOACTIVE_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

899 
	#IS_FMC_EXITSELFREFRESH_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

907 
	#IS_FMC_SELFREFRESH_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<16))

	)

915 
	#IS_FMC_ROWCYCLE_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

923 
	#IS_FMC_WRITE_RECOVERY_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<16))

	)

931 
	#IS_FMC_RP_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

939 
	#IS_FMC_RCD_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

948 
	#FMC_Comm™d_Mode_n‹mÆ
 ((
uöt32_t
)0x00000000)

	)

949 
	#FMC_Comm™d_Mode_CLK_E«bÀd
 ((
uöt32_t
)0x00000001)

	)

950 
	#FMC_Comm™d_Mode_PALL
 ((
uöt32_t
)0x00000002)

	)

951 
	#FMC_Comm™d_Mode_AutoRe‰esh
 ((
uöt32_t
)0x00000003)

	)

952 
	#FMC_Comm™d_Mode_LﬂdMode
 ((
uöt32_t
)0x00000004)

	)

953 
	#FMC_Comm™d_Mode_Sñ‰e‰esh
 ((
uöt32_t
)0x00000005)

	)

954 
	#FMC_Comm™d_Mode_PowîDown
 ((
uöt32_t
)0x00000006)

	)

956 
	#IS_FMC_COMMAND_MODE
(
COMMAND
Ë(((COMMANDË=
FMC_Comm™d_Mode_n‹mÆ
Ë|| \

	)

957 ((
COMMAND
Ë=
FMC_Comm™d_Mode_CLK_E«bÀd
) || \

958 ((
COMMAND
Ë=
FMC_Comm™d_Mode_PALL
) || \

959 ((
COMMAND
Ë=
FMC_Comm™d_Mode_AutoRe‰esh
) || \

960 ((
COMMAND
Ë=
FMC_Comm™d_Mode_LﬂdMode
) || \

961 ((
COMMAND
Ë=
FMC_Comm™d_Mode_Sñ‰e‰esh
) || \

962 ((
COMMAND
Ë=
FMC_Comm™d_Mode_PowîDown
))

971 
	#FMC_Comm™d_T¨gë_b™k2
 ((
uöt32_t
)0x00000008)

	)

972 
	#FMC_Comm™d_T¨gë_b™k1
 ((
uöt32_t
)0x00000010)

	)

973 
	#FMC_Comm™d_T¨gë_b™k1_2
 ((
uöt32_t
)0x00000018)

	)

975 
	#IS_FMC_COMMAND_TARGET
(
TARGET
Ë(((TARGETË=
FMC_Comm™d_T¨gë_b™k1
Ë|| \

	)

976 ((
TARGET
Ë=
FMC_Comm™d_T¨gë_b™k2
) || \

977 ((
TARGET
Ë=
FMC_Comm™d_T¨gë_b™k1_2
))

986 
	#IS_FMC_AUTOREFRESH_NUMBER
(
NUMBER
Ë(((NUMBERË> 0Ë&& ((NUMBERË<16))

	)

995 
	#IS_FMC_MODE_REGISTER
(
CONTENT
Ë((CONTENTË<8191)

	)

1005 
	#FMC_N‹mÆMode_Sètus
 ((
uöt32_t
)0x00000000)

	)

1006 
	#FMC_SñfRe‰eshMode_Sètus
 
FMC_SDSR_MODES1_0


	)

1007 
	#FMC_PowîDownMode_Sètus
 
FMC_SDSR_MODES1_1


	)

1009 
	#IS_FMC_MODE_STATUS
(
STATUS
Ë(((STATUSË=
FMC_N‹mÆMode_Sètus
Ë|| \

	)

1010 ((
STATUS
Ë=
FMC_SñfRe‰eshMode_Sètus
) || \

1011 ((
STATUS
Ë=
FMC_PowîDownMode_Sètus
))

1025 
	#FMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

1026 
	#FMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

1027 
	#FMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

1028 
	#FMC_IT_Re‰esh
 ((
uöt32_t
)0x00004000)

	)

1030 
	#IS_FMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFBFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

1031 
	#IS_FMC_GET_IT
(
IT
Ë(((ITË=
FMC_IT_RisögEdge
Ë|| \

	)

1032 ((
IT
Ë=
FMC_IT_Levñ
) || \

1033 ((
IT
Ë=
FMC_IT_FÆlögEdge
) || \

1034 ((
IT
Ë=
FMC_IT_Re‰esh
))

1036 
	#IS_FMC_IT_BANK
(
BANK
Ë(((BANKË=
FMC_B™k2_NAND
Ë|| \

	)

1037 ((
BANK
Ë=
FMC_B™k3_NAND
) || \

1038 ((
BANK
Ë=
FMC_B™k4_PCCARD
) || \

1039 ((
BANK
Ë=
FMC_B™k1_SDRAM
) || \

1040 ((
BANK
Ë=
FMC_B™k2_SDRAM
))

1048 
	#FMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

1049 
	#FMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

1050 
	#FMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

1051 
	#FMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

1052 
	#FMC_FLAG_Re‰esh
 
FMC_SDSR_RE


	)

1053 
	#FMC_FLAG_Busy
 
FMC_SDSR_BUSY


	)

1055 
	#IS_FMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FMC_FLAG_RisögEdge
Ë|| \

	)

1056 ((
FLAG
Ë=
FMC_FLAG_Levñ
) || \

1057 ((
FLAG
Ë=
FMC_FLAG_FÆlögEdge
) || \

1058 ((
FLAG
Ë=
FMC_FLAG_FEMPT
) || \

1059 ((
FLAG
Ë=
FMC_FLAG_Re‰esh
) || \

1060 ((
FLAG
Ë=
FMC_SDSR_BUSY
))

1062 
	#IS_FMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FMC_B™k2_NAND
Ë|| \

	)

1063 ((
BANK
Ë=
FMC_B™k3_NAND
) || \

1064 ((
BANK
Ë=
FMC_B™k4_PCCARD
) || \

1065 ((
BANK
Ë=
FMC_B™k1_SDRAM
) || \

1066 ((
BANK
Ë=
FMC_B™k2_SDRAM
) || \

1067 ((
BANK
Ë=(
FMC_B™k1_SDRAM
 | 
FMC_B™k2_SDRAM
)))

1069 
	#IS_FMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

1079 
	#IS_FMC_REFRESH_COUNT
(
COUNT
Ë((COUNTË<8191)

	)

1094 
FMC_NORSRAMDeInô
(
uöt32_t
 
FMC_B™k
);

1095 
FMC_NORSRAMInô
(
FMC_NORSRAMInôTy≥Def
* 
FMC_NORSRAMInôSåu˘
);

1096 
FMC_NORSRAMSåu˘Inô
(
FMC_NORSRAMInôTy≥Def
* 
FMC_NORSRAMInôSåu˘
);

1097 
FMC_NORSRAMCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1100 
FMC_NANDDeInô
(
uöt32_t
 
FMC_B™k
);

1101 
FMC_NANDInô
(
FMC_NANDInôTy≥Def
* 
FMC_NANDInôSåu˘
);

1102 
FMC_NANDSåu˘Inô
(
FMC_NANDInôTy≥Def
* 
FMC_NANDInôSåu˘
);

1103 
FMC_NANDCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1104 
FMC_NANDECCCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1105 
uöt32_t
 
FMC_GëECC
(uöt32_à
FMC_B™k
);

1108 
FMC_PCCARDDeInô
();

1109 
FMC_PCCARDInô
(
FMC_PCCARDInôTy≥Def
* 
FMC_PCCARDInôSåu˘
);

1110 
FMC_PCCARDSåu˘Inô
(
FMC_PCCARDInôTy≥Def
* 
FMC_PCCARDInôSåu˘
);

1111 
FMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

1114 
FMC_SDRAMDeInô
(
uöt32_t
 
FMC_B™k
);

1115 
FMC_SDRAMInô
(
FMC_SDRAMInôTy≥Def
* 
FMC_SDRAMInôSåu˘
);

1116 
FMC_SDRAMSåu˘Inô
(
FMC_SDRAMInôTy≥Def
* 
FMC_SDRAMInôSåu˘
);

1117 
FMC_SDRAMCmdC⁄fig
(
FMC_SDRAMComm™dTy≥Def
* 
FMC_SDRAMComm™dSåu˘
);

1118 
uöt32_t
 
FMC_GëModeSètus
(uöt32_à
SDRAM_B™k
);

1119 
FMC_SëRe‰eshCou¡
(
uöt32_t
 
FMC_Cou¡
);

1120 
FMC_SëAutoRe‰esh_Numbî
(
uöt32_t
 
FMC_Numbî
);

1121 
FMC_SDRAMWrôePrŸe˘i⁄C⁄fig
(
uöt32_t
 
SDRAM_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1124 
FMC_ITC⁄fig
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1125 
FœgSètus
 
FMC_GëFœgSètus
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_FLAG
);

1126 
FMC_CÀ¨Fœg
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_FLAG
);

1127 
ITSètus
 
FMC_GëITSètus
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
);

1128 
FMC_CÀ¨ITPídögBô
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
);

1130 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_fsmc.h

30 #i‚de‡
__STM32F4xx_FSMC_H


31 
	#__STM32F4xx_FSMC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
FSMC_AddªssSëupTime
;

60 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

65 
uöt32_t
 
FSMC_D©aSëupTime
;

70 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

75 
uöt32_t
 
FSMC_CLKDivisi⁄
;

79 
uöt32_t
 
FSMC_D©aL©ícy
;

87 
uöt32_t
 
FSMC_Ac˚ssMode
;

89 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

96 
uöt32_t
 
FSMC_B™k
;

99 
uöt32_t
 
FSMC_D©aAddªssMux
;

103 
uöt32_t
 
FSMC_Mem‹yTy≥
;

107 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

110 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

114 
uöt32_t
 
FSMC_Asynchr⁄ousWaô
;

118 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

122 
uöt32_t
 
FSMC_WøpMode
;

126 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

131 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

134 
uöt32_t
 
FSMC_WaôSig«l
;

138 
uöt32_t
 
FSMC_ExãndedMode
;

141 
uöt32_t
 
FSMC_WrôeBur°
;

144 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

146 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

147 }
	tFSMC_NORSRAMInôTy≥Def
;

154 
uöt32_t
 
FSMC_SëupTime
;

160 
uöt32_t
 
FSMC_WaôSëupTime
;

166 
uöt32_t
 
FSMC_HﬁdSëupTime
;

173 
uöt32_t
 
FSMC_HiZSëupTime
;

178 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

185 
uöt32_t
 
FSMC_B™k
;

188 
uöt32_t
 
FSMC_Waô„©uª
;

191 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

194 
uöt32_t
 
FSMC_ECC
;

197 
uöt32_t
 
FSMC_ECCPageSize
;

200 
uöt32_t
 
FSMC_TCLRSëupTime
;

204 
uöt32_t
 
FSMC_TARSëupTime
;

208 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

210 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

211 }
	tFSMC_NANDInôTy≥Def
;

219 
uöt32_t
 
FSMC_Waô„©uª
;

222 
uöt32_t
 
FSMC_TCLRSëupTime
;

226 
uöt32_t
 
FSMC_TARSëupTime
;

231 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

233 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

235 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

236 }
	tFSMC_PCCARDInôTy≥Def
;

247 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

248 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

249 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

250 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

258 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

259 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

267 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

272 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
Ë|| \

	)

273 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

274 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

275 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

277 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

278 ((
BANK
Ë=
FSMC_B™k3_NAND
))

280 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

281 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

282 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

284 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

285 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

286 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

296 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

297 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

298 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

299 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

308 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

309 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

310 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

311 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
Ë|| \

	)

312 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

313 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

322 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

323 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

324 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

325 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

334 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

335 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

336 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

337 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

345 
	#FSMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

346 
	#FSMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

347 
	#IS_FSMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FSMC_Asynchr⁄ousWaô_DißbÀ
Ë|| \

	)

348 ((
STATE
Ë=
FSMC_Asynchr⁄ousWaô_E«bÀ
))

356 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

357 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

358 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

359 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

367 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

368 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

369 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
Ë|| \

	)

370 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

378 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

379 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

380 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

381 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

389 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

390 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

391 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

392 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

400 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

401 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

402 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
Ë|| \

	)

403 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

411 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

412 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

414 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
Ë|| \

	)

415 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

424 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

425 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

426 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
Ë|| \

	)

427 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

435 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

443 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

451 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

459 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

467 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

475 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

483 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

484 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

485 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

486 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

487 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
Ë|| \

	)

488 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

489 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

490 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

506 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

507 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

508 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
Ë|| \

	)

509 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

518 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

519 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

520 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
Ë|| \

	)

521 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

529 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

530 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

531 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

532 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

533 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

534 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

535 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
Ë|| \

	)

536 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

537 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

538 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

539 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

540 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

548 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

556 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

564 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

572 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

580 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

588 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

596 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

597 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

598 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

599 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

600 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
Ë|| \

	)

601 ((
IT
Ë=
FSMC_IT_Levñ
) || \

602 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

610 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

611 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

612 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

613 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

614 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
Ë|| \

	)

615 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

616 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

617 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

619 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

636 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

637 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

638 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

639 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

642 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

643 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

644 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

645 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

646 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

647 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

650 
FSMC_PCCARDDeInô
();

651 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

652 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

653 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

656 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

657 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

658 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

659 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

660 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

662 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_gpio.h

30 #i‚de‡
__STM32F4xx_GPIO_H


31 
	#__STM32F4xx_GPIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

50 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
Ë|| \

	)

51 ((
PERIPH
Ë=
GPIOB
) || \

52 ((
PERIPH
Ë=
GPIOC
) || \

53 ((
PERIPH
Ë=
GPIOD
) || \

54 ((
PERIPH
Ë=
GPIOE
) || \

55 ((
PERIPH
Ë=
GPIOF
) || \

56 ((
PERIPH
Ë=
GPIOG
) || \

57 ((
PERIPH
Ë=
GPIOH
) || \

58 ((
PERIPH
Ë=
GPIOI
) || \

59 ((
PERIPH
Ë=
GPIOJ
) || \

60 ((
PERIPH
Ë=
GPIOK
))

67 
GPIO_Mode_IN
 = 0x00,

68 
GPIO_Mode_OUT
 = 0x01,

69 
GPIO_Mode_AF
 = 0x02,

70 
GPIO_Mode_AN
 = 0x03

71 }
	tGPIOMode_Ty≥Def
;

72 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_IN
Ë|| ((MODEË=
GPIO_Mode_OUT
Ë|| \

	)

73 ((
MODE
Ë=
GPIO_Mode_AF
)|| ((MODEË=
GPIO_Mode_AN
))

80 
GPIO_OTy≥_PP
 = 0x00,

81 
GPIO_OTy≥_OD
 = 0x01

82 }
	tGPIOOTy≥_Ty≥Def
;

83 
	#IS_GPIO_OTYPE
(
OTYPE
Ë(((OTYPEË=
GPIO_OTy≥_PP
Ë|| ((OTYPEË=
GPIO_OTy≥_OD
))

	)

91 
GPIO_Low_S≥ed
 = 0x00,

92 
GPIO_Medium_S≥ed
 = 0x01,

93 
GPIO_Fa°_S≥ed
 = 0x02,

94 
GPIO_High_S≥ed
 = 0x03

95 }
	tGPIOS≥ed_Ty≥Def
;

98 
	#GPIO_S≥ed_2MHz
 
GPIO_Low_S≥ed


	)

99 
	#GPIO_S≥ed_25MHz
 
GPIO_Medium_S≥ed


	)

100 
	#GPIO_S≥ed_50MHz
 
GPIO_Fa°_S≥ed


	)

101 
	#GPIO_S≥ed_100MHz
 
GPIO_High_S≥ed


	)

103 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_Low_S≥ed
Ë|| ((SPEEDË=
GPIO_Medium_S≥ed
Ë|| \

	)

104 ((
SPEED
Ë=
GPIO_Fa°_S≥ed
)|| ((SPEEDË=
GPIO_High_S≥ed
))

111 
GPIO_PuPd_NOPULL
 = 0x00,

112 
GPIO_PuPd_UP
 = 0x01,

113 
GPIO_PuPd_DOWN
 = 0x02

114 }
	tGPIOPuPd_Ty≥Def
;

115 
	#IS_GPIO_PUPD
(
PUPD
Ë(((PUPDË=
GPIO_PuPd_NOPULL
Ë|| ((PUPDË=
GPIO_PuPd_UP
Ë|| \

	)

116 ((
PUPD
Ë=
GPIO_PuPd_DOWN
))

123 
Bô_RESET
 = 0,

124 
Bô_SET


125 }
	tBôA˘i⁄
;

126 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

134 
uöt32_t
 
GPIO_Pö
;

137 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

140 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

143 
GPIOOTy≥_Ty≥Def
 
GPIO_OTy≥
;

146 
GPIOPuPd_Ty≥Def
 
GPIO_PuPd
;

148 }
	tGPIO_InôTy≥Def
;

159 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

160 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

161 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

162 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

163 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

164 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

165 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

166 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

167 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

168 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

169 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

170 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

171 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

172 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

173 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

174 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

175 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

177 
	#GPIO_PIN_MASK
 ((
uöt32_t
)0x0000FFFFË

	)

178 
	#IS_GPIO_PIN
(
PIN
Ë(((PINË& 
GPIO_PIN_MASK
 ) !(
uöt32_t
)0x00)

	)

179 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
Ë|| \

	)

180 ((
PIN
Ë=
GPIO_Pö_1
) || \

181 ((
PIN
Ë=
GPIO_Pö_2
) || \

182 ((
PIN
Ë=
GPIO_Pö_3
) || \

183 ((
PIN
Ë=
GPIO_Pö_4
) || \

184 ((
PIN
Ë=
GPIO_Pö_5
) || \

185 ((
PIN
Ë=
GPIO_Pö_6
) || \

186 ((
PIN
Ë=
GPIO_Pö_7
) || \

187 ((
PIN
Ë=
GPIO_Pö_8
) || \

188 ((
PIN
Ë=
GPIO_Pö_9
) || \

189 ((
PIN
Ë=
GPIO_Pö_10
) || \

190 ((
PIN
Ë=
GPIO_Pö_11
) || \

191 ((
PIN
Ë=
GPIO_Pö_12
) || \

192 ((
PIN
Ë=
GPIO_Pö_13
) || \

193 ((
PIN
Ë=
GPIO_Pö_14
) || \

194 ((
PIN
Ë=
GPIO_Pö_15
))

203 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

204 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

205 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

206 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

207 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

208 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

209 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

210 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

211 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

212 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

213 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

214 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

215 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

216 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

217 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

218 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

220 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
Ë|| \

	)

221 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

222 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

223 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

224 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

225 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

226 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

227 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

228 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

229 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

230 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

231 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

232 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

233 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

234 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

235 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

246 
	#GPIO_AF_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

247 
	#GPIO_AF_MCO
 ((
uöt8_t
)0x00Ë

	)

248 
	#GPIO_AF_TAMPER
 ((
uöt8_t
)0x00Ë

	)

249 
	#GPIO_AF_SWJ
 ((
uöt8_t
)0x00Ë

	)

250 
	#GPIO_AF_TRACE
 ((
uöt8_t
)0x00Ë

	)

255 
	#GPIO_AF_TIM1
 ((
uöt8_t
)0x01Ë

	)

256 
	#GPIO_AF_TIM2
 ((
uöt8_t
)0x01Ë

	)

261 
	#GPIO_AF_TIM3
 ((
uöt8_t
)0x02Ë

	)

262 
	#GPIO_AF_TIM4
 ((
uöt8_t
)0x02Ë

	)

263 
	#GPIO_AF_TIM5
 ((
uöt8_t
)0x02Ë

	)

268 
	#GPIO_AF_TIM8
 ((
uöt8_t
)0x03Ë

	)

269 
	#GPIO_AF_TIM9
 ((
uöt8_t
)0x03Ë

	)

270 
	#GPIO_AF_TIM10
 ((
uöt8_t
)0x03Ë

	)

271 
	#GPIO_AF_TIM11
 ((
uöt8_t
)0x03Ë

	)

276 
	#GPIO_AF_I2C1
 ((
uöt8_t
)0x04Ë

	)

277 
	#GPIO_AF_I2C2
 ((
uöt8_t
)0x04Ë

	)

278 
	#GPIO_AF_I2C3
 ((
uöt8_t
)0x04Ë

	)

283 
	#GPIO_AF_SPI1
 ((
uöt8_t
)0x05Ë

	)

284 
	#GPIO_AF_SPI2
 ((
uöt8_t
)0x05Ë

	)

285 
	#GPIO_AF5_SPI3
 ((
uöt8_t
)0x05Ë

	)

286 
	#GPIO_AF_SPI4
 ((
uöt8_t
)0x05Ë

	)

287 
	#GPIO_AF_SPI5
 ((
uöt8_t
)0x05Ë

	)

288 
	#GPIO_AF_SPI6
 ((
uöt8_t
)0x05Ë

	)

293 
	#GPIO_AF_SPI3
 ((
uöt8_t
)0x06Ë

	)

294 
	#GPIO_AF6_SPI2
 ((
uöt8_t
)0x06Ë

	)

295 
	#GPIO_AF6_SPI4
 ((
uöt8_t
)0x06Ë

	)

296 
	#GPIO_AF6_SPI5
 ((
uöt8_t
)0x06Ë

	)

297 
	#GPIO_AF_SAI1
 ((
uöt8_t
)0x06Ë

	)

302 
	#GPIO_AF_USART1
 ((
uöt8_t
)0x07Ë

	)

303 
	#GPIO_AF_USART2
 ((
uöt8_t
)0x07Ë

	)

304 
	#GPIO_AF_USART3
 ((
uöt8_t
)0x07Ë

	)

305 
	#GPIO_AF7_SPI3
 ((
uöt8_t
)0x07Ë

	)

310 
	#GPIO_AF_I2S3ext
 
GPIO_AF7_SPI3


	)

315 
	#GPIO_AF_UART4
 ((
uöt8_t
)0x08Ë

	)

316 
	#GPIO_AF_UART5
 ((
uöt8_t
)0x08Ë

	)

317 
	#GPIO_AF_USART6
 ((
uöt8_t
)0x08Ë

	)

318 
	#GPIO_AF_UART7
 ((
uöt8_t
)0x08Ë

	)

319 
	#GPIO_AF_UART8
 ((
uöt8_t
)0x08Ë

	)

324 
	#GPIO_AF_CAN1
 ((
uöt8_t
)0x09Ë

	)

325 
	#GPIO_AF_CAN2
 ((
uöt8_t
)0x09Ë

	)

326 
	#GPIO_AF_TIM12
 ((
uöt8_t
)0x09Ë

	)

327 
	#GPIO_AF_TIM13
 ((
uöt8_t
)0x09Ë

	)

328 
	#GPIO_AF_TIM14
 ((
uöt8_t
)0x09Ë

	)

330 
	#GPIO_AF9_I2C2
 ((
uöt8_t
)0x09Ë

	)

331 
	#GPIO_AF9_I2C3
 ((
uöt8_t
)0x09Ë

	)

336 
	#GPIO_AF_OTG_FS
 ((
uöt8_t
)0xAË

	)

337 
	#GPIO_AF_OTG_HS
 ((
uöt8_t
)0xAË

	)

342 
	#GPIO_AF_ETH
 ((
uöt8_t
)0x0BË

	)

347 #i‡
deföed
 (
STM32F40_41xxx
)

348 
	#GPIO_AF_FSMC
 ((
uöt8_t
)0xCË

	)

351 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

352 
	#GPIO_AF_FMC
 ((
uöt8_t
)0xCË

	)

355 
	#GPIO_AF_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

356 
	#GPIO_AF_SDIO
 ((
uöt8_t
)0xCË

	)

361 
	#GPIO_AF_DCMI
 ((
uöt8_t
)0x0DË

	)

367 
	#GPIO_AF_LTDC
 ((
uöt8_t
)0x0EË

	)

372 
	#GPIO_AF_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

374 #i‡
deföed
 (
STM32F40_41xxx
)

375 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
Ë|| \

	)

376 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

377 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

378 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

379 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

380 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

381 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

382 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

383 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

384 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

385 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

386 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

387 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

388 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

389 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

390 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_OTG_HS_FS
) || \

391 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_DCMI
) || \

392 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_FSMC
))

395 #i‡
deföed
 (
STM32F401xx
)

396 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
Ë|| \

	)

397 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

398 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

399 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

400 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

401 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

402 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

403 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

404 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

405 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

406 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

407 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_USART6
) || \

408 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

409 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_SPI4
))

412 #i‡
deföed
 (
STM32F411xE
)

413 
	#IS_GPIO_AF
(
AF
Ë(((AFË< 16Ë&& ((AFË!11Ë&& ((AFË!13Ë&& ((AFË!14))

	)

416 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

417 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
Ë|| \

	)

418 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

419 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

420 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

421 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

422 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

423 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

424 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

425 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

426 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

427 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

428 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

429 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

430 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

431 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

432 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_OTG_HS_FS
) || \

433 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_DCMI
) || \

434 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_SPI4
) || \

435 ((
AF
Ë=
GPIO_AF_SPI5
Ë|| ((AFË=
GPIO_AF_SPI6
) || \

436 ((
AF
Ë=
GPIO_AF_UART7
Ë|| ((AFË=
GPIO_AF_UART8
) || \

437 ((
AF
Ë=
GPIO_AF_FMC
Ë|| ((AFË=
GPIO_AF_SAI1
) || \

438 ((
AF
Ë=
GPIO_AF_LTDC
))

449 
	#GPIO_Mode_AIN
 
GPIO_Mode_AN


	)

451 
	#GPIO_AF_OTG1_FS
 
GPIO_AF_OTG_FS


	)

452 
	#GPIO_AF_OTG2_HS
 
GPIO_AF_OTG_HS


	)

453 
	#GPIO_AF_OTG2_FS
 
GPIO_AF_OTG_HS_FS


	)

467 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

470 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

471 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

472 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

475 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

476 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

477 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

478 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

479 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

480 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

481 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

482 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

483 
GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

486 
GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
);

488 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_hash.h

30 #i‚de‡
__STM32F4xx_HASH_H


31 
	#__STM32F4xx_HASH_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
HASH_AlgoSñe˘i⁄
;

57 
uöt32_t
 
HASH_AlgoMode
;

59 
uöt32_t
 
HASH_D©aTy≥
;

62 
uöt32_t
 
HASH_HMACKeyTy≥
;

64 }
	tHASH_InôTy≥Def
;

71 
uöt32_t
 
D©a
[8];

75 } 
	tHASH_MsgDige°
;

82 
uöt32_t
 
HASH_IMR
;

83 
uöt32_t
 
HASH_STR
;

84 
uöt32_t
 
HASH_CR
;

85 
uöt32_t
 
HASH_CSR
[54];

86 }
	tHASH_C⁄ãxt
;

97 
	#HASH_AlgoSñe˘i⁄_SHA1
 ((
uöt32_t
)0x0000Ë

	)

98 
	#HASH_AlgoSñe˘i⁄_SHA224
 
HASH_CR_ALGO_1


	)

99 
	#HASH_AlgoSñe˘i⁄_SHA256
 
HASH_CR_ALGO


	)

100 
	#HASH_AlgoSñe˘i⁄_MD5
 
HASH_CR_ALGO_0


	)

102 
	#IS_HASH_ALGOSELECTION
(
ALGOSELECTION
Ë(((ALGOSELECTIONË=
HASH_AlgoSñe˘i⁄_SHA1
Ë|| \

	)

103 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_SHA224
) || \

104 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_SHA256
) || \

105 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_MD5
))

113 
	#HASH_AlgoMode_HASH
 ((
uöt32_t
)0x00000000Ë

	)

114 
	#HASH_AlgoMode_HMAC
 
HASH_CR_MODE


	)

116 
	#IS_HASH_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
HASH_AlgoMode_HASH
Ë|| \

	)

117 ((
ALGOMODE
Ë=
HASH_AlgoMode_HMAC
))

125 
	#HASH_D©aTy≥_32b
 ((
uöt32_t
)0x0000Ë

	)

126 
	#HASH_D©aTy≥_16b
 
HASH_CR_DATATYPE_0


	)

127 
	#HASH_D©aTy≥_8b
 
HASH_CR_DATATYPE_1


	)

128 
	#HASH_D©aTy≥_1b
 
HASH_CR_DATATYPE


	)

130 
	#IS_HASH_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
HASH_D©aTy≥_32b
)|| \

	)

131 ((
DATATYPE
Ë=
HASH_D©aTy≥_16b
)|| \

132 ((
DATATYPE
Ë=
HASH_D©aTy≥_8b
) || \

133 ((
DATATYPE
Ë=
HASH_D©aTy≥_1b
))

141 
	#HASH_HMACKeyTy≥_Sh‹tKey
 ((
uöt32_t
)0x00000000Ë

	)

142 
	#HASH_HMACKeyTy≥_L⁄gKey
 
HASH_CR_LKEY


	)

144 
	#IS_HASH_HMAC_KEYTYPE
(
KEYTYPE
Ë(((KEYTYPEË=
HASH_HMACKeyTy≥_Sh‹tKey
Ë|| \

	)

145 ((
KEYTYPE
Ë=
HASH_HMACKeyTy≥_L⁄gKey
))

153 
	#IS_HASH_VALIDBITSNUMBER
(
VALIDBITS
Ë((VALIDBITSË<0x1F)

	)

162 
	#HASH_IT_DINI
 
HASH_IMR_DINIM


	)

163 
	#HASH_IT_DCI
 
HASH_IMR_DCIM


	)

165 
	#IS_HASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFFCË=0x00000000Ë&& ((ITË!0x00000000))

	)

166 
	#IS_HASH_GET_IT
(
IT
Ë(((ITË=
HASH_IT_DINI
Ë|| ((ITË=
HASH_IT_DCI
))

	)

175 
	#HASH_FLAG_DINIS
 
HASH_SR_DINIS


	)

176 
	#HASH_FLAG_DCIS
 
HASH_SR_DCIS


	)

177 
	#HASH_FLAG_DMAS
 
HASH_SR_DMAS


	)

178 
	#HASH_FLAG_BUSY
 
HASH_SR_BUSY


	)

179 
	#HASH_FLAG_DINNE
 
HASH_CR_DINNE


	)

181 
	#IS_HASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
HASH_FLAG_DINIS
Ë|| \

	)

182 ((
FLAG
Ë=
HASH_FLAG_DCIS
) || \

183 ((
FLAG
Ë=
HASH_FLAG_DMAS
) || \

184 ((
FLAG
Ë=
HASH_FLAG_BUSY
) || \

185 ((
FLAG
Ë=
HASH_FLAG_DINNE
))

187 
	#IS_HASH_CLEAR_FLAG
(
FLAG
)(((FLAGË=
HASH_FLAG_DINIS
Ë|| \

	)

188 ((
FLAG
Ë=
HASH_FLAG_DCIS
))

202 
HASH_DeInô
();

205 
HASH_Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

206 
HASH_Såu˘Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

207 
HASH_Re£t
();

210 
HASH_D©aIn
(
uöt32_t
 
D©a
);

211 
uöt8_t
 
HASH_GëInFIFOW‹dsNbr
();

212 
HASH_SëLa°W‹dVÆidBôsNbr
(
uöt16_t
 
VÆidNumbî
);

213 
HASH_SèπDige°
();

214 
HASH_AutoSèπDige°
(
Fun˘i⁄ÆSèã
 
NewSèã
);

215 
HASH_GëDige°
(
HASH_MsgDige°
* 
HASH_MesßgeDige°
);

218 
HASH_SaveC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtSave
);

219 
HASH_Re°‹eC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtRe°‹e
);

222 
HASH_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

225 
HASH_ITC⁄fig
(
uöt32_t
 
HASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

226 
FœgSètus
 
HASH_GëFœgSètus
(
uöt32_t
 
HASH_FLAG
);

227 
HASH_CÀ¨Fœg
(
uöt32_t
 
HASH_FLAG
);

228 
ITSètus
 
HASH_GëITSètus
(
uöt32_t
 
HASH_IT
);

229 
HASH_CÀ¨ITPídögBô
(
uöt32_t
 
HASH_IT
);

232 
Eº‹Sètus
 
HASH_SHA1
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[20]);

233 
Eº‹Sètus
 
HMAC_SHA1
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

234 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

235 
uöt8_t
 
Ouçut
[20]);

238 
Eº‹Sètus
 
HASH_MD5
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[16]);

239 
Eº‹Sètus
 
HMAC_MD5
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

240 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

241 
uöt8_t
 
Ouçut
[16]);

243 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_i2c.h

30 #i‚de‡
__STM32F4xx_I2C_H


31 
	#__STM32F4xx_I2C_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
I2C_ClockS≥ed
;

59 
uöt16_t
 
I2C_Mode
;

62 
uöt16_t
 
I2C_DutyCy˛e
;

65 
uöt16_t
 
I2C_OwnAddªss1
;

68 
uöt16_t
 
I2C_Ack
;

71 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

73 }
	tI2C_InôTy≥Def
;

82 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
Ë|| \

	)

83 ((
PERIPH
Ë=
I2C2
) || \

84 ((
PERIPH
Ë=
I2C3
))

90 
	#IS_I2C_DIGITAL_FILTER
(
FILTER
Ë((FILTERË<0x0000000F)

	)

100 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

101 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

102 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

103 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
Ë|| \

	)

104 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

105 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

114 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

115 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

116 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
Ë|| \

	)

117 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

126 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

127 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

128 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
Ë|| \

	)

129 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

138 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

139 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

140 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

141 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

150 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

151 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

152 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

153 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

162 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

163 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

164 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

165 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

166 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

167 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

168 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

169 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

170 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

171 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
Ë|| \

	)

172 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

173 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

174 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

175 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

176 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

177 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

178 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

179 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

188 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

189 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

190 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
Ë|| \

	)

191 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

200 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

201 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

202 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
Ë|| \

	)

203 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

212 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

213 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

214 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
Ë|| \

	)

215 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

224 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

225 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

226 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

227 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

236 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

237 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

238 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

239 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

240 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

241 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

242 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

243 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

244 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

245 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

246 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

247 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

248 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

249 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

251 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

253 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
Ë|| \

	)

254 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

255 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

256 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

257 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

258 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

259 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

272 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

273 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

274 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

275 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

276 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

277 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

278 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

284 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

285 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

286 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

287 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

288 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

289 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

290 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

291 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

292 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

293 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

294 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

295 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

296 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

297 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

299 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

301 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
Ë|| \

	)

302 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

303 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

304 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

305 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

306 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

307 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

308 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

309 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

310 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

311 ((
FLAG
Ë=
I2C_FLAG_SB
))

335 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

363 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

364 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

366 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

399 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

403 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

405 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

442 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

443 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

446 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

447 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

450 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

481 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

483 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

487 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

488 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

490 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

498 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
Ë|| \

	)

499 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

500 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

501 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

502 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

503 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

504 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

505 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

506 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

507 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

508 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

509 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

510 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

511 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

512 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

513 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

514 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

515 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

516 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

517 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

526 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

535 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

548 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

551 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

552 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

553 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

554 
I2C_DigôÆFûãrC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DigôÆFûãr
);

555 
I2C_A«logFûãrCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

556 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

557 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

558 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

559 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

560 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

561 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

562 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

563 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

564 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

565 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

566 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

567 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

568 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

571 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

572 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

575 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

576 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

577 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

578 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

581 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

582 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

585 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

586 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

678 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

684 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

690 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

693 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

694 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

695 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

697 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_iwdg.h

30 #i‚de‡
__STM32F4xx_IWDG_H


31 
	#__STM32F4xx_IWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

59 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

60 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
Ë|| \

	)

61 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

69 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

70 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

71 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

72 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

73 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

74 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

75 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

76 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
Ë|| \

	)

77 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

90 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

91 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

92 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

93 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

106 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

107 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

108 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

109 
IWDG_RñﬂdCou¡î
();

112 
IWDG_E«bÀ
();

115 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

117 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_ltdc.h

30 #i‚de‡
__STM32F4xx_LTDC_H


31 
	#__STM32F4xx_LTDC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
LTDC_HSPﬁ¨ôy
;

59 
uöt32_t
 
LTDC_VSPﬁ¨ôy
;

62 
uöt32_t
 
LTDC_DEPﬁ¨ôy
;

65 
uöt32_t
 
LTDC_PCPﬁ¨ôy
;

68 
uöt32_t
 
LTDC_H‹iz⁄èlSync
;

71 
uöt32_t
 
LTDC_VîtiˇlSync
;

74 
uöt32_t
 
LTDC_AccumuœãdHBP
;

77 
uöt32_t
 
LTDC_AccumuœãdVBP
;

80 
uöt32_t
 
LTDC_AccumuœãdA˘iveW
;

83 
uöt32_t
 
LTDC_AccumuœãdA˘iveH
;

86 
uöt32_t
 
LTDC_TŸÆWidth
;

89 
uöt32_t
 
LTDC_TŸÆHeigh
;

92 
uöt32_t
 
LTDC_BackgroundRedVÆue
;

95 
uöt32_t
 
LTDC_BackgroundGªíVÆue
;

98 
uöt32_t
 
LTDC_BackgroundBlueVÆue
;

100 } 
	tLTDC_InôTy≥Def
;

108 
uöt32_t
 
LTDC_H‹iz⁄èlSèπ
;

111 
uöt32_t
 
LTDC_H‹iz⁄èlSt›
;

114 
uöt32_t
 
LTDC_VîtiˇlSèπ
;

117 
uöt32_t
 
LTDC_VîtiˇlSt›
;

120 
uöt32_t
 
LTDC_PixñF‹m©
;

123 
uöt32_t
 
LTDC_C⁄°™tAÕha
;

126 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹Blue
;

129 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹Gªí
;

132 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹Red
;

135 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹AÕha
;

138 
uöt32_t
 
LTDC_BÀndögFa˘‹_1
;

141 
uöt32_t
 
LTDC_BÀndögFa˘‹_2
;

144 
uöt32_t
 
LTDC_CFBSèπAdªss
;

146 
uöt32_t
 
LTDC_CFBLöeLígth
;

149 
uöt32_t
 
LTDC_CFBPôch
;

152 
uöt32_t
 
LTDC_CFBLöeNumbî
;

154 } 
	tLTDC_Layî_InôTy≥Def
;

162 
uöt32_t
 
LTDC_POSX
;

163 
uöt32_t
 
LTDC_POSY
;

164 } 
	tLTDC_PosTy≥Def
;

168 
uöt32_t
 
LTDC_BlueWidth
;

169 
uöt32_t
 
LTDC_GªíWidth
;

170 
uöt32_t
 
LTDC_RedWidth
;

171 } 
	tLTDC_RGBTy≥Def
;

175 
uöt32_t
 
LTDC_Cﬁ‹KeyBlue
;

178 
uöt32_t
 
LTDC_Cﬁ‹KeyGªí
;

181 
uöt32_t
 
LTDC_Cﬁ‹KeyRed
;

183 } 
	tLTDC_Cﬁ‹Keyög_InôTy≥Def
;

187 
uöt32_t
 
LTDC_CLUTAdªss
;

190 
uöt32_t
 
LTDC_BlueVÆue
;

193 
uöt32_t
 
LTDC_GªíVÆue
;

196 
uöt32_t
 
LTDC_RedVÆue
;

198 } 
	tLTDC_CLUT_InôTy≥Def
;

210 
	#LTDC_H‹iz⁄èlSYNC
 ((
uöt32_t
)0x00000FFF)

	)

211 
	#LTDC_VîtiˇlSYNC
 ((
uöt32_t
)0x000007FF)

	)

213 
	#IS_LTDC_HSYNC
(
HSYNC
Ë((HSYNCË<
LTDC_H‹iz⁄èlSYNC
)

	)

214 
	#IS_LTDC_VSYNC
(
VSYNC
Ë((VSYNCË<
LTDC_VîtiˇlSYNC
)

	)

215 
	#IS_LTDC_AHBP
(
AHBP
Ë((AHBPË<
LTDC_H‹iz⁄èlSYNC
)

	)

216 
	#IS_LTDC_AVBP
(
AVBP
Ë((AVBPË<
LTDC_VîtiˇlSYNC
)

	)

217 
	#IS_LTDC_AAW
(
AAW
Ë((AAWË<
LTDC_H‹iz⁄èlSYNC
)

	)

218 
	#IS_LTDC_AAH
(
AAH
Ë((AAHË<
LTDC_VîtiˇlSYNC
)

	)

219 
	#IS_LTDC_TOTALW
(
TOTALW
Ë((TOTALWË<
LTDC_H‹iz⁄èlSYNC
)

	)

220 
	#IS_LTDC_TOTALH
(
TOTALH
Ë((TOTALHË<
LTDC_VîtiˇlSYNC
)

	)

229 
	#LTDC_HSPﬁ¨ôy_AL
 ((
uöt32_t
)0x00000000Ë

	)

230 
	#LTDC_HSPﬁ¨ôy_AH
 
LTDC_GCR_HSPOL


	)

232 
	#IS_LTDC_HSPOL
(
HSPOL
Ë(((HSPOLË=
LTDC_HSPﬁ¨ôy_AL
Ë|| \

	)

233 ((
HSPOL
Ë=
LTDC_HSPﬁ¨ôy_AH
))

242 
	#LTDC_VSPﬁ¨ôy_AL
 ((
uöt32_t
)0x00000000Ë

	)

243 
	#LTDC_VSPﬁ¨ôy_AH
 
LTDC_GCR_VSPOL


	)

245 
	#IS_LTDC_VSPOL
(
VSPOL
Ë(((VSPOLË=
LTDC_VSPﬁ¨ôy_AL
Ë|| \

	)

246 ((
VSPOL
Ë=
LTDC_VSPﬁ¨ôy_AH
))

255 
	#LTDC_DEPﬁ¨ôy_AL
 ((
uöt32_t
)0x00000000Ë

	)

256 
	#LTDC_DEPﬁ¨ôy_AH
 
LTDC_GCR_DEPOL


	)

258 
	#IS_LTDC_DEPOL
(
DEPOL
Ë(((DEPOLË=
LTDC_VSPﬁ¨ôy_AL
Ë|| \

	)

259 ((
DEPOL
Ë=
LTDC_DEPﬁ¨ôy_AH
))

268 
	#LTDC_PCPﬁ¨ôy_IPC
 ((
uöt32_t
)0x00000000Ë

	)

269 
	#LTDC_PCPﬁ¨ôy_IIPC
 
LTDC_GCR_PCPOL


	)

271 
	#IS_LTDC_PCPOL
(
PCPOL
Ë(((PCPOLË=
LTDC_PCPﬁ¨ôy_IPC
Ë|| \

	)

272 ((
PCPOL
Ë=
LTDC_PCPﬁ¨ôy_IIPC
))

281 
	#LTDC_IMRñﬂd
 
LTDC_SRCR_IMR


	)

282 
	#LTDC_VBRñﬂd
 
LTDC_SRCR_VBR


	)

284 
	#IS_LTDC_RELOAD
(
RELOAD
Ë(((RELOADË=
LTDC_IMRñﬂd
Ë|| \

	)

285 ((
RELOAD
Ë=
LTDC_VBRñﬂd
))

295 
	#LTDC_Back_Cﬁ‹
 ((
uöt32_t
)0x000000FF)

	)

297 
	#IS_LTDC_BackBlueVÆue
(
BBLUE
Ë((BBLUEË<
LTDC_Back_Cﬁ‹
)

	)

298 
	#IS_LTDC_BackGªíVÆue
(
BGREEN
Ë((BGREENË<
LTDC_Back_Cﬁ‹
)

	)

299 
	#IS_LTDC_BackRedVÆue
(
BRED
Ë((BREDË<
LTDC_Back_Cﬁ‹
)

	)

309 
	#LTDC_POS_CY
 
LTDC_CPSR_CYPOS


	)

310 
	#LTDC_POS_CX
 
LTDC_CPSR_CXPOS


	)

312 
	#IS_LTDC_GET_POS
(
POS
Ë(((POSË<
LTDC_POS_CY
))

	)

323 
	#IS_LTDC_LIPOS
(
LIPOS
Ë((LIPOSË<0x7FF)

	)

333 
	#LTDC_CD_VDES
 
LTDC_CDSR_VDES


	)

334 
	#LTDC_CD_HDES
 
LTDC_CDSR_HDES


	)

335 
	#LTDC_CD_VSYNC
 
LTDC_CDSR_VSYNCS


	)

336 
	#LTDC_CD_HSYNC
 
LTDC_CDSR_HSYNCS


	)

339 
	#IS_LTDC_GET_CD
(
CD
Ë(((CDË=
LTDC_CD_VDES
Ë|| ((CDË=
LTDC_CD_HDES
Ë|| \

	)

340 ((
CD
Ë=
LTDC_CD_VSYNC
Ë|| ((CDË=
LTDC_CD_HSYNC
))

351 
	#LTDC_IT_LI
 
LTDC_IER_LIE


	)

352 
	#LTDC_IT_FU
 
LTDC_IER_FUIE


	)

353 
	#LTDC_IT_TERR
 
LTDC_IER_TERRIE


	)

354 
	#LTDC_IT_RR
 
LTDC_IER_RRIE


	)

356 
	#IS_LTDC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFF0Ë=0x00Ë&& ((ITË!0x00))

	)

366 
	#LTDC_FLAG_LI
 
LTDC_ISR_LIF


	)

367 
	#LTDC_FLAG_FU
 
LTDC_ISR_FUIF


	)

368 
	#LTDC_FLAG_TERR
 
LTDC_ISR_TERRIF


	)

369 
	#LTDC_FLAG_RR
 
LTDC_ISR_RRIF


	)

372 
	#IS_LTDC_FLAG
(
FLAG
Ë(((FLAGË=
LTDC_FLAG_LI
Ë|| ((FLAGË=
LTDC_FLAG_FU
Ë|| \

	)

373 ((
FLAG
Ë=
LTDC_FLAG_TERR
Ë|| ((FLAGË=
LTDC_FLAG_RR
))

382 
	#LTDC_Pixñf‹m©_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

383 
	#LTDC_Pixñf‹m©_RGB888
 ((
uöt32_t
)0x00000001)

	)

384 
	#LTDC_Pixñf‹m©_RGB565
 ((
uöt32_t
)0x00000002)

	)

385 
	#LTDC_Pixñf‹m©_ARGB1555
 ((
uöt32_t
)0x00000003)

	)

386 
	#LTDC_Pixñf‹m©_ARGB4444
 ((
uöt32_t
)0x00000004)

	)

387 
	#LTDC_Pixñf‹m©_L8
 ((
uöt32_t
)0x00000005)

	)

388 
	#LTDC_Pixñf‹m©_AL44
 ((
uöt32_t
)0x00000006)

	)

389 
	#LTDC_Pixñf‹m©_AL88
 ((
uöt32_t
)0x00000007)

	)

391 
	#IS_LTDC_Pixñf‹m©
(
Pixñf‹m©
Ë(((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_ARGB8888
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_RGB888
Ë|| \

	)

392 ((
Pixñf‹m©
Ë=
LTDC_Pixñf‹m©_RGB565
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_ARGB1555
) || \

393 ((
Pixñf‹m©
Ë=
LTDC_Pixñf‹m©_ARGB4444
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_L8
) || \

394 ((
Pixñf‹m©
Ë=
LTDC_Pixñf‹m©_AL44
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_AL88
))

404 
	#LTDC_BÀndögFa˘‹1_CA
 ((
uöt32_t
)0x00000400)

	)

405 
	#LTDC_BÀndögFa˘‹1_PAxCA
 ((
uöt32_t
)0x00000600)

	)

407 
	#IS_LTDC_BÀndögFa˘‹1
(
BÀndögFa˘‹1
Ë(((BÀndögFa˘‹1Ë=
LTDC_BÀndögFa˘‹1_CA
Ë|| ((BÀndögFa˘‹1Ë=
LTDC_BÀndögFa˘‹1_PAxCA
))

	)

417 
	#LTDC_BÀndögFa˘‹2_CA
 ((
uöt32_t
)0x00000005)

	)

418 
	#LTDC_BÀndögFa˘‹2_PAxCA
 ((
uöt32_t
)0x00000007)

	)

420 
	#IS_LTDC_BÀndögFa˘‹2
(
BÀndögFa˘‹2
Ë(((BÀndögFa˘‹2Ë=
LTDC_BÀndögFa˘‹2_CA
Ë|| ((BÀndögFa˘‹2Ë=
LTDC_BÀndögFa˘‹2_PAxCA
))

	)

432 
	#LTDC_STOPPosôi⁄
 ((
uöt32_t
)0x0000FFFF)

	)

433 
	#LTDC_STARTPosôi⁄
 ((
uöt32_t
)0x00000FFF)

	)

435 
	#LTDC_DeÁu…Cﬁ‹C⁄fig
 ((
uöt32_t
)0x000000FF)

	)

436 
	#LTDC_Cﬁ‹FømeBuf„r
 ((
uöt32_t
)0x00001FFF)

	)

437 
	#LTDC_LöeNumbî
 ((
uöt32_t
)0x000007FF)

	)

439 
	#IS_LTDC_HCONFIGST
(
HCONFIGST
Ë((HCONFIGSTË<
LTDC_STARTPosôi⁄
)

	)

440 
	#IS_LTDC_HCONFIGSP
(
HCONFIGSP
Ë((HCONFIGSPË<
LTDC_STOPPosôi⁄
)

	)

441 
	#IS_LTDC_VCONFIGST
(
VCONFIGST
Ë((VCONFIGSTË<
LTDC_STARTPosôi⁄
)

	)

442 
	#IS_LTDC_VCONFIGSP
(
VCONFIGSP
Ë((VCONFIGSPË<
LTDC_STOPPosôi⁄
)

	)

444 
	#IS_LTDC_DEFAULTCOLOR
(
DEFAULTCOLOR
Ë((DEFAULTCOLORË<
LTDC_DeÁu…Cﬁ‹C⁄fig
)

	)

446 
	#IS_LTDC_CFBP
(
CFBP
Ë((CFBPË<
LTDC_Cﬁ‹FømeBuf„r
)

	)

447 
	#IS_LTDC_CFBLL
(
CFBLL
Ë((CFBLLË<
LTDC_Cﬁ‹FømeBuf„r
)

	)

449 
	#IS_LTDC_CFBLNBR
(
CFBLNBR
Ë((CFBLNBRË<
LTDC_LöeNumbî
)

	)

461 
	#LTDC_cﬁ‹keyögC⁄fig
 ((
uöt32_t
)0x000000FF)

	)

463 
	#IS_LTDC_CKEYING
(
CKEYING
Ë((CKEYINGË<
LTDC_cﬁ‹keyögC⁄fig
)

	)

474 
	#LTDC_CLUTWR
 ((
uöt32_t
)0x000000FF)

	)

476 
	#IS_LTDC_CLUTWR
(
CLUTWR
Ë((CLUTWRË<
LTDC_CLUTWR
)

	)

482 
LTDC_DeInô
();

485 
LTDC_Inô
(
LTDC_InôTy≥Def
* 
LTDC_InôSåu˘
);

486 
LTDC_Såu˘Inô
(
LTDC_InôTy≥Def
* 
LTDC_InôSåu˘
);

487 
LTDC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

488 
LTDC_DôhîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

489 
LTDC_RGBTy≥Def
 
LTDC_GëRGBWidth
();

490 
LTDC_RGBSåu˘Inô
(
LTDC_RGBTy≥Def
* 
LTDC_RGB_InôSåu˘
);

491 
LTDC_LIPC⁄fig
(
uöt32_t
 
LTDC_LIPosôi⁄C⁄fig
);

492 
LTDC_RñﬂdC⁄fig
(
uöt32_t
 
LTDC_Rñﬂd
);

493 
LTDC_LayîInô
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_Layî_InôTy≥Def
* 
LTDC_Layî_InôSåu˘
);

494 
LTDC_LayîSåu˘Inô
(
LTDC_Layî_InôTy≥Def
 * 
LTDC_Layî_InôSåu˘
);

495 
LTDC_LayîCmd
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

496 
LTDC_PosTy≥Def
 
LTDC_GëPosSètus
();

497 
LTDC_PosSåu˘Inô
(
LTDC_PosTy≥Def
* 
LTDC_Pos_InôSåu˘
);

498 
FœgSètus
 
LTDC_GëCDSètus
(
uöt32_t
 
LTDC_CD
);

499 
LTDC_Cﬁ‹KeyögC⁄fig
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_Cﬁ‹Keyög_InôTy≥Def
* 
LTDC_cﬁ‹keyög_InôSåu˘
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

500 
LTDC_Cﬁ‹KeyögSåu˘Inô
(
LTDC_Cﬁ‹Keyög_InôTy≥Def
* 
LTDC_cﬁ‹keyög_InôSåu˘
);

501 
LTDC_CLUTCmd
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
LTDC_CLUTInô
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_CLUT_InôTy≥Def
* 
LTDC_CLUT_InôSåu˘
);

503 
LTDC_CLUTSåu˘Inô
(
LTDC_CLUT_InôTy≥Def
* 
LTDC_CLUT_InôSåu˘
);

504 
LTDC_LayîPosôi⁄
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt16_t
 
Off£tX
, uöt16_à
Off£tY
);

505 
LTDC_LayîAÕha
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt8_t
 
C⁄°™tAÕha
);

506 
LTDC_LayîAddªss
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
Addªss
);

507 
LTDC_LayîSize
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
Width
, uöt32_à
Height
);

508 
LTDC_LayîPixñF‹m©
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
PixñF‹m©
);

511 
LTDC_ITC⁄fig
(
uöt32_t
 
LTDC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

512 
FœgSètus
 
LTDC_GëFœgSètus
(
uöt32_t
 
LTDC_FLAG
);

513 
LTDC_CÀ¨Fœg
(
uöt32_t
 
LTDC_FLAG
);

514 
ITSètus
 
LTDC_GëITSètus
(
uöt32_t
 
LTDC_IT
);

515 
LTDC_CÀ¨ITPídögBô
(
uöt32_t
 
LTDC_IT
);

517 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_pwr.h

30 #i‚de‡
__STM32F4xx_PWR_H


31 
	#__STM32F4xx_PWR_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#PWR_PVDLevñ_0
 
PWR_CR_PLS_LEV0


	)

59 
	#PWR_PVDLevñ_1
 
PWR_CR_PLS_LEV1


	)

60 
	#PWR_PVDLevñ_2
 
PWR_CR_PLS_LEV2


	)

61 
	#PWR_PVDLevñ_3
 
PWR_CR_PLS_LEV3


	)

62 
	#PWR_PVDLevñ_4
 
PWR_CR_PLS_LEV4


	)

63 
	#PWR_PVDLevñ_5
 
PWR_CR_PLS_LEV5


	)

64 
	#PWR_PVDLevñ_6
 
PWR_CR_PLS_LEV6


	)

65 
	#PWR_PVDLevñ_7
 
PWR_CR_PLS_LEV7


	)

67 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_0
Ë|| ((LEVELË=
PWR_PVDLevñ_1
)|| \

	)

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2
Ë|| ((LEVELË=
PWR_PVDLevñ_3
)|| \

69 ((
LEVEL
Ë=
PWR_PVDLevñ_4
Ë|| ((LEVELË=
PWR_PVDLevñ_5
)|| \

70 ((
LEVEL
Ë=
PWR_PVDLevñ_6
Ë|| ((LEVELË=
PWR_PVDLevñ_7
))

79 
	#PWR_MaöReguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

80 
	#PWR_LowPowîReguœt‹_ON
 
PWR_CR_LPDS


	)

83 
	#PWR_Reguœt‹_ON
 
PWR_MaöReguœt‹_ON


	)

84 
	#PWR_Reguœt‹_LowPowî
 
PWR_LowPowîReguœt‹_ON


	)

86 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_MaöReguœt‹_ON
Ë|| \

	)

87 ((
REGULATOR
Ë=
PWR_LowPowîReguœt‹_ON
))

96 
	#PWR_MaöReguœt‹_UndîDrive_ON
 
PWR_CR_MRUDS


	)

97 
	#PWR_LowPowîReguœt‹_UndîDrive_ON
 ((
uöt32_t
)(
PWR_CR_LPDS
 | 
PWR_CR_LPUDS
))

	)

99 
	#IS_PWR_REGULATOR_UNDERDRIVE
(
REGULATOR
Ë(((REGULATORË=
PWR_MaöReguœt‹_UndîDrive_ON
Ë|| \

	)

100 ((
REGULATOR
Ë=
PWR_LowPowîReguœt‹_UndîDrive_ON
))

109 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

110 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

111 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

119 
	#PWR_Reguœt‹_Vﬁège_SˇÀ1
 ((
uöt32_t
)0x0000C000)

	)

120 
	#PWR_Reguœt‹_Vﬁège_SˇÀ2
 ((
uöt32_t
)0x00008000)

	)

121 
	#PWR_Reguœt‹_Vﬁège_SˇÀ3
 ((
uöt32_t
)0x00004000)

	)

122 
	#IS_PWR_REGULATOR_VOLTAGE
(
VOLTAGE
Ë(((VOLTAGEË=
PWR_Reguœt‹_Vﬁège_SˇÀ1
Ë|| \

	)

123 ((
VOLTAGE
Ë=
PWR_Reguœt‹_Vﬁège_SˇÀ2
) || \

124 ((
VOLTAGE
Ë=
PWR_Reguœt‹_Vﬁège_SˇÀ3
))

132 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

133 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

134 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

135 
	#PWR_FLAG_BRR
 
PWR_CSR_BRR


	)

136 
	#PWR_FLAG_VOSRDY
 
PWR_CSR_VOSRDY


	)

137 
	#PWR_FLAG_ODRDY
 
PWR_CSR_ODRDY


	)

138 
	#PWR_FLAG_ODSWRDY
 
PWR_CSR_ODSWRDY


	)

139 
	#PWR_FLAG_UDRDY
 
PWR_CSR_UDSWRDY


	)

142 
	#PWR_FLAG_REGRDY
 
PWR_FLAG_VOSRDY


	)

144 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

145 ((
FLAG
Ë=
PWR_FLAG_PVDO
Ë|| ((FLAGË=
PWR_FLAG_BRR
) || \

146 ((
FLAG
Ë=
PWR_FLAG_VOSRDY
Ë|| ((FLAGË=
PWR_FLAG_ODRDY
) || \

147 ((
FLAG
Ë=
PWR_FLAG_ODSWRDY
Ë|| ((FLAGË=
PWR_FLAG_UDRDY
))

150 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

151 ((
FLAG
Ë=
PWR_FLAG_UDRDY
))

165 
PWR_DeInô
();

168 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

171 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

172 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

175 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

178 
PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

179 
PWR_MaöReguœt‹ModeC⁄fig
(
uöt32_t
 
PWR_Reguœt‹_Vﬁège
);

180 
PWR_OvîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

181 
PWR_OvîDriveSWCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

182 
PWR_UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

183 
PWR_MaöReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

184 
PWR_LowReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

187 
PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

190 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

191 
PWR_E¡îUndîDriveSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

192 
PWR_E¡îSTANDBYMode
();

195 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

196 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

198 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_rcc.h

29 #i‚de‡
__STM32F4xx_RCC_H


30 
	#__STM32F4xx_RCC_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

50 
uöt32_t
 
SYSCLK_Fªquícy
;

51 
uöt32_t
 
HCLK_Fªquícy
;

52 
uöt32_t
 
PCLK1_Fªquícy
;

53 
uöt32_t
 
PCLK2_Fªquícy
;

54 }
	tRCC_ClocksTy≥Def
;

65 
	#RCC_HSE_OFF
 ((
uöt8_t
)0x00)

	)

66 
	#RCC_HSE_ON
 ((
uöt8_t
)0x01)

	)

67 
	#RCC_HSE_By∑ss
 ((
uöt8_t
)0x05)

	)

68 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
Ë|| \

	)

69 ((
HSE
Ë=
RCC_HSE_By∑ss
))

77 
	#RCC_LSE_LOWPOWER_MODE
 ((
uöt8_t
)0x00)

	)

78 
	#RCC_LSE_HIGHDRIVE_MODE
 ((
uöt8_t
)0x01)

	)

79 
	#IS_RCC_LSE_MODE
(
MODE
Ë(((MODEË=
RCC_LSE_LOWPOWER_MODE
Ë|| \

	)

80 ((
MODE
Ë=
RCC_LSE_HIGHDRIVE_MODE
))

88 
	#RCC_PLLSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

89 
	#RCC_PLLSour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

90 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI
Ë|| \

	)

91 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE
))

92 
	#IS_RCC_PLLM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

93 
	#IS_RCC_PLLN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

94 
	#IS_RCC_PLLP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

95 
	#IS_RCC_PLLQ_VALUE
(
VALUE
Ë((4 <(VALUE)Ë&& ((VALUEË<15))

	)

97 
	#IS_RCC_PLLI2SN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

98 
	#IS_RCC_PLLI2SR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

99 
	#IS_RCC_PLLI2SM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

101 
	#IS_RCC_PLLI2SQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

102 
	#IS_RCC_PLLSAIN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

103 
	#IS_RCC_PLLSAIQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

104 
	#IS_RCC_PLLSAIR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

106 
	#IS_RCC_PLLSAI_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

107 
	#IS_RCC_PLLI2S_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

109 
	#RCC_PLLSAIDivR_Div2
 ((
uöt32_t
)0x00000000)

	)

110 
	#RCC_PLLSAIDivR_Div4
 ((
uöt32_t
)0x00010000)

	)

111 
	#RCC_PLLSAIDivR_Div8
 ((
uöt32_t
)0x00020000)

	)

112 
	#RCC_PLLSAIDivR_Div16
 ((
uöt32_t
)0x00030000)

	)

113 
	#IS_RCC_PLLSAI_DIVR_VALUE
(
VALUE
Ë(((VALUEË=
RCC_PLLSAIDivR_Div2
Ë||\

	)

114 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div4
) ||\

115 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div8
) ||\

116 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div16
))

125 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

126 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

127 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

128 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

129 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

130 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

138 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

139 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

140 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

141 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

142 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

143 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

144 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

145 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

146 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

147 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
Ë|| \

	)

148 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

149 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

150 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

151 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

159 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

160 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00001000)

	)

161 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00001400)

	)

162 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00001800)

	)

163 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00001C00)

	)

164 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
Ë|| \

	)

165 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

166 ((
PCLK
Ë=
RCC_HCLK_Div16
))

174 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

175 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

176 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

177 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

178 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

179 
	#RCC_IT_PLLI2SRDY
 ((
uöt8_t
)0x20)

	)

180 
	#RCC_IT_PLLSAIRDY
 ((
uöt8_t
)0x40)

	)

181 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

183 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

184 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

185 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

186 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

187 ((
IT
Ë=
RCC_IT_PLLSAIRDY
Ë|| ((ITË=
RCC_IT_PLLI2SRDY
))

188 
	#IS_RCC_CLEAR_IT
(
IT
)((ITË!0x00)

	)

197 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

198 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

199 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

200 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
Ë|| \

	)

201 ((
LSE
Ë=
RCC_LSE_By∑ss
))

209 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

210 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

211 
	#RCC_RTCCLKSour˚_HSE_Div2
 ((
uöt32_t
)0x00020300)

	)

212 
	#RCC_RTCCLKSour˚_HSE_Div3
 ((
uöt32_t
)0x00030300)

	)

213 
	#RCC_RTCCLKSour˚_HSE_Div4
 ((
uöt32_t
)0x00040300)

	)

214 
	#RCC_RTCCLKSour˚_HSE_Div5
 ((
uöt32_t
)0x00050300)

	)

215 
	#RCC_RTCCLKSour˚_HSE_Div6
 ((
uöt32_t
)0x00060300)

	)

216 
	#RCC_RTCCLKSour˚_HSE_Div7
 ((
uöt32_t
)0x00070300)

	)

217 
	#RCC_RTCCLKSour˚_HSE_Div8
 ((
uöt32_t
)0x00080300)

	)

218 
	#RCC_RTCCLKSour˚_HSE_Div9
 ((
uöt32_t
)0x00090300)

	)

219 
	#RCC_RTCCLKSour˚_HSE_Div10
 ((
uöt32_t
)0x000A0300)

	)

220 
	#RCC_RTCCLKSour˚_HSE_Div11
 ((
uöt32_t
)0x000B0300)

	)

221 
	#RCC_RTCCLKSour˚_HSE_Div12
 ((
uöt32_t
)0x000C0300)

	)

222 
	#RCC_RTCCLKSour˚_HSE_Div13
 ((
uöt32_t
)0x000D0300)

	)

223 
	#RCC_RTCCLKSour˚_HSE_Div14
 ((
uöt32_t
)0x000E0300)

	)

224 
	#RCC_RTCCLKSour˚_HSE_Div15
 ((
uöt32_t
)0x000F0300)

	)

225 
	#RCC_RTCCLKSour˚_HSE_Div16
 ((
uöt32_t
)0x00100300)

	)

226 
	#RCC_RTCCLKSour˚_HSE_Div17
 ((
uöt32_t
)0x00110300)

	)

227 
	#RCC_RTCCLKSour˚_HSE_Div18
 ((
uöt32_t
)0x00120300)

	)

228 
	#RCC_RTCCLKSour˚_HSE_Div19
 ((
uöt32_t
)0x00130300)

	)

229 
	#RCC_RTCCLKSour˚_HSE_Div20
 ((
uöt32_t
)0x00140300)

	)

230 
	#RCC_RTCCLKSour˚_HSE_Div21
 ((
uöt32_t
)0x00150300)

	)

231 
	#RCC_RTCCLKSour˚_HSE_Div22
 ((
uöt32_t
)0x00160300)

	)

232 
	#RCC_RTCCLKSour˚_HSE_Div23
 ((
uöt32_t
)0x00170300)

	)

233 
	#RCC_RTCCLKSour˚_HSE_Div24
 ((
uöt32_t
)0x00180300)

	)

234 
	#RCC_RTCCLKSour˚_HSE_Div25
 ((
uöt32_t
)0x00190300)

	)

235 
	#RCC_RTCCLKSour˚_HSE_Div26
 ((
uöt32_t
)0x001A0300)

	)

236 
	#RCC_RTCCLKSour˚_HSE_Div27
 ((
uöt32_t
)0x001B0300)

	)

237 
	#RCC_RTCCLKSour˚_HSE_Div28
 ((
uöt32_t
)0x001C0300)

	)

238 
	#RCC_RTCCLKSour˚_HSE_Div29
 ((
uöt32_t
)0x001D0300)

	)

239 
	#RCC_RTCCLKSour˚_HSE_Div30
 ((
uöt32_t
)0x001E0300)

	)

240 
	#RCC_RTCCLKSour˚_HSE_Div31
 ((
uöt32_t
)0x001F0300)

	)

241 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
Ë|| \

	)

242 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

243 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div2
) || \

244 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div3
) || \

245 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div4
) || \

246 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div5
) || \

247 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div6
) || \

248 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div7
) || \

249 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div8
) || \

250 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div9
) || \

251 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div10
) || \

252 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div11
) || \

253 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div12
) || \

254 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div13
) || \

255 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div14
) || \

256 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div15
) || \

257 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div16
) || \

258 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div17
) || \

259 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div18
) || \

260 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div19
) || \

261 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div20
) || \

262 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div21
) || \

263 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div22
) || \

264 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div23
) || \

265 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div24
) || \

266 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div25
) || \

267 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div26
) || \

268 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div27
) || \

269 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div28
) || \

270 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div29
) || \

271 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div30
) || \

272 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div31
))

280 
	#RCC_I2S2CLKSour˚_PLLI2S
 ((
uöt8_t
)0x00)

	)

281 
	#RCC_I2S2CLKSour˚_Ext
 ((
uöt8_t
)0x01)

	)

283 
	#IS_RCC_I2SCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_PLLI2S
Ë|| ((SOURCEË=
RCC_I2S2CLKSour˚_Ext
))

	)

291 
	#RCC_SAIACLKSour˚_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

292 
	#RCC_SAIACLKSour˚_PLLI2S
 ((
uöt32_t
)0x00100000)

	)

293 
	#RCC_SAIACLKSour˚_Ext
 ((
uöt32_t
)0x00200000)

	)

295 
	#IS_RCC_SAIACLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIACLKSour˚_PLLI2S
Ë||\

	)

296 ((
SOURCE
Ë=
RCC_SAIACLKSour˚_PLLSAI
) ||\

297 ((
SOURCE
Ë=
RCC_SAIACLKSour˚_Ext
))

305 
	#RCC_SAIBCLKSour˚_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

306 
	#RCC_SAIBCLKSour˚_PLLI2S
 ((
uöt32_t
)0x00400000)

	)

307 
	#RCC_SAIBCLKSour˚_Ext
 ((
uöt32_t
)0x00800000)

	)

309 
	#IS_RCC_SAIBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIBCLKSour˚_PLLI2S
Ë||\

	)

310 ((
SOURCE
Ë=
RCC_SAIBCLKSour˚_PLLSAI
) ||\

311 ((
SOURCE
Ë=
RCC_SAIBCLKSour˚_Ext
))

319 
	#RCC_TIMPªscDeß˘iv©ed
 ((
uöt8_t
)0x00)

	)

320 
	#RCC_TIMPªscA˘iv©ed
 ((
uöt8_t
)0x01)

	)

322 
	#IS_RCC_TIMCLK_PRESCALER
(
VALUE
Ë(((VALUEË=
RCC_TIMPªscDeß˘iv©ed
Ë|| ((VALUEË=
RCC_TIMPªscA˘iv©ed
))

	)

330 
	#RCC_AHB1Pîùh_GPIOA
 ((
uöt32_t
)0x00000001)

	)

331 
	#RCC_AHB1Pîùh_GPIOB
 ((
uöt32_t
)0x00000002)

	)

332 
	#RCC_AHB1Pîùh_GPIOC
 ((
uöt32_t
)0x00000004)

	)

333 
	#RCC_AHB1Pîùh_GPIOD
 ((
uöt32_t
)0x00000008)

	)

334 
	#RCC_AHB1Pîùh_GPIOE
 ((
uöt32_t
)0x00000010)

	)

335 
	#RCC_AHB1Pîùh_GPIOF
 ((
uöt32_t
)0x00000020)

	)

336 
	#RCC_AHB1Pîùh_GPIOG
 ((
uöt32_t
)0x00000040)

	)

337 
	#RCC_AHB1Pîùh_GPIOH
 ((
uöt32_t
)0x00000080)

	)

338 
	#RCC_AHB1Pîùh_GPIOI
 ((
uöt32_t
)0x00000100)

	)

339 
	#RCC_AHB1Pîùh_GPIOJ
 ((
uöt32_t
)0x00000200)

	)

340 
	#RCC_AHB1Pîùh_GPIOK
 ((
uöt32_t
)0x00000400)

	)

341 
	#RCC_AHB1Pîùh_CRC
 ((
uöt32_t
)0x00001000)

	)

342 
	#RCC_AHB1Pîùh_FLITF
 ((
uöt32_t
)0x00008000)

	)

343 
	#RCC_AHB1Pîùh_SRAM1
 ((
uöt32_t
)0x00010000)

	)

344 
	#RCC_AHB1Pîùh_SRAM2
 ((
uöt32_t
)0x00020000)

	)

345 
	#RCC_AHB1Pîùh_BKPSRAM
 ((
uöt32_t
)0x00040000)

	)

346 
	#RCC_AHB1Pîùh_SRAM3
 ((
uöt32_t
)0x00080000)

	)

347 
	#RCC_AHB1Pîùh_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

348 
	#RCC_AHB1Pîùh_DMA1
 ((
uöt32_t
)0x00200000)

	)

349 
	#RCC_AHB1Pîùh_DMA2
 ((
uöt32_t
)0x00400000)

	)

350 
	#RCC_AHB1Pîùh_DMA2D
 ((
uöt32_t
)0x00800000)

	)

351 
	#RCC_AHB1Pîùh_ETH_MAC
 ((
uöt32_t
)0x02000000)

	)

352 
	#RCC_AHB1Pîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x04000000)

	)

353 
	#RCC_AHB1Pîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x08000000)

	)

354 
	#RCC_AHB1Pîùh_ETH_MAC_PTP
 ((
uöt32_t
)0x10000000)

	)

355 
	#RCC_AHB1Pîùh_OTG_HS
 ((
uöt32_t
)0x20000000)

	)

356 
	#RCC_AHB1Pîùh_OTG_HS_ULPI
 ((
uöt32_t
)0x40000000)

	)

358 
	#IS_RCC_AHB1_CLOCK_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x810BE800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

359 
	#IS_RCC_AHB1_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xDD1FE800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

360 
	#IS_RCC_AHB1_LPMODE_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81106800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

369 
	#RCC_AHB2Pîùh_DCMI
 ((
uöt32_t
)0x00000001)

	)

370 
	#RCC_AHB2Pîùh_CRYP
 ((
uöt32_t
)0x00000010)

	)

371 
	#RCC_AHB2Pîùh_HASH
 ((
uöt32_t
)0x00000020)

	)

372 
	#RCC_AHB2Pîùh_RNG
 ((
uöt32_t
)0x00000040)

	)

373 
	#RCC_AHB2Pîùh_OTG_FS
 ((
uöt32_t
)0x00000080)

	)

374 
	#IS_RCC_AHB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFF0EË=0x00Ë&& ((PERIPHË!0x00))

	)

382 #i‡
deföed
 (
STM32F40_41xxx
)

383 
	#RCC_AHB3Pîùh_FSMC
 ((
uöt32_t
)0x00000001)

	)

386 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

387 
	#RCC_AHB3Pîùh_FMC
 ((
uöt32_t
)0x00000001)

	)

390 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFEË=0x00Ë&& ((PERIPHË!0x00))

	)

398 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

399 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

400 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

401 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

402 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

403 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

404 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

405 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

406 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

407 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

408 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

409 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

410 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

411 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

412 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

413 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

414 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

415 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

416 
	#RCC_APB1Pîùh_I2C3
 ((
uöt32_t
)0x00800000)

	)

417 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

418 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

419 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

420 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

421 
	#RCC_APB1Pîùh_UART7
 ((
uöt32_t
)0x40000000)

	)

422 
	#RCC_APB1Pîùh_UART8
 ((
uöt32_t
)0x80000000)

	)

423 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x09013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

431 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000001)

	)

432 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00000002)

	)

433 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00000010)

	)

434 
	#RCC_APB2Pîùh_USART6
 ((
uöt32_t
)0x00000020)

	)

435 
	#RCC_APB2Pîùh_ADC
 ((
uöt32_t
)0x00000100)

	)

436 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000100)

	)

437 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000200)

	)

438 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00000400)

	)

439 
	#RCC_APB2Pîùh_SDIO
 ((
uöt32_t
)0x00000800)

	)

440 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

441 
	#RCC_APB2Pîùh_SPI4
 ((
uöt32_t
)0x00002000)

	)

442 
	#RCC_APB2Pîùh_SYSCFG
 ((
uöt32_t
)0x00004000)

	)

443 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00010000)

	)

444 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00020000)

	)

445 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00040000)

	)

446 
	#RCC_APB2Pîùh_SPI5
 ((
uöt32_t
)0x00100000)

	)

447 
	#RCC_APB2Pîùh_SPI6
 ((
uöt32_t
)0x00200000)

	)

448 
	#RCC_APB2Pîùh_SAI1
 ((
uöt32_t
)0x00400000)

	)

449 
	#RCC_APB2Pîùh_LTDC
 ((
uöt32_t
)0x04000000)

	)

451 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFB8880CCË=0x00Ë&& ((PERIPHË!0x00))

	)

452 
	#IS_RCC_APB2_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFB8886CCË=0x00Ë&& ((PERIPHË!0x00))

	)

461 
	#RCC_MCO1Sour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

462 
	#RCC_MCO1Sour˚_LSE
 ((
uöt32_t
)0x00200000)

	)

463 
	#RCC_MCO1Sour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

464 
	#RCC_MCO1Sour˚_PLLCLK
 ((
uöt32_t
)0x00600000)

	)

465 
	#RCC_MCO1Div_1
 ((
uöt32_t
)0x00000000)

	)

466 
	#RCC_MCO1Div_2
 ((
uöt32_t
)0x04000000)

	)

467 
	#RCC_MCO1Div_3
 ((
uöt32_t
)0x05000000)

	)

468 
	#RCC_MCO1Div_4
 ((
uöt32_t
)0x06000000)

	)

469 
	#RCC_MCO1Div_5
 ((
uöt32_t
)0x07000000)

	)

470 
	#IS_RCC_MCO1SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO1Sour˚_HSI
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_LSE
Ë|| \

	)

471 ((
SOURCE
Ë=
RCC_MCO1Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_PLLCLK
))

473 
	#IS_RCC_MCO1DIV
(
DIV
Ë(((DIVË=
RCC_MCO1Div_1
Ë|| ((DIVË=
RCC_MCO1Div_2
Ë|| \

	)

474 ((
DIV
Ë=
RCC_MCO1Div_3
Ë|| ((DIVË=
RCC_MCO1Div_4
) || \

475 ((
DIV
Ë=
RCC_MCO1Div_5
))

483 
	#RCC_MCO2Sour˚_SYSCLK
 ((
uöt32_t
)0x00000000)

	)

484 
	#RCC_MCO2Sour˚_PLLI2SCLK
 ((
uöt32_t
)0x40000000)

	)

485 
	#RCC_MCO2Sour˚_HSE
 ((
uöt32_t
)0x80000000)

	)

486 
	#RCC_MCO2Sour˚_PLLCLK
 ((
uöt32_t
)0xC0000000)

	)

487 
	#RCC_MCO2Div_1
 ((
uöt32_t
)0x00000000)

	)

488 
	#RCC_MCO2Div_2
 ((
uöt32_t
)0x20000000)

	)

489 
	#RCC_MCO2Div_3
 ((
uöt32_t
)0x28000000)

	)

490 
	#RCC_MCO2Div_4
 ((
uöt32_t
)0x30000000)

	)

491 
	#RCC_MCO2Div_5
 ((
uöt32_t
)0x38000000)

	)

492 
	#IS_RCC_MCO2SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO2Sour˚_SYSCLK
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLI2SCLK
)|| \

	)

493 ((
SOURCE
Ë=
RCC_MCO2Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLCLK
))

495 
	#IS_RCC_MCO2DIV
(
DIV
Ë(((DIVË=
RCC_MCO2Div_1
Ë|| ((DIVË=
RCC_MCO2Div_2
Ë|| \

	)

496 ((
DIV
Ë=
RCC_MCO2Div_3
Ë|| ((DIVË=
RCC_MCO2Div_4
) || \

497 ((
DIV
Ë=
RCC_MCO2Div_5
))

505 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

506 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

507 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

508 
	#RCC_FLAG_PLLI2SRDY
 ((
uöt8_t
)0x3B)

	)

509 
	#RCC_FLAG_PLLSAIRDY
 ((
uöt8_t
)0x3D)

	)

510 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

511 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

512 
	#RCC_FLAG_BORRST
 ((
uöt8_t
)0x79)

	)

513 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

514 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

515 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

516 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

517 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

518 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

520 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

521 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

522 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_BORRST
) || \

523 ((
FLAG
Ë=
RCC_FLAG_PINRST
Ë|| ((FLAGË=
RCC_FLAG_PORRST
) || \

524 ((
FLAG
Ë=
RCC_FLAG_SFTRST
Ë|| ((FLAGË=
RCC_FLAG_IWDGRST
)|| \

525 ((
FLAG
Ë=
RCC_FLAG_WWDGRST
Ë|| ((FLAGË=
RCC_FLAG_LPWRRST
)|| \

526 ((
FLAG
Ë=
RCC_FLAG_PLLI2SRDY
)|| ((FLAGË=
RCC_FLAG_PLLSAIRDY
))

528 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

541 
RCC_DeInô
();

544 
RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
);

545 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

546 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

547 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

548 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

549 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

550 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
);

551 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

553 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
)

554 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
);

555 #ñi‡
deföed
 (
STM32F411xE
)

556 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
, uöt32_à
PLLI2SM
);

557 #ñi‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

558 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
);

562 
RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

563 
RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIN
, uöt32_à
PLLSAIQ
, uöt32_à
PLLSAIR
);

564 
RCC_PLLSAICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

565 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

566 
RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
);

567 
RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
);

570 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

571 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

572 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

573 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

574 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

575 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

578 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

579 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

580 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

581 
RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
);

582 
RCC_SAIPLLI2SClkDivC⁄fig
(
uöt32_t
 
RCC_PLLI2SDivQ
);

583 
RCC_SAIPLLSAIClkDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivQ
);

584 
RCC_SAIBlockACLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockACLKSour˚
);

585 
RCC_SAIBlockBCLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockBCLKSour˚
);

586 
RCC_LTDCCLKDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivR
);

587 
RCC_TIMCLKPªsC⁄fig
(
uöt32_t
 
RCC_TIMCLKPªsˇÀr
);

589 
RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

590 
RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

591 
RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

592 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

593 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

595 
RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

596 
RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

597 
RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

598 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

599 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

601 
RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

602 
RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

603 
RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

604 
RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

605 
RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

607 
RCC_LSEModeC⁄fig
(
uöt8_t
 
Mode
);

610 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

611 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

612 
RCC_CÀ¨Fœg
();

613 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

614 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

616 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_rng.h

30 #i‚de‡
__STM32F4xx_RNG_H


31 
	#__STM32F4xx_RNG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#RNG_FLAG_DRDY
 ((
uöt8_t
)0x0001Ë

	)

59 
	#RNG_FLAG_CECS
 ((
uöt8_t
)0x0002Ë

	)

60 
	#RNG_FLAG_SECS
 ((
uöt8_t
)0x0004Ë

	)

62 
	#IS_RNG_GET_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_DRDY
Ë|| \

	)

63 ((
RNG_FLAG
Ë=
RNG_FLAG_CECS
) || \

64 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

65 
	#IS_RNG_CLEAR_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_CECS
Ë|| \

	)

66 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

74 
	#RNG_IT_CEI
 ((
uöt8_t
)0x20Ë

	)

75 
	#RNG_IT_SEI
 ((
uöt8_t
)0x40Ë

	)

77 
	#IS_RNG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x9FË=0x00Ë&& ((ITË!0x00))

	)

78 
	#IS_RNG_GET_IT
(
RNG_IT
Ë(((RNG_ITË=
RNG_IT_CEI
Ë|| ((RNG_ITË=
RNG_IT_SEI
))

	)

91 
RNG_DeInô
();

94 
RNG_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

97 
uöt32_t
 
RNG_GëR™domNumbî
();

100 
RNG_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

101 
FœgSètus
 
RNG_GëFœgSètus
(
uöt8_t
 
RNG_FLAG
);

102 
RNG_CÀ¨Fœg
(
uöt8_t
 
RNG_FLAG
);

103 
ITSètus
 
RNG_GëITSètus
(
uöt8_t
 
RNG_IT
);

104 
RNG_CÀ¨ITPídögBô
(
uöt8_t
 
RNG_IT
);

106 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_rtc.h

30 #i‚de‡
__STM32F4xx_RTC_H


31 
	#__STM32F4xx_RTC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
RTC_HourF‹m©
;

58 
uöt32_t
 
RTC_AsynchPªdiv
;

61 
uöt32_t
 
RTC_SynchPªdiv
;

63 }
	tRTC_InôTy≥Def
;

70 
uöt8_t
 
RTC_Hours
;

75 
uöt8_t
 
RTC_Möuãs
;

78 
uöt8_t
 
RTC_Sec⁄ds
;

81 
uöt8_t
 
RTC_H12
;

83 }
	tRTC_TimeTy≥Def
;

90 
uöt8_t
 
RTC_WìkDay
;

93 
uöt8_t
 
RTC_M⁄th
;

96 
uöt8_t
 
RTC_D©e
;

99 
uöt8_t
 
RTC_Yór
;

101 }
	tRTC_D©eTy≥Def
;

108 
RTC_TimeTy≥Def
 
RTC_AœrmTime
;

110 
uöt32_t
 
RTC_AœrmMask
;

113 
uöt32_t
 
RTC_AœrmD©eWìkDaySñ
;

116 
uöt8_t
 
RTC_AœrmD©eWìkDay
;

121 }
	tRTC_AœrmTy≥Def
;

133 
	#RTC_HourF‹m©_24
 ((
uöt32_t
)0x00000000)

	)

134 
	#RTC_HourF‹m©_12
 ((
uöt32_t
)0x00000040)

	)

135 
	#IS_RTC_HOUR_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_HourF‹m©_12
Ë|| \

	)

136 ((
FORMAT
Ë=
RTC_HourF‹m©_24
))

144 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7F)

	)

154 
	#IS_RTC_SYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7FFF)

	)

163 
	#IS_RTC_HOUR12
(
HOUR
Ë(((HOURË> 0Ë&& ((HOURË<12))

	)

164 
	#IS_RTC_HOUR24
(
HOUR
Ë((HOURË<23)

	)

165 
	#IS_RTC_MINUTES
(
MINUTES
Ë((MINUTESË<59)

	)

166 
	#IS_RTC_SECONDS
(
SECONDS
Ë((SECONDSË<59)

	)

175 
	#RTC_H12_AM
 ((
uöt8_t
)0x00)

	)

176 
	#RTC_H12_PM
 ((
uöt8_t
)0x40)

	)

177 
	#IS_RTC_H12
(
PM
Ë(((PMË=
RTC_H12_AM
Ë|| ((PMË=
RTC_H12_PM
))

	)

186 
	#IS_RTC_YEAR
(
YEAR
Ë((YEARË<99)

	)

197 
	#RTC_M⁄th_J™u¨y
 ((
uöt8_t
)0x01)

	)

198 
	#RTC_M⁄th_Febru¨y
 ((
uöt8_t
)0x02)

	)

199 
	#RTC_M⁄th_M¨ch
 ((
uöt8_t
)0x03)

	)

200 
	#RTC_M⁄th_A¥û
 ((
uöt8_t
)0x04)

	)

201 
	#RTC_M⁄th_May
 ((
uöt8_t
)0x05)

	)

202 
	#RTC_M⁄th_Ju√
 ((
uöt8_t
)0x06)

	)

203 
	#RTC_M⁄th_July
 ((
uöt8_t
)0x07)

	)

204 
	#RTC_M⁄th_Augu°
 ((
uöt8_t
)0x08)

	)

205 
	#RTC_M⁄th_Sïãmbî
 ((
uöt8_t
)0x09)

	)

206 
	#RTC_M⁄th_O˘obî
 ((
uöt8_t
)0x10)

	)

207 
	#RTC_M⁄th_Novembî
 ((
uöt8_t
)0x11)

	)

208 
	#RTC_M⁄th_De˚mbî
 ((
uöt8_t
)0x12)

	)

209 
	#IS_RTC_MONTH
(
MONTH
Ë(((MONTHË>1Ë&& ((MONTHË<12))

	)

210 
	#IS_RTC_DATE
(
DATE
Ë(((DATEË>1Ë&& ((DATEË<31))

	)

220 
	#RTC_Wìkday_M⁄day
 ((
uöt8_t
)0x01)

	)

221 
	#RTC_Wìkday_Tuesday
 ((
uöt8_t
)0x02)

	)

222 
	#RTC_Wìkday_Wed√sday
 ((
uöt8_t
)0x03)

	)

223 
	#RTC_Wìkday_Thursday
 ((
uöt8_t
)0x04)

	)

224 
	#RTC_Wìkday_Friday
 ((
uöt8_t
)0x05)

	)

225 
	#RTC_Wìkday_S©urday
 ((
uöt8_t
)0x06)

	)

226 
	#RTC_Wìkday_Sunday
 ((
uöt8_t
)0x07)

	)

227 
	#IS_RTC_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
Ë|| \

	)

228 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

229 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

230 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

231 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

232 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

233 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

242 
	#IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
DATE
Ë(((DATEË> 0Ë&& ((DATEË<31))

	)

243 
	#IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
Ë|| \

	)

244 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

245 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

246 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

247 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

248 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

249 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

259 
	#RTC_AœrmD©eWìkDaySñ_D©e
 ((
uöt32_t
)0x00000000)

	)

260 
	#RTC_AœrmD©eWìkDaySñ_WìkDay
 ((
uöt32_t
)0x40000000)

	)

262 
	#IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
SEL
Ë(((SELË=
RTC_AœrmD©eWìkDaySñ_D©e
Ë|| \

	)

263 ((
SEL
Ë=
RTC_AœrmD©eWìkDaySñ_WìkDay
))

273 
	#RTC_AœrmMask_N⁄e
 ((
uöt32_t
)0x00000000)

	)

274 
	#RTC_AœrmMask_D©eWìkDay
 ((
uöt32_t
)0x80000000)

	)

275 
	#RTC_AœrmMask_Hours
 ((
uöt32_t
)0x00800000)

	)

276 
	#RTC_AœrmMask_Möuãs
 ((
uöt32_t
)0x00008000)

	)

277 
	#RTC_AœrmMask_Sec⁄ds
 ((
uöt32_t
)0x00000080)

	)

278 
	#RTC_AœrmMask_AŒ
 ((
uöt32_t
)0x80808080)

	)

279 
	#IS_ALARM_MASK
(
MASK
Ë(((MASKË& 0x7F7F7F7FË=(
uöt32_t
)
RESET
)

	)

288 
	#RTC_Aœrm_A
 ((
uöt32_t
)0x00000100)

	)

289 
	#RTC_Aœrm_B
 ((
uöt32_t
)0x00000200)

	)

290 
	#IS_RTC_ALARM
(
ALARM
Ë(((ALARMË=
RTC_Aœrm_A
Ë|| ((ALARMË=
RTC_Aœrm_B
))

	)

291 
	#IS_RTC_CMD_ALARM
(
ALARM
Ë(((ALARMË& (
RTC_Aœrm_A
 | 
RTC_Aœrm_B
)Ë!(
uöt32_t
)
RESET
)

	)

300 
	#RTC_AœrmSubSec⁄dMask_AŒ
 ((
uöt32_t
)0x00000000Ë

	)

303 
	#RTC_AœrmSubSec⁄dMask_SS14_1
 ((
uöt32_t
)0x01000000Ë

	)

305 
	#RTC_AœrmSubSec⁄dMask_SS14_2
 ((
uöt32_t
)0x02000000Ë

	)

307 
	#RTC_AœrmSubSec⁄dMask_SS14_3
 ((
uöt32_t
)0x03000000Ë

	)

309 
	#RTC_AœrmSubSec⁄dMask_SS14_4
 ((
uöt32_t
)0x04000000Ë

	)

311 
	#RTC_AœrmSubSec⁄dMask_SS14_5
 ((
uöt32_t
)0x05000000Ë

	)

313 
	#RTC_AœrmSubSec⁄dMask_SS14_6
 ((
uöt32_t
)0x06000000Ë

	)

315 
	#RTC_AœrmSubSec⁄dMask_SS14_7
 ((
uöt32_t
)0x07000000Ë

	)

317 
	#RTC_AœrmSubSec⁄dMask_SS14_8
 ((
uöt32_t
)0x08000000Ë

	)

319 
	#RTC_AœrmSubSec⁄dMask_SS14_9
 ((
uöt32_t
)0x09000000Ë

	)

321 
	#RTC_AœrmSubSec⁄dMask_SS14_10
 ((
uöt32_t
)0x0A000000Ë

	)

323 
	#RTC_AœrmSubSec⁄dMask_SS14_11
 ((
uöt32_t
)0x0B000000Ë

	)

325 
	#RTC_AœrmSubSec⁄dMask_SS14_12
 ((
uöt32_t
)0x0C000000Ë

	)

327 
	#RTC_AœrmSubSec⁄dMask_SS14_13
 ((
uöt32_t
)0x0D000000Ë

	)

329 
	#RTC_AœrmSubSec⁄dMask_SS14
 ((
uöt32_t
)0x0E000000Ë

	)

331 
	#RTC_AœrmSubSec⁄dMask_N⁄e
 ((
uöt32_t
)0x0F000000Ë

	)

333 
	#IS_RTC_ALARM_SUB_SECOND_MASK
(
MASK
Ë(((MASKË=
RTC_AœrmSubSec⁄dMask_AŒ
Ë|| \

	)

334 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_1
) || \

335 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_2
) || \

336 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_3
) || \

337 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_4
) || \

338 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_5
) || \

339 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_6
) || \

340 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_7
) || \

341 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_8
) || \

342 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_9
) || \

343 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_10
) || \

344 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_11
) || \

345 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_12
) || \

346 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_13
) || \

347 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14
) || \

348 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_N⁄e
))

357 
	#IS_RTC_ALARM_SUB_SECOND_VALUE
(
VALUE
Ë((VALUEË<0x00007FFF)

	)

366 
	#RTC_WakeUpClock_RTCCLK_Div16
 ((
uöt32_t
)0x00000000)

	)

367 
	#RTC_WakeUpClock_RTCCLK_Div8
 ((
uöt32_t
)0x00000001)

	)

368 
	#RTC_WakeUpClock_RTCCLK_Div4
 ((
uöt32_t
)0x00000002)

	)

369 
	#RTC_WakeUpClock_RTCCLK_Div2
 ((
uöt32_t
)0x00000003)

	)

370 
	#RTC_WakeUpClock_CK_SPRE_16bôs
 ((
uöt32_t
)0x00000004)

	)

371 
	#RTC_WakeUpClock_CK_SPRE_17bôs
 ((
uöt32_t
)0x00000006)

	)

372 
	#IS_RTC_WAKEUP_CLOCK
(
CLOCK
Ë(((CLOCKË=
RTC_WakeUpClock_RTCCLK_Div16
Ë|| \

	)

373 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div8
) || \

374 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div4
) || \

375 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div2
) || \

376 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_16bôs
) || \

377 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_17bôs
))

378 
	#IS_RTC_WAKEUP_COUNTER
(
COUNTER
Ë((COUNTERË<0xFFFF)

	)

386 
	#RTC_TimeSèmpEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

387 
	#RTC_TimeSèmpEdge_FÆlög
 ((
uöt32_t
)0x00000008)

	)

388 
	#IS_RTC_TIMESTAMP_EDGE
(
EDGE
Ë(((EDGEË=
RTC_TimeSèmpEdge_Risög
Ë|| \

	)

389 ((
EDGE
Ë=
RTC_TimeSèmpEdge_FÆlög
))

397 
	#RTC_Ouçut_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

398 
	#RTC_Ouçut_AœrmA
 ((
uöt32_t
)0x00200000)

	)

399 
	#RTC_Ouçut_AœrmB
 ((
uöt32_t
)0x00400000)

	)

400 
	#RTC_Ouçut_WakeUp
 ((
uöt32_t
)0x00600000)

	)

402 
	#IS_RTC_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_Ouçut_DißbÀ
Ë|| \

	)

403 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmA
) || \

404 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmB
) || \

405 ((
OUTPUT
Ë=
RTC_Ouçut_WakeUp
))

414 
	#RTC_OuçutPﬁ¨ôy_High
 ((
uöt32_t
)0x00000000)

	)

415 
	#RTC_OuçutPﬁ¨ôy_Low
 ((
uöt32_t
)0x00100000)

	)

416 
	#IS_RTC_OUTPUT_POL
(
POL
Ë(((POLË=
RTC_OuçutPﬁ¨ôy_High
Ë|| \

	)

417 ((
POL
Ë=
RTC_OuçutPﬁ¨ôy_Low
))

426 
	#RTC_CÆibSign_Posôive
 ((
uöt32_t
)0x00000000)

	)

427 
	#RTC_CÆibSign_Neg©ive
 ((
uöt32_t
)0x00000080)

	)

428 
	#IS_RTC_CALIB_SIGN
(
SIGN
Ë(((SIGNË=
RTC_CÆibSign_Posôive
Ë|| \

	)

429 ((
SIGN
Ë=
RTC_CÆibSign_Neg©ive
))

430 
	#IS_RTC_CALIB_VALUE
(
VALUE
Ë((VALUEË< 0x20)

	)

439 
	#RTC_CÆibOuçut_512Hz
 ((
uöt32_t
)0x00000000)

	)

440 
	#RTC_CÆibOuçut_1Hz
 ((
uöt32_t
)0x00080000)

	)

441 
	#IS_RTC_CALIB_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_CÆibOuçut_512Hz
Ë|| \

	)

442 ((
OUTPUT
Ë=
RTC_CÆibOuçut_1Hz
))

450 
	#RTC_SmoŸhCÆibPîiod_32£c
 ((
uöt32_t
)0x00000000Ë

	)

452 
	#RTC_SmoŸhCÆibPîiod_16£c
 ((
uöt32_t
)0x00002000Ë

	)

454 
	#RTC_SmoŸhCÆibPîiod_8£c
 ((
uöt32_t
)0x00004000Ë

	)

456 
	#IS_RTC_SMOOTH_CALIB_PERIOD
(
PERIOD
Ë(((PERIODË=
RTC_SmoŸhCÆibPîiod_32£c
Ë|| \

	)

457 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_16£c
) || \

458 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_8£c
))

467 
	#RTC_SmoŸhCÆibPlusPul£s_Së
 ((
uöt32_t
)0x00008000Ë

	)

470 
	#RTC_SmoŸhCÆibPlusPul£s_Re£t
 ((
uöt32_t
)0x00000000Ë

	)

472 
	#IS_RTC_SMOOTH_CALIB_PLUS
(
PLUS
Ë(((PLUSË=
RTC_SmoŸhCÆibPlusPul£s_Së
Ë|| \

	)

473 ((
PLUS
Ë=
RTC_SmoŸhCÆibPlusPul£s_Re£t
))

482 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
VALUE
Ë((VALUEË<0x000001FF)

	)

491 
	#RTC_DayLightSavög_SUB1H
 ((
uöt32_t
)0x00020000)

	)

492 
	#RTC_DayLightSavög_ADD1H
 ((
uöt32_t
)0x00010000)

	)

493 
	#IS_RTC_DAYLIGHT_SAVING
(
SAVE
Ë(((SAVEË=
RTC_DayLightSavög_SUB1H
Ë|| \

	)

494 ((
SAVE
Ë=
RTC_DayLightSavög_ADD1H
))

496 
	#RTC_St‹eO≥øti⁄_Re£t
 ((
uöt32_t
)0x00000000)

	)

497 
	#RTC_St‹eO≥øti⁄_Së
 ((
uöt32_t
)0x00040000)

	)

498 
	#IS_RTC_STORE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
RTC_St‹eO≥øti⁄_Re£t
Ë|| \

	)

499 ((
OPERATION
Ë=
RTC_St‹eO≥øti⁄_Së
))

507 
	#RTC_Tam≥rTriggî_RisögEdge
 ((
uöt32_t
)0x00000000)

	)

508 
	#RTC_Tam≥rTriggî_FÆlögEdge
 ((
uöt32_t
)0x00000001)

	)

509 
	#RTC_Tam≥rTriggî_LowLevñ
 ((
uöt32_t
)0x00000000)

	)

510 
	#RTC_Tam≥rTriggî_HighLevñ
 ((
uöt32_t
)0x00000001)

	)

511 
	#IS_RTC_TAMPER_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
RTC_Tam≥rTriggî_RisögEdge
Ë|| \

	)

512 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_FÆlögEdge
) || \

513 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_LowLevñ
) || \

514 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_HighLevñ
))

523 
	#RTC_Tam≥rFûãr_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

525 
	#RTC_Tam≥rFûãr_2Sam∂e
 ((
uöt32_t
)0x00000800Ë

	)

527 
	#RTC_Tam≥rFûãr_4Sam∂e
 ((
uöt32_t
)0x00001000Ë

	)

529 
	#RTC_Tam≥rFûãr_8Sam∂e
 ((
uöt32_t
)0x00001800Ë

	)

531 
	#IS_RTC_TAMPER_FILTER
(
FILTER
Ë(((FILTERË=
RTC_Tam≥rFûãr_DißbÀ
Ë|| \

	)

532 ((
FILTER
Ë=
RTC_Tam≥rFûãr_2Sam∂e
) || \

533 ((
FILTER
Ë=
RTC_Tam≥rFûãr_4Sam∂e
) || \

534 ((
FILTER
Ë=
RTC_Tam≥rFûãr_8Sam∂e
))

542 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
 ((
uöt32_t
)0x00000000Ë

	)

544 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
 ((
uöt32_t
)0x000000100Ë

	)

546 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
 ((
uöt32_t
)0x00000200Ë

	)

548 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
 ((
uöt32_t
)0x00000300Ë

	)

550 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
 ((
uöt32_t
)0x00000400Ë

	)

552 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
 ((
uöt32_t
)0x00000500Ë

	)

554 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
 ((
uöt32_t
)0x00000600Ë

	)

556 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
 ((
uöt32_t
)0x00000700Ë

	)

558 
	#IS_RTC_TAMPER_SAMPLING_FREQ
(
FREQ
Ë(((FREQË==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
Ë|| \

	)

559 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
) || \

560 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
) || \

561 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
) || \

562 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
) || \

563 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
) || \

564 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
) || \

565 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
))

574 
	#RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
 ((
uöt32_t
)0x00000000Ë

	)

576 
	#RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
 ((
uöt32_t
)0x00002000Ë

	)

578 
	#RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
 ((
uöt32_t
)0x00004000Ë

	)

580 
	#RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
 ((
uöt32_t
)0x00006000Ë

	)

583 
	#IS_RTC_TAMPER_PRECHARGE_DURATION
(
DURATION
Ë(((DURATIONË=
RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
Ë|| \

	)

584 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
) || \

585 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
) || \

586 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
))

594 
	#RTC_Tam≥r_1
 
RTC_TAFCR_TAMP1E


	)

595 
	#IS_RTC_TAMPER
(
TAMPER
Ë(((TAMPERË=
RTC_Tam≥r_1
))

	)

604 
	#RTC_Tam≥rPö_PC13
 ((
uöt32_t
)0x00000000)

	)

605 
	#RTC_Tam≥rPö_PI8
 ((
uöt32_t
)0x00010000)

	)

606 
	#IS_RTC_TAMPER_PIN
(
PIN
Ë(((PINË=
RTC_Tam≥rPö_PC13
Ë|| \

	)

607 ((
PIN
Ë=
RTC_Tam≥rPö_PI8
))

615 
	#RTC_TimeSèmpPö_PC13
 ((
uöt32_t
)0x00000000)

	)

616 
	#RTC_TimeSèmpPö_PI8
 ((
uöt32_t
)0x00020000)

	)

617 
	#IS_RTC_TIMESTAMP_PIN
(
PIN
Ë(((PINË=
RTC_TimeSèmpPö_PC13
Ë|| \

	)

618 ((
PIN
Ë=
RTC_TimeSèmpPö_PI8
))

626 
	#RTC_OuçutTy≥_O≥nDøö
 ((
uöt32_t
)0x00000000)

	)

627 
	#RTC_OuçutTy≥_PushPuŒ
 ((
uöt32_t
)0x00040000)

	)

628 
	#IS_RTC_OUTPUT_TYPE
(
TYPE
Ë(((TYPEË=
RTC_OuçutTy≥_O≥nDøö
Ë|| \

	)

629 ((
TYPE
Ë=
RTC_OuçutTy≥_PushPuŒ
))

638 
	#RTC_Shi·Add1S_Re£t
 ((
uöt32_t
)0x00000000)

	)

639 
	#RTC_Shi·Add1S_Së
 ((
uöt32_t
)0x80000000)

	)

640 
	#IS_RTC_SHIFT_ADD1S
(
SEL
Ë(((SELË=
RTC_Shi·Add1S_Re£t
Ë|| \

	)

641 ((
SEL
Ë=
RTC_Shi·Add1S_Së
))

649 
	#IS_RTC_SHIFT_SUBFS
(
FS
Ë((FSË<0x00007FFF)

	)

659 
	#RTC_BKP_DR0
 ((
uöt32_t
)0x00000000)

	)

660 
	#RTC_BKP_DR1
 ((
uöt32_t
)0x00000001)

	)

661 
	#RTC_BKP_DR2
 ((
uöt32_t
)0x00000002)

	)

662 
	#RTC_BKP_DR3
 ((
uöt32_t
)0x00000003)

	)

663 
	#RTC_BKP_DR4
 ((
uöt32_t
)0x00000004)

	)

664 
	#RTC_BKP_DR5
 ((
uöt32_t
)0x00000005)

	)

665 
	#RTC_BKP_DR6
 ((
uöt32_t
)0x00000006)

	)

666 
	#RTC_BKP_DR7
 ((
uöt32_t
)0x00000007)

	)

667 
	#RTC_BKP_DR8
 ((
uöt32_t
)0x00000008)

	)

668 
	#RTC_BKP_DR9
 ((
uöt32_t
)0x00000009)

	)

669 
	#RTC_BKP_DR10
 ((
uöt32_t
)0x0000000A)

	)

670 
	#RTC_BKP_DR11
 ((
uöt32_t
)0x0000000B)

	)

671 
	#RTC_BKP_DR12
 ((
uöt32_t
)0x0000000C)

	)

672 
	#RTC_BKP_DR13
 ((
uöt32_t
)0x0000000D)

	)

673 
	#RTC_BKP_DR14
 ((
uöt32_t
)0x0000000E)

	)

674 
	#RTC_BKP_DR15
 ((
uöt32_t
)0x0000000F)

	)

675 
	#RTC_BKP_DR16
 ((
uöt32_t
)0x00000010)

	)

676 
	#RTC_BKP_DR17
 ((
uöt32_t
)0x00000011)

	)

677 
	#RTC_BKP_DR18
 ((
uöt32_t
)0x00000012)

	)

678 
	#RTC_BKP_DR19
 ((
uöt32_t
)0x00000013)

	)

679 
	#IS_RTC_BKP
(
BKP
Ë(((BKPË=
RTC_BKP_DR0
Ë|| \

	)

680 ((
BKP
Ë=
RTC_BKP_DR1
) || \

681 ((
BKP
Ë=
RTC_BKP_DR2
) || \

682 ((
BKP
Ë=
RTC_BKP_DR3
) || \

683 ((
BKP
Ë=
RTC_BKP_DR4
) || \

684 ((
BKP
Ë=
RTC_BKP_DR5
) || \

685 ((
BKP
Ë=
RTC_BKP_DR6
) || \

686 ((
BKP
Ë=
RTC_BKP_DR7
) || \

687 ((
BKP
Ë=
RTC_BKP_DR8
) || \

688 ((
BKP
Ë=
RTC_BKP_DR9
) || \

689 ((
BKP
Ë=
RTC_BKP_DR10
) || \

690 ((
BKP
Ë=
RTC_BKP_DR11
) || \

691 ((
BKP
Ë=
RTC_BKP_DR12
) || \

692 ((
BKP
Ë=
RTC_BKP_DR13
) || \

693 ((
BKP
Ë=
RTC_BKP_DR14
) || \

694 ((
BKP
Ë=
RTC_BKP_DR15
) || \

695 ((
BKP
Ë=
RTC_BKP_DR16
) || \

696 ((
BKP
Ë=
RTC_BKP_DR17
) || \

697 ((
BKP
Ë=
RTC_BKP_DR18
) || \

698 ((
BKP
Ë=
RTC_BKP_DR19
))

706 
	#RTC_F‹m©_BIN
 ((
uöt32_t
)0x000000000)

	)

707 
	#RTC_F‹m©_BCD
 ((
uöt32_t
)0x000000001)

	)

708 
	#IS_RTC_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_F‹m©_BIN
Ë|| ((FORMATË=
RTC_F‹m©_BCD
))

	)

717 
	#RTC_FLAG_RECALPF
 ((
uöt32_t
)0x00010000)

	)

718 
	#RTC_FLAG_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

719 
	#RTC_FLAG_TSOVF
 ((
uöt32_t
)0x00001000)

	)

720 
	#RTC_FLAG_TSF
 ((
uöt32_t
)0x00000800)

	)

721 
	#RTC_FLAG_WUTF
 ((
uöt32_t
)0x00000400)

	)

722 
	#RTC_FLAG_ALRBF
 ((
uöt32_t
)0x00000200)

	)

723 
	#RTC_FLAG_ALRAF
 ((
uöt32_t
)0x00000100)

	)

724 
	#RTC_FLAG_INITF
 ((
uöt32_t
)0x00000040)

	)

725 
	#RTC_FLAG_RSF
 ((
uöt32_t
)0x00000020)

	)

726 
	#RTC_FLAG_INITS
 ((
uöt32_t
)0x00000010)

	)

727 
	#RTC_FLAG_SHPF
 ((
uöt32_t
)0x00000008)

	)

728 
	#RTC_FLAG_WUTWF
 ((
uöt32_t
)0x00000004)

	)

729 
	#RTC_FLAG_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

730 
	#RTC_FLAG_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

731 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_TSOVF
Ë|| ((FLAGË=
RTC_FLAG_TSF
Ë|| \

	)

732 ((
FLAG
Ë=
RTC_FLAG_WUTF
Ë|| ((FLAGË=
RTC_FLAG_ALRBF
) || \

733 ((
FLAG
Ë=
RTC_FLAG_ALRAF
Ë|| ((FLAGË=
RTC_FLAG_INITF
) || \

734 ((
FLAG
Ë=
RTC_FLAG_RSF
Ë|| ((FLAGË=
RTC_FLAG_WUTWF
) || \

735 ((
FLAG
Ë=
RTC_FLAG_ALRBWF
Ë|| ((FLAGË=
RTC_FLAG_ALRAWF
) || \

736 ((
FLAG
Ë=
RTC_FLAG_TAMP1F
Ë|| ((FLAGË=
RTC_FLAG_RECALPF
) || \

737 ((
FLAG
Ë=
RTC_FLAG_SHPF
))

738 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë(((FLAGË!(
uöt32_t
)
RESET
Ë&& (((FLAGË& 0xFFFF00DFË=(uöt32_t)RESET))

	)

746 
	#RTC_IT_TS
 ((
uöt32_t
)0x00008000)

	)

747 
	#RTC_IT_WUT
 ((
uöt32_t
)0x00004000)

	)

748 
	#RTC_IT_ALRB
 ((
uöt32_t
)0x00002000)

	)

749 
	#RTC_IT_ALRA
 ((
uöt32_t
)0x00001000)

	)

750 
	#RTC_IT_TAMP
 ((
uöt32_t
)0x00000004Ë

	)

751 
	#RTC_IT_TAMP1
 ((
uöt32_t
)0x00020000)

	)

753 
	#IS_RTC_CONFIG_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFF0FFBË=(uöt32_t)RESET))

	)

754 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_TS
Ë|| ((ITË=
RTC_IT_WUT
Ë|| \

	)

755 ((
IT
Ë=
RTC_IT_ALRB
Ë|| ((ITË=
RTC_IT_ALRA
) || \

756 ((
IT
Ë=
RTC_IT_TAMP1
))

757 
	#IS_RTC_CLEAR_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFD0FFFË=(uöt32_t)RESET))

	)

766 
	#RTC_DigôÆCÆibC⁄fig
 
RTC_Cﬂr£CÆibC⁄fig


	)

767 
	#RTC_DigôÆCÆibCmd
 
RTC_Cﬂr£CÆibCmd


	)

781 
Eº‹Sètus
 
RTC_DeInô
();

784 
Eº‹Sètus
 
RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

785 
RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

786 
RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

787 
Eº‹Sètus
 
RTC_E¡îInôMode
();

788 
RTC_ExôInôMode
();

789 
Eº‹Sètus
 
RTC_WaôF‹Synchro
();

790 
Eº‹Sètus
 
RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

791 
RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

794 
Eº‹Sètus
 
RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

795 
RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

796 
RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

797 
uöt32_t
 
RTC_GëSubSec⁄d
();

798 
Eº‹Sètus
 
RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

799 
RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

800 
RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

803 
RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

804 
RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

805 
RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

806 
Eº‹Sètus
 
RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

807 
RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
);

808 
uöt32_t
 
RTC_GëAœrmSubSec⁄d
(uöt32_à
RTC_Aœrm
);

811 
RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
);

812 
RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
);

813 
uöt32_t
 
RTC_GëWakeUpCou¡î
();

814 
Eº‹Sètus
 
RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

817 
RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
);

818 
uöt32_t
 
RTC_GëSt‹eO≥øti⁄
();

821 
RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
);

824 
Eº‹Sètus
 
RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
);

825 
Eº‹Sètus
 
RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

826 
RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

827 
RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
);

828 
Eº‹Sètus
 
RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

829 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

830 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
);

833 
RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

834 
RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

835 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
);

836 
uöt32_t
 
RTC_GëTimeSèmpSubSec⁄d
();

839 
RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
);

840 
RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

841 
RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
);

842 
RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
);

843 
RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
);

844 
RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

845 
RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

848 
RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
);

849 
uöt32_t
 
RTC_RódBackupRegi°î
(uöt32_à
RTC_BKP_DR
);

853 
RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
);

854 
RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
);

855 
RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
);

858 
Eº‹Sètus
 
RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
);

861 
RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

862 
FœgSètus
 
RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
);

863 
RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
);

864 
ITSètus
 
RTC_GëITSètus
(
uöt32_t
 
RTC_IT
);

865 
RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
);

867 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_sai.h

30 #i‚de‡
__STM32F4xx_SAI_H


31 
	#__STM32F4xx_SAI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
SAI_AudioMode
;

59 
uöt32_t
 
SAI_PrŸocﬁ
;

62 
uöt32_t
 
SAI_D©aSize
;

66 
uöt32_t
 
SAI_Fú°Bô
;

70 
uöt32_t
 
SAI_ClockSåobög
;

73 
uöt32_t
 
SAI_Synchro
;

76 
uöt32_t
 
SAI_OUTDRIV
;

81 
uöt32_t
 
SAI_NoDividî
;

84 
uöt32_t
 
SAI_Ma°îDividî
;

88 
uöt32_t
 
SAI_FIFOThªshﬁd
;

90 }
	tSAI_InôTy≥Def
;

99 
uöt32_t
 
SAI_FømeLígth
;

107 
uöt32_t
 
SAI_A˘iveFømeLígth
;

113 
uöt32_t
 
SAI_FSDeföôi⁄
;

117 
uöt32_t
 
SAI_FSPﬁ¨ôy
;

121 
uöt32_t
 
SAI_FSOff£t
;

125 }
	tSAI_FømeInôTy≥Def
;

133 
uöt32_t
 
SAI_Fú°BôOff£t
;

137 
uöt32_t
 
SAI_SlŸSize
;

141 
uöt32_t
 
SAI_SlŸNumbî
;

145 
uöt32_t
 
SAI_SlŸA˘ive
;

148 }
	tSAI_SlŸInôTy≥Def
;

156 
	#IS_SAI_PERIPH
(
PERIPH
Ë((PERIPHË=
SAI1
)

	)

158 
	#IS_SAI_BLOCK_PERIPH
(
PERIPH
Ë(((PERIPHË=
SAI1_Block_A
Ë|| \

	)

159 ((
PERIPH
Ë=
SAI1_Block_B
))

165 
	#SAI_Mode_Ma°îTx
 ((
uöt32_t
)0x00000000)

	)

166 
	#SAI_Mode_Ma°îRx
 ((
uöt32_t
)0x00000001)

	)

167 
	#SAI_Mode_SœveTx
 ((
uöt32_t
)0x00000002)

	)

168 
	#SAI_Mode_SœveRx
 ((
uöt32_t
)0x00000003)

	)

169 
	#IS_SAI_BLOCK_MODE
(
MODE
Ë(((MODEË=
SAI_Mode_Ma°îTx
Ë|| \

	)

170 ((
MODE
Ë=
SAI_Mode_Ma°îRx
) || \

171 ((
MODE
Ë=
SAI_Mode_SœveTx
) || \

172 ((
MODE
Ë=
SAI_Mode_SœveRx
))

181 
	#SAI_Fªe_PrŸocﬁ
 ((
uöt32_t
)0x00000000)

	)

182 
	#SAI_SPDIF_PrŸocﬁ
 ((
uöt32_t
)
SAI_xCR1_PRTCFG_0
)

	)

183 
	#SAI_AC97_PrŸocﬁ
 ((
uöt32_t
)
SAI_xCR1_PRTCFG_1
)

	)

184 
	#IS_SAI_BLOCK_PROTOCOL
(
PROTOCOL
Ë(((PROTOCOLË=
SAI_Fªe_PrŸocﬁ
Ë|| \

	)

185 ((
PROTOCOL
Ë=
SAI_SPDIF_PrŸocﬁ
) || \

186 ((
PROTOCOL
Ë=
SAI_AC97_PrŸocﬁ
))

195 
	#SAI_D©aSize_8b
 ((
uöt32_t
)0x00000040)

	)

196 
	#SAI_D©aSize_10b
 ((
uöt32_t
)0x00000060)

	)

197 
	#SAI_D©aSize_16b
 ((
uöt32_t
)0x00000080)

	)

198 
	#SAI_D©aSize_20b
 ((
uöt32_t
)0x000000A0)

	)

199 
	#SAI_D©aSize_24b
 ((
uöt32_t
)0x000000C0)

	)

200 
	#SAI_D©aSize_32b
 ((
uöt32_t
)0x000000E0)

	)

201 
	#IS_SAI_BLOCK_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SAI_D©aSize_8b
Ë|| \

	)

202 ((
DATASIZE
Ë=
SAI_D©aSize_10b
) || \

203 ((
DATASIZE
Ë=
SAI_D©aSize_16b
) || \

204 ((
DATASIZE
Ë=
SAI_D©aSize_20b
) || \

205 ((
DATASIZE
Ë=
SAI_D©aSize_24b
) || \

206 ((
DATASIZE
Ë=
SAI_D©aSize_32b
))

215 
	#SAI_Fú°Bô_MSB
 ((
uöt32_t
)0x00000000)

	)

216 
	#SAI_Fú°Bô_LSB
 ((
uöt32_t
)
SAI_xCR1_LSBFIRST
)

	)

217 
	#IS_SAI_BLOCK_FIRST_BIT
(
BIT
Ë(((BITË=
SAI_Fú°Bô_MSB
Ë|| \

	)

218 ((
BIT
Ë=
SAI_Fú°Bô_LSB
))

227 
	#SAI_ClockSåobög_FÆlögEdge
 ((
uöt32_t
)0x00000000)

	)

228 
	#SAI_ClockSåobög_RisögEdge
 ((
uöt32_t
)
SAI_xCR1_CKSTR
)

	)

229 
	#IS_SAI_BLOCK_CLOCK_STROBING
(
CLOCK
Ë(((CLOCKË=
SAI_ClockSåobög_FÆlögEdge
Ë|| \

	)

230 ((
CLOCK
Ë=
SAI_ClockSåobög_RisögEdge
))

239 
	#SAI_Asynchr⁄ous
 ((
uöt32_t
)0x00000000)

	)

240 
	#SAI_Synchr⁄ous
 ((
uöt32_t
)
SAI_xCR1_SYNCEN_0
)

	)

241 
	#IS_SAI_BLOCK_SYNCHRO
(
SYNCHRO
Ë(((SYNCHROË=
SAI_Synchr⁄ous
Ë|| \

	)

242 ((
SYNCHRO
Ë=
SAI_Asynchr⁄ous
))

251 
	#SAI_OuçutDrive_DißbÀd
 ((
uöt32_t
)0x00000000)

	)

252 
	#SAI_OuçutDrive_E«bÀd
 ((
uöt32_t
)
SAI_xCR1_OUTDRIV
)

	)

253 
	#IS_SAI_BLOCK_OUTPUT_DRIVE
(
DRIVE
Ë(((DRIVEË=
SAI_OuçutDrive_DißbÀd
Ë|| \

	)

254 ((
DRIVE
Ë=
SAI_OuçutDrive_E«bÀd
))

265 
	#SAI_Ma°îDividî_E«bÀd
 ((
uöt32_t
)0x00000000)

	)

266 
	#SAI_Ma°îDividî_DißbÀd
 ((
uöt32_t
)
SAI_xCR1_NODIV
)

	)

267 
	#IS_SAI_BLOCK_NODIVIDER
(
NODIVIDER
Ë(((NODIVIDERË=
SAI_Ma°îDividî_E«bÀd
Ë|| \

	)

268 ((
NODIVIDER
Ë=
SAI_Ma°îDividî_DißbÀd
))

277 
	#IS_SAI_BLOCK_MASTER_DIVIDER
(
DIVIDER
Ë((DIVIDERË<15)

	)

286 
	#IS_SAI_BLOCK_FRAME_LENGTH
(
LENGTH
Ë((8 <(LENGTH)Ë&& ((LENGTHË<256))

	)

295 
	#IS_SAI_BLOCK_ACTIVE_FRAME
(
LENGTH
Ë((1 <(LENGTH)Ë&& ((LENGTHË<128))

	)

305 
	#SAI_FS_SèπFøme
 ((
uöt32_t
)0x00000000)

	)

306 
	#I2S_FS_Ch™√lIdítifiˇti⁄
 ((
uöt32_t
)
SAI_xFRCR_FSDEF
)

	)

307 
	#IS_SAI_BLOCK_FS_DEFINITION
(
DEFINITION
Ë(((DEFINITIONË=
SAI_FS_SèπFøme
Ë|| \

	)

308 ((
DEFINITION
Ë=
I2S_FS_Ch™√lIdítifiˇti⁄
))

317 
	#SAI_FS_A˘iveLow
 ((
uöt32_t
)0x00000000)

	)

318 
	#SAI_FS_A˘iveHigh
 ((
uöt32_t
)
SAI_xFRCR_FSPO
)

	)

319 
	#IS_SAI_BLOCK_FS_POLARITY
(
POLARITY
Ë(((POLARITYË=
SAI_FS_A˘iveLow
Ë|| \

	)

320 ((
POLARITY
Ë=
SAI_FS_A˘iveHigh
))

329 
	#SAI_FS_Fú°Bô
 ((
uöt32_t
)0x00000000)

	)

330 
	#SAI_FS_Bef‹eFú°Bô
 ((
uöt32_t
)
SAI_xFRCR_FSOFF
)

	)

331 
	#IS_SAI_BLOCK_FS_OFFSET
(
OFFSET
Ë(((OFFSETË=
SAI_FS_Fú°Bô
Ë|| \

	)

332 ((
OFFSET
Ë=
SAI_FS_Bef‹eFú°Bô
))

340 
	#IS_SAI_BLOCK_FIRSTBIT_OFFSET
(
OFFSET
Ë((OFFSETË<24)

	)

349 
	#SAI_SlŸSize_D©aSize
 ((
uöt32_t
)0x00000000)

	)

350 
	#SAI_SlŸSize_16b
 ((
uöt32_t
)
SAI_xSLOTR_SLOTSZ_0
)

	)

351 
	#SAI_SlŸSize_32b
 ((
uöt32_t
)
SAI_xSLOTR_SLOTSZ_1
)

	)

352 
	#IS_SAI_BLOCK_SLOT_SIZE
(
SIZE
Ë(((SIZEË=
SAI_SlŸSize_D©aSize
Ë|| \

	)

353 ((
SIZE
Ë=
SAI_SlŸSize_16b
) || \

354 ((
SIZE
Ë=
SAI_SlŸSize_32b
))

363 
	#IS_SAI_BLOCK_SLOT_NUMBER
(
NUMBER
Ë((1 <(NUMBER)Ë&& ((NUMBERË<16))

	)

372 
	#SAI_SlŸ_NŸA˘ive
 ((
uöt32_t
)0x00000000)

	)

373 
	#SAI_SlŸA˘ive_0
 ((
uöt32_t
)0x00010000)

	)

374 
	#SAI_SlŸA˘ive_1
 ((
uöt32_t
)0x00020000)

	)

375 
	#SAI_SlŸA˘ive_2
 ((
uöt32_t
)0x00040000)

	)

376 
	#SAI_SlŸA˘ive_3
 ((
uöt32_t
)0x00080000)

	)

377 
	#SAI_SlŸA˘ive_4
 ((
uöt32_t
)0x00100000)

	)

378 
	#SAI_SlŸA˘ive_5
 ((
uöt32_t
)0x00200000)

	)

379 
	#SAI_SlŸA˘ive_6
 ((
uöt32_t
)0x00400000)

	)

380 
	#SAI_SlŸA˘ive_7
 ((
uöt32_t
)0x00800000)

	)

381 
	#SAI_SlŸA˘ive_8
 ((
uöt32_t
)0x01000000)

	)

382 
	#SAI_SlŸA˘ive_9
 ((
uöt32_t
)0x02000000)

	)

383 
	#SAI_SlŸA˘ive_10
 ((
uöt32_t
)0x04000000)

	)

384 
	#SAI_SlŸA˘ive_11
 ((
uöt32_t
)0x08000000)

	)

385 
	#SAI_SlŸA˘ive_12
 ((
uöt32_t
)0x10000000)

	)

386 
	#SAI_SlŸA˘ive_13
 ((
uöt32_t
)0x20000000)

	)

387 
	#SAI_SlŸA˘ive_14
 ((
uöt32_t
)0x40000000)

	)

388 
	#SAI_SlŸA˘ive_15
 ((
uöt32_t
)0x80000000)

	)

389 
	#SAI_SlŸA˘ive_ALL
 ((
uöt32_t
)0xFFFF0000)

	)

391 
	#IS_SAI_SLOT_ACTIVE
(
ACTIVE
Ë((ACTIVEË!0)

	)

401 
	#SAI_M⁄oMode
 ((
uöt32_t
)
SAI_xCR1_MONO
)

	)

402 
	#SAI_SåeoMode
 ((
uöt32_t
)0x00000000)

	)

403 
	#IS_SAI_BLOCK_MONO_STREO_MODE
(
MODE
Ë(((MODEË=
SAI_M⁄oMode
Ë||\

	)

404 ((
MODE
Ë=
SAI_SåeoMode
))

413 
	#SAI_Ouçut_NŸRñó£d
 ((
uöt32_t
)0x00000000)

	)

414 
	#SAI_Ouçut_Rñó£d
 ((
uöt32_t
)
SAI_xCR2_TRIS
)

	)

415 
	#IS_SAI_BLOCK_TRISTATE_MANAGEMENT
(
STATE
Ë(((STATEË=
SAI_Ouçut_NŸRñó£d
Ë||\

	)

416 ((
STATE
Ë=
SAI_Ouçut_Rñó£d
))

425 
	#SAI_Thªshﬁd_FIFOEm±y
 ((
uöt32_t
)0x00000000)

	)

426 
	#SAI_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000001)

	)

427 
	#SAI_FIFOThªshﬁd_HÆfFuŒ
 ((
uöt32_t
)0x00000002)

	)

428 
	#SAI_FIFOThªshﬁd_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000003)

	)

429 
	#SAI_FIFOThªshﬁd_FuŒ
 ((
uöt32_t
)0x00000004)

	)

430 
	#IS_SAI_BLOCK_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
SAI_Thªshﬁd_FIFOEm±y
Ë|| \

	)

431 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_1Qu¨ãrFuŒ
) || \

432 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_HÆfFuŒ
) || \

433 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_3Qu¨ãrsFuŒ
) || \

434 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_FuŒ
))

443 
	#SAI_NoCom∑ndög
 ((
uöt32_t
)0x00000000)

	)

444 
	#SAI_ULaw_1CPL_Com∑ndög
 ((
uöt32_t
)0x00008000)

	)

445 
	#SAI_ALaw_1CPL_Com∑ndög
 ((
uöt32_t
)0x0000C000)

	)

446 
	#SAI_ULaw_2CPL_Com∑ndög
 ((
uöt32_t
)0x0000A000)

	)

447 
	#SAI_ALaw_2CPL_Com∑ndög
 ((
uöt32_t
)0x0000E000)

	)

448 
	#IS_SAI_BLOCK_COMPANDING_MODE
(
MODE
Ë(((MODEË=
SAI_NoCom∑ndög
Ë|| \

	)

449 ((
MODE
Ë=
SAI_ULaw_1CPL_Com∑ndög
) || \

450 ((
MODE
Ë=
SAI_ALaw_1CPL_Com∑ndög
) || \

451 ((
MODE
Ë=
SAI_ULaw_2CPL_Com∑ndög
) || \

452 ((
MODE
Ë=
SAI_ALaw_2CPL_Com∑ndög
))

461 
	#SAI_ZîoVÆue
 ((
uöt32_t
)0x00000000)

	)

462 
	#SAI_La°SítVÆue
 ((
uöt32_t
)
SAI_xCR2_MUTEVAL
)

	)

463 
	#IS_SAI_BLOCK_MUTE_VALUE
(
VALUE
Ë(((VALUEË=
SAI_ZîoVÆue
Ë|| \

	)

464 ((
VALUE
Ë=
SAI_La°SítVÆue
))

473 
	#IS_SAI_BLOCK_MUTE_COUNTER
(
COUNTER
Ë((COUNTERË<63)

	)

483 
	#SAI_IT_OVRUDR
 ((
uöt32_t
)
SAI_xIMR_OVRUDRIE
)

	)

484 
	#SAI_IT_MUTEDET
 ((
uöt32_t
)
SAI_xIMR_MUTEDETIE
)

	)

485 
	#SAI_IT_WCKCFG
 ((
uöt32_t
)
SAI_xIMR_WCKCFGIE
)

	)

486 
	#SAI_IT_FREQ
 ((
uöt32_t
)
SAI_xIMR_FREQIE
)

	)

487 
	#SAI_IT_CNRDY
 ((
uöt32_t
)
SAI_xIMR_CNRDYIE
)

	)

488 
	#SAI_IT_AFSDET
 ((
uöt32_t
)
SAI_xIMR_AFSDETIE
)

	)

489 
	#SAI_IT_LFSDET
 ((
uöt32_t
)
SAI_xIMR_LFSDETIE
)

	)

491 
	#IS_SAI_BLOCK_CONFIG_IT
(
IT
Ë(((ITË=
SAI_IT_OVRUDR
Ë|| \

	)

492 ((
IT
Ë=
SAI_IT_MUTEDET
) || \

493 ((
IT
Ë=
SAI_IT_WCKCFG
) || \

494 ((
IT
Ë=
SAI_IT_FREQ
) || \

495 ((
IT
Ë=
SAI_IT_CNRDY
) || \

496 ((
IT
Ë=
SAI_IT_AFSDET
) || \

497 ((
IT
Ë=
SAI_IT_LFSDET
))

506 
	#SAI_FLAG_OVRUDR
 ((
uöt32_t
)
SAI_xSR_OVRUDR
)

	)

507 
	#SAI_FLAG_MUTEDET
 ((
uöt32_t
)
SAI_xSR_MUTEDET
)

	)

508 
	#SAI_FLAG_WCKCFG
 ((
uöt32_t
)
SAI_xSR_WCKCFG
)

	)

509 
	#SAI_FLAG_FREQ
 ((
uöt32_t
)
SAI_xSR_FREQ
)

	)

510 
	#SAI_FLAG_CNRDY
 ((
uöt32_t
)
SAI_xSR_CNRDY
)

	)

511 
	#SAI_FLAG_AFSDET
 ((
uöt32_t
)
SAI_xSR_AFSDET
)

	)

512 
	#SAI_FLAG_LFSDET
 ((
uöt32_t
)
SAI_xSR_LFSDET
)

	)

514 
	#IS_SAI_BLOCK_GET_FLAG
(
FLAG
Ë(((FLAGË=
SAI_FLAG_OVRUDR
Ë|| \

	)

515 ((
FLAG
Ë=
SAI_FLAG_MUTEDET
) || \

516 ((
FLAG
Ë=
SAI_FLAG_WCKCFG
) || \

517 ((
FLAG
Ë=
SAI_FLAG_FREQ
) || \

518 ((
FLAG
Ë=
SAI_FLAG_CNRDY
) || \

519 ((
FLAG
Ë=
SAI_FLAG_AFSDET
) || \

520 ((
FLAG
Ë=
SAI_FLAG_LFSDET
))

522 
	#IS_SAI_BLOCK_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SAI_FLAG_OVRUDR
Ë|| \

	)

523 ((
FLAG
Ë=
SAI_FLAG_MUTEDET
) || \

524 ((
FLAG
Ë=
SAI_FLAG_WCKCFG
) || \

525 ((
FLAG
Ë=
SAI_FLAG_FREQ
) || \

526 ((
FLAG
Ë=
SAI_FLAG_CNRDY
) || \

527 ((
FLAG
Ë=
SAI_FLAG_AFSDET
) || \

528 ((
FLAG
Ë=
SAI_FLAG_LFSDET
))

536 
	#SAI_FIFOSètus_Em±y
 ((
uöt32_t
)0x00000000)

	)

537 
	#SAI_FIFOSètus_Less1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00010000)

	)

538 
	#SAI_FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00020000)

	)

539 
	#SAI_FIFOSètus_HÆfFuŒ
 ((
uöt32_t
)0x00030000)

	)

540 
	#SAI_FIFOSètus_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00040000)

	)

541 
	#SAI_FIFOSètus_FuŒ
 ((
uöt32_t
)0x00050000)

	)

543 
	#IS_SAI_BLOCK_FIFO_STATUS
(
STATUS
Ë(((STATUSË=
SAI_FIFOSètus_Less1Qu¨ãrFuŒ
 ) || \

	)

544 ((
STATUS
Ë=
SAI_FIFOSètus_HÆfFuŒ
) || \

545 ((
STATUS
Ë=
SAI_FIFOSètus_1Qu¨ãrFuŒ
) || \

546 ((
STATUS
Ë=
SAI_FIFOSètus_3Qu¨ãrsFuŒ
) || \

547 ((
STATUS
Ë=
SAI_FIFOSètus_FuŒ
) || \

548 ((
STATUS
Ë=
SAI_FIFOSètus_Em±y
))

562 
SAI_DeInô
(
SAI_Ty≥Def
* 
SAIx
);

565 
SAI_Inô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_InôTy≥Def
* 
SAI_InôSåu˘
);

566 
SAI_FømeInô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_FømeInôTy≥Def
* 
SAI_FømeInôSåu˘
);

567 
SAI_SlŸInô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_SlŸInôTy≥Def
* 
SAI_SlŸInôSåu˘
);

568 
SAI_Såu˘Inô
(
SAI_InôTy≥Def
* 
SAI_InôSåu˘
);

569 
SAI_FømeSåu˘Inô
(
SAI_FømeInôTy≥Def
* 
SAI_FømeInôSåu˘
);

570 
SAI_SlŸSåu˘Inô
(
SAI_SlŸInôTy≥Def
* 
SAI_SlŸInôSåu˘
);

572 
SAI_Cmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

573 
SAI_M⁄oModeC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_M⁄o_SåeoMode
);

574 
SAI_TRISèãC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_TRISèã
);

575 
SAI_Com∑ndögModeC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_Com∑ndögMode
);

576 
SAI_MuãModeCmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

577 
SAI_MuãVÆueC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_MuãVÆue
);

578 
SAI_MuãFømeCou¡îC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_MuãCou¡î
);

579 
SAI_FlushFIFO
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

582 
SAI_SídD©a
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
D©a
);

583 
uöt32_t
 
SAI_Re˚iveD©a
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

586 
SAI_DMACmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

589 
SAI_ITC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

590 
FœgSètus
 
SAI_GëFœgSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_FLAG
);

591 
SAI_CÀ¨Fœg
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_FLAG
);

592 
ITSètus
 
SAI_GëITSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
);

593 
SAI_CÀ¨ITPídögBô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
);

594 
Fun˘i⁄ÆSèã
 
SAI_GëCmdSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

595 
uöt32_t
 
SAI_GëFIFOSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

597 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_sdio.h

30 #i‚de‡
__STM32F4xx_SDIO_H


31 
	#__STM32F4xx_SDIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

52 
uöt32_t
 
SDIO_ClockEdge
;

55 
uöt32_t
 
SDIO_ClockBy∑ss
;

59 
uöt32_t
 
SDIO_ClockPowîSave
;

63 
uöt32_t
 
SDIO_BusWide
;

66 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

69 
uöt8_t
 
SDIO_ClockDiv
;

72 } 
	tSDIO_InôTy≥Def
;

76 
uöt32_t
 
SDIO_Argumít
;

81 
uöt32_t
 
SDIO_CmdIndex
;

83 
uöt32_t
 
SDIO_Re•⁄£
;

86 
uöt32_t
 
SDIO_Waô
;

89 
uöt32_t
 
SDIO_CPSM
;

92 } 
	tSDIO_CmdInôTy≥Def
;

96 
uöt32_t
 
SDIO_D©aTimeOut
;

98 
uöt32_t
 
SDIO_D©aLígth
;

100 
uöt32_t
 
SDIO_D©aBlockSize
;

103 
uöt32_t
 
SDIO_Tøns„rDú
;

107 
uöt32_t
 
SDIO_Tøns„rMode
;

110 
uöt32_t
 
SDIO_DPSM
;

113 } 
	tSDIO_D©aInôTy≥Def
;

126 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

127 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

128 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
Ë|| \

	)

129 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

138 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

139 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

140 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
Ë|| \

	)

141 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

150 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

151 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

152 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
Ë|| \

	)

153 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

162 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

163 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

164 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

165 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
Ë|| \

	)

166 ((
WIDE
Ë=
SDIO_BusWide_8b
))

176 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

177 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

178 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
Ë|| \

	)

179 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

188 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

189 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

190 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

200 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

201 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

202 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

203 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

204 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

205 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

206 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

207 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

208 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

209 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

210 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

211 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

212 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

213 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

214 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

215 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

216 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

217 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

218 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

219 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

220 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

221 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

222 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

223 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

224 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

233 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

242 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

243 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

244 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

245 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
Ë|| \

	)

246 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

247 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

256 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

257 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

258 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

259 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
Ë|| \

	)

260 ((
WAIT
Ë=
SDIO_Waô_Píd
))

269 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

270 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

271 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

280 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

281 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

282 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

283 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

284 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
Ë|| \

	)

285 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

294 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

303 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

304 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

305 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

306 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

307 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

308 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

309 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

310 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

311 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

312 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

313 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

314 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

315 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

316 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

317 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

318 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
Ë|| \

	)

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

329 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

330 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

331 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

332 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

341 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

342 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

343 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
Ë|| \

	)

344 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

353 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

354 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

355 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
Ë|| \

	)

356 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

365 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

366 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

367 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

376 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

377 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

378 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

379 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

380 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

381 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

382 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

383 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

384 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

385 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

386 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

387 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

388 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

389 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

390 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

391 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

392 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

393 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

394 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

395 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

396 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

397 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

398 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

399 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

400 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
Ë|| \

	)

401 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

420 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

421 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

422 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

423 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

425 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

427 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
Ë|| \

	)

428 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

429 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

430 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

431 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

432 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

433 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

434 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

435 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

436 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

437 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

438 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

439 ((
IT
Ë=
SDIO_IT_TXACT
) || \

440 ((
IT
Ë=
SDIO_IT_RXACT
) || \

441 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

442 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

443 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

444 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

445 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

446 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

447 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

448 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

449 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

450 ((
IT
Ë=
SDIO_IT_CEATAEND
))

452 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

462 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

463 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

464 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
Ë|| \

	)

465 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

477 
SDIO_DeInô
();

480 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

481 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

482 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

483 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

484 
uöt32_t
 
SDIO_GëPowîSèã
();

487 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

488 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

489 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

490 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

493 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

494 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

495 
uöt32_t
 
SDIO_GëD©aCou¡î
();

496 
uöt32_t
 
SDIO_RódD©a
();

497 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

498 
uöt32_t
 
SDIO_GëFIFOCou¡
();

501 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

503 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

504 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

509 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

510 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

513 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

516 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

517 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

518 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

519 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

520 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

522 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_spi.h

30 #i‚de‡
__STM32F4xx_SPI_H


31 
	#__STM32F4xx_SPI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt16_t
 
SPI_Dúe˘i⁄
;

59 
uöt16_t
 
SPI_Mode
;

62 
uöt16_t
 
SPI_D©aSize
;

65 
uöt16_t
 
SPI_CPOL
;

68 
uöt16_t
 
SPI_CPHA
;

71 
uöt16_t
 
SPI_NSS
;

75 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

81 
uöt16_t
 
SPI_Fú°Bô
;

84 
uöt16_t
 
SPI_CRCPﬁynomül
;

85 }
	tSPI_InôTy≥Def
;

94 
uöt16_t
 
I2S_Mode
;

97 
uöt16_t
 
I2S_Sènd¨d
;

100 
uöt16_t
 
I2S_D©aF‹m©
;

103 
uöt16_t
 
I2S_MCLKOuçut
;

106 
uöt32_t
 
I2S_AudioFªq
;

109 
uöt16_t
 
I2S_CPOL
;

111 }
	tI2S_InôTy≥Def
;

119 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
Ë|| \

	)

120 ((
PERIPH
Ë=
SPI2
) || \

121 ((
PERIPH
Ë=
SPI3
) || \

122 ((
PERIPH
Ë=
SPI4
) || \

123 ((
PERIPH
Ë=
SPI5
) || \

124 ((
PERIPH
Ë=
SPI6
))

126 
	#IS_SPI_ALL_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI1
Ë|| \

	)

127 ((
PERIPH
Ë=
SPI2
) || \

128 ((
PERIPH
Ë=
SPI3
) || \

129 ((
PERIPH
Ë=
SPI4
) || \

130 ((
PERIPH
Ë=
SPI5
) || \

131 ((
PERIPH
Ë=
SPI6
) || \

132 ((
PERIPH
Ë=
I2S2ext
) || \

133 ((
PERIPH
Ë=
I2S3ext
))

135 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
Ë|| \

	)

136 ((
PERIPH
Ë=
SPI3
))

138 
	#IS_SPI_23_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI2
Ë|| \

	)

139 ((
PERIPH
Ë=
SPI3
) || \

140 ((
PERIPH
Ë=
I2S2ext
) || \

141 ((
PERIPH
Ë=
I2S3ext
))

143 
	#IS_I2S_EXT_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2S2ext
Ë|| \

	)

144 ((
PERIPH
Ë=
I2S3ext
))

151 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

152 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

153 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

154 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

155 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
Ë|| \

	)

156 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

157 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

158 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

167 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

168 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

169 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
Ë|| \

	)

170 ((
MODE
Ë=
SPI_Mode_Sœve
))

179 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

180 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

181 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
Ë|| \

	)

182 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

191 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

192 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

193 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
Ë|| \

	)

194 ((
CPOL
Ë=
SPI_CPOL_High
))

203 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

204 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

205 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
Ë|| \

	)

206 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

215 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

216 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

217 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
Ë|| \

	)

218 ((
NSS
Ë=
SPI_NSS_H¨d
))

227 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

228 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

229 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

230 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

231 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

232 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

233 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

234 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

235 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
Ë|| \

	)

236 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

237 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

238 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

239 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

240 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

241 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

242 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

251 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

252 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

253 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
Ë|| \

	)

254 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

263 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

264 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

265 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

266 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

267 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
Ë|| \

	)

268 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

269 ((
MODE
Ë=
I2S_Mode_Ma°îTx
)|| \

270 ((
MODE
Ë=
I2S_Mode_Ma°îRx
))

280 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

281 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

282 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

283 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

284 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

285 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
Ë|| \

	)

286 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

287 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

288 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

289 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

298 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

299 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

300 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

301 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

302 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
Ë|| \

	)

303 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

304 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

305 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

314 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

315 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

316 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
Ë|| \

	)

317 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

326 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

327 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

328 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

329 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

330 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

331 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

332 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

333 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

334 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

335 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

337 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
Ë&& \

	)

338 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

339 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

348 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

349 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

350 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
Ë|| \

	)

351 ((
CPOL
Ë=
I2S_CPOL_High
))

360 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

361 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

362 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

371 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

372 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

373 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
Ë|| \

	)

374 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

383 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

384 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

385 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

394 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

395 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

396 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
Ë|| \

	)

397 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

406 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

407 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

408 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

409 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

410 
	#SPI_I2S_IT_TIFRFE
 ((
uöt8_t
)0x58)

	)

412 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

413 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

414 ((
IT
Ë=
SPI_I2S_IT_ERR
))

416 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

417 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

418 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

420 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

422 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
)|| ((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

423 ((
IT
Ë=
SPI_IT_CRCERR
Ë|| ((ITË=
SPI_IT_MODF
) || \

424 ((
IT
Ë=
SPI_I2S_IT_OVR
Ë|| ((ITË=
I2S_IT_UDR
) ||\

425 ((
IT
Ë=
SPI_I2S_IT_TIFRFE
))

434 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

435 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

436 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

437 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

438 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

439 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

440 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

441 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

442 
	#SPI_I2S_FLAG_TIFRFE
 ((
uöt16_t
)0x0100)

	)

444 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

445 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
Ë|| \

	)

446 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

447 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

448 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
)|| \

449 ((
FLAG
Ë=
SPI_I2S_FLAG_TIFRFE
))

458 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

467 
	#SPI_DMAReq_Tx
 
SPI_I2S_DMAReq_Tx


	)

468 
	#SPI_DMAReq_Rx
 
SPI_I2S_DMAReq_Rx


	)

469 
	#SPI_IT_TXE
 
SPI_I2S_IT_TXE


	)

470 
	#SPI_IT_RXNE
 
SPI_I2S_IT_RXNE


	)

471 
	#SPI_IT_ERR
 
SPI_I2S_IT_ERR


	)

472 
	#SPI_IT_OVR
 
SPI_I2S_IT_OVR


	)

473 
	#SPI_FLAG_RXNE
 
SPI_I2S_FLAG_RXNE


	)

474 
	#SPI_FLAG_TXE
 
SPI_I2S_FLAG_TXE


	)

475 
	#SPI_FLAG_OVR
 
SPI_I2S_FLAG_OVR


	)

476 
	#SPI_FLAG_BSY
 
SPI_I2S_FLAG_BSY


	)

477 
	#SPI_DeInô
 
SPI_I2S_DeInô


	)

478 
	#SPI_ITC⁄fig
 
SPI_I2S_ITC⁄fig


	)

479 
	#SPI_DMACmd
 
SPI_I2S_DMACmd


	)

480 
	#SPI_SídD©a
 
SPI_I2S_SídD©a


	)

481 
	#SPI_Re˚iveD©a
 
SPI_I2S_Re˚iveD©a


	)

482 
	#SPI_GëFœgSètus
 
SPI_I2S_GëFœgSètus


	)

483 
	#SPI_CÀ¨Fœg
 
SPI_I2S_CÀ¨Fœg


	)

484 
	#SPI_GëITSètus
 
SPI_I2S_GëITSètus


	)

485 
	#SPI_CÀ¨ITPídögBô
 
SPI_I2S_CÀ¨ITPídögBô


	)

498 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

501 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

502 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

503 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

504 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

505 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

508 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

509 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

510 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

513 
I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

516 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

517 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

520 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

521 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

522 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

523 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

526 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

529 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

530 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

531 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

532 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

533 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

535 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_syscfg.h

30 #i‚de‡
__STM32F4xx_SYSCFG_H


31 
	#__STM32F4xx_SYSCFG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#EXTI_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

59 
	#EXTI_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

60 
	#EXTI_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

61 
	#EXTI_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

62 
	#EXTI_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

63 
	#EXTI_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

64 
	#EXTI_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

65 
	#EXTI_P‹tSour˚GPIOH
 ((
uöt8_t
)0x07)

	)

66 
	#EXTI_P‹tSour˚GPIOI
 ((
uöt8_t
)0x08)

	)

67 
	#EXTI_P‹tSour˚GPIOJ
 ((
uöt8_t
)0x09)

	)

68 
	#EXTI_P‹tSour˚GPIOK
 ((
uöt8_t
)0x0A)

	)

70 
	#IS_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
EXTI_P‹tSour˚GPIOA
Ë|| \

	)

71 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOB
) || \

72 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOC
) || \

73 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOD
) || \

74 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOE
) || \

75 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOF
) || \

76 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOG
) || \

77 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOH
) || \

78 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOI
) || \

79 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOJ
) || \

80 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOK
))

90 
	#EXTI_PöSour˚0
 ((
uöt8_t
)0x00)

	)

91 
	#EXTI_PöSour˚1
 ((
uöt8_t
)0x01)

	)

92 
	#EXTI_PöSour˚2
 ((
uöt8_t
)0x02)

	)

93 
	#EXTI_PöSour˚3
 ((
uöt8_t
)0x03)

	)

94 
	#EXTI_PöSour˚4
 ((
uöt8_t
)0x04)

	)

95 
	#EXTI_PöSour˚5
 ((
uöt8_t
)0x05)

	)

96 
	#EXTI_PöSour˚6
 ((
uöt8_t
)0x06)

	)

97 
	#EXTI_PöSour˚7
 ((
uöt8_t
)0x07)

	)

98 
	#EXTI_PöSour˚8
 ((
uöt8_t
)0x08)

	)

99 
	#EXTI_PöSour˚9
 ((
uöt8_t
)0x09)

	)

100 
	#EXTI_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

101 
	#EXTI_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

102 
	#EXTI_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

103 
	#EXTI_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

104 
	#EXTI_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

105 
	#EXTI_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

106 
	#IS_EXTI_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
EXTI_PöSour˚0
Ë|| \

	)

107 ((
PINSOURCE
Ë=
EXTI_PöSour˚1
) || \

108 ((
PINSOURCE
Ë=
EXTI_PöSour˚2
) || \

109 ((
PINSOURCE
Ë=
EXTI_PöSour˚3
) || \

110 ((
PINSOURCE
Ë=
EXTI_PöSour˚4
) || \

111 ((
PINSOURCE
Ë=
EXTI_PöSour˚5
) || \

112 ((
PINSOURCE
Ë=
EXTI_PöSour˚6
) || \

113 ((
PINSOURCE
Ë=
EXTI_PöSour˚7
) || \

114 ((
PINSOURCE
Ë=
EXTI_PöSour˚8
) || \

115 ((
PINSOURCE
Ë=
EXTI_PöSour˚9
) || \

116 ((
PINSOURCE
Ë=
EXTI_PöSour˚10
) || \

117 ((
PINSOURCE
Ë=
EXTI_PöSour˚11
) || \

118 ((
PINSOURCE
Ë=
EXTI_PöSour˚12
) || \

119 ((
PINSOURCE
Ë=
EXTI_PöSour˚13
) || \

120 ((
PINSOURCE
Ë=
EXTI_PöSour˚14
) || \

121 ((
PINSOURCE
Ë=
EXTI_PöSour˚15
))

130 
	#SYSCFG_Mem‹yRem≠_Fœsh
 ((
uöt8_t
)0x00)

	)

131 
	#SYSCFG_Mem‹yRem≠_Sy°emFœsh
 ((
uöt8_t
)0x01)

	)

132 
	#SYSCFG_Mem‹yRem≠_SRAM
 ((
uöt8_t
)0x03)

	)

133 
	#SYSCFG_Mem‹yRem≠_SDRAM
 ((
uöt8_t
)0x04)

	)

135 #i‡
deföed
 (
STM32F40_41xxx
)

136 
	#SYSCFG_Mem‹yRem≠_FSMC
 ((
uöt8_t
)0x02)

	)

139 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

140 
	#SYSCFG_Mem‹yRem≠_FMC
 ((
uöt8_t
)0x02)

	)

143 #i‡
deföed
 (
STM32F40_41xxx
)

144 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
Ë|| \

	)

145 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

146 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

147 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FSMC
))

150 #i‡
deföed
 (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

151 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
Ë|| \

	)

152 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

153 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
))

156 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

157 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
Ë|| \

	)

158 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

159 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

160 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SDRAM
) || \

161 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FMC
))

172 
	#SYSCFG_ETH_MedüI¡îÁ˚_MII
 ((
uöt32_t
)0x00000000)

	)

173 
	#SYSCFG_ETH_MedüI¡îÁ˚_RMII
 ((
uöt32_t
)0x00000001)

	)

175 
	#IS_SYSCFG_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
SYSCFG_ETH_MedüI¡îÁ˚_MII
Ë|| \

	)

176 ((
INTERFACE
Ë=
SYSCFG_ETH_MedüI¡îÁ˚_RMII
))

188 
SYSCFG_DeInô
();

189 
SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
);

190 
SYSCFG_Mem‹ySw≠pögB™k
(
Fun˘i⁄ÆSèã
 
NewSèã
);

191 
SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
);

192 
SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
);

193 
SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

194 
FœgSètus
 
SYSCFG_GëCom≥nßti⁄CñlSètus
();

196 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_tim.h

30 #i‚de‡
__STM32F4xx_TIM_H


31 
	#__STM32F4xx_TIM_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

57 
uöt16_t
 
TIM_PªsˇÀr
;

60 
uöt16_t
 
TIM_Cou¡îMode
;

63 
uöt32_t
 
TIM_Pîiod
;

67 
uöt16_t
 
TIM_ClockDivisi⁄
;

70 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

78 } 
	tTIM_TimeBa£InôTy≥Def
;

86 
uöt16_t
 
TIM_OCMode
;

89 
uöt16_t
 
TIM_OuçutSèã
;

92 
uöt16_t
 
TIM_OuçutNSèã
;

96 
uöt32_t
 
TIM_Pul£
;

99 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

102 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

106 
uöt16_t
 
TIM_OCIdÀSèã
;

110 
uöt16_t
 
TIM_OCNIdÀSèã
;

113 } 
	tTIM_OCInôTy≥Def
;

122 
uöt16_t
 
TIM_Ch™√l
;

125 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

128 
uöt16_t
 
TIM_ICSñe˘i⁄
;

131 
uöt16_t
 
TIM_ICPªsˇÀr
;

134 
uöt16_t
 
TIM_ICFûãr
;

136 } 
	tTIM_ICInôTy≥Def
;

146 
uöt16_t
 
TIM_OSSRSèã
;

149 
uöt16_t
 
TIM_OSSISèã
;

152 
uöt16_t
 
TIM_LOCKLevñ
;

155 
uöt16_t
 
TIM_DódTime
;

159 
uöt16_t
 
TIM_Bªak
;

162 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

165 
uöt16_t
 
TIM_Autom©icOuçut
;

167 } 
	tTIM_BDTRInôTy≥Def
;

175 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

176 ((
PERIPH
Ë=
TIM2
) || \

177 ((
PERIPH
Ë=
TIM3
) || \

178 ((
PERIPH
Ë=
TIM4
) || \

179 ((
PERIPH
Ë=
TIM5
) || \

180 ((
PERIPH
Ë=
TIM6
) || \

181 ((
PERIPH
Ë=
TIM7
) || \

182 ((
PERIPH
Ë=
TIM8
) || \

183 ((
PERIPH
Ë=
TIM9
) || \

184 ((
PERIPH
Ë=
TIM10
) || \

185 ((
PERIPH
Ë=
TIM11
) || \

186 ((
PERIPH
Ë=
TIM12
) || \

187 (((
PERIPH
Ë=
TIM13
) || \

188 ((
PERIPH
Ë=
TIM14
)))

190 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

191 ((
PERIPH
Ë=
TIM2
) || \

192 ((
PERIPH
Ë=
TIM3
) || \

193 ((
PERIPH
Ë=
TIM4
) || \

194 ((
PERIPH
Ë=
TIM5
) || \

195 ((
PERIPH
Ë=
TIM8
) || \

196 ((
PERIPH
Ë=
TIM9
) || \

197 ((
PERIPH
Ë=
TIM10
) || \

198 ((
PERIPH
Ë=
TIM11
) || \

199 ((
PERIPH
Ë=
TIM12
) || \

200 ((
PERIPH
Ë=
TIM13
) || \

201 ((
PERIPH
Ë=
TIM14
))

204 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

205 ((
PERIPH
Ë=
TIM2
) || \

206 ((
PERIPH
Ë=
TIM3
) || \

207 ((
PERIPH
Ë=
TIM4
) || \

208 ((
PERIPH
Ë=
TIM5
) || \

209 ((
PERIPH
Ë=
TIM8
) || \

210 ((
PERIPH
Ë=
TIM9
) || \

211 ((
PERIPH
Ë=
TIM12
))

213 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

214 ((
PERIPH
Ë=
TIM2
) || \

215 ((
PERIPH
Ë=
TIM3
) || \

216 ((
PERIPH
Ë=
TIM4
) || \

217 ((
PERIPH
Ë=
TIM5
) || \

218 ((
PERIPH
Ë=
TIM8
))

220 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

221 ((
PERIPH
Ë=
TIM8
))

223 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

224 ((
PERIPH
Ë=
TIM2
) || \

225 ((
PERIPH
Ë=
TIM3
) || \

226 ((
PERIPH
Ë=
TIM4
) || \

227 ((
PERIPH
Ë=
TIM5
) || \

228 ((
PERIPH
Ë=
TIM6
) || \

229 ((
PERIPH
Ë=
TIM7
) || \

230 ((
PERIPH
Ë=
TIM8
))

232 
	#IS_TIM_LIST6_PERIPH
(
TIMx
)(((TIMxË=
TIM2
Ë|| \

	)

233 ((
TIMx
Ë=
TIM5
) || \

234 ((
TIMx
Ë=
TIM11
))

240 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

241 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

242 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

243 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

244 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

245 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

246 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

247 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

248 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

249 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

250 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

251 ((
MODE
Ë=
TIM_OCMode_PWM2
))

252 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

253 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

254 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

255 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

256 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

257 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

258 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

259 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

268 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

269 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

270 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
Ë|| \

	)

271 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

280 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

281 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

282 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

283 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

285 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

286 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

287 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

288 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

290 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

291 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

292 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

293 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

294 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

303 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

304 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

305 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

306 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
Ë|| \

	)

307 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

308 ((
DIV
Ë=
TIM_CKD_DIV4
))

317 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

318 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

319 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

320 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

321 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

322 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
Ë|| \

	)

323 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

324 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

325 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

326 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

335 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

336 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

337 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
Ë|| \

	)

338 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

347 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

348 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

349 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
Ë|| \

	)

350 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

359 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

360 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

361 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
Ë|| \

	)

362 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

371 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

372 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

373 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
Ë|| \

	)

374 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

383 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

384 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

385 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
Ë|| \

	)

386 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

395 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

396 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

397 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
Ë|| \

	)

398 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

407 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

408 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

409 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
Ë|| \

	)

410 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

419 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

420 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

421 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
Ë|| \

	)

422 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

431 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

432 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

433 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
Ë|| \

	)

434 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

443 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

444 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

445 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

446 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

447 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
Ë|| \

	)

448 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

449 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

450 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

459 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

460 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

461 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
Ë|| \

	)

462 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

471 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

472 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

473 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
Ë|| \

	)

474 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

483 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

484 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

485 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
Ë|| \

	)

486 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

495 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

496 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

497 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
Ë|| \

	)

498 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

507 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

508 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

509 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

510 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

511 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

512 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

521 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

523 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

525 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

526 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
Ë|| \

	)

527 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

528 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

537 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

538 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

539 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

540 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

541 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
Ë|| \

	)

542 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

543 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

544 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

553 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

554 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

555 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

556 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

557 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

558 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

559 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

560 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

561 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

563 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
Ë|| \

	)

564 ((
IT
Ë=
TIM_IT_CC1
) || \

565 ((
IT
Ë=
TIM_IT_CC2
) || \

566 ((
IT
Ë=
TIM_IT_CC3
) || \

567 ((
IT
Ë=
TIM_IT_CC4
) || \

568 ((
IT
Ë=
TIM_IT_COM
) || \

569 ((
IT
Ë=
TIM_IT_Triggî
) || \

570 ((
IT
Ë=
TIM_IT_Bªak
))

579 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

580 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

581 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

582 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

583 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

584 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

585 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

586 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

587 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

588 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

589 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

590 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

591 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

592 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

593 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

594 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

595 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

596 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

597 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

598 
	#TIM_DMABa£_OR
 ((
uöt16_t
)0x0013)

	)

599 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
Ë|| \

	)

600 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

601 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

602 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

603 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

604 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

605 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

606 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

607 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

608 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

609 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

610 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

611 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

612 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

613 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

614 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

615 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

616 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

617 ((
BASE
Ë=
TIM_DMABa£_DCR
) || \

618 ((
BASE
Ë=
TIM_DMABa£_OR
))

627 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

628 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

629 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

630 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

631 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

632 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

633 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

634 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

635 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

636 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

637 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

638 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

639 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

640 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

641 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

642 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

643 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

644 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

645 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
Ë|| \

	)

646 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

647 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

648 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

649 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

650 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

651 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

652 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

653 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

654 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

655 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

656 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

657 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

658 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

659 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

660 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

661 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

662 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

671 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

672 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

673 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

674 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

675 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

676 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

677 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

678 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

688 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

689 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

690 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

691 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

692 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
Ë|| \

	)

693 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

694 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

695 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

704 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

705 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

706 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

707 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

708 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

709 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

710 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

711 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

712 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

713 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

714 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

715 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

716 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

717 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

718 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

719 ((
SELECTION
Ë=
TIM_TS_ETRF
))

720 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

721 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

722 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

723 ((
SELECTION
Ë=
TIM_TS_ITR3
))

732 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

733 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

734 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

743 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

744 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

745 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
Ë|| \

	)

746 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

755 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

756 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

757 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
Ë|| \

	)

758 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

767 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

768 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

769 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
Ë|| \

	)

770 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

779 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

780 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

781 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

782 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
Ë|| \

	)

783 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

784 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

794 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

795 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

796 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

797 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

798 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

799 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

800 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

801 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

802 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

812 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

815 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

816 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
Ë|| \

	)

817 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

826 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

827 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

828 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
Ë|| \

	)

829 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

838 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

839 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

840 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
Ë|| \

	)

841 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

851 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

852 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

853 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
Ë|| \

	)

854 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

863 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

864 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

865 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

866 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

867 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

868 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

869 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

870 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

871 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
Ë|| \

	)

872 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

873 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

874 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

875 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

876 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

877 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

878 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

887 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

888 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

889 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

890 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

891 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
Ë|| \

	)

892 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

893 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

894 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

903 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

904 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

905 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
Ë|| \

	)

906 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

914 
	#TIM2_TIM8_TRGO
 ((
uöt16_t
)0x0000)

	)

915 
	#TIM2_ETH_PTP
 ((
uöt16_t
)0x0400)

	)

916 
	#TIM2_USBFS_SOF
 ((
uöt16_t
)0x0800)

	)

917 
	#TIM2_USBHS_SOF
 ((
uöt16_t
)0x0C00)

	)

919 
	#TIM5_GPIO
 ((
uöt16_t
)0x0000)

	)

920 
	#TIM5_LSI
 ((
uöt16_t
)0x0040)

	)

921 
	#TIM5_LSE
 ((
uöt16_t
)0x0080)

	)

922 
	#TIM5_RTC
 ((
uöt16_t
)0x00C0)

	)

924 
	#TIM11_GPIO
 ((
uöt16_t
)0x0000)

	)

925 
	#TIM11_HSE
 ((
uöt16_t
)0x0002)

	)

927 
	#IS_TIM_REMAP
(
TIM_REMAP
Ë(((TIM_REMAPË=
TIM2_TIM8_TRGO
)||\

	)

928 ((
TIM_REMAP
Ë=
TIM2_ETH_PTP
)||\

929 ((
TIM_REMAP
Ë=
TIM2_USBFS_SOF
)||\

930 ((
TIM_REMAP
Ë=
TIM2_USBHS_SOF
)||\

931 ((
TIM_REMAP
Ë=
TIM5_GPIO
)||\

932 ((
TIM_REMAP
Ë=
TIM5_LSI
)||\

933 ((
TIM_REMAP
Ë=
TIM5_LSE
)||\

934 ((
TIM_REMAP
Ë=
TIM5_RTC
)||\

935 ((
TIM_REMAP
Ë=
TIM11_GPIO
)||\

936 ((
TIM_REMAP
Ë=
TIM11_HSE
))

945 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

946 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

947 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

948 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

949 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

950 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

951 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

952 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

953 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

954 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

955 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

956 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

957 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
Ë|| \

	)

958 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

959 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

960 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

961 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

962 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

963 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

964 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

965 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

966 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

967 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

968 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

978 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

987 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

996 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

997 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

998 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

999 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

1000 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

1001 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

1002 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

1003 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

1004 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

1005 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1006 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1007 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1008 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1009 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1010 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1011 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1012 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1013 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1026 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1027 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1028 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1029 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1030 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1031 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
);

1032 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
);

1033 
uöt32_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1034 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1035 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1036 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1037 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1038 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1039 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1040 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1043 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1044 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1045 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1046 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1047 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1048 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1049 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
);

1050 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
);

1051 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
);

1052 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
);

1053 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1054 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1055 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1056 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1057 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1058 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1059 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1060 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1061 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1062 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1063 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1064 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1065 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1066 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1067 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1068 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1069 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1070 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1071 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1072 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1073 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1074 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1075 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1076 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1077 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1080 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1081 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1082 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1083 
uöt32_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1084 
uöt32_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1085 
uöt32_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1086 
uöt32_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1087 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1088 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1089 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1090 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1093 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1094 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1095 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1096 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1097 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1100 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1101 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1102 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1103 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1104 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1105 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1106 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1107 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1108 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1111 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1112 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1113 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1114 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1115 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1116 
uöt16_t
 
ExtTRGFûãr
);

1117 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1118 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1121 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1122 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1123 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1124 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1125 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1126 
uöt16_t
 
ExtTRGFûãr
);

1129 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1130 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1131 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1134 
TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
);

1136 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_usart.h

30 #i‚de‡
__STM32F4xx_USART_H


31 
	#__STM32F4xx_USART_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
USART_BaudR©e
;

62 
uöt16_t
 
USART_W‹dLígth
;

65 
uöt16_t
 
USART_St›Bôs
;

68 
uöt16_t
 
USART_P¨ôy
;

75 
uöt16_t
 
USART_Mode
;

78 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

81 } 
	tUSART_InôTy≥Def
;

90 
uöt16_t
 
USART_Clock
;

93 
uöt16_t
 
USART_CPOL
;

96 
uöt16_t
 
USART_CPHA
;

99 
uöt16_t
 
USART_La°Bô
;

102 } 
	tUSART_ClockInôTy≥Def
;

110 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

111 ((
PERIPH
Ë=
USART2
) || \

112 ((
PERIPH
Ë=
USART3
) || \

113 ((
PERIPH
Ë=
UART4
) || \

114 ((
PERIPH
Ë=
UART5
) || \

115 ((
PERIPH
Ë=
USART6
) || \

116 ((
PERIPH
Ë=
UART7
) || \

117 ((
PERIPH
Ë=
UART8
))

119 
	#IS_USART_1236_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

120 ((
PERIPH
Ë=
USART2
) || \

121 ((
PERIPH
Ë=
USART3
) || \

122 ((
PERIPH
Ë=
USART6
))

128 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

129 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

131 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
Ë|| \

	)

132 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

141 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

142 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

143 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

144 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

145 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
Ë|| \

	)

146 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

147 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

148 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

157 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

158 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

159 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

160 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
Ë|| \

	)

161 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

162 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

171 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

172 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

173 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

181 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

182 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

183 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

184 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

185 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

	)

186 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

187 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

188 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

189 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

197 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

198 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

199 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
Ë|| \

	)

200 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

209 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

210 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

211 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

221 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

222 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

223 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

233 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

234 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

235 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
Ë|| \

	)

236 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

245 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

246 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

247 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

248 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

249 
	#USART_IT_ORE_RX
 ((
uöt16_t
)0x0325Ë

	)

250 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

251 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

252 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

253 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

254 
	#USART_IT_ORE_ER
 ((
uöt16_t
)0x0360Ë

	)

255 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

256 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

261 
	#USART_IT_ORE
 
USART_IT_ORE_ER


	)

266 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

267 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

268 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

269 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

270 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

271 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

272 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

273 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

274 ((
IT
Ë=
USART_IT_ORE_RX
Ë|| ((ITË=
USART_IT_ORE_ER
) || \

275 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

276 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
Ë|| \

	)

277 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

286 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

287 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

288 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

298 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

299 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

300 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
Ë|| \

	)

301 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

310 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

311 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

312 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë\

	)

313 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

314 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

323 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

324 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

325 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
Ë|| \

	)

326 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

335 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

336 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

337 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

338 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

339 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

340 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

341 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

342 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

343 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

344 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

345 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
Ë|| \

	)

346 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

347 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

348 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

349 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

351 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

353 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 7500001))

	)

354 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

355 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

369 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

372 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

373 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

374 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

375 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

376 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

377 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

378 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

379 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

382 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

383 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

386 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

387 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

388 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

391 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

392 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

393 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

396 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

399 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

400 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

401 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

404 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

405 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

408 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

411 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

413 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

414 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

415 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

417 #ifde‡
__˝lu•lus


	@spl/stm32f4xx_wwdg.h

30 #i‚de‡
__STM32F4xx_WWDG_H


31 
	#__STM32F4xx_WWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

59 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

60 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

61 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

62 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

63 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
Ë|| \

	)

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

65 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

66 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

67 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

68 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

82 
WWDG_DeInô
();

85 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

86 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

87 
WWDG_E«bÀIT
();

88 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

91 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

94 
FœgSètus
 
WWDG_GëFœgSètus
();

95 
WWDG_CÀ¨Fœg
();

97 #ifde‡
__˝lu•lus


	@spl/system_stm32f4xx.h

39 #i‚de‡
__SYSTEM_STM32F4XX_H


40 
	#__SYSTEM_STM32F4XX_H


	)

42 #ifde‡
__˝lu•lus


59 
uöt32_t
 
Sy°emC‹eClock
;

86 
Sy°emInô
();

87 
Sy°emC‹eClockUpd©e
();

92 #ifde‡
__˝lu•lus


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


256 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

258 #ifde‡
__USE_ISOC99


259 
__loˇl_signgam
 = 0;

260  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

262  
	`lgamma_r
 (
__d
, &
signgam
);

264 
	}
}

265 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

267 #ifde‡
__USE_ISOC99


268 
__loˇl_signgam
 = 0;

269  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

271  
	`lgammaf_r
 (
__d
, &
signgam
);

273 
	}
}

274 #ifde‡
__MATH_DECLARE_LDOUBLE


275 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

277 #ifde‡
__USE_ISOC99


278 
__loˇl_signgam
 = 0;

279  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

281  
	`lgammÆ_r
 (
__d
, &
signgam
);

283 
	}
}

287 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


289 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

291 #ifde‡
__USE_ISOC99


292 
__loˇl_signgam
 = 0;

293  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

295  
	`lgamma_r
 (
__d
, &
signgam
);

297 
	}
}

298 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

300 #ifde‡
__USE_ISOC99


301 
__loˇl_signgam
 = 0;

302  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

304  
	`lgammaf_r
 (
__d
, &
signgam
);

306 
	}
}

307 #ifde‡
__MATH_DECLARE_LDOUBLE


308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

310 #ifde‡
__USE_ISOC99


311 
__loˇl_signgam
 = 0;

312  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

314  
	`lgammÆ_r
 (
__d
, &
signgam
);

316 
	}
}

321 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

322 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

323 #ifde‡
__MATH_DECLARE_LDOUBLE


324 #ifde‡
__NO_LONG_DOUBLE_MATH


325 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

327 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

332 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

333 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

334 #ifde‡
__MATH_DECLARE_LDOUBLE


335 #ifde‡
__NO_LONG_DOUBLE_MATH


336 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

342 #ifde‡
__USE_ISOC99


344 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

345 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

346 #ifde‡
__MATH_DECLARE_LDOUBLE


347 #ifde‡
__NO_LONG_DOUBLE_MATH


348 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

356 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

357 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

358 #ifde‡
__MATH_DECLARE_LDOUBLE


359 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

363 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

364 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

365 #ifde‡
__MATH_DECLARE_LDOUBLE


366 #ifde‡
__NO_LONG_DOUBLE_MATH


367 
__REDIRECT_NTH
 (
powl
, (, ),

368 
__pow_föôe
);

370 
__REDIRECT_NTH
 (
powl
, (, ),

371 
__powl_föôe
);

376 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

377 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

378 #ifde‡
__MATH_DECLARE_LDOUBLE


379 #ifde‡
__NO_LONG_DOUBLE_MATH


380 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

381 
__ªmaödî_föôe
);

383 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

384 
__ªmaödîl_föôe
);

388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


390 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

391 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

395 
__sˇlb_föôe
);

397 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

398 
__sˇlbl_föôe
);

404 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

405 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

406 #ifde‡
__MATH_DECLARE_LDOUBLE


407 #ifde‡
__NO_LONG_DOUBLE_MATH


408 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

410 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

415 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

416 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

417 #ifde‡
__MATH_DECLARE_LDOUBLE


418 #ifde‡
__NO_LONG_DOUBLE_MATH


419 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

425 #ifde‡
__USE_ISOC99


427 
__gamma_r_föôe
 (, *);

428 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

430 
__loˇl_signgam
 = 0;

431 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

432  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

433 
	}
}

434 
__gammaf_r_föôe
 (, *);

435 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

437 
__loˇl_signgam
 = 0;

438 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

439  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

440 
	}
}

441 #ifde‡
__MATH_DECLARE_LDOUBLE


442 
__gammÆ_r_föôe
 (, *);

443 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

445 
__loˇl_signgam
 = 0;

446 #ifde‡
__NO_LONG_DOUBLE_MATH


447 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

449 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

451  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

452 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


201 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

204 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

207 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

211 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


215 
__BEGIN_NAMESPACE_C99


217 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

218 
	g__END_NAMESPACE_C99


221 #ifde‡
__USE_ISOC99


222 
__BEGIN_NAMESPACE_C99


224 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

225 
	g__END_NAMESPACE_C99


230 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

237 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

238 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

240 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

241 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

246 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


247 
__BEGIN_NAMESPACE_C99


249 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

250 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

252 
	g__END_NAMESPACE_C99


255 #ifde‡
__USE_ISOC99


256 
__BEGIN_NAMESPACE_C99


258 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

259 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


264 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

267 #ifde‡
__USE_MISC


271 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


276 
__BEGIN_NAMESPACE_C99


279 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

282 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

283 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


284 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

288 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

290 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


292 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

296 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

299 #ifde‡
__USE_ISOC99


301 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

305 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

309 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

313 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

318 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

325 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

326 
__exãnsi⁄__


327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__exãnsi⁄__


333 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

337 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

340 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

343 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

347 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

348 
__©åibuã__
 ((
__c⁄°__
));

351 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

352 
__©åibuã__
 ((
__c⁄°__
));

356 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

359 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


360 
	g__END_NAMESPACE_C99


363 #ifde‡
__USE_GNU


365 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

366 
__©åibuã__
 ((
__c⁄°__
));

369 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


371 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #i‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #i‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #i‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


387 #i‚de‡
__SSE2_MATH__


388 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

389 && 
deföed
 
	g__OPTIMIZE__
)

393 #unde‡
m©h_îrh™dlög


402 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


403 
	#__ölöe_m©h›
(
func
, 
›
) \

404 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

405 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

406 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

407 
	#__ölöe_m©h›NP
(
func
, 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

409 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

410 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

412 
	#__ölöe_m©h›
(
func
, 
›
) \

413 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

414 
	#__ölöe_m©h›NP
(
func
, 
›
) \

415 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

418 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

420 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

421 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

424 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


425 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

426 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

427 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

428 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

429 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

432 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

436 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

437 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

440 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

441 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

442 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

444 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

445 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

447 
Êﬂt_ty≥
 
__ªsu…
; \

448 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

449  
__ªsu…
; \

450 }

	)

453 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


454 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

456 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

457 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

458 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

460 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

461 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

462 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

464 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

466 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

469 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

470 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

472 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

474 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

477 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

479 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

482 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

483 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

486 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

487 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

489 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

490 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

493 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

494 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

495 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

497 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

498 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

500 
code
; \

501 }

	)

504 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

505 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

506 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

508 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

509 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

511 
code
; \

512 }

	)

514 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

515 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

516 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

518 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

519 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

520 
Êﬂt_ty≥
 
¨g3
)) \

522 
code
; \

523 }

	)

527 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


531 #ifde‡
__FAST_MATH__


532 #ifde‡
__USE_GNU


533 
	#__söcos_code
 \

534 
__co§
; \

535 
__sör
; \

536 
__swtmp
; \

537 
__asm
 
__vﬁ©ûe__
 \

552 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

553 *
__söx
 = 
__sör
; \

554 *
__cosx
 = 
__co§


	)

556 
__MATH_INLINE
 

557 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

559 
__söcos_code
;

560 
	}
}

562 
__MATH_INLINE
 

563 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

565 
__söcos_code
;

566 
	}
}

568 
__MATH_INLINE
 

569 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

571 
__söcos_code
;

572 
	}
}

579 #i‡
__GNUC_PREREQ
 (3, 5)

580 
	#__expm1_code
 \

581 
__ãmp
; \

582 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

583  
__ãmp
 ? __ãm∞: 
__x


	)

585 
	#__expm1_code
 \

586 
__vÆue
; \

587 
__exp⁄ít
; \

588 
__ãmp
; \

589 
__asm
 
__vﬁ©ûe__
 \

598 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

599 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

602 
__ãmp
 -= 1.0; \

603 
__ãmp
 +
__vÆue
; \

604  
__ãmp
 ? __ãm∞: 
__x


	)

606 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

608 #i‡
	`__GNUC_PREREQ
 (3, 4)

609 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

611 
	#__exp_code
 \

612 
__vÆue
; \

613 
__exp⁄ít
; \

614 
__asm
 
__vﬁ©ûe__
 \

622 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

623 
__vÆue
 += 1.0; \

624 
__asm
 
__vﬁ©ûe__
 \

626 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

627  
__vÆue


	)

628 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

629 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

633 #i‡!
	`__GNUC_PREREQ
 (3, 5)

634 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

635 
__vÆue
; \

636 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

637 
__asm
 
__vﬁ©ûe__
 \

639 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

640  
__vÆue
)

645 #i‡
	`__GNUC_PREREQ
 (3, 4)

646 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

647  
	$__buûtö_©™2l
 (
__y
, 
__x
))

649 
	#__©™2_code
 \

650 
__vÆue
; \

651 
__asm
 
__vﬁ©ûe__
 \

653 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

654  
__vÆue


	)

655 #ifde‡
__FAST_MATH__


656 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

658 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

662 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

663 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

664 
__vÆue
; \

665 
__asm
 
__vﬁ©ûe__
 \

670 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

671  
__vÆue
)

675 #ifde‡
__FAST_MATH__


676 #i‡!
	`__GNUC_PREREQ
 (3,3)

677 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

678 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

679 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

681 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

685 #i‡
	`__GNUC_PREREQ
 (2, 8)

686 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

687 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


688 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

693 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

694 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

697 #ifde‡
__FAST_MATH__


698 #i‡!
	`__GNUC_PREREQ
 (3, 4)

700 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

702 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

704 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

707 #i‡!
	`__GNUC_PREREQ
 (3, 5)

708 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

711 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

714 #i‡!
	`__GNUC_PREREQ
 (3, 4)

715 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

719 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

720 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

721 { 
__xld
: 
__x
 
	}
}; \

722 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

723 
	g__n
.
	g__xi
[1] = 0x80000000; \

724 
	g__n
.
	g__xi
[0] = 0; \

725  
	g__n
.
	g__xld
)

728 #ifde‡
__FAST_MATH__


730 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

731 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

732  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

734 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

735 
__ex
 = 
	`__ex∂
 (
__x
); \

736  0.5 * (
__ex
 + 1.0 / __ex))

738 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

739 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

740  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

743 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

744 
__vÆue
; \

745 
__ign‹e
; \

746 
__cw
; \

747 
__cwtmp
; \

748 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

756 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

757 "=m" (
__cw
) \

758 : "0" (
__x
)); \

759  
__vÆue
)

761 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

762 
__vÆue
; \

763 
__ign‹e
; \

764 
__cw
; \

765 
__cwtmp
; \

766 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

774 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

775 "=m" (
__cw
) \

776 : "0" (
__x
)); \

777  
__vÆue
)

779 #ifde‡
__FAST_MATH__


780 
	#__ldexp_code
 \

781 
__vÆue
; \

782 
__asm
 
__vﬁ©ûe__
 \

784 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

785  
__vÆue


	)

787 
__MATH_INLINE
 

788 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

790 
__ldexp_code
;

791 
	}
}

796 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


798 #ifde‡
__FAST_MATH__


799 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

803 
	#__M_SQRT2
 1.41421356237309504880L

	)

805 #i‡!
	`__GNUC_PREREQ
 (3, 5)

806 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

807 
__vÆue
; \

808 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

809 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

811 
__asm
 
__vﬁ©ûe__
 \

815 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

816  
__vÆue
)

821 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

822 
__y
 = 
	`__Áb¶
 (
__x
); \

823  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

824 * 
	$__sgn1l
 (
__x
)))

826 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

827  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

829 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

830 
__y
 = 
	`__Áb¶
 (
__x
); \

831  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

834 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

835  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

837 #i‡!
	`__GNUC_PREREQ
 (3, 5)

838 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

839 
__vÆue
; \

840 
__junk
; \

841 
__asm
 
__vﬁ©ûe__
 \

843 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

844  
__vÆue
)

850 #ifde‡
__USE_ISOC99


851 #ifde‡
__FAST_MATH__


853 #i‡!
	`__GNUC_PREREQ
 (3, 5)

854 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

857 
__MATH_INLINE
 

858 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

860 
__ldexp_code
;

861 
	}
}

863 
__MATH_INLINE
 

864 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

866 
__ldexp_code
;

867 
	}
}

869 
__ölöe_m©h›NP
 (
röt
, "frndint")

872 
	#__Ãöt_code
 \

873 
__Ãöåes
; \

874 
__asm__
 
__vﬁ©ûe__
 \

876 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

877  
__Ãöåes


	)

878 
__MATH_INLINE
 

879 
__NTH
 (
	$Ãötf
 (
__x
))

881 
__Ãöt_code
;

882 
	}
}

883 
__MATH_INLINE
 

884 
__NTH
 (
	$Ãöt
 (
__x
))

886 
__Ãöt_code
;

887 
	}
}

888 
__MATH_INLINE
 

889 
__NTH
 (
	$Ãöé
 (
__x
))

891 
__Ãöt_code
;

892 
	}
}

893 #unde‡
__Ãöt_code


895 
	#__Œröt_code
 \

896 
__Œröåes
; \

897 
__asm__
 
__vﬁ©ûe__
 \

899 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

900  
__Œröåes


	)

901 
__exãnsi⁄__


902 
__MATH_INLINE
 

903 
__NTH
 (
	$Œrötf
 (
__x
))

905 
__Œröt_code
;

906 
	}
}

907 
__exãnsi⁄__


908 
__MATH_INLINE
 

909 
__NTH
 (
	$Œröt
 (
__x
))

911 
__Œröt_code
;

912 
	}
}

913 
__exãnsi⁄__


914 
__MATH_INLINE
 

915 
__NTH
 (
	$Œröé
 (
__x
))

917 
__Œröt_code
;

918 
	}
}

919 #unde‡
__Œröt_code


924 #ifde‡
__USE_MISC


926 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

927 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

928 
__vÆue
; \

929 
__˛obbîed
; \

930 
__asm
 
__vﬁ©ûe__
 \

935 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

936  
__vÆue
)

941 
__MATH_INLINE
 

942 
__NTH
 (
	$__föôe
 (
__x
))

944  (
__exãnsi⁄__


945 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

947 
	}
}

952 #unde‡
__©™2_code


953 #ifde‡
__FAST_MATH__


954 #unde‡
__expm1_code


955 #unde‡
__exp_code


956 #unde‡
__söcos_code


963 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


964 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

965 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

966 
__vÆue
;

967 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

968 : "Ò" (
__vÆue
)

969 : "0" (
__x
), "u" (
__y
) : "st(1)");

970  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@
1
.
1
/usr/include
98
2341
cmsis/arm_common_tables.h
cmsis/arm_const_structs.h
cmsis/arm_math.h
cmsis/core_cm0.h
cmsis/core_cm0plus.h
cmsis/core_cm3.h
cmsis/core_cm4.h
cmsis/core_cm4_simd.h
cmsis/core_cmFunc.h
cmsis/core_cmInstr.h
cmsis/core_sc000.h
cmsis/core_sc300.h
cmsis/stm32f429xx.h
cmsis/stm32f4xx.h
cmsis/system_stm32f4xx.h
spl/misc.h
spl/stm32f4xx.h
spl/stm32f4xx_adc.h
spl/stm32f4xx_can.h
spl/stm32f4xx_conf.h
spl/stm32f4xx_crc.h
spl/stm32f4xx_cryp.h
spl/stm32f4xx_dac.h
spl/stm32f4xx_dbgmcu.h
spl/stm32f4xx_dcmi.h
spl/stm32f4xx_dma.h
spl/stm32f4xx_dma2d.h
spl/stm32f4xx_exti.h
spl/stm32f4xx_flash.h
spl/stm32f4xx_flash_ramfunc.h
spl/stm32f4xx_fmc.h
spl/stm32f4xx_fsmc.h
spl/stm32f4xx_gpio.h
spl/stm32f4xx_hash.h
spl/stm32f4xx_i2c.h
spl/stm32f4xx_iwdg.h
spl/stm32f4xx_ltdc.h
spl/stm32f4xx_pwr.h
spl/stm32f4xx_rcc.h
spl/stm32f4xx_rng.h
spl/stm32f4xx_rtc.h
spl/stm32f4xx_sai.h
spl/stm32f4xx_sdio.h
spl/stm32f4xx_spi.h
spl/stm32f4xx_syscfg.h
spl/stm32f4xx_tim.h
spl/stm32f4xx_usart.h
spl/stm32f4xx_wwdg.h
spl/system_stm32f4xx.h
/usr/include/math.h
/usr/include/stdint.h
/usr/include/string.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/xlocale.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/stdlib.h
/usr/include/sys/cdefs.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/typesizes.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/sys/types.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/pthreadtypes.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/bits/timex.h
